static const uint8_t sc_radianceSource[17634] =
{
	0x2f, 0x2a, 0x0a, 0x20, 0x2a, 0x20, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, // /*. * Copyright
	0x32, 0x30, 0x31, 0x34, 0x2d, 0x32, 0x30, 0x31, 0x35, 0x20, 0x44, 0x61, 0x72, 0x69, 0x6f, 0x20, // 2014-2015 Dario
	0x4d, 0x61, 0x6e, 0x65, 0x73, 0x6b, 0x75, 0x2e, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x72, 0x69, 0x67, // Manesku. All rig
	0x68, 0x74, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x2a, // hts reserved.. *
	0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, //  License: http:/
	0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, // /www.opensource.
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x42, 0x53, 0x44, // org/licenses/BSD
	0x2d, 0x32, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x0a, 0x20, 0x2a, 0x2f, 0x0a, 0x0a, 0x74, // -2-Clause. */..t
	0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x20, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, // ypedef unsigned
	0x63, 0x68, 0x61, 0x72, 0x20, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x3b, 0x0a, 0x74, // char  uint8_t;.t
	0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x20, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, // ypedef unsigned
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x5f, 0x74, 0x3b, 0x0a, // short uint16_t;.
	0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x20, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, // typedef unsigned
	0x20, 0x69, 0x6e, 0x74, 0x20, 0x20, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x3b, //  int   uint32_t;
	0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x20, 0x63, 0x68, 0x61, 0x72, 0x20, 0x20, // ..typedef char
	0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x3b, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x20, // int8_t;.typedef
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x5f, 0x74, 0x3b, 0x0a, 0x74, // short int16_t;.t
	0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x20, 0x20, 0x69, 0x6e, 0x74, // ypedef int   int
	0x33, 0x32, 0x5f, 0x74, 0x3b, 0x0a, 0x0a, 0x5f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, // 32_t;..__constan
	0x74, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x20, 0x73, 0x5f, 0x73, 0x61, // t sampler_t s_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x3d, 0x20, 0x43, 0x4c, 0x4b, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, // mpler = CLK_NORM
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x53, 0x5f, 0x46, 0x41, // ALIZED_COORDS_FA
	0x4c, 0x53, 0x45, 0x20, 0x7c, 0x20, 0x43, 0x4c, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, // LSE | CLK_ADDRES
	0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x20, 0x7c, 0x20, 0x43, 0x4c, 0x4b, 0x5f, 0x46, 0x49, 0x4c, // S_NONE | CLK_FIL
	0x54, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x45, 0x53, 0x54, 0x3b, 0x0a, 0x0a, 0x5f, 0x5f, // TER_NEAREST;..__
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // constant float4
	0x73, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x55, 0x76, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5b, // s_faceUvVectors[
	0x36, 0x5d, 0x5b, 0x33, 0x5d, 0x20, 0x3d, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, // 6][3] =.{.    {
	0x2f, 0x2f, 0x20, 0x2b, 0x78, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // // +x face.
	0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, //    {  0.0f,  0.0
	0x66, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, // f, -1.0f, 0.0f }
	0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x20, 0x2d, 0x3e, 0x20, 0x2d, 0x7a, 0x0a, 0x20, 0x20, 0x20, // , // u -> -z.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x2d, 0x31, //      {  0.0f, -1
	0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, // .0f,  0.0f, 0.0f
	0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x76, 0x20, 0x2d, 0x3e, 0x20, 0x2d, 0x79, 0x0a, 0x20, //  }, // v -> -y.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, //        {  1.0f,
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, //  0.0f,  0.0f, 0.
	0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x2b, 0x78, 0x20, 0x66, 0x61, 0x63, 0x65, // 0f }, // +x face
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, // .    },.    { //
	0x20, 0x2d, 0x78, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  -x face.
	0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, //  {  0.0f,  0.0f,
	0x20, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, //   1.0f, 0.0f },
	0x2f, 0x2f, 0x20, 0x75, 0x20, 0x2d, 0x3e, 0x20, 0x2b, 0x7a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // // u -> +z.
	0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x30, //    {  0.0f, -1.0
	0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, // f,  0.0f, 0.0f }
	0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x76, 0x20, 0x2d, 0x3e, 0x20, 0x2d, 0x79, 0x0a, 0x20, 0x20, 0x20, // , // v -> -y.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, //      { -1.0f,  0
	0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, // .0f,  0.0f, 0.0f
	0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x2d, 0x78, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0a, 0x20, //  }, // -x face.
	0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, 0x2b, //    },.    { // +
	0x79, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, // y face.        {
	0x20, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, //   1.0f,  0.0f,
	0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, // 0.0f, 0.0f }, //
	0x20, 0x75, 0x20, 0x2d, 0x3e, 0x20, 0x2b, 0x78, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  u -> +x.
	0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, //  {  0.0f,  0.0f,
	0x20, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, //   1.0f, 0.0f },
	0x2f, 0x2f, 0x20, 0x76, 0x20, 0x2d, 0x3e, 0x20, 0x2b, 0x7a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // // v -> +z.
	0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x31, 0x2e, 0x30, //    {  0.0f,  1.0
	0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, // f,  0.0f, 0.0f }
	0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x2b, 0x79, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0a, 0x20, 0x20, 0x20, // , // +y face.
	0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, 0x2d, 0x79, 0x20, //  },.    { // -y
	0x66, 0x61, 0x63, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, // face.        {
	0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, // 1.0f,  0.0f,  0.
	0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x75, // 0f, 0.0f }, // u
	0x20, 0x2d, 0x3e, 0x20, 0x2b, 0x78, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //  -> +x.        {
	0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x2d, //   0.0f,  0.0f, -
	0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, // 1.0f, 0.0f }, //
	0x20, 0x76, 0x20, 0x2d, 0x3e, 0x20, 0x2d, 0x7a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  v -> -z.
	0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, //  {  0.0f, -1.0f,
	0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, //   0.0f, 0.0f },
	0x2f, 0x2f, 0x20, 0x2d, 0x79, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // // -y face.    }
	0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, 0x2b, 0x7a, 0x20, 0x66, 0x61, // ,.    { // +z fa
	0x63, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x31, 0x2e, // ce.        {  1.
	0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, // 0f,  0.0f,  0.0f
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x20, 0x2d, // , 0.0f }, // u -
	0x3e, 0x20, 0x2b, 0x78, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, // > +x.        {
	0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, // 0.0f, -1.0f,  0.
	0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x76, // 0f, 0.0f }, // v
	0x20, 0x2d, 0x3e, 0x20, 0x2d, 0x79, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //  -> -y.        {
	0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, //   0.0f,  0.0f,
	0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, // 1.0f, 0.0f }, //
	0x20, 0x2b, 0x7a, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, //  +z face.    },.
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, 0x2d, 0x7a, 0x20, 0x66, 0x61, 0x63, 0x65, //     { // -z face
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, // .        { -1.0f
	0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, // ,  0.0f,  0.0f,
	0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x20, 0x2d, 0x3e, 0x20, // 0.0f }, // u ->
	0x2d, 0x78, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, // -x.        {  0.
	0x30, 0x66, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, // 0f, -1.0f,  0.0f
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x76, 0x20, 0x2d, // , 0.0f }, // v -
	0x3e, 0x20, 0x2d, 0x79, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, // > -y.        {
	0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x2d, 0x31, 0x2e, // 0.0f,  0.0f, -1.
	0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x2d, // 0f, 0.0f }, // -
	0x7a, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, // z face.    }.};.
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x74, // .static float4 t
	0x65, 0x78, 0x65, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x63, 0x57, 0x61, // exelCoordToVecWa
	0x72, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x75, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // rp(float _u, flo
	0x61, 0x74, 0x20, 0x5f, 0x76, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x5f, 0x66, // at _v, int8_t _f
	0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x77, // aceIdx, float _w
	0x61, 0x72, 0x70, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x23, 0x69, 0x66, 0x64, 0x65, // arp).{.    #ifde
	0x66, 0x20, 0x57, 0x41, 0x52, 0x50, 0x5f, 0x46, 0x49, 0x58, 0x55, 0x50, 0x0a, 0x20, 0x20, 0x20, // f WARP_FIXUP.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x75, 0x20, 0x3d, 0x20, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x2a, //      _u = _warp*
	0x28, 0x5f, 0x75, 0x2a, 0x5f, 0x75, 0x2a, 0x5f, 0x75, 0x29, 0x20, 0x2b, 0x20, 0x5f, 0x75, 0x3b, // (_u*_u*_u) + _u;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x76, 0x20, 0x3d, 0x20, 0x5f, 0x77, // .        _v = _w
	0x61, 0x72, 0x70, 0x2a, 0x28, 0x5f, 0x76, 0x2a, 0x5f, 0x76, 0x2a, 0x5f, 0x76, 0x29, 0x20, 0x2b, // arp*(_v*_v*_v) +
	0x20, 0x5f, 0x76, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x23, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x20, //  _v;.    #endif
	0x2f, 0x2f, 0x57, 0x41, 0x52, 0x50, 0x5f, 0x46, 0x49, 0x58, 0x55, 0x50, 0x0a, 0x0a, 0x20, 0x20, // //WARP_FIXUP..
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x61, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x5f, //   float4 aa = s_
	0x66, 0x61, 0x63, 0x65, 0x55, 0x76, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5b, 0x5f, 0x66, // faceUvVectors[_f
	0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x5b, 0x30, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // aceIdx][0];.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x62, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x66, 0x61, // float4 bb = s_fa
	0x63, 0x65, 0x55, 0x76, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5b, 0x5f, 0x66, 0x61, 0x63, // ceUvVectors[_fac
	0x65, 0x49, 0x64, 0x78, 0x5d, 0x5b, 0x31, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // eIdx][1];.    fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x63, 0x63, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x65, // oat4 cc = s_face
	0x55, 0x76, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5b, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, // UvVectors[_faceI
	0x64, 0x78, 0x5d, 0x5b, 0x32, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, // dx][2];.    retu
	0x72, 0x6e, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x5f, 0x75, 0x2a, // rn normalize(_u*
	0x61, 0x61, 0x20, 0x2b, 0x20, 0x5f, 0x76, 0x2a, 0x62, 0x62, 0x20, 0x2b, 0x20, 0x63, 0x63, 0x29, // aa + _v*bb + cc)
	0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x23, 0x69, 0x66, 0x20, 0x21, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, // ;.}..#if !CMFT_C
	0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, // OMPUTE_FILTER_AR
	0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, // EA_ON_CPU.    st
	0x61, 0x74, 0x69, 0x63, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, 0x64, // atic void aabbAd
	0x64, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x2a, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2c, // d(float4* _aabb,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  float _x, float
	0x20, 0x5f, 0x79, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //  _y).    {.
	0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x78, 0x20, 0x3d, 0x20, 0x66, 0x6d, //    _aabb->x = fm
	0x69, 0x6e, 0x28, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, // in(_aabb->x, _x)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, // ;.        _aabb-
	0x3e, 0x79, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x69, 0x6e, 0x28, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, // >y = fmin(_aabb-
	0x3e, 0x79, 0x2c, 0x20, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // >y, _y);.
	0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x7a, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x78, //  _aabb->z = fmax
	0x28, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x7a, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x0a, // (_aabb->z, _x);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x77, //         _aabb->w
	0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x78, 0x28, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x77, //  = fmax(_aabb->w
	0x2c, 0x20, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, 0x20, 0x20, // , _y);.    }..
	0x20, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x61, 0x61, //   static void aa
	0x62, 0x62, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x2a, 0x20, // bbClamp(float4*
	0x5f, 0x61, 0x61, 0x62, 0x62, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6d, 0x69, // _aabb, float _mi
	0x6e, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6d, 0x61, 0x78, 0x29, 0x0a, 0x20, // n, float _max).
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, //    {.        _aa
	0x62, 0x62, 0x2d, 0x3e, 0x78, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x78, 0x28, 0x5f, 0x61, 0x61, // bb->x = fmax(_aa
	0x62, 0x62, 0x2d, 0x3e, 0x78, 0x2c, 0x20, 0x5f, 0x6d, 0x69, 0x6e, 0x29, 0x3b, 0x0a, 0x20, 0x20, // bb->x, _min);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x79, 0x20, 0x3d, //       _aabb->y =
	0x20, 0x66, 0x6d, 0x61, 0x78, 0x28, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x79, 0x2c, 0x20, //  fmax(_aabb->y,
	0x5f, 0x6d, 0x69, 0x6e, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, // _min);.        _
	0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x7a, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x69, 0x6e, 0x28, 0x5f, // aabb->z = fmin(_
	0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x7a, 0x2c, 0x20, 0x5f, 0x6d, 0x61, 0x78, 0x29, 0x3b, 0x0a, // aabb->z, _max);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x77, //         _aabb->w
	0x20, 0x3d, 0x20, 0x66, 0x6d, 0x69, 0x6e, 0x28, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x77, //  = fmin(_aabb->w
	0x2c, 0x20, 0x5f, 0x6d, 0x61, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, // , _max);.    }..
	0x20, 0x20, 0x20, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, //     enum.    {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, //        CMFT_FACE
	0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x58, 0x20, 0x3d, 0x20, 0x30, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, // _POS_X = 0,.
	0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, //     CMFT_FACE_NE
	0x47, 0x5f, 0x58, 0x20, 0x3d, 0x20, 0x31, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // G_X = 1,.
	0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x59, //  CMFT_FACE_POS_Y
	0x20, 0x3d, 0x20, 0x32, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, //  = 2,.        CM
	0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x59, 0x20, 0x3d, 0x20, // FT_FACE_NEG_Y =
	0x33, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, // 3,.        CMFT_
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x5a, 0x20, 0x3d, 0x20, 0x34, 0x2c, 0x0a, // FACE_POS_Z = 4,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, //         CMFT_FAC
	0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x5a, 0x20, 0x3d, 0x20, 0x35, 0x2c, 0x0a, 0x20, 0x20, 0x20, // E_NEG_Z = 5,.
	0x20, 0x7d, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x0a, 0x20, 0x20, //  };..    enum.
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, //   {.        CMFT
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x20, 0x3d, 0x20, 0x30, // _EDGE_LEFT   = 0
	0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, // ,.        CMFT_E
	0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x20, 0x3d, 0x20, 0x31, 0x2c, 0x0a, // DGE_RIGHT  = 1,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, //         CMFT_EDG
	0x45, 0x5f, 0x54, 0x4f, 0x50, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x20, 0x32, 0x2c, 0x0a, 0x20, 0x20, // E_TOP    = 2,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, //       CMFT_EDGE_
	0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x20, 0x3d, 0x20, 0x33, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, // BOTTOM = 3,.
	0x7d, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // };..    __consta
	0x6e, 0x74, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x43, 0x75, 0x62, 0x65, 0x46, 0x61, // nt struct CubeFa
	0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x0a, 0x20, 0x20, 0x20, 0x20, // ceNeighbour.
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, // {.        uint8_
	0x74, 0x20, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, // t m_faceIdx;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x6d, 0x5f, 0x66, //      uint8_t m_f
	0x61, 0x63, 0x65, 0x45, 0x64, 0x67, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x73, // aceEdge;.    } s
	0x5f, 0x63, 0x75, 0x62, 0x65, 0x46, 0x61, 0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, // _cubeFaceNeighbo
	0x75, 0x72, 0x73, 0x5b, 0x36, 0x5d, 0x5b, 0x34, 0x5d, 0x20, 0x3d, 0x0a, 0x20, 0x20, 0x20, 0x20, // urs[6][4] =.
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x50, 0x4f, // {.        { //PO
	0x53, 0x5f, 0x58, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // S_X.
	0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, // { CMFT_FACE_POS_
	0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, // Z, CMFT_EDGE_RIG
	0x48, 0x54, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // HT },.
	0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, //   { CMFT_FACE_NE
	0x47, 0x5f, 0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4c, // G_Z, CMFT_EDGE_L
	0x45, 0x46, 0x54, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // EFT  },.
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, //     { CMFT_FACE_
	0x50, 0x4f, 0x53, 0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, // POS_Y, CMFT_EDGE
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _RIGHT },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, //       { CMFT_FAC
	0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, // E_NEG_Y, CMFT_ED
	0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, // GE_RIGHT },.
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //     },.        {
	0x20, 0x2f, 0x2f, 0x4e, 0x45, 0x47, 0x5f, 0x58, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  //NEG_X.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, //      { CMFT_FACE
	0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, // _NEG_Z, CMFT_EDG
	0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // E_RIGHT },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, //        { CMFT_FA
	0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, // CE_POS_Z, CMFT_E
	0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, // DGE_LEFT  },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, //          { CMFT_
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, // FACE_POS_Y, CMFT
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, // _EDGE_LEFT  },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, //            { CMF
	0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, // T_FACE_NEG_Y, CM
	0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x7d, 0x2c, // FT_EDGE_LEFT  },
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, // .        },.
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x50, 0x4f, 0x53, 0x5f, 0x59, 0x0a, 0x20, 0x20, //     { //POS_Y.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, //           { CMFT
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, // _FACE_NEG_X, CMF
	0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, // T_EDGE_TOP },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, //           { CMFT
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, // _FACE_POS_X, CMF
	0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, // T_EDGE_TOP },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, //           { CMFT
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, // _FACE_NEG_Z, CMF
	0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, // T_EDGE_TOP },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, //           { CMFT
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, // _FACE_POS_Z, CMF
	0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, // T_EDGE_TOP },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       },.
	0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x4e, 0x45, 0x47, 0x5f, 0x59, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //  { //NEG_Y.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, //        { CMFT_FA
	0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, // CE_NEG_X, CMFT_E
	0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, // DGE_BOTTOM },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, //           { CMFT
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, // _FACE_POS_X, CMF
	0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x20, 0x7d, 0x2c, // T_EDGE_BOTTOM },
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, // .            { C
	0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x5a, 0x2c, 0x20, // MFT_FACE_POS_Z,
	0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, // CMFT_EDGE_BOTTOM
	0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  },.
	0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, // { CMFT_FACE_NEG_
	0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, // Z, CMFT_EDGE_BOT
	0x54, 0x4f, 0x4d, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, // TOM },.        }
	0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x50, 0x4f, // ,.        { //PO
	0x53, 0x5f, 0x5a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // S_Z.
	0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, // { CMFT_FACE_NEG_
	0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, // X, CMFT_EDGE_RIG
	0x48, 0x54, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // HT  },.
	0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, //    { CMFT_FACE_P
	0x4f, 0x53, 0x5f, 0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, // OS_X, CMFT_EDGE_
	0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // LEFT   },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, //       { CMFT_FAC
	0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, // E_POS_Y, CMFT_ED
	0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, // GE_BOTTOM },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, //          { CMFT_
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, // FACE_NEG_Y, CMFT
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, // _EDGE_TOP    },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //         },.
	0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x4e, 0x45, 0x47, 0x5f, 0x5a, 0x0a, 0x20, 0x20, 0x20, //    { //NEG_Z.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, //          { CMFT_
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, // FACE_POS_X, CMFT
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x20, 0x7d, 0x2c, 0x0a, // _EDGE_RIGHT  },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, //             { CM
	0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x58, 0x2c, 0x20, 0x43, // FT_FACE_NEG_X, C
	0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x20, // MFT_EDGE_LEFT
	0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, // },.            {
	0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x59, //  CMFT_FACE_POS_Y
	0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x20, // , CMFT_EDGE_TOP
	0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    },.
	0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, //   { CMFT_FACE_NE
	0x47, 0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, // G_Y, CMFT_EDGE_B
	0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // OTTOM },.
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, //  }.    };..    s
	0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x76, 0x65, 0x63, 0x54, 0x6f, // tatic void vecTo
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // TexelCoord(float
	0x2a, 0x20, 0x5f, 0x75, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x2a, 0x20, 0x5f, 0x76, 0x2c, // * _u, float* _v,
	0x20, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x2a, 0x20, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, //  uint8_t* _faceI
	0x64, 0x78, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // dx, float4 _vec)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, // .    {.        f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x61, 0x62, 0x73, 0x56, 0x65, 0x63, 0x20, 0x3d, 0x20, 0x66, // loat4 absVec = f
	0x61, 0x62, 0x73, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // abs(_vec);.
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x66, //    float max = f
	0x6d, 0x61, 0x78, 0x28, 0x66, 0x6d, 0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x56, 0x65, 0x63, 0x2e, // max(fmax(absVec.
	0x78, 0x2c, 0x20, 0x61, 0x62, 0x73, 0x56, 0x65, 0x63, 0x2e, 0x79, 0x29, 0x2c, 0x20, 0x61, 0x62, // x, absVec.y), ab
	0x73, 0x56, 0x65, 0x63, 0x2e, 0x7a, 0x29, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // sVec.z);..
	0x20, 0x20, 0x2f, 0x2f, 0x20, 0x47, 0x65, 0x74, 0x20, 0x66, 0x61, 0x63, 0x65, 0x20, 0x69, 0x64, //   // Get face id
	0x20, 0x28, 0x6d, 0x61, 0x78, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, //  (max component
	0x3d, 0x3d, 0x20, 0x66, 0x61, 0x63, 0x65, 0x20, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x2e, // == face vector).
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x6d, 0x61, 0x78, // .        if (max
	0x20, 0x3d, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x56, 0x65, 0x63, 0x2e, 0x78, 0x29, 0x0a, 0x20, 0x20, //  == absVec.x).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.
	0x20, 0x20, 0x20, 0x20, 0x2a, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x20, 0x3d, 0x20, //     *_faceIdx =
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x29, // (_vec.x >= 0.0f)
	0x20, 0x3f, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x29, 0x43, 0x4d, 0x46, 0x54, //  ? (uint8_t)CMFT
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x58, 0x20, 0x3a, 0x20, 0x28, 0x75, // _FACE_POS_X : (u
	0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x29, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, // int8_t)CMFT_FACE
	0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x58, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _NEG_X;.
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, // }.        else i
	0x66, 0x20, 0x28, 0x6d, 0x61, 0x78, 0x20, 0x3d, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x56, 0x65, 0x63, // f (max == absVec
	0x2e, 0x79, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // .y).        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x5f, 0x66, 0x61, 0x63, 0x65, //           *_face
	0x49, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x3e, 0x3d, // Idx = (_vec.y >=
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, //  0.0f) ? (uint8_
	0x74, 0x29, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, // t)CMFT_FACE_POS_
	0x59, 0x20, 0x3a, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x29, 0x43, 0x4d, 0x46, // Y : (uint8_t)CMF
	0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x59, 0x3b, 0x0a, 0x20, 0x20, // T_FACE_NEG_Y;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x2f, 0x2f, 0x69, 0x66, 0x20, 0x28, 0x6d, 0x61, 0x78, 0x20, 0x3d, // else //if (max =
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x56, 0x65, 0x63, 0x2e, 0x7a, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, // = absVec.z).
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.
	0x20, 0x20, 0x2a, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x28, 0x5f, //   *_faceIdx = (_
	0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x29, 0x20, 0x3f, // vec.z >= 0.0f) ?
	0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x29, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, //  (uint8_t)CMFT_F
	0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x5a, 0x20, 0x3a, 0x20, 0x28, 0x75, 0x69, 0x6e, // ACE_POS_Z : (uin
	0x74, 0x38, 0x5f, 0x74, 0x29, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, // t8_t)CMFT_FACE_N
	0x45, 0x47, 0x5f, 0x5a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // EG_Z;.        }.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x44, 0x69, 0x76, 0x69, // .        // Divi
	0x64, 0x65, 0x20, 0x62, 0x79, 0x20, 0x6d, 0x61, 0x78, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, // de by max compon
	0x65, 0x6e, 0x74, 0x2e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ent..        flo
	0x61, 0x74, 0x34, 0x20, 0x66, 0x61, 0x63, 0x65, 0x56, 0x65, 0x63, 0x20, 0x3d, 0x20, 0x5f, 0x76, // at4 faceVec = _v
	0x65, 0x63, 0x2f, 0x6d, 0x61, 0x78, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ec/max;..
	0x20, 0x2a, 0x5f, 0x75, 0x20, 0x3d, 0x20, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x73, 0x5f, 0x66, 0x61, //  *_u = (dot(s_fa
	0x63, 0x65, 0x55, 0x76, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5b, 0x2a, 0x5f, 0x66, 0x61, // ceUvVectors[*_fa
	0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x5b, 0x30, 0x5d, 0x2c, 0x20, 0x66, 0x61, 0x63, 0x65, 0x56, // ceIdx][0], faceV
	0x65, 0x63, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, // ec) + 1.0f) * 0.
	0x35, 0x66, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x5f, 0x76, 0x20, // 5f;.        *_v
	0x3d, 0x20, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x55, 0x76, 0x56, // = (dot(s_faceUvV
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5b, 0x2a, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, // ectors[*_faceIdx
	0x5d, 0x5b, 0x31, 0x5d, 0x2c, 0x20, 0x66, 0x61, 0x63, 0x65, 0x56, 0x65, 0x63, 0x29, 0x20, 0x2b, // ][1], faceVec) +
	0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x35, 0x66, 0x3b, 0x0a, 0x20, //  1.0f) * 0.5f;.
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, //    }..    static
	0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x46, //  void determineF
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // ilterArea(float4
	0x2a, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x2c, 0x20, 0x66, // * _filterArea, f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x74, 0x61, 0x70, 0x56, 0x65, 0x63, 0x2c, 0x20, 0x66, // loat4 _tapVec, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, // loat _filterSize
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ).    {.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x75, 0x75, 0x2c, 0x20, 0x76, 0x76, 0x3b, 0x0a, 0x20, 0x20, // float uu, vv;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x68, 0x69, //       uint8_t hi
	0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // tFaceIdx;.
	0x20, 0x20, 0x76, 0x65, 0x63, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x43, 0x6f, 0x6f, 0x72, //   vecToTexelCoor
	0x64, 0x28, 0x26, 0x75, 0x75, 0x2c, 0x20, 0x26, 0x76, 0x76, 0x2c, 0x20, 0x26, 0x68, 0x69, 0x74, // d(&uu, &vv, &hit
	0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x2c, 0x20, 0x5f, 0x74, 0x61, 0x70, 0x56, 0x65, 0x63, // FaceIdx, _tapVec
	0x29, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // );..        floa
	0x74, 0x34, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x30, 0x2e, // t4 bounds = { 0.
	0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, // 0f, 0.0f, 0.0f,
	0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0.0f };.
	0x61, 0x61, 0x62, 0x62, 0x41, 0x64, 0x64, 0x28, 0x26, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2c, // aabbAdd(&bounds,
	0x20, 0x75, 0x75, 0x2d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x2c, //  uu-_filterSize,
	0x20, 0x76, 0x76, 0x2d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x29, //  vv-_filterSize)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, 0x64, // ;.        aabbAd
	0x64, 0x28, 0x26, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2c, 0x20, 0x75, 0x75, 0x2b, 0x5f, 0x66, // d(&bounds, uu+_f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x2c, 0x20, 0x76, 0x76, 0x2b, 0x5f, 0x66, // ilterSize, vv+_f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ilterSize);.
	0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x26, 0x62, //     aabbClamp(&b
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // ounds, 0.0f, 1.0
	0x66, 0x29, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x66, 0x69, // f);..        _fi
	0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x68, 0x69, 0x74, 0x46, 0x61, 0x63, 0x65, // lterArea[hitFace
	0x49, 0x64, 0x78, 0x5d, 0x20, 0x3d, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x3b, 0x0a, 0x0a, // Idx] = bounds;..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x20, 0x4e, 0x65, 0x69, //         enum Nei
	0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x53, 0x69, 0x64, 0x65, 0x73, 0x0a, 0x20, 0x20, 0x20, 0x20, // ghbourSides.
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.
	0x20, 0x20, 0x4c, 0x65, 0x66, 0x74, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   Left,.
	0x20, 0x20, 0x20, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //     Right,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x54, 0x6f, 0x70, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, //        Top,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2c, 0x0a, //         Bottom,.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x6f, 0x75, // .            Cou
	0x6e, 0x74, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x3b, 0x0a, 0x0a, // nt,.        };..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x62, //         float3 b
	0x6c, 0x65, 0x65, 0x64, 0x5b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5d, 0x20, 0x3d, 0x20, 0x2f, 0x2a, // leed[Count] = /*
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, 0x62, 0x62, 0x6d, 0x69, 0x6e, 0x2c, 0x20, 0x62, // amount, bbmin, b
	0x62, 0x6d, 0x61, 0x78, 0x2a, 0x2f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, // bmax*/.        {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, // .            { /
	0x2f, 0x20, 0x4c, 0x65, 0x66, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // / Left.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, //        _filterSi
	0x7a, 0x65, 0x20, 0x2d, 0x20, 0x75, 0x75, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ze - uu,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2e, //          bounds.
	0x79, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // y,.
	0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x77, 0x2c, 0x0a, 0x20, 0x20, 0x20, //    bounds.w,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, //          },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, 0x52, 0x69, 0x67, //         { // Rig
	0x68, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ht.
	0x20, 0x20, 0x20, 0x75, 0x75, 0x20, 0x2b, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, //    uu + _filterS
	0x69, 0x7a, 0x65, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, // ize - 1.0f,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, //             boun
	0x64, 0x73, 0x2e, 0x79, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ds.y,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x77, 0x2c, 0x0a, //       bounds.w,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, //             },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, //            { //
	0x54, 0x6f, 0x70, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // Top.
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x20, //     _filterSize
	0x2d, 0x20, 0x76, 0x76, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // - vv,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x78, 0x2c, 0x0a, //       bounds.x,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x7a, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // bounds.z,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, //      { // Bottom
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x76, 0x76, 0x20, 0x2b, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, //  vv + _filterSiz
	0x65, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // e - 1.0f,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, //           bounds
	0x2e, 0x78, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .x,.
	0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x7a, 0x2c, 0x0a, 0x20, 0x20, //     bounds.z,.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, //           },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      };..
	0x20, 0x2f, 0x2f, 0x20, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x6c, //  // Determine bl
	0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, // eeding for each
	0x73, 0x69, 0x64, 0x65, 0x2e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, // side..        fo
	0x72, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, // r (uint8_t side
	0x3d, 0x20, 0x30, 0x3b, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x2b, // = 0; side < 4; +
	0x2b, 0x73, 0x69, 0x64, 0x65, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, // +side).        {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x69, 0x6e, // .            uin
	0x74, 0x38, 0x5f, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, // t8_t currentFace
	0x49, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x69, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, // Idx = hitFaceIdx
	0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, // ;..            f
	0x6f, 0x72, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, // or (float bleedA
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x3d, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x5b, 0x73, 0x69, // mount = bleed[si
	0x64, 0x65, 0x5d, 0x2e, 0x78, 0x3b, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, // de].x; bleedAmou
	0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x3b, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, // nt > 0.0f; bleed
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x2d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x0a, // Amount -= 1.0f).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, //             {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x69, //               ui
	0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, // nt8_t neighbourF
	0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x20, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x63, 0x75, 0x62, 0x65, // aceIdx  = s_cube
	0x46, 0x61, 0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x5b, 0x63, // FaceNeighbours[c
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x5b, 0x73, // urrentFaceIdx][s
	0x69, 0x64, 0x65, 0x5d, 0x2e, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x3b, 0x0a, // ide].m_faceIdx;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, // uint8_t neighbou
	0x72, 0x46, 0x61, 0x63, 0x65, 0x45, 0x64, 0x67, 0x65, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x63, 0x75, // rFaceEdge = s_cu
	0x62, 0x65, 0x46, 0x61, 0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, // beFaceNeighbours
	0x5b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, // [currentFaceIdx]
	0x5b, 0x73, 0x69, 0x64, 0x65, 0x5d, 0x2e, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x45, 0x64, 0x67, // [side].m_faceEdg
	0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // e;.
	0x20, 0x20, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, //    currentFaceId
	0x78, 0x20, 0x3d, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, // x = neighbourFac
	0x65, 0x49, 0x64, 0x78, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // eIdx;..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x62, 0x4d, //        float bbM
	0x69, 0x6e, 0x20, 0x3d, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x5b, 0x73, 0x69, 0x64, 0x65, 0x5d, // in = bleed[side]
	0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .y;.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x62, 0x4d, 0x61, 0x78, 0x20, //     float bbMax
	0x3d, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x5b, 0x73, 0x69, 0x64, 0x65, 0x5d, 0x2e, 0x7a, 0x3b, // = bleed[side].z;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x69, 0x66, 0x20, 0x28, 0x28, 0x73, 0x69, 0x64, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x6e, 0x65, //  if ((side == ne
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x45, 0x64, 0x67, 0x65, 0x29, // ighbourFaceEdge)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x7c, 0x7c, 0x20, 0x28, 0x33, 0x20, 0x3d, 0x3d, 0x20, 0x28, 0x73, 0x69, 0x64, 0x65, 0x20, //  || (3 == (side
	0x2b, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x45, // + neighbourFaceE
	0x64, 0x67, 0x65, 0x29, 0x29, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // dge))).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x20, //              //
	0x46, 0x6c, 0x69, 0x70, 0x2e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // Flip..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x62, 0x4d, 0x69, 0x6e, 0x20, //           bbMin
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x20, 0x2d, 0x20, 0x62, 0x62, 0x4d, 0x69, 0x6e, 0x3b, 0x0a, // = 1.0f - bbMin;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x62, 0x62, 0x4d, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x66, //     bbMax = 1.0f
	0x20, 0x2d, 0x20, 0x62, 0x62, 0x4d, 0x61, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  - bbMax;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, 0x20, 0x20, 0x20, //           }..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x77, 0x69, //              swi
	0x74, 0x63, 0x68, 0x20, 0x28, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, // tch (neighbourFa
	0x63, 0x65, 0x45, 0x64, 0x67, 0x65, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ceEdge).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x43, //           case C
	0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x3a, 0x0a, 0x20, // MFT_EDGE_LEFT:.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, //              aab
	0x62, 0x41, 0x64, 0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, // bAdd(&_filterAre
	0x61, 0x5b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, // a[neighbourFaceI
	0x64, 0x78, 0x5d, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x62, 0x62, 0x4d, 0x69, 0x6e, // dx], 0.0f, bbMin
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // );.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, //            aabbA
	0x64, 0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, // dd(&_filterArea[
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, // neighbourFaceIdx
	0x5d, 0x2c, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, // ], bleedAmount,
	0x62, 0x62, 0x4d, 0x61, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // bbMax);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, //             }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, //               br
	0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // eak;..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, //       case CMFT_
	0x45, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, // EDGE_RIGHT:.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, 0x64, //           aabbAd
	0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x6e, // d(&_filterArea[n
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, // eighbourFaceIdx]
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x20, 0x2d, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, // , 1.0f - bleedAm
	0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, 0x62, 0x62, 0x4d, 0x69, 0x6e, 0x29, 0x3b, 0x0a, 0x20, 0x20, // ount, bbMin);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, 0x64, 0x64, 0x28, 0x26, 0x5f, //       aabbAdd(&_
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x6e, 0x65, 0x69, 0x67, 0x68, // filterArea[neigh
	0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x2c, 0x20, 0x31, 0x2e, // bourFaceIdx], 1.
	0x30, 0x66, 0x2c, 0x20, 0x62, 0x62, 0x4d, 0x61, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 0f, bbMax);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // }.
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   break;..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x43, //           case C
	0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x3a, 0x0a, 0x20, 0x20, // MFT_EDGE_TOP:.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, //             aabb
	0x41, 0x64, 0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, // Add(&_filterArea
	0x5b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, // [neighbourFaceId
	0x78, 0x5d, 0x2c, 0x20, 0x62, 0x62, 0x4d, 0x69, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x29, // x], bbMin, 0.0f)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, 0x64, //           aabbAd
	0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x6e, // d(&_filterArea[n
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, // eighbourFaceIdx]
	0x2c, 0x20, 0x62, 0x62, 0x4d, 0x61, 0x78, 0x2c, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, // , bbMax, bleedAm
	0x6f, 0x75, 0x6e, 0x74, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ount);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, //            }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, //              bre
	0x61, 0x6b, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ak;..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, //      case CMFT_E
	0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, // DGE_BOTTOM:.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, 0x64, //           aabbAd
	0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x6e, // d(&_filterArea[n
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, // eighbourFaceIdx]
	0x2c, 0x20, 0x62, 0x62, 0x4d, 0x69, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x20, 0x2d, 0x20, // , bbMin, 1.0f -
	0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x29, 0x3b, 0x0a, 0x20, 0x20, // bleedAmount);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, 0x64, 0x64, 0x28, 0x26, 0x5f, //       aabbAdd(&_
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x6e, 0x65, 0x69, 0x67, 0x68, // filterArea[neigh
	0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x2c, 0x20, 0x62, 0x62, // bourFaceIdx], bb
	0x4d, 0x61, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // Max, 1.0f);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // }.
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   break;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, //          }..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x43, //             // C
	0x6c, 0x61, 0x6d, 0x70, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x6f, // lamp bounding bo
	0x78, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x61, 0x63, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x0a, // x to face size..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x61, 0x61, 0x62, 0x62, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, // aabbClamp(&_filt
	0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, // erArea[neighbour
	0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, // FaceIdx], 0.0f,
	0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 1.0f);.
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, //    }.        }.
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x23, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x20, 0x2f, 0x2f, 0x43, 0x4d, //    }.#endif //CM
	0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, // FT_COMPUTE_FILTE
	0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0a, 0x0a, 0x5f, // R_AREA_ON_CPU.._
	0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x72, 0x61, 0x64, // _kernel void rad
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, // ianceFilterSingl
	0x65, 0x46, 0x61, 0x63, 0x65, 0x28, 0x5f, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x6e, // eFace(__write_on
	0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6f, 0x75, // ly image2d_t _ou
	0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // t.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, //        , __read_
	0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, // only  image2d_t
	0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _srcData.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, //               ,
	0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x20, 0x69, 0x6d, 0x61, // __read_only  ima
	0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, // ge2d_t _normalSo
	0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // lidAngle.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, //               ,
	0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x5f, 0x64, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, // int8_t _dstFaceI
	0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // d.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, //        , int32_t
	0x20, 0x5f, 0x64, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x0a, 0x20, 0x20, //  _dstFaceSize.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, //    , float _spec
	0x75, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ularPower.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, //                ,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, //  float _specular
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // Angle.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, //            , flo
	0x61, 0x74, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x0a, 0x20, // at _filterSize.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x77, 0x61, 0x72, //     , float _war
	0x70, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // p.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, //        , int8_t
	0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x0a, 0x20, 0x20, 0x20, 0x20, // _srcFaceIdx.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, //  , float _srcFac
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // eSize.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x69, 0x66, 0x20, 0x43, //            #if C
	0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, // MFT_COMPUTE_FILT
	0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0a, 0x20, // ER_AREA_ON_CPU.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, //     , __read_onl
	0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x61, 0x72, 0x65, // y image2d_t _are
	0x61, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // a.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x20, 0x2f, 0x2f, //        #endif //
	0x21, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, // !CMFT_COMPUTE_FI
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, // LTER_AREA_ON_CPU
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x0a, 0x7b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, //       ).{..    c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x78, 0x78, 0x20, 0x3d, 0x20, 0x67, 0x65, // onst int xx = ge
	0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x28, 0x31, 0x29, 0x3b, 0x0a, // t_global_id(1);.
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x79, 0x79, //     const int yy
	0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, //  = get_global_id
	0x28, 0x30, 0x29, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // (0);..    float4
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x3d, 0x20, 0x7b, //  colorWeight = {
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.0f, 0.0f, 0.0
	0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, // f, 0.0f };..
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x44, // const float invD
	0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x32, 0x20, // stFaceSize_Mul2
	0x3d, 0x20, 0x32, 0x2e, 0x30, 0x66, 0x2f, 0x5f, 0x64, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, // = 2.0f/_dstFaceS
	0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // ize;.    const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x76, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, // loat vv = ((floa
	0x74, 0x29, 0x79, 0x79, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x35, 0x66, 0x29, 0x2a, 0x69, 0x6e, 0x76, // t)yy + 0.5f)*inv
	0x44, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x32, // DstFaceSize_Mul2
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, //  - 1.0f;.    con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x75, 0x75, 0x20, 0x3d, 0x20, 0x28, 0x28, // st float uu = ((
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x29, 0x78, 0x78, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x35, 0x66, 0x29, // float)xx + 0.5f)
	0x2a, 0x69, 0x6e, 0x76, 0x44, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, // *invDstFaceSize_
	0x4d, 0x75, 0x6c, 0x32, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x3b, 0x0a, 0x20, 0x20, 0x20, // Mul2 - 1.0f;.
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x74, 0x61, //  const float4 ta
	0x70, 0x56, 0x65, 0x63, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x65, 0x6c, 0x43, 0x6f, 0x6f, 0x72, // pVec = texelCoor
	0x64, 0x54, 0x6f, 0x56, 0x65, 0x63, 0x57, 0x61, 0x72, 0x70, 0x28, 0x75, 0x75, 0x2c, 0x20, 0x76, // dToVecWarp(uu, v
	0x76, 0x2c, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x2c, 0x20, // v, _srcFaceIdx,
	0x5f, 0x77, 0x61, 0x72, 0x70, 0x29, 0x3b, 0x0a, 0x0a, 0x23, 0x69, 0x66, 0x20, 0x43, 0x4d, 0x46, // _warp);..#if CMF
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, // T_COMPUTE_FILTER
	0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0a, 0x20, 0x20, 0x20, // _AREA_ON_CPU.
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x61, 0x72, 0x65, 0x61, //  const int2 area
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x78, 0x78, 0x2a, 0x36, 0x20, 0x2b, // Coord = { xx*6 +
	0x20, 0x5f, 0x64, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x2c, 0x20, 0x79, 0x79, 0x20, //  _dstFaceId, yy
	0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // };.    const flo
	0x61, 0x74, 0x34, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x3d, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, // at4 area = read_
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x2c, 0x20, 0x73, 0x5f, // imagef(_area, s_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6f, // sampler, areaCoo
	0x72, 0x64, 0x29, 0x3b, 0x0a, 0x23, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // rd);.#else.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, // loat4 filterArea
	0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // [6] =.    {.
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, //     { 0.0f, 0.0f
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0a, // , 0.0f, 0.0f },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, //         { 0.0f,
	0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, // 0.0f, 0.0f, 0.0f
	0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, //  },.        { 0.
	0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, // 0f, 0.0f, 0.0f,
	0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0.0f },.
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, // { 0.0f, 0.0f, 0.
	0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, // 0f, 0.0f },.
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, //     { 0.0f, 0.0f
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0a, // , 0.0f, 0.0f },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, //         { 0.0f,
	0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, // 0.0f, 0.0f, 0.0f
	0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, //  },.    };.    d
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, // etermineFilterAr
	0x65, 0x61, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x2c, 0x20, 0x74, // ea(filterArea, t
	0x61, 0x70, 0x56, 0x65, 0x63, 0x2c, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, // apVec, _filterSi
	0x7a, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // ze);.    const f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x3d, 0x20, 0x66, 0x69, 0x6c, // loat4 area = fil
	0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x5f, 0x64, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, // terArea[_dstFace
	0x49, 0x64, 0x5d, 0x3b, 0x0a, 0x23, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x20, 0x2f, 0x2f, 0x43, 0x4d, // Id];.#endif //CM
	0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, // FT_COMPUTE_FILTE
	0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0a, 0x0a, 0x20, // R_AREA_ON_CPU..
	0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x6d, 0x69, //    const int4 mi
	0x6e, 0x6d, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x69, // nmax = convert_i
	0x6e, 0x74, 0x34, 0x28, 0x61, 0x72, 0x65, 0x61, 0x2a, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, // nt4(area*_srcFac
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, // eSize);.    cons
	0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x6d, 0x69, 0x6e, 0x58, 0x20, 0x3d, // t int32_t minX =
	0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, //  minmax.x;.    c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x6d, 0x69, 0x6e, // onst int32_t min
	0x59, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, // Y = minmax.y;.
	0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, //   const int32_t
	0x6d, 0x61, 0x78, 0x58, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x7a, 0x3b, // maxX = minmax.z;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, // .    const int32
	0x5f, 0x74, 0x20, 0x6d, 0x61, 0x78, 0x59, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, // _t maxY = minmax
	0x2e, 0x77, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, // .w;..    for (in
	0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x79, 0x79, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x59, 0x3b, // t32_t yy = minY;
	0x20, 0x79, 0x79, 0x20, 0x3c, 0x20, 0x6d, 0x61, 0x78, 0x59, 0x3b, 0x20, 0x2b, 0x2b, 0x79, 0x79, //  yy < maxY; ++yy
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ).    {.
	0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x78, 0x78, 0x20, // for (int32_t xx
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x58, 0x3b, 0x20, 0x78, 0x78, 0x20, 0x3c, 0x20, 0x6d, 0x61, 0x78, // = minX; xx < max
	0x58, 0x3b, 0x20, 0x2b, 0x2b, 0x78, 0x78, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // X; ++xx).
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, //  {.            c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, // onst int2 coord
	0x3d, 0x20, 0x7b, 0x20, 0x78, 0x78, 0x2c, 0x20, 0x79, 0x79, 0x20, 0x7d, 0x3b, 0x0a, 0x20, 0x20, // = { xx, yy };.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //           const
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x3d, 0x20, // float4 normal =
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x6e, 0x6f, 0x72, // read_imagef(_nor
	0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x2c, 0x20, 0x73, // malSolidAngle, s
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // _sampler, coord)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, // ;.            co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x70, 0x20, 0x3d, 0x20, 0x64, // nst float dp = d
	0x6f, 0x74, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2c, 0x20, 0x74, 0x61, 0x70, 0x56, 0x65, // ot(normal, tapVe
	0x63, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // c);.
	0x69, 0x66, 0x20, 0x28, 0x64, 0x70, 0x20, 0x3e, 0x3d, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x75, // if (dp >= _specu
	0x6c, 0x61, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // larAngle).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x73, //         float4 s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, // ample = read_ima
	0x67, 0x65, 0x66, 0x28, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x5f, // gef(_srcData, s_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, // sampler, coord);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x66, //  sample.w = 1.0f
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ;.
	0x20, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x2b, 0x3d, //   colorWeight +=
	0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  sample.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x77, 0x0a, //      * normal.w.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x6e, //              * n
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x64, 0x70, 0x2c, 0x20, 0x5f, // ative_powr(dp, _
	0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x29, 0x3b, 0x0a, // specularPower);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, //             }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, 0x20, //       }.    }..
	0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x64, 0x73, //    const int2 ds
	0x74, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x78, 0x78, 0x2c, 0x20, 0x79, 0x79, 0x20, 0x7d, 0x3b, 0x0a, // t = { xx, yy };.
	0x20, 0x20, 0x20, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, //     write_imagef
	0x28, 0x5f, 0x6f, 0x75, 0x74, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (_out, dst, colo
	0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x5f, 0x5f, 0x6b, // rWeight);.}..__k
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x73, 0x75, 0x6d, 0x28, 0x5f, // ernel void sum(_
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, // _write_only imag
	0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // e2d_t _out.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, //            , __r
	0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, // ead_only image2d
	0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x30, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _t _src0.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, //          , __rea
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, // d_only image2d_t
	0x20, 0x5f, 0x73, 0x72, 0x63, 0x31, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _src1.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, //        , __read_
	0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, // only image2d_t _
	0x73, 0x72, 0x63, 0x32, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // src2.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, //      , __read_on
	0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, // ly image2d_t _sr
	0x63, 0x33, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // c3.
	0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, //    , __read_only
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x34, //  image2d_t _src4
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, //  , __read_only i
	0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x35, 0x0a, 0x20, // mage2d_t _src5.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, //                )
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, // .{.    const int
	0x20, 0x78, 0x78, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, //  xx = get_global
	0x5f, 0x69, 0x64, 0x28, 0x31, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, // _id(1);.    cons
	0x74, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x79, 0x79, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x67, // t int yy = get_g
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x28, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // lobal_id(0);.
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x63, 0x6f, 0x6f, 0x72, //  const int2 coor
	0x64, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x78, 0x78, 0x2c, 0x20, 0x79, 0x79, 0x20, 0x7d, 0x3b, 0x0a, // d = { xx, yy };.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // .    float4 colo
	0x72, 0x20, 0x3d, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, // r = read_imagef(
	0x5f, 0x73, 0x72, 0x63, 0x30, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // _src0, s_sampler
	0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // , coord).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x61, 0x64, //           + read
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x73, 0x72, 0x63, 0x31, 0x2c, 0x20, 0x73, // _imagef(_src1, s
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // _sampler, coord)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, //   + read_imagef(
	0x5f, 0x73, 0x72, 0x63, 0x32, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // _src2, s_sampler
	0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // , coord).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x61, 0x64, //           + read
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x73, 0x72, 0x63, 0x33, 0x2c, 0x20, 0x73, // _imagef(_src3, s
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // _sampler, coord)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, //   + read_imagef(
	0x5f, 0x73, 0x72, 0x63, 0x34, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // _src4, s_sampler
	0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // , coord).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x61, 0x64, //           + read
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x73, 0x72, 0x63, 0x35, 0x2c, 0x20, 0x73, // _imagef(_src5, s
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // _sampler, coord)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x20, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x30, 0x2e, 0x30, //   ;..    if (0.0
	0x20, 0x21, 0x3d, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x77, 0x29, 0x0a, 0x20, 0x20, 0x20, //  != color.w).
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, //  {.        color
	0x20, 0x2f, 0x3d, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x77, 0x3b, 0x0a, 0x20, 0x20, 0x20, //  /= color.w;.
	0x20, 0x7d, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6d, //  }..    write_im
	0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x6f, 0x75, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, // agef(_out, coord
	0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x5f, 0x5f, 0x6b, // , color);.}..__k
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x72, 0x61, 0x64, 0x69, 0x61, // ernel void radia
	0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x28, 0x5f, 0x5f, 0x77, 0x72, 0x69, 0x74, // nceFilter(__writ
	0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, // e_only image2d_t
	0x20, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _out.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x5f, 0x64, 0x73, 0x74, 0x46, //  , int32_t _dstF
	0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // aceSize.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, //    , float _spec
	0x75, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ularPower.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x73, 0x70, //      , float _sp
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, // ecularAngle.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, //        , float _
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // filterSize.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x77, //       , float _w
	0x61, 0x72, 0x70, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // arp.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, //                ,
	0x20, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, 0x65, //  int8_t _srcFace
	0x49, 0x64, 0x78, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // Idx.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, //                ,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, 0x65, 0x53, //  float _srcFaceS
	0x69, 0x7a, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ize.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, //                ,
	0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, //  __read_only ima
	0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x30, // ge2d_t _srcData0
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, //             , __
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, // read_only image2
	0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x31, 0x0a, 0x20, 0x20, // d_t _srcData1.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, //          , __rea
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, // d_only image2d_t
	0x20, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x32, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //  _srcData2.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, //       , __read_o
	0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, // nly image2d_t _s
	0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x33, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // rcData3.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, //    , __read_only
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x44, //  image2d_t _srcD
	0x61, 0x74, 0x61, 0x34, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ata4.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, // , __read_only im
	0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, // age2d_t _srcData
	0x35, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, //              , _
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, // _read_only image
	0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, // 2d_t _normalSoli
	0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x30, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // dAngle0.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, //    , __read_only
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, //  image2d_t _norm
	0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x31, 0x0a, 0x20, 0x20, // alSolidAngle1.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, //          , __rea
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, // d_only image2d_t
	0x20, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, //  _normalSolidAng
	0x6c, 0x65, 0x32, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // le2.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, //                ,
	0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, //  __read_only ima
	0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, // ge2d_t _normalSo
	0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x33, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // lidAngle3.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, //      , __read_on
	0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6e, 0x6f, // ly image2d_t _no
	0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x34, 0x0a, // rmalSolidAngle4.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, //            , __r
	0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, // ead_only image2d
	0x5f, 0x74, 0x20, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, // _t _normalSolidA
	0x6e, 0x67, 0x6c, 0x65, 0x35, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ngle5.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x23, 0x69, 0x66, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, //  #if CMFT_COMPUT
	0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, // E_FILTER_AREA_ON
	0x5f, 0x43, 0x50, 0x55, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _CPU.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, // , __read_only im
	0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x0a, 0x20, 0x20, // age2d_t _area.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x20, //          #endif
	0x2f, 0x2f, 0x21, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, // //!CMFT_COMPUTE_
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, // FILTER_AREA_ON_C
	0x50, 0x55, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // PU.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x0a, //               ).
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x20, // {.    const int
	0x78, 0x78, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, // xx = get_global_
	0x69, 0x64, 0x28, 0x31, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // id(1);.    const
	0x20, 0x69, 0x6e, 0x74, 0x20, 0x79, 0x79, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6c, //  int yy = get_gl
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x28, 0x30, 0x29, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, // obal_id(0);..
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x57, 0x65, 0x69, //  float4 colorWei
	0x67, 0x68, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, // ght = { 0.0f, 0.
	0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, // 0f, 0.0f, 0.0f }
	0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // ;..    const flo
	0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x44, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, // at invDstFaceSiz
	0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x32, 0x20, 0x3d, 0x20, 0x32, 0x2e, 0x30, 0x66, 0x2f, 0x5f, 0x64, // e_Mul2 = 2.0f/_d
	0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // stFaceSize;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x76, 0x20, 0x3d, // const float vv =
	0x20, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x29, 0x79, 0x79, 0x20, 0x2b, 0x20, 0x30, 0x2e, //  ((float)yy + 0.
	0x35, 0x66, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x44, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, // 5f)*invDstFaceSi
	0x7a, 0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x32, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x3b, 0x0a, // ze_Mul2 - 1.0f;.
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //     const float
	0x75, 0x75, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x29, 0x78, 0x78, 0x20, // uu = ((float)xx
	0x2b, 0x20, 0x30, 0x2e, 0x35, 0x66, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x44, 0x73, 0x74, 0x46, 0x61, // + 0.5f)*invDstFa
	0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x32, 0x20, 0x2d, 0x20, 0x31, 0x2e, // ceSize_Mul2 - 1.
	0x30, 0x66, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 0f;.    const fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x74, 0x61, 0x70, 0x56, 0x65, 0x63, 0x20, 0x3d, 0x20, 0x74, 0x65, // oat4 tapVec = te
	0x78, 0x65, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x63, 0x57, 0x61, 0x72, // xelCoordToVecWar
	0x70, 0x28, 0x75, 0x75, 0x2c, 0x20, 0x76, 0x76, 0x2c, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, // p(uu, vv, _srcFa
	0x63, 0x65, 0x49, 0x64, 0x78, 0x2c, 0x20, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x29, 0x3b, 0x0a, 0x0a, // ceIdx, _warp);..
	0x23, 0x69, 0x66, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, // #if CMFT_COMPUTE
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, // _FILTER_AREA_ON_
	0x43, 0x50, 0x55, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // CPU.    #define
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x34, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x28, 0x5f, 0x66, 0x61, 0x63, // FLOAT4_AREA(_fac
	0x65, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x61, 0x72, // e) const int2 ar
	0x65, 0x61, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x78, 0x78, 0x2a, 0x36, // eaCoord = { xx*6
	0x20, 0x2b, 0x20, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x2c, 0x20, 0x79, 0x79, 0x20, 0x7d, 0x3b, 0x20, //  + _face, yy };
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x61, 0x72, 0x65, // const float4 are
	0x61, 0x20, 0x3d, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, // a = read_imagef(
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // _area, s_sampler
	0x2c, 0x20, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0a, 0x23, 0x65, // , areaCoord);.#e
	0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, // lse.    float4 f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x0a, 0x20, // ilterArea[6] =.
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, //    {.        { 0
	0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, // .0f, 0.0f, 0.0f,
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  0.0f },.
	0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, //  { 0.0f, 0.0f, 0
	0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, // .0f, 0.0f },.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, //      { 0.0f, 0.0
	0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, // f, 0.0f, 0.0f },
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, // .        { 0.0f,
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.0f, 0.0f, 0.0
	0x66, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, // f },.        { 0
	0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, // .0f, 0.0f, 0.0f,
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  0.0f },.
	0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, //  { 0.0f, 0.0f, 0
	0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, // .0f, 0.0f },.
	0x20, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, //  };.    determin
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x28, 0x66, 0x69, 0x6c, 0x74, // eFilterArea(filt
	0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x2c, 0x20, 0x74, 0x61, 0x70, 0x56, 0x65, 0x63, 0x2c, 0x20, // erArea, tapVec,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, // _filterSize);.
	0x20, 0x20, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x34, //   #define FLOAT4
	0x5f, 0x41, 0x52, 0x45, 0x41, 0x28, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x29, 0x20, 0x63, 0x6f, 0x6e, // _AREA(_face) con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x3d, // st float4 area =
	0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x5f, 0x66, 0x61, 0x63, //  filterArea[_fac
	0x65, 0x5d, 0x3b, 0x0a, 0x23, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x20, 0x2f, 0x2f, 0x43, 0x4d, 0x46, // e];.#endif //CMF
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, // T_COMPUTE_FILTER
	0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0a, 0x0a, 0x20, 0x20, // _AREA_ON_CPU..
	0x20, 0x20, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, //   #define PROCES
	0x53, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x28, 0x5f, 0x69, 0x69, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // S_FACE(_ii)
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, //              ..
	0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, //               ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x34, 0x5f, 0x41, //         FLOAT4_A
	0x52, 0x45, 0x41, 0x28, 0x5f, 0x69, 0x69, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // REA(_ii)
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, //                .
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ..        const
	0x69, 0x6e, 0x74, 0x34, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x63, 0x6f, // int4 minmax = co
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x34, 0x28, 0x61, 0x72, 0x65, 0x61, 0x2a, // nvert_int4(area*
	0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x3b, 0x20, 0x20, // _srcFaceSize);
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  ..        const
	0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x6d, 0x69, 0x6e, 0x58, 0x20, 0x3d, 0x20, //  int32_t minX =
	0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x78, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // minmax.x;
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, //   ..        cons
	0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x6d, 0x69, 0x6e, 0x59, 0x20, 0x3d, // t int32_t minY =
	0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x79, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  minmax.y;
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, //    ..        con
	0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x6d, 0x61, 0x78, 0x58, 0x20, // st int32_t maxX
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x7a, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, // = minmax.z;
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, //     ..        co
	0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x6d, 0x61, 0x78, 0x59, // nst int32_t maxY
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x77, 0x3b, 0x20, 0x20, 0x20, 0x20, //  = minmax.w;
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       ..
	0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x79, 0x79, 0x20, // for (int32_t yy
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x59, 0x3b, 0x20, 0x79, 0x79, 0x20, 0x3c, 0x20, 0x6d, 0x61, 0x78, // = minY; yy < max
	0x59, 0x3b, 0x20, 0x2b, 0x2b, 0x79, 0x79, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // Y; ++yy)
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        ..
	0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, //       for (int32
	0x5f, 0x74, 0x20, 0x78, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x58, 0x3b, 0x20, 0x78, 0x78, // _t xx = minX; xx
	0x20, 0x3c, 0x20, 0x6d, 0x61, 0x78, 0x58, 0x3b, 0x20, 0x2b, 0x2b, 0x78, 0x78, 0x29, 0x20, 0x20, //  < maxX; ++xx)
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //          ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        {
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, //           ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, //             cons
	0x74, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x7b, // t int2 coord = {
	0x20, 0x78, 0x78, 0x2c, 0x20, 0x79, 0x79, 0x20, 0x7d, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  xx, yy };
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, //            ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, //              con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // st float4 normal
	0x20, 0x3d, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, //  = read_imagef(_
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, // normalSolidAngle
	0x20, 0x23, 0x23, 0x20, 0x5f, 0x69, 0x69, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, //  ## _ii, s_sampl
	0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x20, 0x5c, 0x0a, 0x20, 0x20, // er, coord); ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, //               co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x70, 0x20, 0x3d, 0x20, 0x64, // nst float dp = d
	0x6f, 0x74, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2c, 0x20, 0x74, 0x61, 0x70, 0x56, 0x65, // ot(normal, tapVe
	0x63, 0x29, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // c);
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, //              ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, //                i
	0x66, 0x20, 0x28, 0x64, 0x70, 0x20, 0x3e, 0x3d, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, // f (dp >= _specul
	0x61, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // arAngle)
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, //               ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // {
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, //                .
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x73, 0x61, 0x6d, 0x70, //      float4 samp
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, // le = read_imagef
	0x28, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x20, 0x23, 0x23, 0x20, 0x5f, 0x69, 0x69, // (_srcData ## _ii
	0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, // , s_sampler, coo
	0x72, 0x64, 0x29, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // rd);
	0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x77, 0x20, 0x3d, //       sample.w =
	0x20, 0x31, 0x2e, 0x30, 0x66, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  1.0f;
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, //        colorWeig
	0x68, 0x74, 0x20, 0x2b, 0x3d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x20, 0x20, 0x20, // ht += sample
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x77, 0x20, //      * normal.w
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, //       * native_p
	0x6f, 0x77, 0x72, 0x28, 0x64, 0x70, 0x2c, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, // owr(dp, _specula
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x29, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // rPower);
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      ..
	0x20, 0x20, 0x20, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    }
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       ..
	0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // }
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, //        ..    }..
	0x20, 0x20, 0x20, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x43, 0x45, //     PROCESS_FACE
	0x28, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, // (0);.    PROCESS
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x28, 0x31, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x50, 0x52, // _FACE(1);.    PR
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x28, 0x32, 0x29, 0x3b, 0x0a, 0x20, // OCESS_FACE(2);.
	0x20, 0x20, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x28, //    PROCESS_FACE(
	0x33, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, // 3);.    PROCESS_
	0x46, 0x41, 0x43, 0x45, 0x28, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x50, 0x52, 0x4f, // FACE(4);.    PRO
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x28, 0x35, 0x29, 0x3b, 0x0a, 0x0a, 0x20, // CESS_FACE(5);..
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x20, 0x21, 0x3d, 0x20, 0x63, 0x6f, //    if (0.0 != co
	0x6c, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x29, 0x0a, 0x20, 0x20, 0x20, // lorWeight.w).
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, //  {.        color
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x2f, 0x3d, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x57, // Weight /= colorW
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, // eight.w;.    }..
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x64, //     const int2 d
	0x73, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x78, 0x78, 0x2c, 0x20, 0x79, 0x79, 0x20, 0x7d, 0x3b, // st = { xx, yy };
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, // .    write_image
	0x66, 0x28, 0x5f, 0x6f, 0x75, 0x74, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6c, // f(_out, dst, col
	0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x2f, 0x2a, // orWeight);.}../*
	0x20, 0x76, 0x69, 0x6d, 0x3a, 0x20, 0x73, 0x65, 0x74, 0x20, 0x73, 0x77, 0x3d, 0x34, 0x20, 0x74, //  vim: set sw=4 t
	0x73, 0x3d, 0x34, 0x20, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x74, 0x61, 0x62, 0x3a, 0x20, 0x2a, // s=4 expandtab: *
	0x2f, 0x0a,                                                                                     // /.
};
