/*
OpenGL API loader. Choice of public domain or MIT-0. See license statements at the end of this file.
glbind - v4.6.11 - 2021-04-09

David Reid - davidreidsoftware@gmail.com
*/

#ifndef GLBIND_H
#define GLBIND_H

#ifdef __cplusplus
extern "C" {
#endif

    /* For platform detection, I'm just assuming GLX if it's not Win32. Happy to look at making this more flexible, especially when it comes to GLES. */
#if defined(_WIN32)
#define GLBIND_WGL
#else
#define GLBIND_GLX
#endif

/*
The official OpenGL headers have a dependency on a header called khrplatform.h. From what I can see it's mainly just for sized types. Since glbind is a
single header, and that we can't just copy-and-paste the contents of khrplatform.h due to licensing, we need to do our own sized type declarations.
*/
#ifndef __khrplatform_h_
#include <stddef.h> /* For size_t. */
#ifdef _MSC_VER
#if defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlanguage-extension-token"
#pragma GCC diagnostic ignored "-Wc++11-long-long"
#endif
    typedef   signed __int8  khronos_int8_t;
    typedef unsigned __int8  khronos_uint8_t;
    typedef   signed __int16 khronos_int16_t;
    typedef unsigned __int16 khronos_uint16_t;
    typedef   signed __int32 khronos_int32_t;
    typedef unsigned __int32 khronos_uint32_t;
    typedef   signed __int64 khronos_int64_t;
    typedef unsigned __int64 khronos_uint64_t;
#if defined(__clang__)
#pragma GCC diagnostic pop
#endif
#else
#define MA_HAS_STDINT
#include <stdint.h>
    typedef int8_t   khronos_int8_t;
    typedef uint8_t  khronos_uint8_t;
    typedef int16_t  khronos_int16_t;
    typedef uint16_t khronos_uint16_t;
    typedef int32_t  khronos_int32_t;
    typedef uint32_t khronos_uint32_t;
    typedef int64_t  khronos_int64_t;
    typedef uint64_t khronos_uint64_t;
#endif

#ifdef MA_HAS_STDINT
    typedef uintptr_t khronos_uintptr_t;
    typedef intptr_t  khronos_intptr_t;
    typedef uintptr_t khronos_usize_t;
    typedef intptr_t  khronos_ssize_t;
#else
#if defined(_WIN32)
#if defined(_WIN64)
    typedef khronos_uint64_t khronos_uintptr_t;
    typedef khronos_int64_t  khronos_intptr_t;
    typedef khronos_uint64_t khronos_usize_t;
    typedef khronos_int64_t  khronos_ssize_t;
#else
    typedef khronos_uint32_t khronos_uintptr_t;
    typedef khronos_int32_t  khronos_intptr_t;
    typedef khronos_uint32_t khronos_usize_t;
    typedef khronos_int32_t  khronos_ssize_t;
#endif
#elif defined(__GNUC__)
#if defined(__LP64__)
    typedef khronos_uint64_t khronos_uintptr_t;
    typedef khronos_int64_t  khronos_intptr_t;
    typedef khronos_uint64_t khronos_usize_t;
    typedef khronos_int64_t  khronos_ssize_t;
#else
    typedef khronos_uint32_t khronos_uintptr_t;
    typedef khronos_int32_t  khronos_intptr_t;
    typedef khronos_uint32_t khronos_usize_t;
    typedef khronos_int32_t  khronos_ssize_t;
#endif
#else
    typedef khronos_uint64_t khronos_uintptr_t;
    typedef khronos_int64_t  khronos_intptr_t;
    typedef khronos_uint64_t khronos_usize_t;   /* Fallback. */
    typedef khronos_int64_t  khronos_ssize_t;
#endif
#endif
    typedef float khronos_float_t;
#endif  /* __khrplatform_h_ */

    /* Platform headers. */
#if defined(GLBIND_WGL)
#include <windows.h>    /* Can we remove this dependency? */
#endif
#if defined(GLBIND_GLX)
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#endif

/*
The official OpenGL headers have traditionally defined their APIs with APIENTRY, APIENTRYP and GLAPI. I'm including these just in case
some program wants to use them.
*/
#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif
#ifndef GLAPI
#define GLAPI extern
#endif



#ifndef GL_VERSION_1_0
#define GL_VERSION_1_0 1
    typedef void GLvoid;
    typedef unsigned int GLenum;
    typedef khronos_float_t GLfloat;
    typedef int GLint;
    typedef int GLsizei;
    typedef unsigned int GLbitfield;
    typedef double GLdouble;
    typedef unsigned int GLuint;
    typedef unsigned char GLboolean;
    typedef khronos_uint8_t GLubyte;
    typedef khronos_int8_t GLbyte;
    typedef khronos_int16_t GLshort;
    typedef khronos_uint16_t GLushort;
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_QUADS 0x0007
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_REPEAT 0x2901
#define GL_CURRENT_BIT 0x00000001
#define GL_POINT_BIT 0x00000002
#define GL_LINE_BIT 0x00000004
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_LIGHTING_BIT 0x00000040
#define GL_FOG_BIT 0x00000080
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_VIEWPORT_BIT 0x00000800
#define GL_TRANSFORM_BIT 0x00001000
#define GL_ENABLE_BIT 0x00002000
#define GL_HINT_BIT 0x00008000
#define GL_EVAL_BIT 0x00010000
#define GL_LIST_BIT 0x00020000
#define GL_TEXTURE_BIT 0x00040000
#define GL_SCISSOR_BIT 0x00080000
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_QUAD_STRIP 0x0008
#define GL_POLYGON 0x0009
#define GL_ACCUM 0x0100
#define GL_LOAD 0x0101
#define GL_RETURN 0x0102
#define GL_MULT 0x0103
#define GL_ADD 0x0104
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_2D 0x0600
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_POINT_TOKEN 0x0701
#define GL_LINE_TOKEN 0x0702
#define GL_POLYGON_TOKEN 0x0703
#define GL_BITMAP_TOKEN 0x0704
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_COEFF 0x0A00
#define GL_ORDER 0x0A01
#define GL_DOMAIN 0x0A02
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_POINT_SMOOTH 0x0B10
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LIST_MODE 0x0B30
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_LIST_BASE 0x0B32
#define GL_LIST_INDEX 0x0B33
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_EDGE_FLAG 0x0B43
#define GL_LIGHTING 0x0B50
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_SHADE_MODEL 0x0B54
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATERIAL 0x0B57
#define GL_FOG 0x0B60
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_START 0x0B63
#define GL_FOG_END 0x0B64
#define GL_FOG_MODE 0x0B65
#define GL_FOG_COLOR 0x0B66
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_MATRIX_MODE 0x0BA0
#define GL_NORMALIZE 0x0BA1
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_LOGIC_OP 0x0BF1
#define GL_AUX_BUFFERS 0x0C00
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INDEX_MODE 0x0C30
#define GL_RGBA_MODE 0x0C31
#define GL_RENDER_MODE 0x0C40
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_FOG_HINT 0x0C54
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_OFFSET 0x0D13
#define GL_RED_SCALE 0x0D14
#define GL_RED_BIAS 0x0D15
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_GREEN_SCALE 0x0D18
#define GL_GREEN_BIAS 0x0D19
#define GL_BLUE_SCALE 0x0D1A
#define GL_BLUE_BIAS 0x0D1B
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_INDEX_BITS 0x0D51
#define GL_RED_BITS 0x0D52
#define GL_GREEN_BITS 0x0D53
#define GL_BLUE_BITS 0x0D54
#define GL_ALPHA_BITS 0x0D55
#define GL_DEPTH_BITS 0x0D56
#define GL_STENCIL_BITS 0x0D57
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_BORDER 0x1005
#define GL_AMBIENT 0x1200
#define GL_DIFFUSE 0x1201
#define GL_SPECULAR 0x1202
#define GL_POSITION 0x1203
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPOT_CUTOFF 0x1206
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_2_BYTES 0x1407
#define GL_3_BYTES 0x1408
#define GL_4_BYTES 0x1409
#define GL_EMISSION 0x1600
#define GL_SHININESS 0x1601
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_COLOR_INDEXES 0x1603
#define GL_MODELVIEW 0x1700
#define GL_PROJECTION 0x1701
#define GL_COLOR_INDEX 0x1900
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_BITMAP 0x1A00
#define GL_RENDER 0x1C00
#define GL_FEEDBACK 0x1C01
#define GL_SELECT 0x1C02
#define GL_FLAT 0x1D00
#define GL_SMOOTH 0x1D01
#define GL_S 0x2000
#define GL_T 0x2001
#define GL_R 0x2002
#define GL_Q 0x2003
#define GL_MODULATE 0x2100
#define GL_DECAL 0x2101
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV 0x2300
#define GL_EYE_LINEAR 0x2400
#define GL_OBJECT_LINEAR 0x2401
#define GL_SPHERE_MAP 0x2402
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_OBJECT_PLANE 0x2501
#define GL_EYE_PLANE 0x2502
#define GL_CLAMP 0x2900
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
    typedef void (APIENTRYP PFNGLCULLFACEPROC)(GLenum mode);
    typedef void (APIENTRYP PFNGLFRONTFACEPROC)(GLenum mode);
    typedef void (APIENTRYP PFNGLHINTPROC)(GLenum target, GLenum mode);
    typedef void (APIENTRYP PFNGLLINEWIDTHPROC)(GLfloat width);
    typedef void (APIENTRYP PFNGLPOINTSIZEPROC)(GLfloat size);
    typedef void (APIENTRYP PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
    typedef void (APIENTRYP PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLDRAWBUFFERPROC)(GLenum buf);
    typedef void (APIENTRYP PFNGLCLEARPROC)(GLbitfield mask);
    typedef void (APIENTRYP PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    typedef void (APIENTRYP PFNGLCLEARSTENCILPROC)(GLint s);
    typedef void (APIENTRYP PFNGLCLEARDEPTHPROC)(GLdouble depth);
    typedef void (APIENTRYP PFNGLSTENCILMASKPROC)(GLuint mask);
    typedef void (APIENTRYP PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
    typedef void (APIENTRYP PFNGLDEPTHMASKPROC)(GLboolean flag);
    typedef void (APIENTRYP PFNGLDISABLEPROC)(GLenum cap);
    typedef void (APIENTRYP PFNGLENABLEPROC)(GLenum cap);
    typedef void (APIENTRYP PFNGLFINISHPROC)(void);
    typedef void (APIENTRYP PFNGLFLUSHPROC)(void);
    typedef void (APIENTRYP PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
    typedef void (APIENTRYP PFNGLLOGICOPPROC)(GLenum opcode);
    typedef void (APIENTRYP PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
    typedef void (APIENTRYP PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
    typedef void (APIENTRYP PFNGLDEPTHFUNCPROC)(GLenum func);
    typedef void (APIENTRYP PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLREADBUFFERPROC)(GLenum src);
    typedef void (APIENTRYP PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
    typedef void (APIENTRYP PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean* data);
    typedef void (APIENTRYP PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble* data);
    typedef GLenum(APIENTRYP PFNGLGETERRORPROC)(void);
    typedef void (APIENTRYP PFNGLGETFLOATVPROC)(GLenum pname, GLfloat* data);
    typedef void (APIENTRYP PFNGLGETINTEGERVPROC)(GLenum pname, GLint* data);
    typedef const GLubyte* (APIENTRYP PFNGLGETSTRINGPROC)(GLenum name);
    typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
    typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint* params);
    typedef GLboolean(APIENTRYP PFNGLISENABLEDPROC)(GLenum cap);
    typedef void (APIENTRYP PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
    typedef void (APIENTRYP PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
    typedef void (APIENTRYP PFNGLENDLISTPROC)(void);
    typedef void (APIENTRYP PFNGLCALLLISTPROC)(GLuint list);
    typedef void (APIENTRYP PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void* lists);
    typedef void (APIENTRYP PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
    typedef GLuint(APIENTRYP PFNGLGENLISTSPROC)(GLsizei range);
    typedef void (APIENTRYP PFNGLLISTBASEPROC)(GLuint base);
    typedef void (APIENTRYP PFNGLBEGINPROC)(GLenum mode);
    typedef void (APIENTRYP PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);
    typedef void (APIENTRYP PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
    typedef void (APIENTRYP PFNGLCOLOR3BVPROC)(const GLbyte* v);
    typedef void (APIENTRYP PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
    typedef void (APIENTRYP PFNGLCOLOR3DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
    typedef void (APIENTRYP PFNGLCOLOR3FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
    typedef void (APIENTRYP PFNGLCOLOR3IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
    typedef void (APIENTRYP PFNGLCOLOR3SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
    typedef void (APIENTRYP PFNGLCOLOR3UBVPROC)(const GLubyte* v);
    typedef void (APIENTRYP PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
    typedef void (APIENTRYP PFNGLCOLOR3UIVPROC)(const GLuint* v);
    typedef void (APIENTRYP PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
    typedef void (APIENTRYP PFNGLCOLOR3USVPROC)(const GLushort* v);
    typedef void (APIENTRYP PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
    typedef void (APIENTRYP PFNGLCOLOR4BVPROC)(const GLbyte* v);
    typedef void (APIENTRYP PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
    typedef void (APIENTRYP PFNGLCOLOR4DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    typedef void (APIENTRYP PFNGLCOLOR4FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
    typedef void (APIENTRYP PFNGLCOLOR4IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
    typedef void (APIENTRYP PFNGLCOLOR4SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
    typedef void (APIENTRYP PFNGLCOLOR4UBVPROC)(const GLubyte* v);
    typedef void (APIENTRYP PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
    typedef void (APIENTRYP PFNGLCOLOR4UIVPROC)(const GLuint* v);
    typedef void (APIENTRYP PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
    typedef void (APIENTRYP PFNGLCOLOR4USVPROC)(const GLushort* v);
    typedef void (APIENTRYP PFNGLEDGEFLAGPROC)(GLboolean flag);
    typedef void (APIENTRYP PFNGLEDGEFLAGVPROC)(const GLboolean* flag);
    typedef void (APIENTRYP PFNGLENDPROC)(void);
    typedef void (APIENTRYP PFNGLINDEXDPROC)(GLdouble c);
    typedef void (APIENTRYP PFNGLINDEXDVPROC)(const GLdouble* c);
    typedef void (APIENTRYP PFNGLINDEXFPROC)(GLfloat c);
    typedef void (APIENTRYP PFNGLINDEXFVPROC)(const GLfloat* c);
    typedef void (APIENTRYP PFNGLINDEXIPROC)(GLint c);
    typedef void (APIENTRYP PFNGLINDEXIVPROC)(const GLint* c);
    typedef void (APIENTRYP PFNGLINDEXSPROC)(GLshort c);
    typedef void (APIENTRYP PFNGLINDEXSVPROC)(const GLshort* c);
    typedef void (APIENTRYP PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
    typedef void (APIENTRYP PFNGLNORMAL3BVPROC)(const GLbyte* v);
    typedef void (APIENTRYP PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
    typedef void (APIENTRYP PFNGLNORMAL3DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
    typedef void (APIENTRYP PFNGLNORMAL3FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
    typedef void (APIENTRYP PFNGLNORMAL3IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
    typedef void (APIENTRYP PFNGLNORMAL3SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLRASTERPOS2DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
    typedef void (APIENTRYP PFNGLRASTERPOS2FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
    typedef void (APIENTRYP PFNGLRASTERPOS2IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
    typedef void (APIENTRYP PFNGLRASTERPOS2SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLRASTERPOS3DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLRASTERPOS3FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
    typedef void (APIENTRYP PFNGLRASTERPOS3IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
    typedef void (APIENTRYP PFNGLRASTERPOS3SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLRASTERPOS4DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLRASTERPOS4FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
    typedef void (APIENTRYP PFNGLRASTERPOS4IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
    typedef void (APIENTRYP PFNGLRASTERPOS4SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
    typedef void (APIENTRYP PFNGLRECTDVPROC)(const GLdouble* v1, const GLdouble* v2);
    typedef void (APIENTRYP PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
    typedef void (APIENTRYP PFNGLRECTFVPROC)(const GLfloat* v1, const GLfloat* v2);
    typedef void (APIENTRYP PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
    typedef void (APIENTRYP PFNGLRECTIVPROC)(const GLint* v1, const GLint* v2);
    typedef void (APIENTRYP PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
    typedef void (APIENTRYP PFNGLRECTSVPROC)(const GLshort* v1, const GLshort* v2);
    typedef void (APIENTRYP PFNGLTEXCOORD1DPROC)(GLdouble s);
    typedef void (APIENTRYP PFNGLTEXCOORD1DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLTEXCOORD1FPROC)(GLfloat s);
    typedef void (APIENTRYP PFNGLTEXCOORD1FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLTEXCOORD1IPROC)(GLint s);
    typedef void (APIENTRYP PFNGLTEXCOORD1IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLTEXCOORD1SPROC)(GLshort s);
    typedef void (APIENTRYP PFNGLTEXCOORD1SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
    typedef void (APIENTRYP PFNGLTEXCOORD2DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
    typedef void (APIENTRYP PFNGLTEXCOORD2FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
    typedef void (APIENTRYP PFNGLTEXCOORD2IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
    typedef void (APIENTRYP PFNGLTEXCOORD2SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
    typedef void (APIENTRYP PFNGLTEXCOORD3DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
    typedef void (APIENTRYP PFNGLTEXCOORD3FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
    typedef void (APIENTRYP PFNGLTEXCOORD3IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
    typedef void (APIENTRYP PFNGLTEXCOORD3SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
    typedef void (APIENTRYP PFNGLTEXCOORD4DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
    typedef void (APIENTRYP PFNGLTEXCOORD4FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
    typedef void (APIENTRYP PFNGLTEXCOORD4IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
    typedef void (APIENTRYP PFNGLTEXCOORD4SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLVERTEX2DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
    typedef void (APIENTRYP PFNGLVERTEX2FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEX2IPROC)(GLint x, GLint y);
    typedef void (APIENTRYP PFNGLVERTEX2IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
    typedef void (APIENTRYP PFNGLVERTEX2SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLVERTEX3DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLVERTEX3FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
    typedef void (APIENTRYP PFNGLVERTEX3IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
    typedef void (APIENTRYP PFNGLVERTEX3SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLVERTEX4DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLVERTEX4FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
    typedef void (APIENTRYP PFNGLVERTEX4IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
    typedef void (APIENTRYP PFNGLVERTEX4SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble* equation);
    typedef void (APIENTRYP PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
    typedef void (APIENTRYP PFNGLFOGFPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLFOGFVPROC)(GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLFOGIPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLFOGIVPROC)(GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
    typedef void (APIENTRYP PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLPOLYGONSTIPPLEPROC)(const GLubyte* mask);
    typedef void (APIENTRYP PFNGLSHADEMODELPROC)(GLenum mode);
    typedef void (APIENTRYP PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
    typedef void (APIENTRYP PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble* params);
    typedef void (APIENTRYP PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat* buffer);
    typedef void (APIENTRYP PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint* buffer);
    typedef GLint(APIENTRYP PFNGLRENDERMODEPROC)(GLenum mode);
    typedef void (APIENTRYP PFNGLINITNAMESPROC)(void);
    typedef void (APIENTRYP PFNGLLOADNAMEPROC)(GLuint name);
    typedef void (APIENTRYP PFNGLPASSTHROUGHPROC)(GLfloat token);
    typedef void (APIENTRYP PFNGLPOPNAMEPROC)(void);
    typedef void (APIENTRYP PFNGLPUSHNAMEPROC)(GLuint name);
    typedef void (APIENTRYP PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    typedef void (APIENTRYP PFNGLCLEARINDEXPROC)(GLfloat c);
    typedef void (APIENTRYP PFNGLINDEXMASKPROC)(GLuint mask);
    typedef void (APIENTRYP PFNGLACCUMPROC)(GLenum op, GLfloat value);
    typedef void (APIENTRYP PFNGLPOPATTRIBPROC)(void);
    typedef void (APIENTRYP PFNGLPUSHATTRIBPROC)(GLbitfield mask);
    typedef void (APIENTRYP PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
    typedef void (APIENTRYP PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
    typedef void (APIENTRYP PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
    typedef void (APIENTRYP PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
    typedef void (APIENTRYP PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
    typedef void (APIENTRYP PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
    typedef void (APIENTRYP PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
    typedef void (APIENTRYP PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
    typedef void (APIENTRYP PFNGLEVALCOORD1DPROC)(GLdouble u);
    typedef void (APIENTRYP PFNGLEVALCOORD1DVPROC)(const GLdouble* u);
    typedef void (APIENTRYP PFNGLEVALCOORD1FPROC)(GLfloat u);
    typedef void (APIENTRYP PFNGLEVALCOORD1FVPROC)(const GLfloat* u);
    typedef void (APIENTRYP PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
    typedef void (APIENTRYP PFNGLEVALCOORD2DVPROC)(const GLdouble* u);
    typedef void (APIENTRYP PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
    typedef void (APIENTRYP PFNGLEVALCOORD2FVPROC)(const GLfloat* u);
    typedef void (APIENTRYP PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
    typedef void (APIENTRYP PFNGLEVALPOINT1PROC)(GLint i);
    typedef void (APIENTRYP PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
    typedef void (APIENTRYP PFNGLEVALPOINT2PROC)(GLint i, GLint j);
    typedef void (APIENTRYP PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
    typedef void (APIENTRYP PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
    typedef void (APIENTRYP PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat* values);
    typedef void (APIENTRYP PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint* values);
    typedef void (APIENTRYP PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort* values);
    typedef void (APIENTRYP PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
    typedef void (APIENTRYP PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble* equation);
    typedef void (APIENTRYP PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble* v);
    typedef void (APIENTRYP PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat* v);
    typedef void (APIENTRYP PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint* v);
    typedef void (APIENTRYP PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat* values);
    typedef void (APIENTRYP PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint* values);
    typedef void (APIENTRYP PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort* values);
    typedef void (APIENTRYP PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte* mask);
    typedef void (APIENTRYP PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint* params);
    typedef GLboolean(APIENTRYP PFNGLISLISTPROC)(GLuint list);
    typedef void (APIENTRYP PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    typedef void (APIENTRYP PFNGLLOADIDENTITYPROC)(void);
    typedef void (APIENTRYP PFNGLLOADMATRIXFPROC)(const GLfloat* m);
    typedef void (APIENTRYP PFNGLLOADMATRIXDPROC)(const GLdouble* m);
    typedef void (APIENTRYP PFNGLMATRIXMODEPROC)(GLenum mode);
    typedef void (APIENTRYP PFNGLMULTMATRIXFPROC)(const GLfloat* m);
    typedef void (APIENTRYP PFNGLMULTMATRIXDPROC)(const GLdouble* m);
    typedef void (APIENTRYP PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    typedef void (APIENTRYP PFNGLPOPMATRIXPROC)(void);
    typedef void (APIENTRYP PFNGLPUSHMATRIXPROC)(void);
    typedef void (APIENTRYP PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
#endif /* GL_VERSION_1_0 */

#ifndef GL_VERSION_1_1
#define GL_VERSION_1_1 1
    typedef khronos_float_t GLclampf;
    typedef double GLclampd;
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DOUBLE 0x140A
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_VERTEX_ARRAY 0x8074
#define GL_NORMAL_ARRAY 0x8075
#define GL_COLOR_ARRAY 0x8076
#define GL_INDEX_ARRAY 0x8077
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_INTENSITY 0x8049
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_C3F_V3F 0x2A24
#define GL_N3F_V3F 0x2A25
#define GL_C4F_N3F_V3F 0x2A26
#define GL_T2F_V3F 0x2A27
#define GL_T4F_V4F 0x2A28
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T4F_C4F_N3F_V4F 0x2A2D
    typedef void (APIENTRYP PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
    typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices);
    typedef void (APIENTRYP PFNGLGETPOINTERVPROC)(GLenum pname, void** params);
    typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
    typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
    typedef void (APIENTRYP PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint* textures);
    typedef void (APIENTRYP PFNGLGENTEXTURESPROC)(GLsizei n, GLuint* textures);
    typedef GLboolean(APIENTRYP PFNGLISTEXTUREPROC)(GLuint texture);
    typedef void (APIENTRYP PFNGLARRAYELEMENTPROC)(GLint i);
    typedef void (APIENTRYP PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
    typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLENABLECLIENTSTATEPROC)(GLenum array);
    typedef void (APIENTRYP PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
    typedef GLboolean(APIENTRYP PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint* textures, GLboolean* residences);
    typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint* textures, const GLfloat* priorities);
    typedef void (APIENTRYP PFNGLINDEXUBPROC)(GLubyte c);
    typedef void (APIENTRYP PFNGLINDEXUBVPROC)(const GLubyte* c);
    typedef void (APIENTRYP PFNGLPOPCLIENTATTRIBPROC)(void);
    typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
#endif /* GL_VERSION_1_1 */

#ifndef GL_VERSION_1_2
#define GL_VERSION_1_2 1
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_RESCALE_NORMAL 0x803A
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_SINGLE_COLOR 0x81F9
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
    typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices);
    typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#endif /* GL_VERSION_1_2 */

#ifndef GL_VERSION_1_3
#define GL_VERSION_1_3 1
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_NORMAL_MAP 0x8511
#define GL_REFLECTION_MAP 0x8512
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMBINE 0x8570
#define GL_COMBINE_RGB 0x8571
#define GL_COMBINE_ALPHA 0x8572
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE2_RGB 0x8582
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE2_ALPHA 0x858A
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND2_RGB 0x8592
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND2_ALPHA 0x859A
#define GL_RGB_SCALE 0x8573
#define GL_ADD_SIGNED 0x8574
#define GL_INTERPOLATE 0x8575
#define GL_SUBTRACT 0x84E7
#define GL_CONSTANT 0x8576
#define GL_PRIMARY_COLOR 0x8577
#define GL_PREVIOUS 0x8578
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
    typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC)(GLenum texture);
    typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void* img);
    typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort* v);
    typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat* m);
    typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble* m);
    typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat* m);
    typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble* m);
#endif /* GL_VERSION_1_3 */

#ifndef GL_VERSION_1_4
#define GL_VERSION_1_4 1
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_INCR_WRAP 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORDINATE 0x8451
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_COLOR_SUM 0x8458
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_EQUATION 0x8009
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_MIN 0x8007
#define GL_MAX 0x8008
    typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount);
    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount);
    typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLFOGCOORDFPROC)(GLfloat coord);
    typedef void (APIENTRYP PFNGLFOGCOORDFVPROC)(const GLfloat* coord);
    typedef void (APIENTRYP PFNGLFOGCOORDDPROC)(GLdouble coord);
    typedef void (APIENTRYP PFNGLFOGCOORDDVPROC)(const GLdouble* coord);
    typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC)(const GLubyte* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC)(const GLuint* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC)(const GLushort* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC)(GLenum mode);
#endif /* GL_VERSION_1_4 */

#ifndef GL_VERSION_1_5
#define GL_VERSION_1_5 1
    typedef khronos_ssize_t GLsizeiptr;
    typedef khronos_intptr_t GLintptr;
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_CURRENT_QUERY 0x8865
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_COORD 0x8451
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_RGB 0x8582
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC2_ALPHA 0x858A
    typedef void (APIENTRYP PFNGLGENQUERIESPROC)(GLsizei n, GLuint* ids);
    typedef void (APIENTRYP PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint* ids);
    typedef GLboolean(APIENTRYP PFNGLISQUERYPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
    typedef void (APIENTRYP PFNGLENDQUERYPROC)(GLenum target);
    typedef void (APIENTRYP PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint* params);
    typedef void (APIENTRYP PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
    typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint* buffers);
    typedef void (APIENTRYP PFNGLGENBUFFERSPROC)(GLsizei n, GLuint* buffers);
    typedef GLboolean(APIENTRYP PFNGLISBUFFERPROC)(GLuint buffer);
    typedef void (APIENTRYP PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void* data, GLenum usage);
    typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
    typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void* data);
    typedef void* (APIENTRYP PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
    typedef GLboolean(APIENTRYP PFNGLUNMAPBUFFERPROC)(GLenum target);
    typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void** params);
#endif /* GL_VERSION_1_5 */

#ifndef GL_VERSION_2_0
#define GL_VERSION_2_0 1
    typedef char GLchar;
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_POINT_SPRITE 0x8861
#define GL_COORD_REPLACE 0x8862
#define GL_MAX_TEXTURE_COORDS 0x8871
    typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
    typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum* bufs);
    typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
    typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
    typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
    typedef void (APIENTRYP PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
    typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar* name);
    typedef void (APIENTRYP PFNGLCOMPILESHADERPROC)(GLuint shader);
    typedef GLuint(APIENTRYP PFNGLCREATEPROGRAMPROC)(void);
    typedef GLuint(APIENTRYP PFNGLCREATESHADERPROC)(GLenum type);
    typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC)(GLuint program);
    typedef void (APIENTRYP PFNGLDELETESHADERPROC)(GLuint shader);
    typedef void (APIENTRYP PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
    typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
    typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
    typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
    typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
    typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
    typedef GLint(APIENTRYP PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar* name);
    typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
    typedef void (APIENTRYP PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
    typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
    typedef GLint(APIENTRYP PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar* name);
    typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void** pointer);
    typedef GLboolean(APIENTRYP PFNGLISPROGRAMPROC)(GLuint program);
    typedef GLboolean(APIENTRYP PFNGLISSHADERPROC)(GLuint shader);
    typedef void (APIENTRYP PFNGLLINKPROGRAMPROC)(GLuint program);
    typedef void (APIENTRYP PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length);
    typedef void (APIENTRYP PFNGLUSEPROGRAMPROC)(GLuint program);
    typedef void (APIENTRYP PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
    typedef void (APIENTRYP PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
    typedef void (APIENTRYP PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    typedef void (APIENTRYP PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    typedef void (APIENTRYP PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
    typedef void (APIENTRYP PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
    typedef void (APIENTRYP PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
    typedef void (APIENTRYP PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    typedef void (APIENTRYP PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC)(GLuint program);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
#endif /* GL_VERSION_2_0 */

#ifndef GL_VERSION_2_1
#define GL_VERSION_2_1 1
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
#endif /* GL_VERSION_2_1 */

#ifndef GL_VERSION_3_0
#define GL_VERSION_3_0 1
    typedef khronos_uint16_t GLhalf;
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_RGBA32F 0x8814
#define GL_RGB32F 0x8815
#define GL_RGBA16F 0x881A
#define GL_RGB16F 0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_RGB9_E5 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGBA16UI 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGBA8UI 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGBA32I 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGBA16I 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGBA8I 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RED_INTEGER 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_RGB_INTEGER 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_INDEX 0x8222
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_HALF_FLOAT 0x140B
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_RG 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R16 0x822A
#define GL_RG8 0x822B
#define GL_RG16 0x822C
#define GL_R16F 0x822D
#define GL_R32F 0x822E
#define GL_RG16F 0x822F
#define GL_RG32F 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_ALPHA_INTEGER 0x8D97
    typedef void (APIENTRYP PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
    typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean* data);
    typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint* data);
    typedef void (APIENTRYP PFNGLENABLEIPROC)(GLenum target, GLuint index);
    typedef void (APIENTRYP PFNGLDISABLEIPROC)(GLenum target, GLuint index);
    typedef GLboolean(APIENTRYP PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
    typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
    typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC)(void);
    typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar* const* varyings, GLenum bufferMode);
    typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
    typedef void (APIENTRYP PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
    typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
    typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC)(void);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint* params);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort* v);
    typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint* params);
    typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar* name);
    typedef GLint(APIENTRYP PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar* name);
    typedef void (APIENTRYP PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
    typedef void (APIENTRYP PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
    typedef void (APIENTRYP PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
    typedef void (APIENTRYP PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint* params);
    typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint* params);
    typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint* value);
    typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint* value);
    typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat* value);
    typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
    typedef const GLubyte* (APIENTRYP PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
    typedef GLboolean(APIENTRYP PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
    typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
    typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint* renderbuffers);
    typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
    typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef GLboolean(APIENTRYP PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
    typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
    typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint* framebuffers);
    typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
    typedef GLenum(APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC)(GLenum target);
    typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
    typedef void* (APIENTRYP PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
    typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
    typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC)(GLuint array);
    typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint* arrays);
    typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
    typedef GLboolean(APIENTRYP PFNGLISVERTEXARRAYPROC)(GLuint array);
#endif /* GL_VERSION_3_0 */

#ifndef GL_VERSION_3_1
#define GL_VERSION_3_1 1
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX 0xFFFFFFFF
    typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount);
    typedef void (APIENTRYP PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
    typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
    typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar* const* uniformNames, GLuint* uniformIndices);
    typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
    typedef GLuint(APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar* uniformBlockName);
    typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
    typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif /* GL_VERSION_3_1 */

#ifndef GL_VERSION_3_2
#define GL_VERSION_3_2 1
    typedef struct __GLsync* GLsync;
    typedef khronos_uint64_t GLuint64;
    typedef khronos_int64_t GLint64;
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_DEPTH_CLAMP 0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_SIGNALED 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
    typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex);
    typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex);
    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex);
    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount, const GLint* basevertex);
    typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
    typedef GLsync(APIENTRYP PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
    typedef GLboolean(APIENTRYP PFNGLISSYNCPROC)(GLsync sync);
    typedef void (APIENTRYP PFNGLDELETESYNCPROC)(GLsync sync);
    typedef GLenum(APIENTRYP PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
    typedef void (APIENTRYP PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
    typedef void (APIENTRYP PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64* data);
    typedef void (APIENTRYP PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei* length, GLint* values);
    typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64* data);
    typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64* params);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat* val);
    typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
#endif /* GL_VERSION_3_2 */

#ifndef GL_VERSION_3_3
#define GL_VERSION_3_3 1
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_SRC1_COLOR 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_SAMPLER_BINDING 0x8919
#define GL_RGB10_A2UI 0x906F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIMESTAMP 0x8E28
#define GL_INT_2_10_10_10_REV 0x8D9F
    typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name);
    typedef GLint(APIENTRYP PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar* name);
    typedef void (APIENTRYP PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint* samplers);
    typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint* samplers);
    typedef GLboolean(APIENTRYP PFNGLISSAMPLERPROC)(GLuint sampler);
    typedef void (APIENTRYP PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint* param);
    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat* param);
    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint* param);
    typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint* param);
    typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint* params);
    typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
    typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64* params);
    typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64* params);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
    typedef void (APIENTRYP PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
    typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint* value);
    typedef void (APIENTRYP PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
    typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint* value);
    typedef void (APIENTRYP PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
    typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint* value);
    typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
    typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint* coords);
    typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
    typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint* coords);
    typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
    typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint* coords);
    typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
    typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint* coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
    typedef void (APIENTRYP PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
    typedef void (APIENTRYP PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint* coords);
    typedef void (APIENTRYP PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
    typedef void (APIENTRYP PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint* color);
    typedef void (APIENTRYP PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
    typedef void (APIENTRYP PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint* color);
    typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
    typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint* color);
#endif /* GL_VERSION_3_3 */

#ifndef GL_VERSION_4_0
#define GL_VERSION_4_0 1
#define GL_SAMPLE_SHADING 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_PATCHES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_QUADS 0x0007
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_VERTEX_STREAMS 0x8E71
    typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
    typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
    typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    typedef void (APIENTRYP PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
    typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void* indirect);
    typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void* indirect);
    typedef void (APIENTRYP PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
    typedef void (APIENTRYP PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble* params);
    typedef GLint(APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar* name);
    typedef GLuint(APIENTRYP PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar* name);
    typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
    typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
    typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
    typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint* indices);
    typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint* values);
    typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
    typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat* values);
    typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
    typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint* ids);
    typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint* ids);
    typedef GLboolean(APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
    typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
    typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
    typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
    typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
    typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
    typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint* params);
#endif /* GL_VERSION_4_0 */

#ifndef GL_VERSION_4_1
#define GL_VERSION_4_1 1
#define GL_FIXED 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RGB565 0x8D62
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
    typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC)(void);
    typedef void (APIENTRYP PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length);
    typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
    typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
    typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC)(GLfloat d);
    typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
    typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length);
    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
    typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
    typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
    typedef GLuint(APIENTRYP PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar* const* strings);
    typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
    typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint* pipelines);
    typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint* pipelines);
    typedef GLboolean(APIENTRYP PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
    typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
    typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble* params);
    typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
    typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint* v);
    typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble* v);
    typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
    typedef void (APIENTRYP PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat* data);
    typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble* data);
#endif /* GL_VERSION_4_1 */

#ifndef GL_VERSION_4_2
#define GL_VERSION_4_2 1
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
    typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLuint baseinstance);
    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
    typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint* params);
    typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
    typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
    typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
    typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
    typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
#endif /* GL_VERSION_4_2 */

#ifndef GL_VERSION_4_3
#define GL_VERSION_4_3 1
    typedef void (APIENTRY* GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_BUFFER 0x82E0
#define GL_SHADER 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_VERTEX_ARRAY 0x8074
#define GL_QUERY 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_SAMPLER 0x82E6
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_IS_PER_PATCH 0x92E7
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_DISPLAY_LIST 0x82E7
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_OVERFLOW 0x0503
    typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void* data);
    typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
    typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
    typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
    typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64* params);
    typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
    typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
    typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
    typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum* attachments);
    typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride);
    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride);
    typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint* params);
    typedef GLuint(APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar* name);
    typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
    typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei count, GLsizei* length, GLint* params);
    typedef GLint(APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar* name);
    typedef GLint(APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar* name);
    typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
    typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
    typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
    typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
    typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
    typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
    typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void* userParam);
    typedef GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
    typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar* message);
    typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC)(void);
    typedef void (APIENTRYP PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
    typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
    typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC)(const void* ptr, GLsizei length, const GLchar* label);
    typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC)(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);
#endif /* GL_VERSION_4_3 */

#ifndef GL_VERSION_4_4
#define GL_VERSION_4_4 1
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_CLEAR_TEXTURE 0x9365
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX8 0x8D48
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
    typedef void (APIENTRYP PFNGLBUFFERSTORAGEPROC)(GLenum target, GLsizeiptr size, const void* data, GLbitfield flags);
    typedef void (APIENTRYP PFNGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void* data);
    typedef void (APIENTRYP PFNGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* data);
    typedef void (APIENTRYP PFNGLBINDBUFFERSBASEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint* buffers);
    typedef void (APIENTRYP PFNGLBINDBUFFERSRANGEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizeiptr* sizes);
    typedef void (APIENTRYP PFNGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint* textures);
    typedef void (APIENTRYP PFNGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint* samplers);
    typedef void (APIENTRYP PFNGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint* textures);
    typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
#endif /* GL_VERSION_4_4 */

#ifndef GL_VERSION_4_5
#define GL_VERSION_4_5 1
#define GL_CONTEXT_LOST 0x0507
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_TEXTURE_TARGET 0x1006
#define GL_QUERY_TARGET 0x82EA
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_BACK 0x0405
#define GL_NO_ERROR 0
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_NONE 0
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
    typedef void (APIENTRYP PFNGLCLIPCONTROLPROC)(GLenum origin, GLenum depth);
    typedef void (APIENTRYP PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint* ids);
    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, GLenum pname, GLint* param);
    typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint* param);
    typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint64* param);
    typedef void (APIENTRYP PFNGLCREATEBUFFERSPROC)(GLsizei n, GLuint* buffers);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
    typedef void (APIENTRYP PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data);
    typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
    typedef void* (APIENTRYP PFNGLMAPNAMEDBUFFERPROC)(GLuint buffer, GLenum access);
    typedef void* (APIENTRYP PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
    typedef GLboolean(APIENTRYP PFNGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
    typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, GLenum pname, GLint64* params);
    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, GLenum pname, void** params);
    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
    typedef void (APIENTRYP PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, GLenum buf);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const GLenum* bufs);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, GLenum src);
    typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments);
    typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value);
    typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value);
    typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value);
    typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
    typedef void (APIENTRYP PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    typedef GLenum(APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, GLenum target);
    typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, GLenum pname, GLint* param);
    typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
    typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLCREATETEXTURESPROC)(GLenum target, GLsizei n, GLuint* textures);
    typedef void (APIENTRYP PFNGLTEXTUREBUFFERPROC)(GLuint texture, GLenum internalformat, GLuint buffer);
    typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEPROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFPROC)(GLuint texture, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, const GLfloat* param);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIPROC)(GLuint texture, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, const GLuint* params);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, const GLint* param);
    typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
    typedef void (APIENTRYP PFNGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
    typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
    typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void* pixels);
    typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, GLuint* params);
    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
    typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
    typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
    typedef void (APIENTRYP PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
    typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
    typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
    typedef void (APIENTRYP PFNGLGETVERTEXARRAYIVPROC)(GLuint vaobj, GLenum pname, GLint* param);
    typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
    typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
    typedef void (APIENTRYP PFNGLCREATESAMPLERSPROC)(GLsizei n, GLuint* samplers);
    typedef void (APIENTRYP PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint* pipelines);
    typedef void (APIENTRYP PFNGLCREATEQUERIESPROC)(GLenum target, GLsizei n, GLuint* ids);
    typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    typedef void (APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
    typedef void (APIENTRYP PFNGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
    typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels);
    typedef GLenum(APIENTRYP PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
    typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint lod, GLsizei bufSize, void* pixels);
    typedef void (APIENTRYP PFNGLGETNTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
    typedef void (APIENTRYP PFNGLGETNUNIFORMDVPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
    typedef void (APIENTRYP PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
    typedef void (APIENTRYP PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
    typedef void (APIENTRYP PFNGLGETNMAPDVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
    typedef void (APIENTRYP PFNGLGETNMAPFVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
    typedef void (APIENTRYP PFNGLGETNMAPIVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
    typedef void (APIENTRYP PFNGLGETNPIXELMAPFVPROC)(GLenum map, GLsizei bufSize, GLfloat* values);
    typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVPROC)(GLenum map, GLsizei bufSize, GLuint* values);
    typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVPROC)(GLenum map, GLsizei bufSize, GLushort* values);
    typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEPROC)(GLsizei bufSize, GLubyte* pattern);
    typedef void (APIENTRYP PFNGLGETNCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
    typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
    typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
    typedef void (APIENTRYP PFNGLGETNHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
    typedef void (APIENTRYP PFNGLGETNMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
    typedef void (APIENTRYP PFNGLTEXTUREBARRIERPROC)(void);
#endif /* GL_VERSION_4_5 */

#ifndef GL_VERSION_4_6
#define GL_VERSION_4_6 1
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_NONE 0
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SPIR_V_BINARY 0x9552
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED
    typedef void (APIENTRYP PFNGLSPECIALIZESHADERPROC)(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue);
    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)(GLenum mode, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)(GLenum mode, GLenum type, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    typedef void (APIENTRYP PFNGLPOLYGONOFFSETCLAMPPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
#endif /* GL_VERSION_4_6 */

#if defined(GLBIND_WGL)
#ifndef WGL_VERSION_1_0
#define WGL_VERSION_1_0 1
#define WGL_FONT_LINES 0
#define WGL_FONT_POLYGONS 1
#define WGL_SWAP_MAIN_PLANE 0x00000001
#define WGL_SWAP_OVERLAY1 0x00000002
#define WGL_SWAP_OVERLAY2 0x00000004
#define WGL_SWAP_OVERLAY3 0x00000008
#define WGL_SWAP_OVERLAY4 0x00000010
#define WGL_SWAP_OVERLAY5 0x00000020
#define WGL_SWAP_OVERLAY6 0x00000040
#define WGL_SWAP_OVERLAY7 0x00000080
#define WGL_SWAP_OVERLAY8 0x00000100
#define WGL_SWAP_OVERLAY9 0x00000200
#define WGL_SWAP_OVERLAY10 0x00000400
#define WGL_SWAP_OVERLAY11 0x00000800
#define WGL_SWAP_OVERLAY12 0x00001000
#define WGL_SWAP_OVERLAY13 0x00002000
#define WGL_SWAP_OVERLAY14 0x00004000
#define WGL_SWAP_OVERLAY15 0x00008000
#define WGL_SWAP_UNDERLAY1 0x00010000
#define WGL_SWAP_UNDERLAY2 0x00020000
#define WGL_SWAP_UNDERLAY3 0x00040000
#define WGL_SWAP_UNDERLAY4 0x00080000
#define WGL_SWAP_UNDERLAY5 0x00100000
#define WGL_SWAP_UNDERLAY6 0x00200000
#define WGL_SWAP_UNDERLAY7 0x00400000
#define WGL_SWAP_UNDERLAY8 0x00800000
#define WGL_SWAP_UNDERLAY9 0x01000000
#define WGL_SWAP_UNDERLAY10 0x02000000
#define WGL_SWAP_UNDERLAY11 0x04000000
#define WGL_SWAP_UNDERLAY12 0x08000000
#define WGL_SWAP_UNDERLAY13 0x10000000
#define WGL_SWAP_UNDERLAY14 0x20000000
#define WGL_SWAP_UNDERLAY15 0x40000000
    typedef int (APIENTRYP PFNCHOOSEPIXELFORMATPROC)(HDC hDc, const PIXELFORMATDESCRIPTOR* pPfd);
    typedef int (APIENTRYP PFNDESCRIBEPIXELFORMATPROC)(HDC hdc, int ipfd, UINT cjpfd, const PIXELFORMATDESCRIPTOR* ppfd);
    typedef UINT(APIENTRYP PFNGETENHMETAFILEPIXELFORMATPROC)(HENHMETAFILE hemf, const PIXELFORMATDESCRIPTOR* ppfd);
    typedef int (APIENTRYP PFNGETPIXELFORMATPROC)(HDC hdc);
    typedef BOOL(APIENTRYP PFNSETPIXELFORMATPROC)(HDC hdc, int ipfd, const PIXELFORMATDESCRIPTOR* ppfd);
    typedef BOOL(APIENTRYP PFNSWAPBUFFERSPROC)(HDC hdc);
    typedef BOOL(APIENTRYP PFNWGLCOPYCONTEXTPROC)(HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask);
    typedef HGLRC(APIENTRYP PFNWGLCREATECONTEXTPROC)(HDC hDc);
    typedef HGLRC(APIENTRYP PFNWGLCREATELAYERCONTEXTPROC)(HDC hDc, int level);
    typedef BOOL(APIENTRYP PFNWGLDELETECONTEXTPROC)(HGLRC oldContext);
    typedef BOOL(APIENTRYP PFNWGLDESCRIBELAYERPLANEPROC)(HDC hDc, int pixelFormat, int layerPlane, UINT nBytes, const LAYERPLANEDESCRIPTOR* plpd);
    typedef HGLRC(APIENTRYP PFNWGLGETCURRENTCONTEXTPROC)(void);
    typedef HDC(APIENTRYP PFNWGLGETCURRENTDCPROC)(void);
    typedef int (APIENTRYP PFNWGLGETLAYERPALETTEENTRIESPROC)(HDC hdc, int iLayerPlane, int iStart, int cEntries, const COLORREF* pcr);
    typedef PROC(APIENTRYP PFNWGLGETPROCADDRESSPROC)(LPCSTR lpszProc);
    typedef BOOL(APIENTRYP PFNWGLMAKECURRENTPROC)(HDC hDc, HGLRC newContext);
    typedef BOOL(APIENTRYP PFNWGLREALIZELAYERPALETTEPROC)(HDC hdc, int iLayerPlane, BOOL bRealize);
    typedef int (APIENTRYP PFNWGLSETLAYERPALETTEENTRIESPROC)(HDC hdc, int iLayerPlane, int iStart, int cEntries, const COLORREF* pcr);
    typedef BOOL(APIENTRYP PFNWGLSHARELISTSPROC)(HGLRC hrcSrvShare, HGLRC hrcSrvSource);
    typedef BOOL(APIENTRYP PFNWGLSWAPLAYERBUFFERSPROC)(HDC hdc, UINT fuFlags);
    typedef BOOL(APIENTRYP PFNWGLUSEFONTBITMAPSPROC)(HDC hDC, DWORD first, DWORD count, DWORD listBase);
    typedef BOOL(APIENTRYP PFNWGLUSEFONTBITMAPSAPROC)(HDC hDC, DWORD first, DWORD count, DWORD listBase);
    typedef BOOL(APIENTRYP PFNWGLUSEFONTBITMAPSWPROC)(HDC hDC, DWORD first, DWORD count, DWORD listBase);
    typedef BOOL(APIENTRYP PFNWGLUSEFONTOUTLINESPROC)(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf);
    typedef BOOL(APIENTRYP PFNWGLUSEFONTOUTLINESAPROC)(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf);
    typedef BOOL(APIENTRYP PFNWGLUSEFONTOUTLINESWPROC)(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf);
#endif /* WGL_VERSION_1_0 */
#endif /* GLBIND_WGL */

#if defined(GLBIND_GLX)
#ifndef GLX_VERSION_1_0
#define GLX_VERSION_1_0 1
    typedef struct __GLXcontextRec* GLXContext;
    typedef XID GLXDrawable;
    typedef XID GLXPixmap;
#define GLX_EXTENSION_NAME "GLX"
#define GLX_PbufferClobber 0
#define GLX_BufferSwapComplete 1
#define __GLX_NUMBER_EVENTS 17
#define GLX_BAD_SCREEN 1
#define GLX_BAD_ATTRIBUTE 2
#define GLX_NO_EXTENSION 3
#define GLX_BAD_VISUAL 4
#define GLX_BAD_CONTEXT 5
#define GLX_BAD_VALUE 6
#define GLX_BAD_ENUM 7
#define GLX_USE_GL 1
#define GLX_BUFFER_SIZE 2
#define GLX_LEVEL 3
#define GLX_RGBA 4
#define GLX_DOUBLEBUFFER 5
#define GLX_STEREO 6
#define GLX_AUX_BUFFERS 7
#define GLX_RED_SIZE 8
#define GLX_GREEN_SIZE 9
#define GLX_BLUE_SIZE 10
#define GLX_ALPHA_SIZE 11
#define GLX_DEPTH_SIZE 12
#define GLX_STENCIL_SIZE 13
#define GLX_ACCUM_RED_SIZE 14
#define GLX_ACCUM_GREEN_SIZE 15
#define GLX_ACCUM_BLUE_SIZE 16
#define GLX_ACCUM_ALPHA_SIZE 17
    typedef XVisualInfo* (APIENTRYP PFNGLXCHOOSEVISUALPROC)(Display* dpy, int screen, int* attribList);
    typedef GLXContext(APIENTRYP PFNGLXCREATECONTEXTPROC)(Display* dpy, XVisualInfo* vis, GLXContext shareList, Bool direct);
    typedef void (APIENTRYP PFNGLXDESTROYCONTEXTPROC)(Display* dpy, GLXContext ctx);
    typedef Bool(APIENTRYP PFNGLXMAKECURRENTPROC)(Display* dpy, GLXDrawable drawable, GLXContext ctx);
    typedef void (APIENTRYP PFNGLXCOPYCONTEXTPROC)(Display* dpy, GLXContext src, GLXContext dst, unsigned long mask);
    typedef void (APIENTRYP PFNGLXSWAPBUFFERSPROC)(Display* dpy, GLXDrawable drawable);
    typedef GLXPixmap(APIENTRYP PFNGLXCREATEGLXPIXMAPPROC)(Display* dpy, XVisualInfo* visual, Pixmap pixmap);
    typedef void (APIENTRYP PFNGLXDESTROYGLXPIXMAPPROC)(Display* dpy, GLXPixmap pixmap);
    typedef Bool(APIENTRYP PFNGLXQUERYEXTENSIONPROC)(Display* dpy, int* errorb, int* event);
    typedef Bool(APIENTRYP PFNGLXQUERYVERSIONPROC)(Display* dpy, int* maj, int* min);
    typedef Bool(APIENTRYP PFNGLXISDIRECTPROC)(Display* dpy, GLXContext ctx);
    typedef int (APIENTRYP PFNGLXGETCONFIGPROC)(Display* dpy, XVisualInfo* visual, int attrib, int* value);
    typedef GLXContext(APIENTRYP PFNGLXGETCURRENTCONTEXTPROC)(void);
    typedef GLXDrawable(APIENTRYP PFNGLXGETCURRENTDRAWABLEPROC)(void);
    typedef void (APIENTRYP PFNGLXWAITGLPROC)(void);
    typedef void (APIENTRYP PFNGLXWAITXPROC)(void);
    typedef void (APIENTRYP PFNGLXUSEXFONTPROC)(Font font, int first, int count, int list);
#endif /* GLX_VERSION_1_0 */

#ifndef GLX_VERSION_1_1
#define GLX_VERSION_1_1 1
#define GLX_VENDOR 0x1
#define GLX_VERSION 0x2
#define GLX_EXTENSIONS 0x3
    typedef const char* (APIENTRYP PFNGLXQUERYEXTENSIONSSTRINGPROC)(Display* dpy, int screen);
    typedef const char* (APIENTRYP PFNGLXQUERYSERVERSTRINGPROC)(Display* dpy, int screen, int name);
    typedef const char* (APIENTRYP PFNGLXGETCLIENTSTRINGPROC)(Display* dpy, int name);
#endif /* GLX_VERSION_1_1 */

#ifndef GLX_VERSION_1_2
#define GLX_VERSION_1_2 1
    typedef Display* (APIENTRYP PFNGLXGETCURRENTDISPLAYPROC)(void);
#endif /* GLX_VERSION_1_2 */

#ifndef GLX_VERSION_1_3
#define GLX_VERSION_1_3 1
    typedef XID GLXContextID;
    typedef struct __GLXFBConfigRec* GLXFBConfig;
    typedef XID GLXWindow;
    typedef XID GLXPbuffer;
#define GLX_WINDOW_BIT 0x00000001
#define GLX_PIXMAP_BIT 0x00000002
#define GLX_PBUFFER_BIT 0x00000004
#define GLX_RGBA_BIT 0x00000001
#define GLX_COLOR_INDEX_BIT 0x00000002
#define GLX_PBUFFER_CLOBBER_MASK 0x08000000
#define GLX_FRONT_LEFT_BUFFER_BIT 0x00000001
#define GLX_FRONT_RIGHT_BUFFER_BIT 0x00000002
#define GLX_BACK_LEFT_BUFFER_BIT 0x00000004
#define GLX_BACK_RIGHT_BUFFER_BIT 0x00000008
#define GLX_AUX_BUFFERS_BIT 0x00000010
#define GLX_DEPTH_BUFFER_BIT 0x00000020
#define GLX_STENCIL_BUFFER_BIT 0x00000040
#define GLX_ACCUM_BUFFER_BIT 0x00000080
#define GLX_CONFIG_CAVEAT 0x20
#define GLX_X_VISUAL_TYPE 0x22
#define GLX_TRANSPARENT_TYPE 0x23
#define GLX_TRANSPARENT_INDEX_VALUE 0x24
#define GLX_TRANSPARENT_RED_VALUE 0x25
#define GLX_TRANSPARENT_GREEN_VALUE 0x26
#define GLX_TRANSPARENT_BLUE_VALUE 0x27
#define GLX_TRANSPARENT_ALPHA_VALUE 0x28
#define GLX_DONT_CARE 0xFFFFFFFF
#define GLX_NONE 0x8000
#define GLX_SLOW_CONFIG 0x8001
#define GLX_TRUE_COLOR 0x8002
#define GLX_DIRECT_COLOR 0x8003
#define GLX_PSEUDO_COLOR 0x8004
#define GLX_STATIC_COLOR 0x8005
#define GLX_GRAY_SCALE 0x8006
#define GLX_STATIC_GRAY 0x8007
#define GLX_TRANSPARENT_RGB 0x8008
#define GLX_TRANSPARENT_INDEX 0x8009
#define GLX_VISUAL_ID 0x800B
#define GLX_SCREEN 0x800C
#define GLX_NON_CONFORMANT_CONFIG 0x800D
#define GLX_DRAWABLE_TYPE 0x8010
#define GLX_RENDER_TYPE 0x8011
#define GLX_X_RENDERABLE 0x8012
#define GLX_FBCONFIG_ID 0x8013
#define GLX_RGBA_TYPE 0x8014
#define GLX_COLOR_INDEX_TYPE 0x8015
#define GLX_MAX_PBUFFER_WIDTH 0x8016
#define GLX_MAX_PBUFFER_HEIGHT 0x8017
#define GLX_MAX_PBUFFER_PIXELS 0x8018
#define GLX_PRESERVED_CONTENTS 0x801B
#define GLX_LARGEST_PBUFFER 0x801C
#define GLX_WIDTH 0x801D
#define GLX_HEIGHT 0x801E
#define GLX_EVENT_MASK 0x801F
#define GLX_DAMAGED 0x8020
#define GLX_SAVED 0x8021
#define GLX_WINDOW 0x8022
#define GLX_PBUFFER 0x8023
#define GLX_PBUFFER_HEIGHT 0x8040
#define GLX_PBUFFER_WIDTH 0x8041
    typedef GLXFBConfig* (APIENTRYP PFNGLXGETFBCONFIGSPROC)(Display* dpy, int screen, int* nelements);
    typedef GLXFBConfig* (APIENTRYP PFNGLXCHOOSEFBCONFIGPROC)(Display* dpy, int screen, const int* attrib_list, int* nelements);
    typedef int (APIENTRYP PFNGLXGETFBCONFIGATTRIBPROC)(Display* dpy, GLXFBConfig config, int attribute, int* value);
    typedef XVisualInfo* (APIENTRYP PFNGLXGETVISUALFROMFBCONFIGPROC)(Display* dpy, GLXFBConfig config);
    typedef GLXWindow(APIENTRYP PFNGLXCREATEWINDOWPROC)(Display* dpy, GLXFBConfig config, Window win, const int* attrib_list);
    typedef void (APIENTRYP PFNGLXDESTROYWINDOWPROC)(Display* dpy, GLXWindow win);
    typedef GLXPixmap(APIENTRYP PFNGLXCREATEPIXMAPPROC)(Display* dpy, GLXFBConfig config, Pixmap pixmap, const int* attrib_list);
    typedef void (APIENTRYP PFNGLXDESTROYPIXMAPPROC)(Display* dpy, GLXPixmap pixmap);
    typedef GLXPbuffer(APIENTRYP PFNGLXCREATEPBUFFERPROC)(Display* dpy, GLXFBConfig config, const int* attrib_list);
    typedef void (APIENTRYP PFNGLXDESTROYPBUFFERPROC)(Display* dpy, GLXPbuffer pbuf);
    typedef void (APIENTRYP PFNGLXQUERYDRAWABLEPROC)(Display* dpy, GLXDrawable draw, int attribute, unsigned int* value);
    typedef GLXContext(APIENTRYP PFNGLXCREATENEWCONTEXTPROC)(Display* dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
    typedef Bool(APIENTRYP PFNGLXMAKECONTEXTCURRENTPROC)(Display* dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
    typedef GLXDrawable(APIENTRYP PFNGLXGETCURRENTREADDRAWABLEPROC)(void);
    typedef int (APIENTRYP PFNGLXQUERYCONTEXTPROC)(Display* dpy, GLXContext ctx, int attribute, int* value);
    typedef void (APIENTRYP PFNGLXSELECTEVENTPROC)(Display* dpy, GLXDrawable draw, unsigned long event_mask);
    typedef void (APIENTRYP PFNGLXGETSELECTEDEVENTPROC)(Display* dpy, GLXDrawable draw, unsigned long* event_mask);
#endif /* GLX_VERSION_1_3 */

#ifndef GLX_VERSION_1_4
#define GLX_VERSION_1_4 1
    typedef void (APIENTRY* __GLXextFuncPtr)(void);
#define GLX_SAMPLE_BUFFERS 100000
#define GLX_SAMPLES 100001
    typedef __GLXextFuncPtr(APIENTRYP PFNGLXGETPROCADDRESSPROC)(const GLubyte* procName);
#endif /* GLX_VERSION_1_4 */
#endif /* GLBIND_GLX */
#ifndef GL_3DFX_multisample
#define GL_3DFX_multisample 1
#define GL_MULTISAMPLE_3DFX 0x86B2
#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
#define GL_SAMPLES_3DFX 0x86B4
#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
#endif /* GL_3DFX_multisample */

#ifndef GL_3DFX_tbuffer
#define GL_3DFX_tbuffer 1
    typedef void (APIENTRYP PFNGLTBUFFERMASK3DFXPROC)(GLuint mask);
#endif /* GL_3DFX_tbuffer */

#ifndef GL_3DFX_texture_compression_FXT1
#define GL_3DFX_texture_compression_FXT1 1
#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
#endif /* GL_3DFX_texture_compression_FXT1 */

#ifndef GL_AMD_blend_minmax_factor
#define GL_AMD_blend_minmax_factor 1
#define GL_FACTOR_MIN_AMD 0x901C
#define GL_FACTOR_MAX_AMD 0x901D
#endif /* GL_AMD_blend_minmax_factor */

#ifndef GL_AMD_conservative_depth
#define GL_AMD_conservative_depth 1
#endif /* GL_AMD_conservative_depth */

#ifndef GL_AMD_debug_output
#define GL_AMD_debug_output 1
    typedef void (APIENTRY* GLDEBUGPROCAMD)(GLuint id, GLenum category, GLenum severity, GLsizei length, const GLchar* message, void* userParam);
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144
#define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145
#define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147
#define GL_DEBUG_SEVERITY_LOW_AMD 0x9148
#define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
#define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150
    typedef void (APIENTRYP PFNGLDEBUGMESSAGEENABLEAMDPROC)(GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
    typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTAMDPROC)(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf);
    typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKAMDPROC)(GLDEBUGPROCAMD callback, void* userParam);
    typedef GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGAMDPROC)(GLuint count, GLsizei bufSize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message);
#endif /* GL_AMD_debug_output */

#ifndef GL_AMD_depth_clamp_separate
#define GL_AMD_depth_clamp_separate 1
#define GL_DEPTH_CLAMP_NEAR_AMD 0x901E
#define GL_DEPTH_CLAMP_FAR_AMD 0x901F
#endif /* GL_AMD_depth_clamp_separate */

#ifndef GL_AMD_draw_buffers_blend
#define GL_AMD_draw_buffers_blend 1
    typedef void (APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC)(GLuint buf, GLenum src, GLenum dst);
    typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    typedef void (APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC)(GLuint buf, GLenum mode);
    typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
#endif /* GL_AMD_draw_buffers_blend */

#ifndef GL_AMD_framebuffer_multisample_advanced
#define GL_AMD_framebuffer_multisample_advanced 1
#define GL_RENDERBUFFER_STORAGE_SAMPLES_AMD 0x91B2
#define GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD 0x91B3
#define GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD 0x91B4
#define GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD 0x91B5
#define GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B6
#define GL_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B7
    typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC)(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC)(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
#endif /* GL_AMD_framebuffer_multisample_advanced */

#ifndef GL_AMD_framebuffer_sample_positions
#define GL_AMD_framebuffer_sample_positions 1
#define GL_SUBSAMPLE_DISTANCE_AMD 0x883F
#define GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD 0x91AE
#define GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD 0x91AF
#define GL_ALL_PIXELS_AMD 0xFFFFFFFF
    typedef void (APIENTRYP PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC)(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat* values);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC)(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat* values);
    typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC)(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values);
    typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC)(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values);
#endif /* GL_AMD_framebuffer_sample_positions */

#ifndef GL_AMD_gcn_shader
#define GL_AMD_gcn_shader 1
#endif /* GL_AMD_gcn_shader */

#ifndef GL_AMD_gpu_shader_half_float
#define GL_AMD_gpu_shader_half_float 1
#define GL_FLOAT16_NV 0x8FF8
#define GL_FLOAT16_VEC2_NV 0x8FF9
#define GL_FLOAT16_VEC3_NV 0x8FFA
#define GL_FLOAT16_VEC4_NV 0x8FFB
#define GL_FLOAT16_MAT2_AMD 0x91C5
#define GL_FLOAT16_MAT3_AMD 0x91C6
#define GL_FLOAT16_MAT4_AMD 0x91C7
#define GL_FLOAT16_MAT2x3_AMD 0x91C8
#define GL_FLOAT16_MAT2x4_AMD 0x91C9
#define GL_FLOAT16_MAT3x2_AMD 0x91CA
#define GL_FLOAT16_MAT3x4_AMD 0x91CB
#define GL_FLOAT16_MAT4x2_AMD 0x91CC
#define GL_FLOAT16_MAT4x3_AMD 0x91CD
#endif /* GL_AMD_gpu_shader_half_float */

#ifndef GL_AMD_gpu_shader_int16
#define GL_AMD_gpu_shader_int16 1
#endif /* GL_AMD_gpu_shader_int16 */

#ifndef GL_AMD_gpu_shader_int64
#define GL_AMD_gpu_shader_int64 1
    typedef khronos_int64_t GLint64EXT;
    typedef khronos_uint64_t GLuint64EXT;
#define GL_INT64_NV 0x140E
#define GL_UNSIGNED_INT64_NV 0x140F
#define GL_INT8_NV 0x8FE0
#define GL_INT8_VEC2_NV 0x8FE1
#define GL_INT8_VEC3_NV 0x8FE2
#define GL_INT8_VEC4_NV 0x8FE3
#define GL_INT16_NV 0x8FE4
#define GL_INT16_VEC2_NV 0x8FE5
#define GL_INT16_VEC3_NV 0x8FE6
#define GL_INT16_VEC4_NV 0x8FE7
#define GL_INT64_VEC2_NV 0x8FE9
#define GL_INT64_VEC3_NV 0x8FEA
#define GL_INT64_VEC4_NV 0x8FEB
#define GL_UNSIGNED_INT8_NV 0x8FEC
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
#define GL_UNSIGNED_INT16_NV 0x8FF0
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
#define GL_FLOAT16_NV 0x8FF8
#define GL_FLOAT16_VEC2_NV 0x8FF9
#define GL_FLOAT16_VEC3_NV 0x8FFA
#define GL_FLOAT16_VEC4_NV 0x8FFB
    typedef void (APIENTRYP PFNGLUNIFORM1I64NVPROC)(GLint location, GLint64EXT x);
    typedef void (APIENTRYP PFNGLUNIFORM2I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y);
    typedef void (APIENTRYP PFNGLUNIFORM3I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    typedef void (APIENTRYP PFNGLUNIFORM4I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    typedef void (APIENTRYP PFNGLUNIFORM1I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT* value);
    typedef void (APIENTRYP PFNGLUNIFORM2I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT* value);
    typedef void (APIENTRYP PFNGLUNIFORM3I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT* value);
    typedef void (APIENTRYP PFNGLUNIFORM4I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT* value);
    typedef void (APIENTRYP PFNGLUNIFORM1UI64NVPROC)(GLint location, GLuint64EXT x);
    typedef void (APIENTRYP PFNGLUNIFORM2UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y);
    typedef void (APIENTRYP PFNGLUNIFORM3UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    typedef void (APIENTRYP PFNGLUNIFORM4UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    typedef void (APIENTRYP PFNGLUNIFORM1UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT* value);
    typedef void (APIENTRYP PFNGLUNIFORM2UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT* value);
    typedef void (APIENTRYP PFNGLUNIFORM3UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT* value);
    typedef void (APIENTRYP PFNGLUNIFORM4UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT* value);
    typedef void (APIENTRYP PFNGLGETUNIFORMI64VNVPROC)(GLuint program, GLint location, GLint64EXT* params);
    typedef void (APIENTRYP PFNGLGETUNIFORMUI64VNVPROC)(GLuint program, GLint location, GLuint64EXT* params);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64NVPROC)(GLuint program, GLint location, GLint64EXT x);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
#endif /* GL_AMD_gpu_shader_int64 */

#ifndef GL_AMD_interleaved_elements
#define GL_AMD_interleaved_elements 1
#define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0x91A4
#define GL_VERTEX_ID_SWIZZLE_AMD 0x91A5
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RG8UI 0x8238
#define GL_RG16UI 0x823A
#define GL_RGBA8UI 0x8D7C
    typedef void (APIENTRYP PFNGLVERTEXATTRIBPARAMETERIAMDPROC)(GLuint index, GLenum pname, GLint param);
#endif /* GL_AMD_interleaved_elements */

#ifndef GL_AMD_multi_draw_indirect
#define GL_AMD_multi_draw_indirect 1
    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)(GLenum mode, const void* indirect, GLsizei primcount, GLsizei stride);
    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)(GLenum mode, GLenum type, const void* indirect, GLsizei primcount, GLsizei stride);
#endif /* GL_AMD_multi_draw_indirect */

#ifndef GL_AMD_name_gen_delete
#define GL_AMD_name_gen_delete 1
#define GL_DATA_BUFFER_AMD 0x9151
#define GL_PERFORMANCE_MONITOR_AMD 0x9152
#define GL_QUERY_OBJECT_AMD 0x9153
#define GL_VERTEX_ARRAY_OBJECT_AMD 0x9154
#define GL_SAMPLER_OBJECT_AMD 0x9155
    typedef void (APIENTRYP PFNGLGENNAMESAMDPROC)(GLenum identifier, GLuint num, GLuint* names);
    typedef void (APIENTRYP PFNGLDELETENAMESAMDPROC)(GLenum identifier, GLuint num, const GLuint* names);
    typedef GLboolean(APIENTRYP PFNGLISNAMEAMDPROC)(GLenum identifier, GLuint name);
#endif /* GL_AMD_name_gen_delete */

#ifndef GL_AMD_occlusion_query_event
#define GL_AMD_occlusion_query_event 1
#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008
#define GL_QUERY_ALL_EVENT_BITS_AMD 0xFFFFFFFF
    typedef void (APIENTRYP PFNGLQUERYOBJECTPARAMETERUIAMDPROC)(GLenum target, GLuint id, GLenum pname, GLuint param);
#endif /* GL_AMD_occlusion_query_event */

#ifndef GL_AMD_performance_monitor
#define GL_AMD_performance_monitor 1
#define GL_COUNTER_TYPE_AMD 0x8BC0
#define GL_COUNTER_RANGE_AMD 0x8BC1
#define GL_UNSIGNED_INT64_AMD 0x8BC2
#define GL_PERCENTAGE_AMD 0x8BC3
#define GL_PERFMON_RESULT_AVAILABLE_AMD 0x8BC4
#define GL_PERFMON_RESULT_SIZE_AMD 0x8BC5
#define GL_PERFMON_RESULT_AMD 0x8BC6
    typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC)(GLint* numGroups, GLsizei groupsSize, GLuint* groups);
    typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC)(GLuint group, GLint* numCounters, GLint* maxActiveCounters, GLsizei counterSize, GLuint* counters);
    typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)(GLuint group, GLsizei bufSize, GLsizei* length, GLchar* groupString);
    typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)(GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar* counterString);
    typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)(GLuint group, GLuint counter, GLenum pname, void* data);
    typedef void (APIENTRYP PFNGLGENPERFMONITORSAMDPROC)(GLsizei n, GLuint* monitors);
    typedef void (APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC)(GLsizei n, GLuint* monitors);
    typedef void (APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList);
    typedef void (APIENTRYP PFNGLBEGINPERFMONITORAMDPROC)(GLuint monitor);
    typedef void (APIENTRYP PFNGLENDPERFMONITORAMDPROC)(GLuint monitor);
    typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint* bytesWritten);
#endif /* GL_AMD_performance_monitor */

#ifndef GL_AMD_pinned_memory
#define GL_AMD_pinned_memory 1
#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160
#endif /* GL_AMD_pinned_memory */

#ifndef GL_AMD_query_buffer_object
#define GL_AMD_query_buffer_object 1
#define GL_QUERY_BUFFER_AMD 0x9192
#define GL_QUERY_BUFFER_BINDING_AMD 0x9193
#define GL_QUERY_RESULT_NO_WAIT_AMD 0x9194
#endif /* GL_AMD_query_buffer_object */

#ifndef GL_AMD_sample_positions
#define GL_AMD_sample_positions 1
#define GL_SUBSAMPLE_DISTANCE_AMD 0x883F
    typedef void (APIENTRYP PFNGLSETMULTISAMPLEFVAMDPROC)(GLenum pname, GLuint index, const GLfloat* val);
#endif /* GL_AMD_sample_positions */

#ifndef GL_AMD_seamless_cubemap_per_texture
#define GL_AMD_seamless_cubemap_per_texture 1
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#endif /* GL_AMD_seamless_cubemap_per_texture */

#ifndef GL_AMD_shader_atomic_counter_ops
#define GL_AMD_shader_atomic_counter_ops 1
#endif /* GL_AMD_shader_atomic_counter_ops */

#ifndef GL_AMD_shader_ballot
#define GL_AMD_shader_ballot 1
#endif /* GL_AMD_shader_ballot */

#ifndef GL_AMD_shader_gpu_shader_half_float_fetch
#define GL_AMD_shader_gpu_shader_half_float_fetch 1
#endif /* GL_AMD_shader_gpu_shader_half_float_fetch */

#ifndef GL_AMD_shader_image_load_store_lod
#define GL_AMD_shader_image_load_store_lod 1
#endif /* GL_AMD_shader_image_load_store_lod */

#ifndef GL_AMD_shader_stencil_export
#define GL_AMD_shader_stencil_export 1
#endif /* GL_AMD_shader_stencil_export */

#ifndef GL_AMD_shader_trinary_minmax
#define GL_AMD_shader_trinary_minmax 1
#endif /* GL_AMD_shader_trinary_minmax */

#ifndef GL_AMD_shader_explicit_vertex_parameter
#define GL_AMD_shader_explicit_vertex_parameter 1
#endif /* GL_AMD_shader_explicit_vertex_parameter */

#ifndef GL_AMD_sparse_texture
#define GL_AMD_sparse_texture 1
#define GL_VIRTUAL_PAGE_SIZE_X_AMD 0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A
#define GL_MIN_SPARSE_LEVEL_AMD 0x919B
#define GL_MIN_LOD_WARNING_AMD 0x919C
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001
    typedef void (APIENTRYP PFNGLTEXSTORAGESPARSEAMDPROC)(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGESPARSEAMDPROC)(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
#endif /* GL_AMD_sparse_texture */

#ifndef GL_AMD_stencil_operation_extended
#define GL_AMD_stencil_operation_extended 1
#define GL_SET_AMD 0x874A
#define GL_REPLACE_VALUE_AMD 0x874B
#define GL_STENCIL_OP_VALUE_AMD 0x874C
#define GL_STENCIL_BACK_OP_VALUE_AMD 0x874D
    typedef void (APIENTRYP PFNGLSTENCILOPVALUEAMDPROC)(GLenum face, GLuint value);
#endif /* GL_AMD_stencil_operation_extended */

#ifndef GL_AMD_texture_gather_bias_lod
#define GL_AMD_texture_gather_bias_lod 1
#endif /* GL_AMD_texture_gather_bias_lod */

#ifndef GL_AMD_texture_texture4
#define GL_AMD_texture_texture4 1
#endif /* GL_AMD_texture_texture4 */

#ifndef GL_AMD_transform_feedback3_lines_triangles
#define GL_AMD_transform_feedback3_lines_triangles 1
#endif /* GL_AMD_transform_feedback3_lines_triangles */

#ifndef GL_AMD_transform_feedback4
#define GL_AMD_transform_feedback4 1
#define GL_STREAM_RASTERIZATION_AMD 0x91A0
#endif /* GL_AMD_transform_feedback4 */

#ifndef GL_AMD_vertex_shader_layer
#define GL_AMD_vertex_shader_layer 1
#endif /* GL_AMD_vertex_shader_layer */

#ifndef GL_AMD_vertex_shader_tessellator
#define GL_AMD_vertex_shader_tessellator 1
#define GL_SAMPLER_BUFFER_AMD 0x9001
#define GL_INT_SAMPLER_BUFFER_AMD 0x9002
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
#define GL_TESSELLATION_MODE_AMD 0x9004
#define GL_TESSELLATION_FACTOR_AMD 0x9005
#define GL_DISCRETE_AMD 0x9006
#define GL_CONTINUOUS_AMD 0x9007
    typedef void (APIENTRYP PFNGLTESSELLATIONFACTORAMDPROC)(GLfloat factor);
    typedef void (APIENTRYP PFNGLTESSELLATIONMODEAMDPROC)(GLenum mode);
#endif /* GL_AMD_vertex_shader_tessellator */

#ifndef GL_AMD_vertex_shader_viewport_index
#define GL_AMD_vertex_shader_viewport_index 1
#endif /* GL_AMD_vertex_shader_viewport_index */

#ifndef GL_APPLE_aux_depth_stencil
#define GL_APPLE_aux_depth_stencil 1
#define GL_AUX_DEPTH_STENCIL_APPLE 0x8A14
#endif /* GL_APPLE_aux_depth_stencil */

#ifndef GL_APPLE_client_storage
#define GL_APPLE_client_storage 1
#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
#endif /* GL_APPLE_client_storage */

#ifndef GL_APPLE_element_array
#define GL_APPLE_element_array 1
#define GL_ELEMENT_ARRAY_APPLE 0x8A0C
#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D
#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E
    typedef void (APIENTRYP PFNGLELEMENTPOINTERAPPLEPROC)(GLenum type, const void* pointer);
    typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYAPPLEPROC)(GLenum mode, GLint first, GLsizei count);
    typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount);
    typedef void (APIENTRYP PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount);
#endif /* GL_APPLE_element_array */

#ifndef GL_APPLE_fence
#define GL_APPLE_fence 1
#define GL_DRAW_PIXELS_APPLE 0x8A0A
#define GL_FENCE_APPLE 0x8A0B
    typedef void (APIENTRYP PFNGLGENFENCESAPPLEPROC)(GLsizei n, GLuint* fences);
    typedef void (APIENTRYP PFNGLDELETEFENCESAPPLEPROC)(GLsizei n, const GLuint* fences);
    typedef void (APIENTRYP PFNGLSETFENCEAPPLEPROC)(GLuint fence);
    typedef GLboolean(APIENTRYP PFNGLISFENCEAPPLEPROC)(GLuint fence);
    typedef GLboolean(APIENTRYP PFNGLTESTFENCEAPPLEPROC)(GLuint fence);
    typedef void (APIENTRYP PFNGLFINISHFENCEAPPLEPROC)(GLuint fence);
    typedef GLboolean(APIENTRYP PFNGLTESTOBJECTAPPLEPROC)(GLenum object, GLuint name);
    typedef void (APIENTRYP PFNGLFINISHOBJECTAPPLEPROC)(GLenum object, GLint name);
#endif /* GL_APPLE_fence */

#ifndef GL_APPLE_float_pixels
#define GL_APPLE_float_pixels 1
#define GL_HALF_APPLE 0x140B
#define GL_RGBA_FLOAT32_APPLE 0x8814
#define GL_RGB_FLOAT32_APPLE 0x8815
#define GL_ALPHA_FLOAT32_APPLE 0x8816
#define GL_INTENSITY_FLOAT32_APPLE 0x8817
#define GL_LUMINANCE_FLOAT32_APPLE 0x8818
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
#define GL_RGBA_FLOAT16_APPLE 0x881A
#define GL_RGB_FLOAT16_APPLE 0x881B
#define GL_ALPHA_FLOAT16_APPLE 0x881C
#define GL_INTENSITY_FLOAT16_APPLE 0x881D
#define GL_LUMINANCE_FLOAT16_APPLE 0x881E
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
#define GL_COLOR_FLOAT_APPLE 0x8A0F
#endif /* GL_APPLE_float_pixels */

#ifndef GL_APPLE_flush_buffer_range
#define GL_APPLE_flush_buffer_range 1
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
    typedef void (APIENTRYP PFNGLBUFFERPARAMETERIAPPLEPROC)(GLenum target, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)(GLenum target, GLintptr offset, GLsizeiptr size);
#endif /* GL_APPLE_flush_buffer_range */

#ifndef GL_APPLE_object_purgeable
#define GL_APPLE_object_purgeable 1
#define GL_BUFFER_OBJECT_APPLE 0x85B3
#define GL_RELEASED_APPLE 0x8A19
#define GL_VOLATILE_APPLE 0x8A1A
#define GL_RETAINED_APPLE 0x8A1B
#define GL_UNDEFINED_APPLE 0x8A1C
#define GL_PURGEABLE_APPLE 0x8A1D
    typedef GLenum(APIENTRYP PFNGLOBJECTPURGEABLEAPPLEPROC)(GLenum objectType, GLuint name, GLenum option);
    typedef GLenum(APIENTRYP PFNGLOBJECTUNPURGEABLEAPPLEPROC)(GLenum objectType, GLuint name, GLenum option);
    typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVAPPLEPROC)(GLenum objectType, GLuint name, GLenum pname, GLint* params);
#endif /* GL_APPLE_object_purgeable */

#ifndef GL_APPLE_rgb_422
#define GL_APPLE_rgb_422 1
#define GL_RGB_422_APPLE 0x8A1F
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
#define GL_RGB_RAW_422_APPLE 0x8A51
#endif /* GL_APPLE_rgb_422 */

#ifndef GL_APPLE_row_bytes
#define GL_APPLE_row_bytes 1
#define GL_PACK_ROW_BYTES_APPLE 0x8A15
#define GL_UNPACK_ROW_BYTES_APPLE 0x8A16
#endif /* GL_APPLE_row_bytes */

#ifndef GL_APPLE_specular_vector
#define GL_APPLE_specular_vector 1
#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
#endif /* GL_APPLE_specular_vector */

#ifndef GL_APPLE_texture_range
#define GL_APPLE_texture_range 1
#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
#define GL_STORAGE_PRIVATE_APPLE 0x85BD
#define GL_STORAGE_CACHED_APPLE 0x85BE
#define GL_STORAGE_SHARED_APPLE 0x85BF
    typedef void (APIENTRYP PFNGLTEXTURERANGEAPPLEPROC)(GLenum target, GLsizei length, const void* pointer);
    typedef void (APIENTRYP PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)(GLenum target, GLenum pname, void** params);
#endif /* GL_APPLE_texture_range */

#ifndef GL_APPLE_transform_hint
#define GL_APPLE_transform_hint 1
#define GL_TRANSFORM_HINT_APPLE 0x85B1
#endif /* GL_APPLE_transform_hint */

#ifndef GL_APPLE_vertex_array_object
#define GL_APPLE_vertex_array_object 1
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
    typedef void (APIENTRYP PFNGLBINDVERTEXARRAYAPPLEPROC)(GLuint array);
    typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSAPPLEPROC)(GLsizei n, const GLuint* arrays);
    typedef void (APIENTRYP PFNGLGENVERTEXARRAYSAPPLEPROC)(GLsizei n, GLuint* arrays);
    typedef GLboolean(APIENTRYP PFNGLISVERTEXARRAYAPPLEPROC)(GLuint array);
#endif /* GL_APPLE_vertex_array_object */

#ifndef GL_APPLE_vertex_array_range
#define GL_APPLE_vertex_array_range 1
#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
#define GL_STORAGE_CLIENT_APPLE 0x85B4
#define GL_STORAGE_CACHED_APPLE 0x85BE
#define GL_STORAGE_SHARED_APPLE 0x85BF
    typedef void (APIENTRYP PFNGLVERTEXARRAYRANGEAPPLEPROC)(GLsizei length, void* pointer);
    typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)(GLsizei length, void* pointer);
    typedef void (APIENTRYP PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)(GLenum pname, GLint param);
#endif /* GL_APPLE_vertex_array_range */

#ifndef GL_APPLE_vertex_program_evaluators
#define GL_APPLE_vertex_program_evaluators 1
#define GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00
#define GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
    typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBAPPLEPROC)(GLuint index, GLenum pname);
    typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBAPPLEPROC)(GLuint index, GLenum pname);
    typedef GLboolean(APIENTRYP PFNGLISVERTEXATTRIBENABLEDAPPLEPROC)(GLuint index, GLenum pname);
    typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1DAPPLEPROC)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
    typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1FAPPLEPROC)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
    typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2DAPPLEPROC)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
    typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2FAPPLEPROC)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
#endif /* GL_APPLE_vertex_program_evaluators */

#ifndef GL_APPLE_ycbcr_422
#define GL_APPLE_ycbcr_422 1
#define GL_YCBCR_422_APPLE 0x85B9
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
#endif /* GL_APPLE_ycbcr_422 */

#ifndef GL_ARB_ES2_compatibility
#define GL_ARB_ES2_compatibility 1
#define GL_FIXED 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RGB565 0x8D62
#endif /* GL_ARB_ES2_compatibility */

#ifndef GL_ARB_ES3_1_compatibility
#define GL_ARB_ES3_1_compatibility 1
#define GL_BACK 0x0405
#endif /* GL_ARB_ES3_1_compatibility */

#ifndef GL_ARB_ES3_2_compatibility
#define GL_ARB_ES3_2_compatibility 1
#define GL_PRIMITIVE_BOUNDING_BOX_ARB 0x92BE
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
    typedef void (APIENTRYP PFNGLPRIMITIVEBOUNDINGBOXARBPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
#endif /* GL_ARB_ES3_2_compatibility */

#ifndef GL_ARB_ES3_compatibility
#define GL_ARB_ES3_compatibility 1
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#endif /* GL_ARB_ES3_compatibility */

#ifndef GL_ARB_arrays_of_arrays
#define GL_ARB_arrays_of_arrays 1
#endif /* GL_ARB_arrays_of_arrays */

#ifndef GL_ARB_base_instance
#define GL_ARB_base_instance 1
#endif /* GL_ARB_base_instance */

#ifndef GL_ARB_bindless_texture
#define GL_ARB_bindless_texture 1
#define GL_UNSIGNED_INT64_ARB 0x140F
    typedef GLuint64(APIENTRYP PFNGLGETTEXTUREHANDLEARBPROC)(GLuint texture);
    typedef GLuint64(APIENTRYP PFNGLGETTEXTURESAMPLERHANDLEARBPROC)(GLuint texture, GLuint sampler);
    typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
    typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC)(GLuint64 handle);
    typedef GLuint64(APIENTRYP PFNGLGETIMAGEHANDLEARBPROC)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
    typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle, GLenum access);
    typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC)(GLuint64 handle);
    typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64ARBPROC)(GLint location, GLuint64 value);
    typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VARBPROC)(GLint location, GLsizei count, const GLuint64* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC)(GLuint program, GLint location, GLuint64 value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* values);
    typedef GLboolean(APIENTRYP PFNGLISTEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
    typedef GLboolean(APIENTRYP PFNGLISIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64ARBPROC)(GLuint index, GLuint64EXT x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VARBPROC)(GLuint index, const GLuint64EXT* v);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VARBPROC)(GLuint index, GLenum pname, GLuint64EXT* params);
#endif /* GL_ARB_bindless_texture */

#ifndef GL_ARB_blend_func_extended
#define GL_ARB_blend_func_extended 1
#define GL_SRC1_COLOR 0x88F9
#define GL_SRC1_ALPHA 0x8589
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#endif /* GL_ARB_blend_func_extended */

#ifndef GL_ARB_buffer_storage
#define GL_ARB_buffer_storage 1
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#endif /* GL_ARB_buffer_storage */

#ifndef GL_ARB_cl_event
#define GL_ARB_cl_event 1
    struct _cl_context;
    struct _cl_event;
#define GL_SYNC_CL_EVENT_ARB 0x8240
#define GL_SYNC_CL_EVENT_COMPLETE_ARB 0x8241
    typedef GLsync(APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC)(struct _cl_context* context, struct _cl_event* event, GLbitfield flags);
#endif /* GL_ARB_cl_event */

#ifndef GL_ARB_clear_buffer_object
#define GL_ARB_clear_buffer_object 1
#endif /* GL_ARB_clear_buffer_object */

#ifndef GL_ARB_clear_texture
#define GL_ARB_clear_texture 1
#define GL_CLEAR_TEXTURE 0x9365
#endif /* GL_ARB_clear_texture */

#ifndef GL_ARB_clip_control
#define GL_ARB_clip_control 1
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#endif /* GL_ARB_clip_control */

#ifndef GL_ARB_color_buffer_float
#define GL_ARB_color_buffer_float 1
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#define GL_FIXED_ONLY_ARB 0x891D
    typedef void (APIENTRYP PFNGLCLAMPCOLORARBPROC)(GLenum target, GLenum clamp);
#endif /* GL_ARB_color_buffer_float */

#ifndef GL_ARB_compatibility
#define GL_ARB_compatibility 1
#endif /* GL_ARB_compatibility */

#ifndef GL_ARB_compressed_texture_pixel_storage
#define GL_ARB_compressed_texture_pixel_storage 1
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#endif /* GL_ARB_compressed_texture_pixel_storage */

#ifndef GL_ARB_compute_shader
#define GL_ARB_compute_shader 1
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT 0x00000020
#endif /* GL_ARB_compute_shader */

#ifndef GL_ARB_compute_variable_group_size
#define GL_ARB_compute_variable_group_size 1
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
    typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
#endif /* GL_ARB_compute_variable_group_size */

#ifndef GL_ARB_conditional_render_inverted
#define GL_ARB_conditional_render_inverted 1
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#endif /* GL_ARB_conditional_render_inverted */

#ifndef GL_ARB_conservative_depth
#define GL_ARB_conservative_depth 1
#endif /* GL_ARB_conservative_depth */

#ifndef GL_ARB_copy_buffer
#define GL_ARB_copy_buffer 1
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#endif /* GL_ARB_copy_buffer */

#ifndef GL_ARB_copy_image
#define GL_ARB_copy_image 1
#endif /* GL_ARB_copy_image */

#ifndef GL_ARB_cull_distance
#define GL_ARB_cull_distance 1
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#endif /* GL_ARB_cull_distance */

#ifndef GL_ARB_debug_output
#define GL_ARB_debug_output 1
    typedef void (APIENTRY* GLDEBUGPROCARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245
#define GL_DEBUG_SOURCE_API_ARB 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249
#define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A
#define GL_DEBUG_SOURCE_OTHER_ARB 0x824B
#define GL_DEBUG_TYPE_ERROR_ARB 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250
#define GL_DEBUG_TYPE_OTHER_ARB 0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144
#define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145
#define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147
#define GL_DEBUG_SEVERITY_LOW_ARB 0x9148
    typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
    typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
    typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC)(GLDEBUGPROCARB callback, const void* userParam);
    typedef GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
#endif /* GL_ARB_debug_output */

#ifndef GL_ARB_depth_buffer_float
#define GL_ARB_depth_buffer_float 1
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#endif /* GL_ARB_depth_buffer_float */

#ifndef GL_ARB_depth_clamp
#define GL_ARB_depth_clamp 1
#define GL_DEPTH_CLAMP 0x864F
#endif /* GL_ARB_depth_clamp */

#ifndef GL_ARB_depth_texture
#define GL_ARB_depth_texture 1
#define GL_DEPTH_COMPONENT16_ARB 0x81A5
#define GL_DEPTH_COMPONENT24_ARB 0x81A6
#define GL_DEPTH_COMPONENT32_ARB 0x81A7
#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
#endif /* GL_ARB_depth_texture */

#ifndef GL_ARB_derivative_control
#define GL_ARB_derivative_control 1
#endif /* GL_ARB_derivative_control */

#ifndef GL_ARB_direct_state_access
#define GL_ARB_direct_state_access 1
#define GL_TEXTURE_TARGET 0x1006
#define GL_QUERY_TARGET 0x82EA
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#endif /* GL_ARB_direct_state_access */

#ifndef GL_ARB_draw_buffers
#define GL_ARB_draw_buffers 1
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#define GL_DRAW_BUFFER0_ARB 0x8825
#define GL_DRAW_BUFFER1_ARB 0x8826
#define GL_DRAW_BUFFER2_ARB 0x8827
#define GL_DRAW_BUFFER3_ARB 0x8828
#define GL_DRAW_BUFFER4_ARB 0x8829
#define GL_DRAW_BUFFER5_ARB 0x882A
#define GL_DRAW_BUFFER6_ARB 0x882B
#define GL_DRAW_BUFFER7_ARB 0x882C
#define GL_DRAW_BUFFER8_ARB 0x882D
#define GL_DRAW_BUFFER9_ARB 0x882E
#define GL_DRAW_BUFFER10_ARB 0x882F
#define GL_DRAW_BUFFER11_ARB 0x8830
#define GL_DRAW_BUFFER12_ARB 0x8831
#define GL_DRAW_BUFFER13_ARB 0x8832
#define GL_DRAW_BUFFER14_ARB 0x8833
#define GL_DRAW_BUFFER15_ARB 0x8834
    typedef void (APIENTRYP PFNGLDRAWBUFFERSARBPROC)(GLsizei n, const GLenum* bufs);
#endif /* GL_ARB_draw_buffers */

#ifndef GL_ARB_draw_buffers_blend
#define GL_ARB_draw_buffers_blend 1
    typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC)(GLuint buf, GLenum mode);
    typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC)(GLuint buf, GLenum src, GLenum dst);
    typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
#endif /* GL_ARB_draw_buffers_blend */

#ifndef GL_ARB_draw_elements_base_vertex
#define GL_ARB_draw_elements_base_vertex 1
#endif /* GL_ARB_draw_elements_base_vertex */

#ifndef GL_ARB_draw_indirect
#define GL_ARB_draw_indirect 1
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#endif /* GL_ARB_draw_indirect */

#ifndef GL_ARB_draw_instanced
#define GL_ARB_draw_instanced 1
    typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDARBPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDARBPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount);
#endif /* GL_ARB_draw_instanced */

#ifndef GL_ARB_enhanced_layouts
#define GL_ARB_enhanced_layouts 1
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#endif /* GL_ARB_enhanced_layouts */

#ifndef GL_ARB_explicit_attrib_location
#define GL_ARB_explicit_attrib_location 1
#endif /* GL_ARB_explicit_attrib_location */

#ifndef GL_ARB_explicit_uniform_location
#define GL_ARB_explicit_uniform_location 1
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#endif /* GL_ARB_explicit_uniform_location */

#ifndef GL_ARB_fragment_coord_conventions
#define GL_ARB_fragment_coord_conventions 1
#endif /* GL_ARB_fragment_coord_conventions */

#ifndef GL_ARB_fragment_layer_viewport
#define GL_ARB_fragment_layer_viewport 1
#endif /* GL_ARB_fragment_layer_viewport */

#ifndef GL_ARB_fragment_program
#define GL_ARB_fragment_program 1
#define GL_FRAGMENT_PROGRAM_ARB 0x8804
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
    typedef void (APIENTRYP PFNGLPROGRAMSTRINGARBPROC)(GLenum target, GLenum format, GLsizei len, const void* string);
    typedef void (APIENTRYP PFNGLBINDPROGRAMARBPROC)(GLenum target, GLuint program);
    typedef void (APIENTRYP PFNGLDELETEPROGRAMSARBPROC)(GLsizei n, const GLuint* programs);
    typedef void (APIENTRYP PFNGLGENPROGRAMSARBPROC)(GLsizei n, GLuint* programs);
    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble* params);
    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat* params);
    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble* params);
    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMIVARBPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGARBPROC)(GLenum target, GLenum pname, void* string);
    typedef GLboolean(APIENTRYP PFNGLISPROGRAMARBPROC)(GLuint program);
#endif /* GL_ARB_fragment_program */

#ifndef GL_ARB_fragment_program_shadow
#define GL_ARB_fragment_program_shadow 1
#endif /* GL_ARB_fragment_program_shadow */

#ifndef GL_ARB_fragment_shader
#define GL_ARB_fragment_shader 1
#define GL_FRAGMENT_SHADER_ARB 0x8B30
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
#endif /* GL_ARB_fragment_shader */

#ifndef GL_ARB_fragment_shader_interlock
#define GL_ARB_fragment_shader_interlock 1
#endif /* GL_ARB_fragment_shader_interlock */

#ifndef GL_ARB_framebuffer_no_attachments
#define GL_ARB_framebuffer_no_attachments 1
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#endif /* GL_ARB_framebuffer_no_attachments */

#ifndef GL_ARB_framebuffer_object
#define GL_ARB_framebuffer_object 1
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_INDEX 0x8222
#endif /* GL_ARB_framebuffer_object */

#ifndef GL_ARB_framebuffer_sRGB
#define GL_ARB_framebuffer_sRGB 1
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#endif /* GL_ARB_framebuffer_sRGB */

#ifndef GL_ARB_geometry_shader4
#define GL_ARB_geometry_shader4 1
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIARBPROC)(GLuint program, GLenum pname, GLint value);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
#endif /* GL_ARB_geometry_shader4 */

#ifndef GL_ARB_get_program_binary
#define GL_ARB_get_program_binary 1
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#endif /* GL_ARB_get_program_binary */

#ifndef GL_ARB_get_texture_sub_image
#define GL_ARB_get_texture_sub_image 1
#endif /* GL_ARB_get_texture_sub_image */

#ifndef GL_ARB_gl_spirv
#define GL_ARB_gl_spirv 1
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551
#define GL_SPIR_V_BINARY_ARB 0x9552
    typedef void (APIENTRYP PFNGLSPECIALIZESHADERARBPROC)(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue);
#endif /* GL_ARB_gl_spirv */

#ifndef GL_ARB_gpu_shader5
#define GL_ARB_gpu_shader5 1
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_MAX_VERTEX_STREAMS 0x8E71
#endif /* GL_ARB_gpu_shader5 */

#ifndef GL_ARB_gpu_shader_fp64
#define GL_ARB_gpu_shader_fp64 1
#define GL_DOUBLE 0x140A
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#endif /* GL_ARB_gpu_shader_fp64 */

#ifndef GL_ARB_gpu_shader_int64
#define GL_ARB_gpu_shader_int64 1
#define GL_INT64_ARB 0x140E
#define GL_UNSIGNED_INT64_ARB 0x140F
#define GL_INT64_VEC2_ARB 0x8FE9
#define GL_INT64_VEC3_ARB 0x8FEA
#define GL_INT64_VEC4_ARB 0x8FEB
#define GL_UNSIGNED_INT64_VEC2_ARB 0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB 0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB 0x8FF7
    typedef void (APIENTRYP PFNGLUNIFORM1I64ARBPROC)(GLint location, GLint64 x);
    typedef void (APIENTRYP PFNGLUNIFORM2I64ARBPROC)(GLint location, GLint64 x, GLint64 y);
    typedef void (APIENTRYP PFNGLUNIFORM3I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z);
    typedef void (APIENTRYP PFNGLUNIFORM4I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
    typedef void (APIENTRYP PFNGLUNIFORM1I64VARBPROC)(GLint location, GLsizei count, const GLint64* value);
    typedef void (APIENTRYP PFNGLUNIFORM2I64VARBPROC)(GLint location, GLsizei count, const GLint64* value);
    typedef void (APIENTRYP PFNGLUNIFORM3I64VARBPROC)(GLint location, GLsizei count, const GLint64* value);
    typedef void (APIENTRYP PFNGLUNIFORM4I64VARBPROC)(GLint location, GLsizei count, const GLint64* value);
    typedef void (APIENTRYP PFNGLUNIFORM1UI64ARBPROC)(GLint location, GLuint64 x);
    typedef void (APIENTRYP PFNGLUNIFORM2UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y);
    typedef void (APIENTRYP PFNGLUNIFORM3UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
    typedef void (APIENTRYP PFNGLUNIFORM4UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
    typedef void (APIENTRYP PFNGLUNIFORM1UI64VARBPROC)(GLint location, GLsizei count, const GLuint64* value);
    typedef void (APIENTRYP PFNGLUNIFORM2UI64VARBPROC)(GLint location, GLsizei count, const GLuint64* value);
    typedef void (APIENTRYP PFNGLUNIFORM3UI64VARBPROC)(GLint location, GLsizei count, const GLuint64* value);
    typedef void (APIENTRYP PFNGLUNIFORM4UI64VARBPROC)(GLint location, GLsizei count, const GLuint64* value);
    typedef void (APIENTRYP PFNGLGETUNIFORMI64VARBPROC)(GLuint program, GLint location, GLint64* params);
    typedef void (APIENTRYP PFNGLGETUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLuint64* params);
    typedef void (APIENTRYP PFNGLGETNUNIFORMI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint64* params);
    typedef void (APIENTRYP PFNGLGETNUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint64* params);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64ARBPROC)(GLuint program, GLint location, GLint64 x);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64ARBPROC)(GLuint program, GLint location, GLuint64 x);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* value);
#endif /* GL_ARB_gpu_shader_int64 */

#ifndef GL_ARB_half_float_pixel
#define GL_ARB_half_float_pixel 1
    typedef khronos_uint16_t GLhalfARB;
#define GL_HALF_FLOAT_ARB 0x140B
#endif /* GL_ARB_half_float_pixel */

#ifndef GL_ARB_half_float_vertex
#define GL_ARB_half_float_vertex 1
#define GL_HALF_FLOAT 0x140B
#endif /* GL_ARB_half_float_vertex */

#ifndef GL_ARB_imaging
#define GL_ARB_imaging 1
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_EQUATION 0x8009
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_MIN 0x8007
#define GL_MAX 0x8008
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_SEPARABLE_2D 0x8012
#define GL_CONVOLUTION_BORDER_MODE 0x8013
#define GL_CONVOLUTION_FILTER_SCALE 0x8014
#define GL_CONVOLUTION_FILTER_BIAS 0x8015
#define GL_REDUCE 0x8016
#define GL_CONVOLUTION_FORMAT 0x8017
#define GL_CONVOLUTION_WIDTH 0x8018
#define GL_CONVOLUTION_HEIGHT 0x8019
#define GL_MAX_CONVOLUTION_WIDTH 0x801A
#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
#define GL_HISTOGRAM 0x8024
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_HISTOGRAM_WIDTH 0x8026
#define GL_HISTOGRAM_FORMAT 0x8027
#define GL_HISTOGRAM_RED_SIZE 0x8028
#define GL_HISTOGRAM_GREEN_SIZE 0x8029
#define GL_HISTOGRAM_BLUE_SIZE 0x802A
#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
#define GL_HISTOGRAM_SINK 0x802D
#define GL_MINMAX 0x802E
#define GL_MINMAX_FORMAT 0x802F
#define GL_MINMAX_SINK 0x8030
#define GL_TABLE_TOO_LARGE 0x8031
#define GL_COLOR_MATRIX 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
#define GL_COLOR_TABLE 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_COLOR_TABLE_SCALE 0x80D6
#define GL_COLOR_TABLE_BIAS 0x80D7
#define GL_COLOR_TABLE_FORMAT 0x80D8
#define GL_COLOR_TABLE_WIDTH 0x80D9
#define GL_COLOR_TABLE_RED_SIZE 0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
#define GL_CONSTANT_BORDER 0x8151
#define GL_REPLICATE_BORDER 0x8153
#define GL_CONVOLUTION_BORDER_COLOR 0x8154
    typedef void (APIENTRYP PFNGLCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table);
    typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLCOPYCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    typedef void (APIENTRYP PFNGLGETCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, void* table);
    typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data);
    typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
    typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image);
    typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image);
    typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat params);
    typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIPROC)(GLenum target, GLenum pname, GLint params);
    typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, void* image);
    typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span);
    typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column);
    typedef void (APIENTRYP PFNGLGETHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
    typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
    typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLHISTOGRAMPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
    typedef void (APIENTRYP PFNGLMINMAXPROC)(GLenum target, GLenum internalformat, GLboolean sink);
    typedef void (APIENTRYP PFNGLRESETHISTOGRAMPROC)(GLenum target);
    typedef void (APIENTRYP PFNGLRESETMINMAXPROC)(GLenum target);
#endif /* GL_ARB_imaging */

#ifndef GL_ARB_indirect_parameters
#define GL_ARB_indirect_parameters 1
#define GL_PARAMETER_BUFFER_ARB 0x80EE
#define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF
    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)(GLenum mode, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)(GLenum mode, GLenum type, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
#endif /* GL_ARB_indirect_parameters */

#ifndef GL_ARB_instanced_arrays
#define GL_ARB_instanced_arrays 1
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
    typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORARBPROC)(GLuint index, GLuint divisor);
#endif /* GL_ARB_instanced_arrays */

#ifndef GL_ARB_internalformat_query
#define GL_ARB_internalformat_query 1
#define GL_NUM_SAMPLE_COUNTS 0x9380
#endif /* GL_ARB_internalformat_query */

#ifndef GL_ARB_internalformat_query2
#define GL_ARB_internalformat_query2 1
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_RENDERBUFFER 0x8D41
#define GL_SAMPLES 0x80A9
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_SRGB_DECODE_ARB 0x8299
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_VIEW_CLASS_EAC_R11 0x9383
#define GL_VIEW_CLASS_EAC_RG11 0x9384
#define GL_VIEW_CLASS_ETC2_RGB 0x9385
#define GL_VIEW_CLASS_ETC2_RGBA 0x9386
#define GL_VIEW_CLASS_ETC2_EAC_RGBA 0x9387
#define GL_VIEW_CLASS_ASTC_4x4_RGBA 0x9388
#define GL_VIEW_CLASS_ASTC_5x4_RGBA 0x9389
#define GL_VIEW_CLASS_ASTC_5x5_RGBA 0x938A
#define GL_VIEW_CLASS_ASTC_6x5_RGBA 0x938B
#define GL_VIEW_CLASS_ASTC_6x6_RGBA 0x938C
#define GL_VIEW_CLASS_ASTC_8x5_RGBA 0x938D
#define GL_VIEW_CLASS_ASTC_8x6_RGBA 0x938E
#define GL_VIEW_CLASS_ASTC_8x8_RGBA 0x938F
#define GL_VIEW_CLASS_ASTC_10x5_RGBA 0x9390
#define GL_VIEW_CLASS_ASTC_10x6_RGBA 0x9391
#define GL_VIEW_CLASS_ASTC_10x8_RGBA 0x9392
#define GL_VIEW_CLASS_ASTC_10x10_RGBA 0x9393
#define GL_VIEW_CLASS_ASTC_12x10_RGBA 0x9394
#define GL_VIEW_CLASS_ASTC_12x12_RGBA 0x9395
#endif /* GL_ARB_internalformat_query2 */

#ifndef GL_ARB_invalidate_subdata
#define GL_ARB_invalidate_subdata 1
#endif /* GL_ARB_invalidate_subdata */

#ifndef GL_ARB_map_buffer_alignment
#define GL_ARB_map_buffer_alignment 1
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#endif /* GL_ARB_map_buffer_alignment */

#ifndef GL_ARB_map_buffer_range
#define GL_ARB_map_buffer_range 1
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#endif /* GL_ARB_map_buffer_range */

#ifndef GL_ARB_matrix_palette
#define GL_ARB_matrix_palette 1
#define GL_MATRIX_PALETTE_ARB 0x8840
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
#define GL_MAX_PALETTE_MATRICES_ARB 0x8842
#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
    typedef void (APIENTRYP PFNGLCURRENTPALETTEMATRIXARBPROC)(GLint index);
    typedef void (APIENTRYP PFNGLMATRIXINDEXUBVARBPROC)(GLint size, const GLubyte* indices);
    typedef void (APIENTRYP PFNGLMATRIXINDEXUSVARBPROC)(GLint size, const GLushort* indices);
    typedef void (APIENTRYP PFNGLMATRIXINDEXUIVARBPROC)(GLint size, const GLuint* indices);
    typedef void (APIENTRYP PFNGLMATRIXINDEXPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
#endif /* GL_ARB_matrix_palette */

#ifndef GL_ARB_multi_bind
#define GL_ARB_multi_bind 1
#endif /* GL_ARB_multi_bind */

#ifndef GL_ARB_multi_draw_indirect
#define GL_ARB_multi_draw_indirect 1
#endif /* GL_ARB_multi_draw_indirect */

#ifndef GL_ARB_multisample
#define GL_ARB_multisample 1
#define GL_MULTISAMPLE_ARB 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#define GL_SAMPLES_ARB 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
    typedef void (APIENTRYP PFNGLSAMPLECOVERAGEARBPROC)(GLfloat value, GLboolean invert);
#endif /* GL_ARB_multisample */

#ifndef GL_ARB_multitexture
#define GL_ARB_multitexture 1
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31_ARB 0x84DF
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
    typedef void (APIENTRYP PFNGLACTIVETEXTUREARBPROC)(GLenum texture);
    typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1DARBPROC)(GLenum target, GLdouble s);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVARBPROC)(GLenum target, const GLdouble* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1FARBPROC)(GLenum target, GLfloat s);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVARBPROC)(GLenum target, const GLfloat* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1IARBPROC)(GLenum target, GLint s);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVARBPROC)(GLenum target, const GLint* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1SARBPROC)(GLenum target, GLshort s);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVARBPROC)(GLenum target, const GLshort* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2DARBPROC)(GLenum target, GLdouble s, GLdouble t);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVARBPROC)(GLenum target, const GLdouble* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2FARBPROC)(GLenum target, GLfloat s, GLfloat t);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVARBPROC)(GLenum target, const GLfloat* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2IARBPROC)(GLenum target, GLint s, GLint t);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVARBPROC)(GLenum target, const GLint* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2SARBPROC)(GLenum target, GLshort s, GLshort t);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVARBPROC)(GLenum target, const GLshort* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVARBPROC)(GLenum target, const GLdouble* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVARBPROC)(GLenum target, const GLfloat* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3IARBPROC)(GLenum target, GLint s, GLint t, GLint r);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVARBPROC)(GLenum target, const GLint* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVARBPROC)(GLenum target, const GLshort* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVARBPROC)(GLenum target, const GLdouble* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVARBPROC)(GLenum target, const GLfloat* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4IARBPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVARBPROC)(GLenum target, const GLint* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVARBPROC)(GLenum target, const GLshort* v);
#endif /* GL_ARB_multitexture */

#ifndef GL_ARB_occlusion_query
#define GL_ARB_occlusion_query 1
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#define GL_CURRENT_QUERY_ARB 0x8865
#define GL_QUERY_RESULT_ARB 0x8866
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define GL_SAMPLES_PASSED_ARB 0x8914
    typedef void (APIENTRYP PFNGLGENQUERIESARBPROC)(GLsizei n, GLuint* ids);
    typedef void (APIENTRYP PFNGLDELETEQUERIESARBPROC)(GLsizei n, const GLuint* ids);
    typedef GLboolean(APIENTRYP PFNGLISQUERYARBPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLBEGINQUERYARBPROC)(GLenum target, GLuint id);
    typedef void (APIENTRYP PFNGLENDQUERYARBPROC)(GLenum target);
    typedef void (APIENTRYP PFNGLGETQUERYIVARBPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVARBPROC)(GLuint id, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVARBPROC)(GLuint id, GLenum pname, GLuint* params);
#endif /* GL_ARB_occlusion_query */

#ifndef GL_ARB_occlusion_query2
#define GL_ARB_occlusion_query2 1
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#endif /* GL_ARB_occlusion_query2 */

#ifndef GL_ARB_parallel_shader_compile
#define GL_ARB_parallel_shader_compile 1
#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0
#define GL_COMPLETION_STATUS_ARB 0x91B1
    typedef void (APIENTRYP PFNGLMAXSHADERCOMPILERTHREADSARBPROC)(GLuint count);
#endif /* GL_ARB_parallel_shader_compile */

#ifndef GL_ARB_pipeline_statistics_query
#define GL_ARB_pipeline_statistics_query 1
#define GL_VERTICES_SUBMITTED_ARB 0x82EE
#define GL_PRIMITIVES_SUBMITTED_ARB 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS_ARB 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
#endif /* GL_ARB_pipeline_statistics_query */

#ifndef GL_ARB_pixel_buffer_object
#define GL_ARB_pixel_buffer_object 1
#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#endif /* GL_ARB_pixel_buffer_object */

#ifndef GL_ARB_point_parameters
#define GL_ARB_point_parameters 1
#define GL_POINT_SIZE_MIN_ARB 0x8126
#define GL_POINT_SIZE_MAX_ARB 0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
    typedef void (APIENTRYP PFNGLPOINTPARAMETERFARBPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLPOINTPARAMETERFVARBPROC)(GLenum pname, const GLfloat* params);
#endif /* GL_ARB_point_parameters */

#ifndef GL_ARB_point_sprite
#define GL_ARB_point_sprite 1
#define GL_POINT_SPRITE_ARB 0x8861
#define GL_COORD_REPLACE_ARB 0x8862
#endif /* GL_ARB_point_sprite */

#ifndef GL_ARB_polygon_offset_clamp
#define GL_ARB_polygon_offset_clamp 1
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#endif /* GL_ARB_polygon_offset_clamp */

#ifndef GL_ARB_post_depth_coverage
#define GL_ARB_post_depth_coverage 1
#endif /* GL_ARB_post_depth_coverage */

#ifndef GL_ARB_program_interface_query
#define GL_ARB_program_interface_query 1
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_IS_PER_PATCH 0x92E7
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#endif /* GL_ARB_program_interface_query */

#ifndef GL_ARB_provoking_vertex
#define GL_ARB_provoking_vertex 1
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#endif /* GL_ARB_provoking_vertex */

#ifndef GL_ARB_query_buffer_object
#define GL_ARB_query_buffer_object 1
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#endif /* GL_ARB_query_buffer_object */

#ifndef GL_ARB_robust_buffer_access_behavior
#define GL_ARB_robust_buffer_access_behavior 1
#endif /* GL_ARB_robust_buffer_access_behavior */

#ifndef GL_ARB_robustness
#define GL_ARB_robustness 1
#define GL_NO_ERROR 0
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261
    typedef GLenum(APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC)(void);
    typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img);
    typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
    typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint lod, GLsizei bufSize, void* img);
    typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
    typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
    typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETNMAPDVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
    typedef void (APIENTRYP PFNGLGETNMAPFVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
    typedef void (APIENTRYP PFNGLGETNMAPIVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
    typedef void (APIENTRYP PFNGLGETNPIXELMAPFVARBPROC)(GLenum map, GLsizei bufSize, GLfloat* values);
    typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVARBPROC)(GLenum map, GLsizei bufSize, GLuint* values);
    typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVARBPROC)(GLenum map, GLsizei bufSize, GLushort* values);
    typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEARBPROC)(GLsizei bufSize, GLubyte* pattern);
    typedef void (APIENTRYP PFNGLGETNCOLORTABLEARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
    typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
    typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
    typedef void (APIENTRYP PFNGLGETNHISTOGRAMARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
    typedef void (APIENTRYP PFNGLGETNMINMAXARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
#endif /* GL_ARB_robustness */

#ifndef GL_ARB_robustness_isolation
#define GL_ARB_robustness_isolation 1
#endif /* GL_ARB_robustness_isolation */

#ifndef GL_ARB_sample_locations
#define GL_ARB_sample_locations 1
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
#define GL_SAMPLE_LOCATION_ARB 0x8E50
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
    typedef void (APIENTRYP PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLenum target, GLuint start, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLEVALUATEDEPTHVALUESARBPROC)(void);
#endif /* GL_ARB_sample_locations */

#ifndef GL_ARB_sample_shading
#define GL_ARB_sample_shading 1
#define GL_SAMPLE_SHADING_ARB 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
    typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC)(GLfloat value);
#endif /* GL_ARB_sample_shading */

#ifndef GL_ARB_sampler_objects
#define GL_ARB_sampler_objects 1
#define GL_SAMPLER_BINDING 0x8919
#endif /* GL_ARB_sampler_objects */

#ifndef GL_ARB_seamless_cube_map
#define GL_ARB_seamless_cube_map 1
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#endif /* GL_ARB_seamless_cube_map */

#ifndef GL_ARB_seamless_cubemap_per_texture
#define GL_ARB_seamless_cubemap_per_texture 1
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#endif /* GL_ARB_seamless_cubemap_per_texture */

#ifndef GL_ARB_separate_shader_objects
#define GL_ARB_separate_shader_objects 1
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#endif /* GL_ARB_separate_shader_objects */

#ifndef GL_ARB_shader_atomic_counter_ops
#define GL_ARB_shader_atomic_counter_ops 1
#endif /* GL_ARB_shader_atomic_counter_ops */

#ifndef GL_ARB_shader_atomic_counters
#define GL_ARB_shader_atomic_counters 1
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif /* GL_ARB_shader_atomic_counters */

#ifndef GL_ARB_shader_ballot
#define GL_ARB_shader_ballot 1
#endif /* GL_ARB_shader_ballot */

#ifndef GL_ARB_shader_bit_encoding
#define GL_ARB_shader_bit_encoding 1
#endif /* GL_ARB_shader_bit_encoding */

#ifndef GL_ARB_shader_clock
#define GL_ARB_shader_clock 1
#endif /* GL_ARB_shader_clock */

#ifndef GL_ARB_shader_draw_parameters
#define GL_ARB_shader_draw_parameters 1
#endif /* GL_ARB_shader_draw_parameters */

#ifndef GL_ARB_shader_group_vote
#define GL_ARB_shader_group_vote 1
#endif /* GL_ARB_shader_group_vote */

#ifndef GL_ARB_shader_image_load_store
#define GL_ARB_shader_image_load_store 1
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif /* GL_ARB_shader_image_load_store */

#ifndef GL_ARB_shader_image_size
#define GL_ARB_shader_image_size 1
#endif /* GL_ARB_shader_image_size */

#ifndef GL_ARB_shader_objects
#define GL_ARB_shader_objects 1
#ifdef __APPLE__
    typedef void* GLhandleARB;
#else
    typedef unsigned int GLhandleARB;
#endif
    typedef char GLcharARB;
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4_ARB 0x8B55
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
    typedef void (APIENTRYP PFNGLDELETEOBJECTARBPROC)(GLhandleARB obj);
    typedef GLhandleARB(APIENTRYP PFNGLGETHANDLEARBPROC)(GLenum pname);
    typedef void (APIENTRYP PFNGLDETACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB attachedObj);
    typedef GLhandleARB(APIENTRYP PFNGLCREATESHADEROBJECTARBPROC)(GLenum shaderType);
    typedef void (APIENTRYP PFNGLSHADERSOURCEARBPROC)(GLhandleARB shaderObj, GLsizei count, const GLcharARB** string, const GLint* length);
    typedef void (APIENTRYP PFNGLCOMPILESHADERARBPROC)(GLhandleARB shaderObj);
    typedef GLhandleARB(APIENTRYP PFNGLCREATEPROGRAMOBJECTARBPROC)(void);
    typedef void (APIENTRYP PFNGLATTACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB obj);
    typedef void (APIENTRYP PFNGLLINKPROGRAMARBPROC)(GLhandleARB programObj);
    typedef void (APIENTRYP PFNGLUSEPROGRAMOBJECTARBPROC)(GLhandleARB programObj);
    typedef void (APIENTRYP PFNGLVALIDATEPROGRAMARBPROC)(GLhandleARB programObj);
    typedef void (APIENTRYP PFNGLUNIFORM1FARBPROC)(GLint location, GLfloat v0);
    typedef void (APIENTRYP PFNGLUNIFORM2FARBPROC)(GLint location, GLfloat v0, GLfloat v1);
    typedef void (APIENTRYP PFNGLUNIFORM3FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    typedef void (APIENTRYP PFNGLUNIFORM4FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    typedef void (APIENTRYP PFNGLUNIFORM1IARBPROC)(GLint location, GLint v0);
    typedef void (APIENTRYP PFNGLUNIFORM2IARBPROC)(GLint location, GLint v0, GLint v1);
    typedef void (APIENTRYP PFNGLUNIFORM3IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2);
    typedef void (APIENTRYP PFNGLUNIFORM4IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    typedef void (APIENTRYP PFNGLUNIFORM1FVARBPROC)(GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORM2FVARBPROC)(GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORM3FVARBPROC)(GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORM4FVARBPROC)(GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORM1IVARBPROC)(GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLUNIFORM2IVARBPROC)(GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLUNIFORM3IVARBPROC)(GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLUNIFORM4IVARBPROC)(GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERFVARBPROC)(GLhandleARB obj, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVARBPROC)(GLhandleARB obj, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETINFOLOGARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog);
    typedef void (APIENTRYP PFNGLGETATTACHEDOBJECTSARBPROC)(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj);
    typedef GLint(APIENTRYP PFNGLGETUNIFORMLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB* name);
    typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name);
    typedef void (APIENTRYP PFNGLGETUNIFORMFVARBPROC)(GLhandleARB programObj, GLint location, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETUNIFORMIVARBPROC)(GLhandleARB programObj, GLint location, GLint* params);
    typedef void (APIENTRYP PFNGLGETSHADERSOURCEARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source);
#endif /* GL_ARB_shader_objects */

#ifndef GL_ARB_shader_precision
#define GL_ARB_shader_precision 1
#endif /* GL_ARB_shader_precision */

#ifndef GL_ARB_shader_stencil_export
#define GL_ARB_shader_stencil_export 1
#endif /* GL_ARB_shader_stencil_export */

#ifndef GL_ARB_shader_storage_buffer_object
#define GL_ARB_shader_storage_buffer_object 1
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif /* GL_ARB_shader_storage_buffer_object */

#ifndef GL_ARB_shader_subroutine
#define GL_ARB_shader_subroutine 1
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif /* GL_ARB_shader_subroutine */

#ifndef GL_ARB_shader_texture_image_samples
#define GL_ARB_shader_texture_image_samples 1
#endif /* GL_ARB_shader_texture_image_samples */

#ifndef GL_ARB_shader_texture_lod
#define GL_ARB_shader_texture_lod 1
#endif /* GL_ARB_shader_texture_lod */

#ifndef GL_ARB_shader_viewport_layer_array
#define GL_ARB_shader_viewport_layer_array 1
#endif /* GL_ARB_shader_viewport_layer_array */

#ifndef GL_ARB_shading_language_100
#define GL_ARB_shading_language_100 1
#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
#endif /* GL_ARB_shading_language_100 */

#ifndef GL_ARB_shading_language_420pack
#define GL_ARB_shading_language_420pack 1
#endif /* GL_ARB_shading_language_420pack */

#ifndef GL_ARB_shading_language_include
#define GL_ARB_shading_language_include 1
#define GL_SHADER_INCLUDE_ARB 0x8DAE
#define GL_NAMED_STRING_LENGTH_ARB 0x8DE9
#define GL_NAMED_STRING_TYPE_ARB 0x8DEA
    typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC)(GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar* string);
    typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC)(GLint namelen, const GLchar* name);
    typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC)(GLuint shader, GLsizei count, const GLchar* const* path, const GLint* length);
    typedef GLboolean(APIENTRYP PFNGLISNAMEDSTRINGARBPROC)(GLint namelen, const GLchar* name);
    typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC)(GLint namelen, const GLchar* name, GLsizei bufSize, GLint* stringlen, GLchar* string);
    typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC)(GLint namelen, const GLchar* name, GLenum pname, GLint* params);
#endif /* GL_ARB_shading_language_include */

#ifndef GL_ARB_shading_language_packing
#define GL_ARB_shading_language_packing 1
#endif /* GL_ARB_shading_language_packing */

#ifndef GL_ARB_shadow
#define GL_ARB_shadow 1
#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
#endif /* GL_ARB_shadow */

#ifndef GL_ARB_shadow_ambient
#define GL_ARB_shadow_ambient 1
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
#endif /* GL_ARB_shadow_ambient */

#ifndef GL_ARB_sparse_buffer
#define GL_ARB_sparse_buffer 1
#define GL_SPARSE_STORAGE_BIT_ARB 0x0400
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0x82F8
    typedef void (APIENTRYP PFNGLBUFFERPAGECOMMITMENTARBPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
#endif /* GL_ARB_sparse_buffer */

#ifndef GL_ARB_sparse_texture
#define GL_ARB_sparse_texture 1
#define GL_TEXTURE_SPARSE_ARB 0x91A6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0x91A7
#define GL_NUM_SPARSE_LEVELS_ARB 0x91AA
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0x91A8
#define GL_VIRTUAL_PAGE_SIZE_X_ARB 0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
    typedef void (APIENTRYP PFNGLTEXPAGECOMMITMENTARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
#endif /* GL_ARB_sparse_texture */

#ifndef GL_ARB_sparse_texture2
#define GL_ARB_sparse_texture2 1
#endif /* GL_ARB_sparse_texture2 */

#ifndef GL_ARB_sparse_texture_clamp
#define GL_ARB_sparse_texture_clamp 1
#endif /* GL_ARB_sparse_texture_clamp */

#ifndef GL_ARB_spirv_extensions
#define GL_ARB_spirv_extensions 1
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#endif /* GL_ARB_spirv_extensions */

#ifndef GL_ARB_stencil_texturing
#define GL_ARB_stencil_texturing 1
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#endif /* GL_ARB_stencil_texturing */

#ifndef GL_ARB_sync
#define GL_ARB_sync 1
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_SIGNALED 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#endif /* GL_ARB_sync */

#ifndef GL_ARB_tessellation_shader
#define GL_ARB_tessellation_shader 1
#define GL_PATCHES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TRIANGLES 0x0004
#define GL_ISOLINES 0x8E7A
#define GL_QUADS 0x0007
#define GL_EQUAL 0x0202
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_CCW 0x0901
#define GL_CW 0x0900
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#endif /* GL_ARB_tessellation_shader */

#ifndef GL_ARB_texture_barrier
#define GL_ARB_texture_barrier 1
#endif /* GL_ARB_texture_barrier */

#ifndef GL_ARB_texture_border_clamp
#define GL_ARB_texture_border_clamp 1
#define GL_CLAMP_TO_BORDER_ARB 0x812D
#endif /* GL_ARB_texture_border_clamp */

#ifndef GL_ARB_texture_buffer_object
#define GL_ARB_texture_buffer_object 1
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
    typedef void (APIENTRYP PFNGLTEXBUFFERARBPROC)(GLenum target, GLenum internalformat, GLuint buffer);
#endif /* GL_ARB_texture_buffer_object */

#ifndef GL_ARB_texture_buffer_object_rgb32
#define GL_ARB_texture_buffer_object_rgb32 1
#define GL_RGB32F 0x8815
#define GL_RGB32UI 0x8D71
#define GL_RGB32I 0x8D83
#endif /* GL_ARB_texture_buffer_object_rgb32 */

#ifndef GL_ARB_texture_buffer_range
#define GL_ARB_texture_buffer_range 1
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#endif /* GL_ARB_texture_buffer_range */

#ifndef GL_ARB_texture_compression
#define GL_ARB_texture_compression 1
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#define GL_COMPRESSED_RGB_ARB 0x84ED
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
    typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint level, void* img);
#endif /* GL_ARB_texture_compression */

#ifndef GL_ARB_texture_compression_bptc
#define GL_ARB_texture_compression_bptc 1
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#endif /* GL_ARB_texture_compression_bptc */

#ifndef GL_ARB_texture_compression_rgtc
#define GL_ARB_texture_compression_rgtc 1
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#endif /* GL_ARB_texture_compression_rgtc */

#ifndef GL_ARB_texture_cube_map
#define GL_ARB_texture_cube_map 1
#define GL_NORMAL_MAP_ARB 0x8511
#define GL_REFLECTION_MAP_ARB 0x8512
#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
#endif /* GL_ARB_texture_cube_map */

#ifndef GL_ARB_texture_cube_map_array
#define GL_ARB_texture_cube_map_array 1
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#endif /* GL_ARB_texture_cube_map_array */

#ifndef GL_ARB_texture_env_add
#define GL_ARB_texture_env_add 1
#endif /* GL_ARB_texture_env_add */

#ifndef GL_ARB_texture_env_combine
#define GL_ARB_texture_env_combine 1
#define GL_COMBINE_ARB 0x8570
#define GL_COMBINE_RGB_ARB 0x8571
#define GL_COMBINE_ALPHA_ARB 0x8572
#define GL_SOURCE0_RGB_ARB 0x8580
#define GL_SOURCE1_RGB_ARB 0x8581
#define GL_SOURCE2_RGB_ARB 0x8582
#define GL_SOURCE0_ALPHA_ARB 0x8588
#define GL_SOURCE1_ALPHA_ARB 0x8589
#define GL_SOURCE2_ALPHA_ARB 0x858A
#define GL_OPERAND0_RGB_ARB 0x8590
#define GL_OPERAND1_RGB_ARB 0x8591
#define GL_OPERAND2_RGB_ARB 0x8592
#define GL_OPERAND0_ALPHA_ARB 0x8598
#define GL_OPERAND1_ALPHA_ARB 0x8599
#define GL_OPERAND2_ALPHA_ARB 0x859A
#define GL_RGB_SCALE_ARB 0x8573
#define GL_ADD_SIGNED_ARB 0x8574
#define GL_INTERPOLATE_ARB 0x8575
#define GL_SUBTRACT_ARB 0x84E7
#define GL_CONSTANT_ARB 0x8576
#define GL_PRIMARY_COLOR_ARB 0x8577
#define GL_PREVIOUS_ARB 0x8578
#endif /* GL_ARB_texture_env_combine */

#ifndef GL_ARB_texture_env_crossbar
#define GL_ARB_texture_env_crossbar 1
#endif /* GL_ARB_texture_env_crossbar */

#ifndef GL_ARB_texture_env_dot3
#define GL_ARB_texture_env_dot3 1
#define GL_DOT3_RGB_ARB 0x86AE
#define GL_DOT3_RGBA_ARB 0x86AF
#endif /* GL_ARB_texture_env_dot3 */

#ifndef GL_ARB_texture_filter_anisotropic
#define GL_ARB_texture_filter_anisotropic 1
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#endif /* GL_ARB_texture_filter_anisotropic */

#ifndef GL_ARB_texture_filter_minmax
#define GL_ARB_texture_filter_minmax 1
#define GL_TEXTURE_REDUCTION_MODE_ARB 0x9366
#define GL_WEIGHTED_AVERAGE_ARB 0x9367
#endif /* GL_ARB_texture_filter_minmax */

#ifndef GL_ARB_texture_float
#define GL_ARB_texture_float 1
#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
#define GL_RGBA32F_ARB 0x8814
#define GL_RGB32F_ARB 0x8815
#define GL_ALPHA32F_ARB 0x8816
#define GL_INTENSITY32F_ARB 0x8817
#define GL_LUMINANCE32F_ARB 0x8818
#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
#define GL_RGBA16F_ARB 0x881A
#define GL_RGB16F_ARB 0x881B
#define GL_ALPHA16F_ARB 0x881C
#define GL_INTENSITY16F_ARB 0x881D
#define GL_LUMINANCE16F_ARB 0x881E
#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
#endif /* GL_ARB_texture_float */

#ifndef GL_ARB_texture_gather
#define GL_ARB_texture_gather 1
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#endif /* GL_ARB_texture_gather */

#ifndef GL_ARB_texture_mirror_clamp_to_edge
#define GL_ARB_texture_mirror_clamp_to_edge 1
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#endif /* GL_ARB_texture_mirror_clamp_to_edge */

#ifndef GL_ARB_texture_mirrored_repeat
#define GL_ARB_texture_mirrored_repeat 1
#define GL_MIRRORED_REPEAT_ARB 0x8370
#endif /* GL_ARB_texture_mirrored_repeat */

#ifndef GL_ARB_texture_multisample
#define GL_ARB_texture_multisample 1
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#endif /* GL_ARB_texture_multisample */

#ifndef GL_ARB_texture_non_power_of_two
#define GL_ARB_texture_non_power_of_two 1
#endif /* GL_ARB_texture_non_power_of_two */

#ifndef GL_ARB_texture_query_levels
#define GL_ARB_texture_query_levels 1
#endif /* GL_ARB_texture_query_levels */

#ifndef GL_ARB_texture_query_lod
#define GL_ARB_texture_query_lod 1
#endif /* GL_ARB_texture_query_lod */

#ifndef GL_ARB_texture_rectangle
#define GL_ARB_texture_rectangle 1
#define GL_TEXTURE_RECTANGLE_ARB 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
#endif /* GL_ARB_texture_rectangle */

#ifndef GL_ARB_texture_rg
#define GL_ARB_texture_rg 1
#define GL_RG 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R16 0x822A
#define GL_RG8 0x822B
#define GL_RG16 0x822C
#define GL_R16F 0x822D
#define GL_R32F 0x822E
#define GL_RG16F 0x822F
#define GL_RG32F 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#endif /* GL_ARB_texture_rg */

#ifndef GL_ARB_texture_rgb10_a2ui
#define GL_ARB_texture_rgb10_a2ui 1
#define GL_RGB10_A2UI 0x906F
#endif /* GL_ARB_texture_rgb10_a2ui */

#ifndef GL_ARB_texture_stencil8
#define GL_ARB_texture_stencil8 1
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX8 0x8D48
#endif /* GL_ARB_texture_stencil8 */

#ifndef GL_ARB_texture_storage
#define GL_ARB_texture_storage 1
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#endif /* GL_ARB_texture_storage */

#ifndef GL_ARB_texture_storage_multisample
#define GL_ARB_texture_storage_multisample 1
#endif /* GL_ARB_texture_storage_multisample */

#ifndef GL_ARB_texture_swizzle
#define GL_ARB_texture_swizzle 1
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#endif /* GL_ARB_texture_swizzle */

#ifndef GL_ARB_texture_view
#define GL_ARB_texture_view 1
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#endif /* GL_ARB_texture_view */

#ifndef GL_ARB_timer_query
#define GL_ARB_timer_query 1
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIMESTAMP 0x8E28
#endif /* GL_ARB_timer_query */

#ifndef GL_ARB_transform_feedback2
#define GL_ARB_transform_feedback2 1
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#endif /* GL_ARB_transform_feedback2 */

#ifndef GL_ARB_transform_feedback3
#define GL_ARB_transform_feedback3 1
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_VERTEX_STREAMS 0x8E71
#endif /* GL_ARB_transform_feedback3 */

#ifndef GL_ARB_transform_feedback_instanced
#define GL_ARB_transform_feedback_instanced 1
#endif /* GL_ARB_transform_feedback_instanced */

#ifndef GL_ARB_transform_feedback_overflow_query
#define GL_ARB_transform_feedback_overflow_query 1
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#endif /* GL_ARB_transform_feedback_overflow_query */

#ifndef GL_ARB_transpose_matrix
#define GL_ARB_transpose_matrix 1
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
    typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFARBPROC)(const GLfloat* m);
    typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDARBPROC)(const GLdouble* m);
    typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFARBPROC)(const GLfloat* m);
    typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDARBPROC)(const GLdouble* m);
#endif /* GL_ARB_transpose_matrix */

#ifndef GL_ARB_uniform_buffer_object
#define GL_ARB_uniform_buffer_object 1
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX 0xFFFFFFFF
#endif /* GL_ARB_uniform_buffer_object */

#ifndef GL_ARB_vertex_array_bgra
#define GL_ARB_vertex_array_bgra 1
#define GL_BGRA 0x80E1
#endif /* GL_ARB_vertex_array_bgra */

#ifndef GL_ARB_vertex_array_object
#define GL_ARB_vertex_array_object 1
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#endif /* GL_ARB_vertex_array_object */

#ifndef GL_ARB_vertex_attrib_64bit
#define GL_ARB_vertex_attrib_64bit 1
#define GL_RGB32I 0x8D83
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#endif /* GL_ARB_vertex_attrib_64bit */

#ifndef GL_ARB_vertex_attrib_binding
#define GL_ARB_vertex_attrib_binding 1
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#endif /* GL_ARB_vertex_attrib_binding */

#ifndef GL_ARB_vertex_blend
#define GL_ARB_vertex_blend 1
#define GL_MAX_VERTEX_UNITS_ARB 0x86A4
#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
#define GL_VERTEX_BLEND_ARB 0x86A7
#define GL_CURRENT_WEIGHT_ARB 0x86A8
#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
#define GL_WEIGHT_ARRAY_ARB 0x86AD
#define GL_MODELVIEW0_ARB 0x1700
#define GL_MODELVIEW1_ARB 0x850A
#define GL_MODELVIEW2_ARB 0x8722
#define GL_MODELVIEW3_ARB 0x8723
#define GL_MODELVIEW4_ARB 0x8724
#define GL_MODELVIEW5_ARB 0x8725
#define GL_MODELVIEW6_ARB 0x8726
#define GL_MODELVIEW7_ARB 0x8727
#define GL_MODELVIEW8_ARB 0x8728
#define GL_MODELVIEW9_ARB 0x8729
#define GL_MODELVIEW10_ARB 0x872A
#define GL_MODELVIEW11_ARB 0x872B
#define GL_MODELVIEW12_ARB 0x872C
#define GL_MODELVIEW13_ARB 0x872D
#define GL_MODELVIEW14_ARB 0x872E
#define GL_MODELVIEW15_ARB 0x872F
#define GL_MODELVIEW16_ARB 0x8730
#define GL_MODELVIEW17_ARB 0x8731
#define GL_MODELVIEW18_ARB 0x8732
#define GL_MODELVIEW19_ARB 0x8733
#define GL_MODELVIEW20_ARB 0x8734
#define GL_MODELVIEW21_ARB 0x8735
#define GL_MODELVIEW22_ARB 0x8736
#define GL_MODELVIEW23_ARB 0x8737
#define GL_MODELVIEW24_ARB 0x8738
#define GL_MODELVIEW25_ARB 0x8739
#define GL_MODELVIEW26_ARB 0x873A
#define GL_MODELVIEW27_ARB 0x873B
#define GL_MODELVIEW28_ARB 0x873C
#define GL_MODELVIEW29_ARB 0x873D
#define GL_MODELVIEW30_ARB 0x873E
#define GL_MODELVIEW31_ARB 0x873F
    typedef void (APIENTRYP PFNGLWEIGHTBVARBPROC)(GLint size, const GLbyte* weights);
    typedef void (APIENTRYP PFNGLWEIGHTSVARBPROC)(GLint size, const GLshort* weights);
    typedef void (APIENTRYP PFNGLWEIGHTIVARBPROC)(GLint size, const GLint* weights);
    typedef void (APIENTRYP PFNGLWEIGHTFVARBPROC)(GLint size, const GLfloat* weights);
    typedef void (APIENTRYP PFNGLWEIGHTDVARBPROC)(GLint size, const GLdouble* weights);
    typedef void (APIENTRYP PFNGLWEIGHTUBVARBPROC)(GLint size, const GLubyte* weights);
    typedef void (APIENTRYP PFNGLWEIGHTUSVARBPROC)(GLint size, const GLushort* weights);
    typedef void (APIENTRYP PFNGLWEIGHTUIVARBPROC)(GLint size, const GLuint* weights);
    typedef void (APIENTRYP PFNGLWEIGHTPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLVERTEXBLENDARBPROC)(GLint count);
#endif /* GL_ARB_vertex_blend */

#ifndef GL_ARB_vertex_buffer_object
#define GL_ARB_vertex_buffer_object 1
    typedef khronos_ssize_t GLsizeiptrARB;
    typedef khronos_intptr_t GLintptrARB;
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_READ_ONLY_ARB 0x88B8
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_READ_WRITE_ARB 0x88BA
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ_ARB 0x88E1
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_DYNAMIC_COPY_ARB 0x88EA
    typedef void (APIENTRYP PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
    typedef void (APIENTRYP PFNGLDELETEBUFFERSARBPROC)(GLsizei n, const GLuint* buffers);
    typedef void (APIENTRYP PFNGLGENBUFFERSARBPROC)(GLsizei n, GLuint* buffers);
    typedef GLboolean(APIENTRYP PFNGLISBUFFERARBPROC)(GLuint buffer);
    typedef void (APIENTRYP PFNGLBUFFERDATAARBPROC)(GLenum target, GLsizeiptrARB size, const void* data, GLenum usage);
    typedef void (APIENTRYP PFNGLBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void* data);
    typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void* data);
    typedef void* (APIENTRYP PFNGLMAPBUFFERARBPROC)(GLenum target, GLenum access);
    typedef GLboolean(APIENTRYP PFNGLUNMAPBUFFERARBPROC)(GLenum target);
    typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVARBPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVARBPROC)(GLenum target, GLenum pname, void** params);
#endif /* GL_ARB_vertex_buffer_object */

#ifndef GL_ARB_vertex_program
#define GL_ARB_vertex_program 1
#define GL_COLOR_SUM_ARB 0x8458
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1DARBPROC)(GLuint index, GLdouble x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVARBPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1FARBPROC)(GLuint index, GLfloat x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVARBPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1SARBPROC)(GLuint index, GLshort x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVARBPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2DARBPROC)(GLuint index, GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVARBPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2FARBPROC)(GLuint index, GLfloat x, GLfloat y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVARBPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2SARBPROC)(GLuint index, GLshort x, GLshort y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVARBPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVARBPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVARBPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVARBPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVARBPROC)(GLuint index, const GLbyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVARBPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVARBPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBARBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVARBPROC)(GLuint index, const GLubyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVARBPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVARBPROC)(GLuint index, const GLushort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVARBPROC)(GLuint index, const GLbyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVARBPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVARBPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVARBPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVARBPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVARBPROC)(GLuint index, const GLubyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVARBPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVARBPROC)(GLuint index, const GLushort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERARBPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
    typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVARBPROC)(GLuint index, GLenum pname, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVARBPROC)(GLuint index, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVARBPROC)(GLuint index, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVARBPROC)(GLuint index, GLenum pname, void** pointer);
#endif /* GL_ARB_vertex_program */

#ifndef GL_ARB_vertex_shader
#define GL_ARB_vertex_shader 1
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_FLOAT 0x1406
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT4_ARB 0x8B5C
    typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONARBPROC)(GLhandleARB programObj, GLuint index, const GLcharARB* name);
    typedef void (APIENTRYP PFNGLGETACTIVEATTRIBARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name);
    typedef GLint(APIENTRYP PFNGLGETATTRIBLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB* name);
#endif /* GL_ARB_vertex_shader */

#ifndef GL_ARB_vertex_type_10f_11f_11f_rev
#define GL_ARB_vertex_type_10f_11f_11f_rev 1
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#endif /* GL_ARB_vertex_type_10f_11f_11f_rev */

#ifndef GL_ARB_vertex_type_2_10_10_10_rev
#define GL_ARB_vertex_type_2_10_10_10_rev 1
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_INT_2_10_10_10_REV 0x8D9F
#endif /* GL_ARB_vertex_type_2_10_10_10_rev */

#ifndef GL_ARB_viewport_array
#define GL_ARB_viewport_array 1
#define GL_SCISSOR_BOX 0x0C10
#define GL_VIEWPORT 0x0BA2
#define GL_DEPTH_RANGE 0x0B70
#define GL_SCISSOR_TEST 0x0C11
#define GL_MAX_VIEWPORTS 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
    typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYDVNVPROC)(GLuint first, GLsizei count, const GLdouble* v);
    typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDDNVPROC)(GLuint index, GLdouble n, GLdouble f);
#endif /* GL_ARB_viewport_array */

#ifndef GL_ARB_window_pos
#define GL_ARB_window_pos 1
    typedef void (APIENTRYP PFNGLWINDOWPOS2DARBPROC)(GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2DVARBPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS2FARBPROC)(GLfloat x, GLfloat y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2FVARBPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS2IARBPROC)(GLint x, GLint y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2IVARBPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS2SARBPROC)(GLshort x, GLshort y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2SVARBPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3DARBPROC)(GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3DVARBPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3FARBPROC)(GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3FVARBPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3IARBPROC)(GLint x, GLint y, GLint z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3IVARBPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3SARBPROC)(GLshort x, GLshort y, GLshort z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3SVARBPROC)(const GLshort* v);
#endif /* GL_ARB_window_pos */

#ifndef GL_ATI_draw_buffers
#define GL_ATI_draw_buffers 1
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#define GL_DRAW_BUFFER0_ATI 0x8825
#define GL_DRAW_BUFFER1_ATI 0x8826
#define GL_DRAW_BUFFER2_ATI 0x8827
#define GL_DRAW_BUFFER3_ATI 0x8828
#define GL_DRAW_BUFFER4_ATI 0x8829
#define GL_DRAW_BUFFER5_ATI 0x882A
#define GL_DRAW_BUFFER6_ATI 0x882B
#define GL_DRAW_BUFFER7_ATI 0x882C
#define GL_DRAW_BUFFER8_ATI 0x882D
#define GL_DRAW_BUFFER9_ATI 0x882E
#define GL_DRAW_BUFFER10_ATI 0x882F
#define GL_DRAW_BUFFER11_ATI 0x8830
#define GL_DRAW_BUFFER12_ATI 0x8831
#define GL_DRAW_BUFFER13_ATI 0x8832
#define GL_DRAW_BUFFER14_ATI 0x8833
#define GL_DRAW_BUFFER15_ATI 0x8834
    typedef void (APIENTRYP PFNGLDRAWBUFFERSATIPROC)(GLsizei n, const GLenum* bufs);
#endif /* GL_ATI_draw_buffers */

#ifndef GL_ATI_element_array
#define GL_ATI_element_array 1
#define GL_ELEMENT_ARRAY_ATI 0x8768
#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
    typedef void (APIENTRYP PFNGLELEMENTPOINTERATIPROC)(GLenum type, const void* pointer);
    typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYATIPROC)(GLenum mode, GLsizei count);
    typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYATIPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count);
#endif /* GL_ATI_element_array */

#ifndef GL_ATI_envmap_bumpmap
#define GL_ATI_envmap_bumpmap 1
#define GL_BUMP_ROT_MATRIX_ATI 0x8775
#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
#define GL_BUMP_TEX_UNITS_ATI 0x8778
#define GL_DUDV_ATI 0x8779
#define GL_DU8DV8_ATI 0x877A
#define GL_BUMP_ENVMAP_ATI 0x877B
#define GL_BUMP_TARGET_ATI 0x877C
    typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERIVATIPROC)(GLenum pname, const GLint* param);
    typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERFVATIPROC)(GLenum pname, const GLfloat* param);
    typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERIVATIPROC)(GLenum pname, GLint* param);
    typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERFVATIPROC)(GLenum pname, GLfloat* param);
#endif /* GL_ATI_envmap_bumpmap */

#ifndef GL_ATI_fragment_shader
#define GL_ATI_fragment_shader 1
#define GL_FRAGMENT_SHADER_ATI 0x8920
#define GL_REG_0_ATI 0x8921
#define GL_REG_1_ATI 0x8922
#define GL_REG_2_ATI 0x8923
#define GL_REG_3_ATI 0x8924
#define GL_REG_4_ATI 0x8925
#define GL_REG_5_ATI 0x8926
#define GL_REG_6_ATI 0x8927
#define GL_REG_7_ATI 0x8928
#define GL_REG_8_ATI 0x8929
#define GL_REG_9_ATI 0x892A
#define GL_REG_10_ATI 0x892B
#define GL_REG_11_ATI 0x892C
#define GL_REG_12_ATI 0x892D
#define GL_REG_13_ATI 0x892E
#define GL_REG_14_ATI 0x892F
#define GL_REG_15_ATI 0x8930
#define GL_REG_16_ATI 0x8931
#define GL_REG_17_ATI 0x8932
#define GL_REG_18_ATI 0x8933
#define GL_REG_19_ATI 0x8934
#define GL_REG_20_ATI 0x8935
#define GL_REG_21_ATI 0x8936
#define GL_REG_22_ATI 0x8937
#define GL_REG_23_ATI 0x8938
#define GL_REG_24_ATI 0x8939
#define GL_REG_25_ATI 0x893A
#define GL_REG_26_ATI 0x893B
#define GL_REG_27_ATI 0x893C
#define GL_REG_28_ATI 0x893D
#define GL_REG_29_ATI 0x893E
#define GL_REG_30_ATI 0x893F
#define GL_REG_31_ATI 0x8940
#define GL_CON_0_ATI 0x8941
#define GL_CON_1_ATI 0x8942
#define GL_CON_2_ATI 0x8943
#define GL_CON_3_ATI 0x8944
#define GL_CON_4_ATI 0x8945
#define GL_CON_5_ATI 0x8946
#define GL_CON_6_ATI 0x8947
#define GL_CON_7_ATI 0x8948
#define GL_CON_8_ATI 0x8949
#define GL_CON_9_ATI 0x894A
#define GL_CON_10_ATI 0x894B
#define GL_CON_11_ATI 0x894C
#define GL_CON_12_ATI 0x894D
#define GL_CON_13_ATI 0x894E
#define GL_CON_14_ATI 0x894F
#define GL_CON_15_ATI 0x8950
#define GL_CON_16_ATI 0x8951
#define GL_CON_17_ATI 0x8952
#define GL_CON_18_ATI 0x8953
#define GL_CON_19_ATI 0x8954
#define GL_CON_20_ATI 0x8955
#define GL_CON_21_ATI 0x8956
#define GL_CON_22_ATI 0x8957
#define GL_CON_23_ATI 0x8958
#define GL_CON_24_ATI 0x8959
#define GL_CON_25_ATI 0x895A
#define GL_CON_26_ATI 0x895B
#define GL_CON_27_ATI 0x895C
#define GL_CON_28_ATI 0x895D
#define GL_CON_29_ATI 0x895E
#define GL_CON_30_ATI 0x895F
#define GL_CON_31_ATI 0x8960
#define GL_MOV_ATI 0x8961
#define GL_ADD_ATI 0x8963
#define GL_MUL_ATI 0x8964
#define GL_SUB_ATI 0x8965
#define GL_DOT3_ATI 0x8966
#define GL_DOT4_ATI 0x8967
#define GL_MAD_ATI 0x8968
#define GL_LERP_ATI 0x8969
#define GL_CND_ATI 0x896A
#define GL_CND0_ATI 0x896B
#define GL_DOT2_ADD_ATI 0x896C
#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
#define GL_NUM_PASSES_ATI 0x8970
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
#define GL_SWIZZLE_STR_ATI 0x8976
#define GL_SWIZZLE_STQ_ATI 0x8977
#define GL_SWIZZLE_STR_DR_ATI 0x8978
#define GL_SWIZZLE_STQ_DQ_ATI 0x8979
#define GL_SWIZZLE_STRQ_ATI 0x897A
#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
#define GL_RED_BIT_ATI 0x00000001
#define GL_GREEN_BIT_ATI 0x00000002
#define GL_BLUE_BIT_ATI 0x00000004
#define GL_2X_BIT_ATI 0x00000001
#define GL_4X_BIT_ATI 0x00000002
#define GL_8X_BIT_ATI 0x00000004
#define GL_HALF_BIT_ATI 0x00000008
#define GL_QUARTER_BIT_ATI 0x00000010
#define GL_EIGHTH_BIT_ATI 0x00000020
#define GL_SATURATE_BIT_ATI 0x00000040
#define GL_COMP_BIT_ATI 0x00000002
#define GL_NEGATE_BIT_ATI 0x00000004
#define GL_BIAS_BIT_ATI 0x00000008
    typedef GLuint(APIENTRYP PFNGLGENFRAGMENTSHADERSATIPROC)(GLuint range);
    typedef void (APIENTRYP PFNGLBINDFRAGMENTSHADERATIPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLDELETEFRAGMENTSHADERATIPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLBEGINFRAGMENTSHADERATIPROC)(void);
    typedef void (APIENTRYP PFNGLENDFRAGMENTSHADERATIPROC)(void);
    typedef void (APIENTRYP PFNGLPASSTEXCOORDATIPROC)(GLuint dst, GLuint coord, GLenum swizzle);
    typedef void (APIENTRYP PFNGLSAMPLEMAPATIPROC)(GLuint dst, GLuint interp, GLenum swizzle);
    typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP1ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
    typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP2ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
    typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP3ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
    typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP1ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
    typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP2ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
    typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP3ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
    typedef void (APIENTRYP PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)(GLuint dst, const GLfloat* value);
#endif /* GL_ATI_fragment_shader */

#ifndef GL_ATI_map_object_buffer
#define GL_ATI_map_object_buffer 1
    typedef void* (APIENTRYP PFNGLMAPOBJECTBUFFERATIPROC)(GLuint buffer);
    typedef void (APIENTRYP PFNGLUNMAPOBJECTBUFFERATIPROC)(GLuint buffer);
#endif /* GL_ATI_map_object_buffer */

#ifndef GL_ATI_meminfo
#define GL_ATI_meminfo 1
#define GL_VBO_FREE_MEMORY_ATI 0x87FB
#define GL_TEXTURE_FREE_MEMORY_ATI 0x87FC
#define GL_RENDERBUFFER_FREE_MEMORY_ATI 0x87FD
#endif /* GL_ATI_meminfo */

#ifndef GL_ATI_pixel_format_float
#define GL_ATI_pixel_format_float 1
#define GL_RGBA_FLOAT_MODE_ATI 0x8820
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
#endif /* GL_ATI_pixel_format_float */

#ifndef GL_ATI_pn_triangles
#define GL_ATI_pn_triangles 1
#define GL_PN_TRIANGLES_ATI 0x87F0
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
    typedef void (APIENTRYP PFNGLPNTRIANGLESIATIPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLPNTRIANGLESFATIPROC)(GLenum pname, GLfloat param);
#endif /* GL_ATI_pn_triangles */

#ifndef GL_ATI_separate_stencil
#define GL_ATI_separate_stencil 1
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
    typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEATIPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
    typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEATIPROC)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
#endif /* GL_ATI_separate_stencil */

#ifndef GL_ATI_text_fragment_shader
#define GL_ATI_text_fragment_shader 1
#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
#endif /* GL_ATI_text_fragment_shader */

#ifndef GL_ATI_texture_env_combine3
#define GL_ATI_texture_env_combine3 1
#define GL_MODULATE_ADD_ATI 0x8744
#define GL_MODULATE_SIGNED_ADD_ATI 0x8745
#define GL_MODULATE_SUBTRACT_ATI 0x8746
#endif /* GL_ATI_texture_env_combine3 */

#ifndef GL_ATI_texture_float
#define GL_ATI_texture_float 1
#define GL_RGBA_FLOAT32_ATI 0x8814
#define GL_RGB_FLOAT32_ATI 0x8815
#define GL_ALPHA_FLOAT32_ATI 0x8816
#define GL_INTENSITY_FLOAT32_ATI 0x8817
#define GL_LUMINANCE_FLOAT32_ATI 0x8818
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
#define GL_RGBA_FLOAT16_ATI 0x881A
#define GL_RGB_FLOAT16_ATI 0x881B
#define GL_ALPHA_FLOAT16_ATI 0x881C
#define GL_INTENSITY_FLOAT16_ATI 0x881D
#define GL_LUMINANCE_FLOAT16_ATI 0x881E
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
#endif /* GL_ATI_texture_float */

#ifndef GL_ATI_texture_mirror_once
#define GL_ATI_texture_mirror_once 1
#define GL_MIRROR_CLAMP_ATI 0x8742
#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
#endif /* GL_ATI_texture_mirror_once */

#ifndef GL_ATI_vertex_array_object
#define GL_ATI_vertex_array_object 1
#define GL_STATIC_ATI 0x8760
#define GL_DYNAMIC_ATI 0x8761
#define GL_PRESERVE_ATI 0x8762
#define GL_DISCARD_ATI 0x8763
#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
    typedef GLuint(APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC)(GLsizei size, const void* pointer, GLenum usage);
    typedef GLboolean(APIENTRYP PFNGLISOBJECTBUFFERATIPROC)(GLuint buffer);
    typedef void (APIENTRYP PFNGLUPDATEOBJECTBUFFERATIPROC)(GLuint buffer, GLuint offset, GLsizei size, const void* pointer, GLenum preserve);
    typedef void (APIENTRYP PFNGLGETOBJECTBUFFERFVATIPROC)(GLuint buffer, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETOBJECTBUFFERIVATIPROC)(GLuint buffer, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLFREEOBJECTBUFFERATIPROC)(GLuint buffer);
    typedef void (APIENTRYP PFNGLARRAYOBJECTATIPROC)(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
    typedef void (APIENTRYP PFNGLGETARRAYOBJECTFVATIPROC)(GLenum array, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETARRAYOBJECTIVATIPROC)(GLenum array, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLVARIANTARRAYOBJECTATIPROC)(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
    typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTFVATIPROC)(GLuint id, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTIVATIPROC)(GLuint id, GLenum pname, GLint* params);
#endif /* GL_ATI_vertex_array_object */

#ifndef GL_ATI_vertex_attrib_array_object
#define GL_ATI_vertex_attrib_array_object 1
    typedef void (APIENTRYP PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)(GLuint index, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)(GLuint index, GLenum pname, GLint* params);
#endif /* GL_ATI_vertex_attrib_array_object */

#ifndef GL_ATI_vertex_streams
#define GL_ATI_vertex_streams 1
#define GL_MAX_VERTEX_STREAMS_ATI 0x876B
#define GL_VERTEX_STREAM0_ATI 0x876C
#define GL_VERTEX_STREAM1_ATI 0x876D
#define GL_VERTEX_STREAM2_ATI 0x876E
#define GL_VERTEX_STREAM3_ATI 0x876F
#define GL_VERTEX_STREAM4_ATI 0x8770
#define GL_VERTEX_STREAM5_ATI 0x8771
#define GL_VERTEX_STREAM6_ATI 0x8772
#define GL_VERTEX_STREAM7_ATI 0x8773
#define GL_VERTEX_SOURCE_ATI 0x8774
    typedef void (APIENTRYP PFNGLVERTEXSTREAM1SATIPROC)(GLenum stream, GLshort x);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM1SVATIPROC)(GLenum stream, const GLshort* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM1IATIPROC)(GLenum stream, GLint x);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM1IVATIPROC)(GLenum stream, const GLint* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM1FATIPROC)(GLenum stream, GLfloat x);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM1FVATIPROC)(GLenum stream, const GLfloat* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM1DATIPROC)(GLenum stream, GLdouble x);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM1DVATIPROC)(GLenum stream, const GLdouble* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM2SATIPROC)(GLenum stream, GLshort x, GLshort y);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM2SVATIPROC)(GLenum stream, const GLshort* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM2IATIPROC)(GLenum stream, GLint x, GLint y);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM2IVATIPROC)(GLenum stream, const GLint* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM2FATIPROC)(GLenum stream, GLfloat x, GLfloat y);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM2FVATIPROC)(GLenum stream, const GLfloat* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM2DATIPROC)(GLenum stream, GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM2DVATIPROC)(GLenum stream, const GLdouble* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM3SATIPROC)(GLenum stream, GLshort x, GLshort y, GLshort z);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM3SVATIPROC)(GLenum stream, const GLshort* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM3IATIPROC)(GLenum stream, GLint x, GLint y, GLint z);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM3IVATIPROC)(GLenum stream, const GLint* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM3FATIPROC)(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM3FVATIPROC)(GLenum stream, const GLfloat* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM3DATIPROC)(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM3DVATIPROC)(GLenum stream, const GLdouble* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM4SATIPROC)(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM4SVATIPROC)(GLenum stream, const GLshort* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM4IATIPROC)(GLenum stream, GLint x, GLint y, GLint z, GLint w);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM4IVATIPROC)(GLenum stream, const GLint* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM4FATIPROC)(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM4FVATIPROC)(GLenum stream, const GLfloat* coords);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM4DATIPROC)(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLVERTEXSTREAM4DVATIPROC)(GLenum stream, const GLdouble* coords);
    typedef void (APIENTRYP PFNGLNORMALSTREAM3BATIPROC)(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
    typedef void (APIENTRYP PFNGLNORMALSTREAM3BVATIPROC)(GLenum stream, const GLbyte* coords);
    typedef void (APIENTRYP PFNGLNORMALSTREAM3SATIPROC)(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
    typedef void (APIENTRYP PFNGLNORMALSTREAM3SVATIPROC)(GLenum stream, const GLshort* coords);
    typedef void (APIENTRYP PFNGLNORMALSTREAM3IATIPROC)(GLenum stream, GLint nx, GLint ny, GLint nz);
    typedef void (APIENTRYP PFNGLNORMALSTREAM3IVATIPROC)(GLenum stream, const GLint* coords);
    typedef void (APIENTRYP PFNGLNORMALSTREAM3FATIPROC)(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
    typedef void (APIENTRYP PFNGLNORMALSTREAM3FVATIPROC)(GLenum stream, const GLfloat* coords);
    typedef void (APIENTRYP PFNGLNORMALSTREAM3DATIPROC)(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
    typedef void (APIENTRYP PFNGLNORMALSTREAM3DVATIPROC)(GLenum stream, const GLdouble* coords);
    typedef void (APIENTRYP PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)(GLenum stream);
    typedef void (APIENTRYP PFNGLVERTEXBLENDENVIATIPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLVERTEXBLENDENVFATIPROC)(GLenum pname, GLfloat param);
#endif /* GL_ATI_vertex_streams */

#ifndef GL_EXT_422_pixels
#define GL_EXT_422_pixels 1
#define GL_422_EXT 0x80CC
#define GL_422_REV_EXT 0x80CD
#define GL_422_AVERAGE_EXT 0x80CE
#define GL_422_REV_AVERAGE_EXT 0x80CF
#endif /* GL_EXT_422_pixels */

#ifndef GL_EXT_EGL_image_storage
#define GL_EXT_EGL_image_storage 1
    typedef void* GLeglImageOES;
    typedef void (APIENTRYP PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC)(GLenum target, GLeglImageOES image, const GLint* attrib_list);
    typedef void (APIENTRYP PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC)(GLuint texture, GLeglImageOES image, const GLint* attrib_list);
#endif /* GL_EXT_EGL_image_storage */

#ifndef GL_EXT_EGL_sync
#define GL_EXT_EGL_sync 1
#endif /* GL_EXT_EGL_sync */

#ifndef GL_EXT_abgr
#define GL_EXT_abgr 1
#define GL_ABGR_EXT 0x8000
#endif /* GL_EXT_abgr */

#ifndef GL_EXT_bgra
#define GL_EXT_bgra 1
#define GL_BGR_EXT 0x80E0
#define GL_BGRA_EXT 0x80E1
#endif /* GL_EXT_bgra */

#ifndef GL_EXT_bindable_uniform
#define GL_EXT_bindable_uniform 1
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
#define GL_UNIFORM_BUFFER_EXT 0x8DEE
#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
    typedef void (APIENTRYP PFNGLUNIFORMBUFFEREXTPROC)(GLuint program, GLint location, GLuint buffer);
    typedef GLint(APIENTRYP PFNGLGETUNIFORMBUFFERSIZEEXTPROC)(GLuint program, GLint location);
    typedef GLintptr(APIENTRYP PFNGLGETUNIFORMOFFSETEXTPROC)(GLuint program, GLint location);
#endif /* GL_EXT_bindable_uniform */

#ifndef GL_EXT_blend_color
#define GL_EXT_blend_color 1
#define GL_CONSTANT_COLOR_EXT 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#define GL_CONSTANT_ALPHA_EXT 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#define GL_BLEND_COLOR_EXT 0x8005
    typedef void (APIENTRYP PFNGLBLENDCOLOREXTPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
#endif /* GL_EXT_blend_color */

#ifndef GL_EXT_blend_equation_separate
#define GL_EXT_blend_equation_separate 1
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
    typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEEXTPROC)(GLenum modeRGB, GLenum modeAlpha);
#endif /* GL_EXT_blend_equation_separate */

#ifndef GL_EXT_blend_func_separate
#define GL_EXT_blend_func_separate 1
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
    typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
#endif /* GL_EXT_blend_func_separate */

#ifndef GL_EXT_blend_logic_op
#define GL_EXT_blend_logic_op 1
#endif /* GL_EXT_blend_logic_op */

#ifndef GL_EXT_blend_minmax
#define GL_EXT_blend_minmax 1
#define GL_MIN_EXT 0x8007
#define GL_MAX_EXT 0x8008
#define GL_FUNC_ADD_EXT 0x8006
#define GL_BLEND_EQUATION_EXT 0x8009
    typedef void (APIENTRYP PFNGLBLENDEQUATIONEXTPROC)(GLenum mode);
#endif /* GL_EXT_blend_minmax */

#ifndef GL_EXT_blend_subtract
#define GL_EXT_blend_subtract 1
#define GL_FUNC_SUBTRACT_EXT 0x800A
#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
#endif /* GL_EXT_blend_subtract */

#ifndef GL_EXT_clip_volume_hint
#define GL_EXT_clip_volume_hint 1
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
#endif /* GL_EXT_clip_volume_hint */

#ifndef GL_EXT_cmyka
#define GL_EXT_cmyka 1
#define GL_CMYK_EXT 0x800C
#define GL_CMYKA_EXT 0x800D
#define GL_PACK_CMYK_HINT_EXT 0x800E
#define GL_UNPACK_CMYK_HINT_EXT 0x800F
#endif /* GL_EXT_cmyka */

#ifndef GL_EXT_color_subtable
#define GL_EXT_color_subtable 1
    typedef void (APIENTRYP PFNGLCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data);
    typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
#endif /* GL_EXT_color_subtable */

#ifndef GL_EXT_compiled_vertex_array
#define GL_EXT_compiled_vertex_array 1
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0x81A8
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0x81A9
    typedef void (APIENTRYP PFNGLLOCKARRAYSEXTPROC)(GLint first, GLsizei count);
    typedef void (APIENTRYP PFNGLUNLOCKARRAYSEXTPROC)(void);
#endif /* GL_EXT_compiled_vertex_array */

#ifndef GL_EXT_convolution
#define GL_EXT_convolution 1
#define GL_CONVOLUTION_1D_EXT 0x8010
#define GL_CONVOLUTION_2D_EXT 0x8011
#define GL_SEPARABLE_2D_EXT 0x8012
#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
#define GL_REDUCE_EXT 0x8016
#define GL_CONVOLUTION_FORMAT_EXT 0x8017
#define GL_CONVOLUTION_WIDTH_EXT 0x8018
#define GL_CONVOLUTION_HEIGHT_EXT 0x8019
#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
    typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image);
    typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image);
    typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFEXTPROC)(GLenum target, GLenum pname, GLfloat params);
    typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVEXTPROC)(GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIEXTPROC)(GLenum target, GLenum pname, GLint params);
    typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVEXTPROC)(GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTEREXTPROC)(GLenum target, GLenum format, GLenum type, void* image);
    typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETSEPARABLEFILTEREXTPROC)(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span);
    typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column);
#endif /* GL_EXT_convolution */

#ifndef GL_EXT_coordinate_frame
#define GL_EXT_coordinate_frame 1
#define GL_TANGENT_ARRAY_EXT 0x8439
#define GL_BINORMAL_ARRAY_EXT 0x843A
#define GL_CURRENT_TANGENT_EXT 0x843B
#define GL_CURRENT_BINORMAL_EXT 0x843C
#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
#define GL_MAP1_TANGENT_EXT 0x8444
#define GL_MAP2_TANGENT_EXT 0x8445
#define GL_MAP1_BINORMAL_EXT 0x8446
#define GL_MAP2_BINORMAL_EXT 0x8447
    typedef void (APIENTRYP PFNGLTANGENT3BEXTPROC)(GLbyte tx, GLbyte ty, GLbyte tz);
    typedef void (APIENTRYP PFNGLTANGENT3BVEXTPROC)(const GLbyte* v);
    typedef void (APIENTRYP PFNGLTANGENT3DEXTPROC)(GLdouble tx, GLdouble ty, GLdouble tz);
    typedef void (APIENTRYP PFNGLTANGENT3DVEXTPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLTANGENT3FEXTPROC)(GLfloat tx, GLfloat ty, GLfloat tz);
    typedef void (APIENTRYP PFNGLTANGENT3FVEXTPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLTANGENT3IEXTPROC)(GLint tx, GLint ty, GLint tz);
    typedef void (APIENTRYP PFNGLTANGENT3IVEXTPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLTANGENT3SEXTPROC)(GLshort tx, GLshort ty, GLshort tz);
    typedef void (APIENTRYP PFNGLTANGENT3SVEXTPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLBINORMAL3BEXTPROC)(GLbyte bx, GLbyte by, GLbyte bz);
    typedef void (APIENTRYP PFNGLBINORMAL3BVEXTPROC)(const GLbyte* v);
    typedef void (APIENTRYP PFNGLBINORMAL3DEXTPROC)(GLdouble bx, GLdouble by, GLdouble bz);
    typedef void (APIENTRYP PFNGLBINORMAL3DVEXTPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLBINORMAL3FEXTPROC)(GLfloat bx, GLfloat by, GLfloat bz);
    typedef void (APIENTRYP PFNGLBINORMAL3FVEXTPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLBINORMAL3IEXTPROC)(GLint bx, GLint by, GLint bz);
    typedef void (APIENTRYP PFNGLBINORMAL3IVEXTPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLBINORMAL3SEXTPROC)(GLshort bx, GLshort by, GLshort bz);
    typedef void (APIENTRYP PFNGLBINORMAL3SVEXTPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLTANGENTPOINTEREXTPROC)(GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLBINORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, const void* pointer);
#endif /* GL_EXT_coordinate_frame */

#ifndef GL_EXT_copy_texture
#define GL_EXT_copy_texture 1
    typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#endif /* GL_EXT_copy_texture */

#ifndef GL_EXT_cull_vertex
#define GL_EXT_cull_vertex 1
#define GL_CULL_VERTEX_EXT 0x81AA
#define GL_CULL_VERTEX_EYE_POSITION_EXT 0x81AB
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
    typedef void (APIENTRYP PFNGLCULLPARAMETERDVEXTPROC)(GLenum pname, GLdouble* params);
    typedef void (APIENTRYP PFNGLCULLPARAMETERFVEXTPROC)(GLenum pname, GLfloat* params);
#endif /* GL_EXT_cull_vertex */

#ifndef GL_EXT_debug_label
#define GL_EXT_debug_label 1
#define GL_PROGRAM_PIPELINE_OBJECT_EXT 0x8A4F
#define GL_PROGRAM_OBJECT_EXT 0x8B40
#define GL_SHADER_OBJECT_EXT 0x8B48
#define GL_BUFFER_OBJECT_EXT 0x9151
#define GL_QUERY_OBJECT_EXT 0x9153
#define GL_VERTEX_ARRAY_OBJECT_EXT 0x9154
#define GL_SAMPLER 0x82E6
#define GL_TRANSFORM_FEEDBACK 0x8E22
    typedef void (APIENTRYP PFNGLLABELOBJECTEXTPROC)(GLenum type, GLuint object, GLsizei length, const GLchar* label);
    typedef void (APIENTRYP PFNGLGETOBJECTLABELEXTPROC)(GLenum type, GLuint object, GLsizei bufSize, GLsizei* length, GLchar* label);
#endif /* GL_EXT_debug_label */

#ifndef GL_EXT_debug_marker
#define GL_EXT_debug_marker 1
    typedef void (APIENTRYP PFNGLINSERTEVENTMARKEREXTPROC)(GLsizei length, const GLchar* marker);
    typedef void (APIENTRYP PFNGLPUSHGROUPMARKEREXTPROC)(GLsizei length, const GLchar* marker);
    typedef void (APIENTRYP PFNGLPOPGROUPMARKEREXTPROC)(void);
#endif /* GL_EXT_debug_marker */

#ifndef GL_EXT_depth_bounds_test
#define GL_EXT_depth_bounds_test 1
#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
#define GL_DEPTH_BOUNDS_EXT 0x8891
    typedef void (APIENTRYP PFNGLDEPTHBOUNDSEXTPROC)(GLclampd zmin, GLclampd zmax);
#endif /* GL_EXT_depth_bounds_test */

#ifndef GL_EXT_direct_state_access
#define GL_EXT_direct_state_access 1
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
    typedef void (APIENTRYP PFNGLMATRIXLOADFEXTPROC)(GLenum mode, const GLfloat* m);
    typedef void (APIENTRYP PFNGLMATRIXLOADDEXTPROC)(GLenum mode, const GLdouble* m);
    typedef void (APIENTRYP PFNGLMATRIXMULTFEXTPROC)(GLenum mode, const GLfloat* m);
    typedef void (APIENTRYP PFNGLMATRIXMULTDEXTPROC)(GLenum mode, const GLdouble* m);
    typedef void (APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC)(GLenum mode);
    typedef void (APIENTRYP PFNGLMATRIXROTATEFEXTPROC)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLMATRIXROTATEDEXTPROC)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLMATRIXSCALEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLMATRIXSCALEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    typedef void (APIENTRYP PFNGLMATRIXORTHOEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    typedef void (APIENTRYP PFNGLMATRIXPOPEXTPROC)(GLenum mode);
    typedef void (APIENTRYP PFNGLMATRIXPUSHEXTPROC)(GLenum mode);
    typedef void (APIENTRYP PFNGLCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
    typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC)(GLenum texunit, GLenum target, GLuint texture);
    typedef void (APIENTRYP PFNGLMULTITEXCOORDPOINTEREXTPROC)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLMULTITEXENVFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLMULTITEXENVIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLMULTITEXGENDEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
    typedef void (APIENTRYP PFNGLMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params);
    typedef void (APIENTRYP PFNGLMULTITEXGENFEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLMULTITEXGENIEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLGETMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLGETMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
    typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
    typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
    typedef void (APIENTRYP PFNGLGETFLOATINDEXEDVEXTPROC)(GLenum target, GLuint index, GLfloat* data);
    typedef void (APIENTRYP PFNGLGETDOUBLEINDEXEDVEXTPROC)(GLenum target, GLuint index, GLdouble* data);
    typedef void (APIENTRYP PFNGLGETPOINTERINDEXEDVEXTPROC)(GLenum target, GLuint index, void** data);
    typedef void (APIENTRYP PFNGLENABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
    typedef void (APIENTRYP PFNGLDISABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
    typedef GLboolean(APIENTRYP PFNGLISENABLEDINDEXEDEXTPROC)(GLenum target, GLuint index);
    typedef void (APIENTRYP PFNGLGETINTEGERINDEXEDVEXTPROC)(GLenum target, GLuint index, GLint* data);
    typedef void (APIENTRYP PFNGLGETBOOLEANINDEXEDVEXTPROC)(GLenum target, GLuint index, GLboolean* data);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint lod, void* img);
    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits);
    typedef void (APIENTRYP PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint lod, void* img);
    typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat* m);
    typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble* m);
    typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat* m);
    typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble* m);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
    typedef void* (APIENTRYP PFNGLMAPNAMEDBUFFEREXTPROC)(GLuint buffer, GLenum access);
    typedef GLboolean(APIENTRYP PFNGLUNMAPNAMEDBUFFEREXTPROC)(GLuint buffer);
    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)(GLuint buffer, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)(GLuint buffer, GLenum pname, void** params);
    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC)(GLuint program, GLint location, GLfloat v0);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC)(GLuint program, GLint location, GLint v0);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    typedef void (APIENTRYP PFNGLTEXTUREBUFFEREXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
    typedef void (APIENTRYP PFNGLMULTITEXBUFFEREXTPROC)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLuint* params);
    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLuint* params);
    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLuint* params);
    typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLuint* params);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIEXTPROC)(GLuint program, GLint location, GLuint v0);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLint* params);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLuint* params);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params);
    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLint* params);
    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint* params);
    typedef void (APIENTRYP PFNGLENABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
    typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
    typedef void (APIENTRYP PFNGLGETFLOATI_VEXTPROC)(GLenum pname, GLuint index, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETDOUBLEI_VEXTPROC)(GLenum pname, GLuint index, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETPOINTERI_VEXTPROC)(GLenum pname, GLuint index, void** params);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum format, GLsizei len, const void* string);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLdouble* params);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLfloat* params);
    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMIVEXTPROC)(GLuint program, GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum pname, void* string);
    typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)(GLuint renderbuffer, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
    typedef GLenum(APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)(GLuint framebuffer, GLenum target);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPEXTPROC)(GLuint texture, GLenum target);
    typedef void (APIENTRYP PFNGLGENERATEMULTITEXMIPMAPEXTPROC)(GLenum texunit, GLenum target);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)(GLuint framebuffer, GLsizei n, const GLenum* bufs);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERREADBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
    typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
    typedef void (APIENTRYP PFNGLTEXTURERENDERBUFFEREXTPROC)(GLuint texture, GLenum target, GLuint renderbuffer);
    typedef void (APIENTRYP PFNGLMULTITEXRENDERBUFFEREXTPROC)(GLenum texunit, GLenum target, GLuint renderbuffer);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
    typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
    typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
    typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
    typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERVEXTPROC)(GLuint vaobj, GLenum pname, GLint* param);
    typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERVEXTPROC)(GLuint vaobj, GLenum pname, void** param);
    typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
    typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, void** param);
    typedef void* (APIENTRYP PFNGLMAPNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
    typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEEXTPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags);
    typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data);
    typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)(GLuint framebuffer, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DEXTPROC)(GLuint program, GLint location, GLdouble x);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
    typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEEXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    typedef void (APIENTRYP PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    typedef void (APIENTRYP PFNGLTEXTUREPAGECOMMITMENTEXTPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
    typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)(GLuint vaobj, GLuint index, GLuint divisor);
#endif /* GL_EXT_direct_state_access */

#ifndef GL_EXT_draw_buffers2
#define GL_EXT_draw_buffers2 1
    typedef void (APIENTRYP PFNGLCOLORMASKINDEXEDEXTPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
#endif /* GL_EXT_draw_buffers2 */

#ifndef GL_EXT_draw_instanced
#define GL_EXT_draw_instanced 1
    typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC)(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
    typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount);
#endif /* GL_EXT_draw_instanced */

#ifndef GL_EXT_draw_range_elements
#define GL_EXT_draw_range_elements 1
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
    typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSEXTPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices);
#endif /* GL_EXT_draw_range_elements */

#ifndef GL_EXT_external_buffer
#define GL_EXT_external_buffer 1
    typedef void* GLeglClientBufferEXT;
    typedef void (APIENTRYP PFNGLBUFFERSTORAGEEXTERNALEXTPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
#endif /* GL_EXT_external_buffer */

#ifndef GL_EXT_fog_coord
#define GL_EXT_fog_coord 1
#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
#define GL_FOG_COORDINATE_EXT 0x8451
#define GL_FRAGMENT_DEPTH_EXT 0x8452
#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
    typedef void (APIENTRYP PFNGLFOGCOORDFEXTPROC)(GLfloat coord);
    typedef void (APIENTRYP PFNGLFOGCOORDFVEXTPROC)(const GLfloat* coord);
    typedef void (APIENTRYP PFNGLFOGCOORDDEXTPROC)(GLdouble coord);
    typedef void (APIENTRYP PFNGLFOGCOORDDVEXTPROC)(const GLdouble* coord);
    typedef void (APIENTRYP PFNGLFOGCOORDPOINTEREXTPROC)(GLenum type, GLsizei stride, const void* pointer);
#endif /* GL_EXT_fog_coord */

#ifndef GL_EXT_framebuffer_blit
#define GL_EXT_framebuffer_blit 1
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
    typedef void (APIENTRYP PFNGLBLITFRAMEBUFFEREXTPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
#endif /* GL_EXT_framebuffer_blit */

#ifndef GL_EXT_framebuffer_multisample
#define GL_EXT_framebuffer_multisample 1
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_MAX_SAMPLES_EXT 0x8D57
    typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
#endif /* GL_EXT_framebuffer_multisample */

#ifndef GL_EXT_framebuffer_multisample_blit_scaled
#define GL_EXT_framebuffer_multisample_blit_scaled 1
#define GL_SCALED_RESOLVE_FASTEST_EXT 0x90BA
#define GL_SCALED_RESOLVE_NICEST_EXT 0x90BB
#endif /* GL_EXT_framebuffer_multisample_blit_scaled */

#ifndef GL_EXT_framebuffer_object
#define GL_EXT_framebuffer_object 1
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
    typedef GLboolean(APIENTRYP PFNGLISRENDERBUFFEREXTPROC)(GLuint renderbuffer);
    typedef void (APIENTRYP PFNGLBINDRENDERBUFFEREXTPROC)(GLenum target, GLuint renderbuffer);
    typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSEXTPROC)(GLsizei n, const GLuint* renderbuffers);
    typedef void (APIENTRYP PFNGLGENRENDERBUFFERSEXTPROC)(GLsizei n, GLuint* renderbuffers);
    typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
    typedef GLboolean(APIENTRYP PFNGLISFRAMEBUFFEREXTPROC)(GLuint framebuffer);
    typedef void (APIENTRYP PFNGLBINDFRAMEBUFFEREXTPROC)(GLenum target, GLuint framebuffer);
    typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSEXTPROC)(GLsizei n, const GLuint* framebuffers);
    typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSEXTPROC)(GLsizei n, GLuint* framebuffers);
    typedef GLenum(APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)(GLenum target);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGENERATEMIPMAPEXTPROC)(GLenum target);
#endif /* GL_EXT_framebuffer_object */

#ifndef GL_EXT_framebuffer_sRGB
#define GL_EXT_framebuffer_sRGB 1
#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
#endif /* GL_EXT_framebuffer_sRGB */

#ifndef GL_EXT_geometry_shader4
#define GL_EXT_geometry_shader4 1
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC)(GLuint program, GLenum pname, GLint value);
#endif /* GL_EXT_geometry_shader4 */

#ifndef GL_EXT_gpu_program_parameters
#define GL_EXT_gpu_program_parameters 1
    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat* params);
    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat* params);
#endif /* GL_EXT_gpu_program_parameters */

#ifndef GL_EXT_gpu_shader4
#define GL_EXT_gpu_shader4 1
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
    typedef void (APIENTRYP PFNGLGETUNIFORMUIVEXTPROC)(GLuint program, GLint location, GLuint* params);
    typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONEXTPROC)(GLuint program, GLuint color, const GLchar* name);
    typedef GLint(APIENTRYP PFNGLGETFRAGDATALOCATIONEXTPROC)(GLuint program, const GLchar* name);
    typedef void (APIENTRYP PFNGLUNIFORM1UIEXTPROC)(GLint location, GLuint v0);
    typedef void (APIENTRYP PFNGLUNIFORM2UIEXTPROC)(GLint location, GLuint v0, GLuint v1);
    typedef void (APIENTRYP PFNGLUNIFORM3UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
    typedef void (APIENTRYP PFNGLUNIFORM4UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    typedef void (APIENTRYP PFNGLUNIFORM1UIVEXTPROC)(GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLUNIFORM2UIVEXTPROC)(GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLUNIFORM3UIVEXTPROC)(GLint location, GLsizei count, const GLuint* value);
    typedef void (APIENTRYP PFNGLUNIFORM4UIVEXTPROC)(GLint location, GLsizei count, const GLuint* value);
#endif /* GL_EXT_gpu_shader4 */

#ifndef GL_EXT_histogram
#define GL_EXT_histogram 1
#define GL_HISTOGRAM_EXT 0x8024
#define GL_PROXY_HISTOGRAM_EXT 0x8025
#define GL_HISTOGRAM_WIDTH_EXT 0x8026
#define GL_HISTOGRAM_FORMAT_EXT 0x8027
#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
#define GL_HISTOGRAM_SINK_EXT 0x802D
#define GL_MINMAX_EXT 0x802E
#define GL_MINMAX_FORMAT_EXT 0x802F
#define GL_MINMAX_SINK_EXT 0x8030
#define GL_TABLE_TOO_LARGE_EXT 0x8031
    typedef void (APIENTRYP PFNGLGETHISTOGRAMEXTPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
    typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETMINMAXEXTPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
    typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLHISTOGRAMEXTPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
    typedef void (APIENTRYP PFNGLMINMAXEXTPROC)(GLenum target, GLenum internalformat, GLboolean sink);
    typedef void (APIENTRYP PFNGLRESETHISTOGRAMEXTPROC)(GLenum target);
    typedef void (APIENTRYP PFNGLRESETMINMAXEXTPROC)(GLenum target);
#endif /* GL_EXT_histogram */

#ifndef GL_EXT_index_array_formats
#define GL_EXT_index_array_formats 1
#define GL_IUI_V2F_EXT 0x81AD
#define GL_IUI_V3F_EXT 0x81AE
#define GL_IUI_N3F_V2F_EXT 0x81AF
#define GL_IUI_N3F_V3F_EXT 0x81B0
#define GL_T2F_IUI_V2F_EXT 0x81B1
#define GL_T2F_IUI_V3F_EXT 0x81B2
#define GL_T2F_IUI_N3F_V2F_EXT 0x81B3
#define GL_T2F_IUI_N3F_V3F_EXT 0x81B4
#endif /* GL_EXT_index_array_formats */

#ifndef GL_EXT_index_func
#define GL_EXT_index_func 1
#define GL_INDEX_TEST_EXT 0x81B5
#define GL_INDEX_TEST_FUNC_EXT 0x81B6
#define GL_INDEX_TEST_REF_EXT 0x81B7
    typedef void (APIENTRYP PFNGLINDEXFUNCEXTPROC)(GLenum func, GLclampf ref);
#endif /* GL_EXT_index_func */

#ifndef GL_EXT_index_material
#define GL_EXT_index_material 1
#define GL_INDEX_MATERIAL_EXT 0x81B8
#define GL_INDEX_MATERIAL_PARAMETER_EXT 0x81B9
#define GL_INDEX_MATERIAL_FACE_EXT 0x81BA
    typedef void (APIENTRYP PFNGLINDEXMATERIALEXTPROC)(GLenum face, GLenum mode);
#endif /* GL_EXT_index_material */

#ifndef GL_EXT_index_texture
#define GL_EXT_index_texture 1
#endif /* GL_EXT_index_texture */

#ifndef GL_EXT_light_texture
#define GL_EXT_light_texture 1
#define GL_FRAGMENT_MATERIAL_EXT 0x8349
#define GL_FRAGMENT_NORMAL_EXT 0x834A
#define GL_FRAGMENT_COLOR_EXT 0x834C
#define GL_ATTENUATION_EXT 0x834D
#define GL_SHADOW_ATTENUATION_EXT 0x834E
#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
#define GL_TEXTURE_LIGHT_EXT 0x8350
#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
#define GL_FRAGMENT_DEPTH_EXT 0x8452
    typedef void (APIENTRYP PFNGLAPPLYTEXTUREEXTPROC)(GLenum mode);
    typedef void (APIENTRYP PFNGLTEXTURELIGHTEXTPROC)(GLenum pname);
    typedef void (APIENTRYP PFNGLTEXTUREMATERIALEXTPROC)(GLenum face, GLenum mode);
#endif /* GL_EXT_light_texture */

#ifndef GL_EXT_memory_object
#define GL_EXT_memory_object 1
#define GL_TEXTURE_TILING_EXT 0x9580
#define GL_DEDICATED_MEMORY_OBJECT_EXT 0x9581
#define GL_PROTECTED_MEMORY_OBJECT_EXT 0x959B
#define GL_NUM_TILING_TYPES_EXT 0x9582
#define GL_TILING_TYPES_EXT 0x9583
#define GL_OPTIMAL_TILING_EXT 0x9584
#define GL_LINEAR_TILING_EXT 0x9585
#define GL_NUM_DEVICE_UUIDS_EXT 0x9596
#define GL_DEVICE_UUID_EXT 0x9597
#define GL_DRIVER_UUID_EXT 0x9598
#define GL_UUID_SIZE_EXT 16
    typedef void (APIENTRYP PFNGLGETUNSIGNEDBYTEVEXTPROC)(GLenum pname, GLubyte* data);
    typedef void (APIENTRYP PFNGLGETUNSIGNEDBYTEI_VEXTPROC)(GLenum target, GLuint index, GLubyte* data);
    typedef void (APIENTRYP PFNGLDELETEMEMORYOBJECTSEXTPROC)(GLsizei n, const GLuint* memoryObjects);
    typedef GLboolean(APIENTRYP PFNGLISMEMORYOBJECTEXTPROC)(GLuint memoryObject);
    typedef void (APIENTRYP PFNGLCREATEMEMORYOBJECTSEXTPROC)(GLsizei n, GLuint* memoryObjects);
    typedef void (APIENTRYP PFNGLMEMORYOBJECTPARAMETERIVEXTPROC)(GLuint memoryObject, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC)(GLuint memoryObject, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLTEXSTORAGEMEM2DEXTPROC)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLTEXSTORAGEMEM3DEXTPROC)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLBUFFERSTORAGEMEMEXTPROC)(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGEMEM2DEXTPROC)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGEMEM3DEXTPROC)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC)(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLTEXSTORAGEMEM1DEXTPROC)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLTEXTURESTORAGEMEM1DEXTPROC)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
#endif /* GL_EXT_memory_object */

#ifndef GL_EXT_memory_object_fd
#define GL_EXT_memory_object_fd 1
#define GL_HANDLE_TYPE_OPAQUE_FD_EXT 0x9586
    typedef void (APIENTRYP PFNGLIMPORTMEMORYFDEXTPROC)(GLuint memory, GLuint64 size, GLenum handleType, GLint fd);
#endif /* GL_EXT_memory_object_fd */

#ifndef GL_EXT_memory_object_win32
#define GL_EXT_memory_object_win32 1
#define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT 0x9587
#define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588
#define GL_DEVICE_LUID_EXT 0x9599
#define GL_DEVICE_NODE_MASK_EXT 0x959A
#define GL_LUID_SIZE_EXT 8
#define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0x9589
#define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0x958A
#define GL_HANDLE_TYPE_D3D11_IMAGE_EXT 0x958B
#define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0x958C
    typedef void (APIENTRYP PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC)(GLuint memory, GLuint64 size, GLenum handleType, void* handle);
    typedef void (APIENTRYP PFNGLIMPORTMEMORYWIN32NAMEEXTPROC)(GLuint memory, GLuint64 size, GLenum handleType, const void* name);
#endif /* GL_EXT_memory_object_win32 */

#ifndef GL_EXT_misc_attribute
#define GL_EXT_misc_attribute 1
#endif /* GL_EXT_misc_attribute */

#ifndef GL_EXT_multi_draw_arrays
#define GL_EXT_multi_draw_arrays 1
    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount);
    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC)(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei primcount);
#endif /* GL_EXT_multi_draw_arrays */

#ifndef GL_EXT_multisample
#define GL_EXT_multisample 1
#define GL_MULTISAMPLE_EXT 0x809D
#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
#define GL_SAMPLE_MASK_EXT 0x80A0
#define GL_1PASS_EXT 0x80A1
#define GL_2PASS_0_EXT 0x80A2
#define GL_2PASS_1_EXT 0x80A3
#define GL_4PASS_0_EXT 0x80A4
#define GL_4PASS_1_EXT 0x80A5
#define GL_4PASS_2_EXT 0x80A6
#define GL_4PASS_3_EXT 0x80A7
#define GL_SAMPLE_BUFFERS_EXT 0x80A8
#define GL_SAMPLES_EXT 0x80A9
#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
#define GL_SAMPLE_PATTERN_EXT 0x80AC
#define GL_MULTISAMPLE_BIT_EXT 0x20000000
    typedef void (APIENTRYP PFNGLSAMPLEMASKEXTPROC)(GLclampf value, GLboolean invert);
    typedef void (APIENTRYP PFNGLSAMPLEPATTERNEXTPROC)(GLenum pattern);
#endif /* GL_EXT_multisample */

#ifndef GL_EXT_multiview_tessellation_geometry_shader
#define GL_EXT_multiview_tessellation_geometry_shader 1
#endif /* GL_EXT_multiview_tessellation_geometry_shader */

#ifndef GL_EXT_multiview_texture_multisample
#define GL_EXT_multiview_texture_multisample 1
#endif /* GL_EXT_multiview_texture_multisample */

#ifndef GL_EXT_multiview_timer_query
#define GL_EXT_multiview_timer_query 1
#endif /* GL_EXT_multiview_timer_query */

#ifndef GL_EXT_packed_depth_stencil
#define GL_EXT_packed_depth_stencil 1
#define GL_DEPTH_STENCIL_EXT 0x84F9
#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
#define GL_DEPTH24_STENCIL8_EXT 0x88F0
#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
#endif /* GL_EXT_packed_depth_stencil */

#ifndef GL_EXT_packed_float
#define GL_EXT_packed_float 1
#define GL_R11F_G11F_B10F_EXT 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
#endif /* GL_EXT_packed_float */

#ifndef GL_EXT_packed_pixels
#define GL_EXT_packed_pixels 1
#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
#endif /* GL_EXT_packed_pixels */

#ifndef GL_EXT_paletted_texture
#define GL_EXT_paletted_texture 1
#define GL_COLOR_INDEX1_EXT 0x80E2
#define GL_COLOR_INDEX2_EXT 0x80E3
#define GL_COLOR_INDEX4_EXT 0x80E4
#define GL_COLOR_INDEX8_EXT 0x80E5
#define GL_COLOR_INDEX12_EXT 0x80E6
#define GL_COLOR_INDEX16_EXT 0x80E7
#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
    typedef void (APIENTRYP PFNGLCOLORTABLEEXTPROC)(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void* table);
    typedef void (APIENTRYP PFNGLGETCOLORTABLEEXTPROC)(GLenum target, GLenum format, GLenum type, void* data);
    typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat* params);
#endif /* GL_EXT_paletted_texture */

#ifndef GL_EXT_pixel_buffer_object
#define GL_EXT_pixel_buffer_object 1
#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
#endif /* GL_EXT_pixel_buffer_object */

#ifndef GL_EXT_pixel_transform
#define GL_EXT_pixel_transform 1
#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
#define GL_PIXEL_MAG_FILTER_EXT 0x8331
#define GL_PIXEL_MIN_FILTER_EXT 0x8332
#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
#define GL_CUBIC_EXT 0x8334
#define GL_AVERAGE_EXT 0x8335
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
    typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)(GLenum target, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)(GLenum target, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat* params);
#endif /* GL_EXT_pixel_transform */

#ifndef GL_EXT_pixel_transform_color_table
#define GL_EXT_pixel_transform_color_table 1
#endif /* GL_EXT_pixel_transform_color_table */

#ifndef GL_EXT_point_parameters
#define GL_EXT_point_parameters 1
#define GL_POINT_SIZE_MIN_EXT 0x8126
#define GL_POINT_SIZE_MAX_EXT 0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
    typedef void (APIENTRYP PFNGLPOINTPARAMETERFEXTPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLPOINTPARAMETERFVEXTPROC)(GLenum pname, const GLfloat* params);
#endif /* GL_EXT_point_parameters */

#ifndef GL_EXT_polygon_offset
#define GL_EXT_polygon_offset 1
#define GL_POLYGON_OFFSET_EXT 0x8037
#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
    typedef void (APIENTRYP PFNGLPOLYGONOFFSETEXTPROC)(GLfloat factor, GLfloat bias);
#endif /* GL_EXT_polygon_offset */

#ifndef GL_EXT_polygon_offset_clamp
#define GL_EXT_polygon_offset_clamp 1
#define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B
    typedef void (APIENTRYP PFNGLPOLYGONOFFSETCLAMPEXTPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
#endif /* GL_EXT_polygon_offset_clamp */

#ifndef GL_EXT_post_depth_coverage
#define GL_EXT_post_depth_coverage 1
#endif /* GL_EXT_post_depth_coverage */

#ifndef GL_EXT_provoking_vertex
#define GL_EXT_provoking_vertex 1
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
    typedef void (APIENTRYP PFNGLPROVOKINGVERTEXEXTPROC)(GLenum mode);
#endif /* GL_EXT_provoking_vertex */

#ifndef GL_EXT_raster_multisample
#define GL_EXT_raster_multisample 1
#define GL_RASTER_MULTISAMPLE_EXT 0x9327
#define GL_RASTER_SAMPLES_EXT 0x9328
#define GL_MAX_RASTER_SAMPLES_EXT 0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0x932C
    typedef void (APIENTRYP PFNGLRASTERSAMPLESEXTPROC)(GLuint samples, GLboolean fixedsamplelocations);
#endif /* GL_EXT_raster_multisample */

#ifndef GL_EXT_rescale_normal
#define GL_EXT_rescale_normal 1
#define GL_RESCALE_NORMAL_EXT 0x803A
#endif /* GL_EXT_rescale_normal */

#ifndef GL_EXT_semaphore
#define GL_EXT_semaphore 1
#define GL_NUM_DEVICE_UUIDS_EXT 0x9596
#define GL_DEVICE_UUID_EXT 0x9597
#define GL_DRIVER_UUID_EXT 0x9598
#define GL_UUID_SIZE_EXT 16
#define GL_LAYOUT_GENERAL_EXT 0x958D
#define GL_LAYOUT_COLOR_ATTACHMENT_EXT 0x958E
#define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0x958F
#define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0x9590
#define GL_LAYOUT_SHADER_READ_ONLY_EXT 0x9591
#define GL_LAYOUT_TRANSFER_SRC_EXT 0x9592
#define GL_LAYOUT_TRANSFER_DST_EXT 0x9593
#define GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT 0x9530
#define GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT 0x9531
    typedef void (APIENTRYP PFNGLGENSEMAPHORESEXTPROC)(GLsizei n, GLuint* semaphores);
    typedef void (APIENTRYP PFNGLDELETESEMAPHORESEXTPROC)(GLsizei n, const GLuint* semaphores);
    typedef GLboolean(APIENTRYP PFNGLISSEMAPHOREEXTPROC)(GLuint semaphore);
    typedef void (APIENTRYP PFNGLSEMAPHOREPARAMETERUI64VEXTPROC)(GLuint semaphore, GLenum pname, const GLuint64* params);
    typedef void (APIENTRYP PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC)(GLuint semaphore, GLenum pname, GLuint64* params);
    typedef void (APIENTRYP PFNGLWAITSEMAPHOREEXTPROC)(GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint* textures, const GLenum* srcLayouts);
    typedef void (APIENTRYP PFNGLSIGNALSEMAPHOREEXTPROC)(GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint* textures, const GLenum* dstLayouts);
#endif /* GL_EXT_semaphore */

#ifndef GL_EXT_semaphore_fd
#define GL_EXT_semaphore_fd 1
#define GL_HANDLE_TYPE_OPAQUE_FD_EXT 0x9586
    typedef void (APIENTRYP PFNGLIMPORTSEMAPHOREFDEXTPROC)(GLuint semaphore, GLenum handleType, GLint fd);
#endif /* GL_EXT_semaphore_fd */

#ifndef GL_EXT_semaphore_win32
#define GL_EXT_semaphore_win32 1
#define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT 0x9587
#define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588
#define GL_DEVICE_LUID_EXT 0x9599
#define GL_DEVICE_NODE_MASK_EXT 0x959A
#define GL_LUID_SIZE_EXT 8
#define GL_HANDLE_TYPE_D3D12_FENCE_EXT 0x9594
#define GL_D3D12_FENCE_VALUE_EXT 0x9595
    typedef void (APIENTRYP PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC)(GLuint semaphore, GLenum handleType, void* handle);
    typedef void (APIENTRYP PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC)(GLuint semaphore, GLenum handleType, const void* name);
#endif /* GL_EXT_semaphore_win32 */

#ifndef GL_EXT_secondary_color
#define GL_EXT_secondary_color 1
#define GL_COLOR_SUM_EXT 0x8458
#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BEXTPROC)(GLbyte red, GLbyte green, GLbyte blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVEXTPROC)(const GLbyte* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DEXTPROC)(GLdouble red, GLdouble green, GLdouble blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVEXTPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FEXTPROC)(GLfloat red, GLfloat green, GLfloat blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVEXTPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IEXTPROC)(GLint red, GLint green, GLint blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVEXTPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SEXTPROC)(GLshort red, GLshort green, GLshort blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVEXTPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBEXTPROC)(GLubyte red, GLubyte green, GLubyte blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVEXTPROC)(const GLubyte* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIEXTPROC)(GLuint red, GLuint green, GLuint blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVEXTPROC)(const GLuint* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USEXTPROC)(GLushort red, GLushort green, GLushort blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVEXTPROC)(const GLushort* v);
    typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
#endif /* GL_EXT_secondary_color */

#ifndef GL_EXT_separate_shader_objects
#define GL_EXT_separate_shader_objects 1
#define GL_ACTIVE_PROGRAM_EXT 0x8259
#define GL_VERTEX_SHADER_BIT_EXT 0x00000001
#define GL_FRAGMENT_SHADER_BIT_EXT 0x00000002
#define GL_ALL_SHADER_BITS_EXT 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE_EXT 0x8258
#define GL_ACTIVE_PROGRAM_EXT 0x8259
#define GL_PROGRAM_PIPELINE_BINDING_EXT 0x825A
    typedef void (APIENTRYP PFNGLUSESHADERPROGRAMEXTPROC)(GLenum type, GLuint program);
    typedef void (APIENTRYP PFNGLACTIVEPROGRAMEXTPROC)(GLuint program);
    typedef GLuint(APIENTRYP PFNGLCREATESHADERPROGRAMEXTPROC)(GLenum type, const GLchar* string);
    typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMEXTPROC)(GLuint pipeline, GLuint program);
    typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEEXTPROC)(GLuint pipeline);
    typedef GLuint(APIENTRYP PFNGLCREATESHADERPROGRAMVEXTPROC)(GLenum type, GLsizei count, const GLchar** strings);
    typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESEXTPROC)(GLsizei n, const GLuint* pipelines);
    typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESEXTPROC)(GLsizei n, GLuint* pipelines);
    typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC)(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
    typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVEXTPROC)(GLuint pipeline, GLenum pname, GLint* params);
    typedef GLboolean(APIENTRYP PFNGLISPROGRAMPIPELINEEXTPROC)(GLuint pipeline);
    typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESEXTPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
    typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEEXTPROC)(GLuint pipeline);
#endif /* GL_EXT_separate_shader_objects */

#ifndef GL_EXT_separate_specular_color
#define GL_EXT_separate_specular_color 1
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
#define GL_SINGLE_COLOR_EXT 0x81F9
#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
#endif /* GL_EXT_separate_specular_color */

#ifndef GL_EXT_shader_framebuffer_fetch
#define GL_EXT_shader_framebuffer_fetch 1
#define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52
#endif /* GL_EXT_shader_framebuffer_fetch */

#ifndef GL_EXT_shader_framebuffer_fetch_non_coherent
#define GL_EXT_shader_framebuffer_fetch_non_coherent 1
#define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52
    typedef void (APIENTRYP PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC)(void);
#endif /* GL_EXT_shader_framebuffer_fetch_non_coherent */

#ifndef GL_EXT_shader_image_load_formatted
#define GL_EXT_shader_image_load_formatted 1
#endif /* GL_EXT_shader_image_load_formatted */

#ifndef GL_EXT_shader_image_load_store
#define GL_EXT_shader_image_load_store 1
#define GL_MAX_IMAGE_UNITS_EXT 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#define GL_IMAGE_BINDING_NAME_EXT 0x8F3A
#define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B
#define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C
#define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D
#define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E
#define GL_IMAGE_1D_EXT 0x904C
#define GL_IMAGE_2D_EXT 0x904D
#define GL_IMAGE_3D_EXT 0x904E
#define GL_IMAGE_2D_RECT_EXT 0x904F
#define GL_IMAGE_CUBE_EXT 0x9050
#define GL_IMAGE_BUFFER_EXT 0x9051
#define GL_IMAGE_1D_ARRAY_EXT 0x9052
#define GL_IMAGE_2D_ARRAY_EXT 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054
#define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
#define GL_INT_IMAGE_1D_EXT 0x9057
#define GL_INT_IMAGE_2D_EXT 0x9058
#define GL_INT_IMAGE_3D_EXT 0x9059
#define GL_INT_IMAGE_2D_RECT_EXT 0x905A
#define GL_INT_IMAGE_CUBE_EXT 0x905B
#define GL_INT_IMAGE_BUFFER_EXT 0x905C
#define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D
#define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#define GL_MAX_IMAGE_SAMPLES_EXT 0x906D
#define GL_IMAGE_BINDING_FORMAT_EXT 0x906E
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002
#define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
#define GL_COMMAND_BARRIER_BIT_EXT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
#define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF
    typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC)(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
    typedef void (APIENTRYP PFNGLMEMORYBARRIEREXTPROC)(GLbitfield barriers);
#endif /* GL_EXT_shader_image_load_store */

#ifndef GL_EXT_shader_integer_mix
#define GL_EXT_shader_integer_mix 1
#endif /* GL_EXT_shader_integer_mix */

#ifndef GL_EXT_shadow_funcs
#define GL_EXT_shadow_funcs 1
#endif /* GL_EXT_shadow_funcs */

#ifndef GL_EXT_shared_texture_palette
#define GL_EXT_shared_texture_palette 1
#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
#endif /* GL_EXT_shared_texture_palette */

#ifndef GL_EXT_sparse_texture2
#define GL_EXT_sparse_texture2 1
#endif /* GL_EXT_sparse_texture2 */

#ifndef GL_EXT_stencil_clear_tag
#define GL_EXT_stencil_clear_tag 1
#define GL_STENCIL_TAG_BITS_EXT 0x88F2
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
    typedef void (APIENTRYP PFNGLSTENCILCLEARTAGEXTPROC)(GLsizei stencilTagBits, GLuint stencilClearTag);
#endif /* GL_EXT_stencil_clear_tag */

#ifndef GL_EXT_stencil_two_side
#define GL_EXT_stencil_two_side 1
#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
    typedef void (APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC)(GLenum face);
#endif /* GL_EXT_stencil_two_side */

#ifndef GL_EXT_stencil_wrap
#define GL_EXT_stencil_wrap 1
#define GL_INCR_WRAP_EXT 0x8507
#define GL_DECR_WRAP_EXT 0x8508
#endif /* GL_EXT_stencil_wrap */

#ifndef GL_EXT_subtexture
#define GL_EXT_subtexture 1
    typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
#endif /* GL_EXT_subtexture */

#ifndef GL_EXT_texture
#define GL_EXT_texture 1
#define GL_ALPHA4_EXT 0x803B
#define GL_ALPHA8_EXT 0x803C
#define GL_ALPHA12_EXT 0x803D
#define GL_ALPHA16_EXT 0x803E
#define GL_LUMINANCE4_EXT 0x803F
#define GL_LUMINANCE8_EXT 0x8040
#define GL_LUMINANCE12_EXT 0x8041
#define GL_LUMINANCE16_EXT 0x8042
#define GL_LUMINANCE4_ALPHA4_EXT 0x8043
#define GL_LUMINANCE6_ALPHA2_EXT 0x8044
#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
#define GL_LUMINANCE12_ALPHA4_EXT 0x8046
#define GL_LUMINANCE12_ALPHA12_EXT 0x8047
#define GL_LUMINANCE16_ALPHA16_EXT 0x8048
#define GL_INTENSITY_EXT 0x8049
#define GL_INTENSITY4_EXT 0x804A
#define GL_INTENSITY8_EXT 0x804B
#define GL_INTENSITY12_EXT 0x804C
#define GL_INTENSITY16_EXT 0x804D
#define GL_RGB2_EXT 0x804E
#define GL_RGB4_EXT 0x804F
#define GL_RGB5_EXT 0x8050
#define GL_RGB8_EXT 0x8051
#define GL_RGB10_EXT 0x8052
#define GL_RGB12_EXT 0x8053
#define GL_RGB16_EXT 0x8054
#define GL_RGBA2_EXT 0x8055
#define GL_RGBA4_EXT 0x8056
#define GL_RGB5_A1_EXT 0x8057
#define GL_RGBA8_EXT 0x8058
#define GL_RGB10_A2_EXT 0x8059
#define GL_RGBA12_EXT 0x805A
#define GL_RGBA16_EXT 0x805B
#define GL_TEXTURE_RED_SIZE_EXT 0x805C
#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
#define GL_REPLACE_EXT 0x8062
#define GL_PROXY_TEXTURE_1D_EXT 0x8063
#define GL_PROXY_TEXTURE_2D_EXT 0x8064
#define GL_TEXTURE_TOO_LARGE_EXT 0x8065
#endif /* GL_EXT_texture */

#ifndef GL_EXT_texture3D
#define GL_EXT_texture3D 1
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#define GL_TEXTURE_3D_EXT 0x806F
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#define GL_TEXTURE_DEPTH_EXT 0x8071
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
    typedef void (APIENTRYP PFNGLTEXIMAGE3DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
#endif /* GL_EXT_texture3D */

#ifndef GL_EXT_texture_array
#define GL_EXT_texture_array 1
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
#endif /* GL_EXT_texture_array */

#ifndef GL_EXT_texture_buffer_object
#define GL_EXT_texture_buffer_object 1
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
    typedef void (APIENTRYP PFNGLTEXBUFFEREXTPROC)(GLenum target, GLenum internalformat, GLuint buffer);
#endif /* GL_EXT_texture_buffer_object */

#ifndef GL_EXT_texture_compression_latc
#define GL_EXT_texture_compression_latc 1
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
#endif /* GL_EXT_texture_compression_latc */

#ifndef GL_EXT_texture_compression_rgtc
#define GL_EXT_texture_compression_rgtc 1
#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
#endif /* GL_EXT_texture_compression_rgtc */

#ifndef GL_EXT_texture_compression_s3tc
#define GL_EXT_texture_compression_s3tc 1
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
#endif /* GL_EXT_texture_compression_s3tc */

#ifndef GL_EXT_texture_cube_map
#define GL_EXT_texture_cube_map 1
#define GL_NORMAL_MAP_EXT 0x8511
#define GL_REFLECTION_MAP_EXT 0x8512
#define GL_TEXTURE_CUBE_MAP_EXT 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
#endif /* GL_EXT_texture_cube_map */

#ifndef GL_EXT_texture_env_add
#define GL_EXT_texture_env_add 1
#endif /* GL_EXT_texture_env_add */

#ifndef GL_EXT_texture_env_combine
#define GL_EXT_texture_env_combine 1
#define GL_COMBINE_EXT 0x8570
#define GL_COMBINE_RGB_EXT 0x8571
#define GL_COMBINE_ALPHA_EXT 0x8572
#define GL_RGB_SCALE_EXT 0x8573
#define GL_ADD_SIGNED_EXT 0x8574
#define GL_INTERPOLATE_EXT 0x8575
#define GL_CONSTANT_EXT 0x8576
#define GL_PRIMARY_COLOR_EXT 0x8577
#define GL_PREVIOUS_EXT 0x8578
#define GL_SOURCE0_RGB_EXT 0x8580
#define GL_SOURCE1_RGB_EXT 0x8581
#define GL_SOURCE2_RGB_EXT 0x8582
#define GL_SOURCE0_ALPHA_EXT 0x8588
#define GL_SOURCE1_ALPHA_EXT 0x8589
#define GL_SOURCE2_ALPHA_EXT 0x858A
#define GL_OPERAND0_RGB_EXT 0x8590
#define GL_OPERAND1_RGB_EXT 0x8591
#define GL_OPERAND2_RGB_EXT 0x8592
#define GL_OPERAND0_ALPHA_EXT 0x8598
#define GL_OPERAND1_ALPHA_EXT 0x8599
#define GL_OPERAND2_ALPHA_EXT 0x859A
#endif /* GL_EXT_texture_env_combine */

#ifndef GL_EXT_texture_env_dot3
#define GL_EXT_texture_env_dot3 1
#define GL_DOT3_RGB_EXT 0x8740
#define GL_DOT3_RGBA_EXT 0x8741
#endif /* GL_EXT_texture_env_dot3 */

#ifndef GL_EXT_texture_filter_anisotropic
#define GL_EXT_texture_filter_anisotropic 1
#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
#endif /* GL_EXT_texture_filter_anisotropic */

#ifndef GL_EXT_texture_filter_minmax
#define GL_EXT_texture_filter_minmax 1
#define GL_TEXTURE_REDUCTION_MODE_EXT 0x9366
#define GL_WEIGHTED_AVERAGE_EXT 0x9367
#endif /* GL_EXT_texture_filter_minmax */

#ifndef GL_EXT_texture_integer
#define GL_EXT_texture_integer 1
#define GL_RGBA32UI_EXT 0x8D70
#define GL_RGB32UI_EXT 0x8D71
#define GL_ALPHA32UI_EXT 0x8D72
#define GL_INTENSITY32UI_EXT 0x8D73
#define GL_LUMINANCE32UI_EXT 0x8D74
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#define GL_RGBA16UI_EXT 0x8D76
#define GL_RGB16UI_EXT 0x8D77
#define GL_ALPHA16UI_EXT 0x8D78
#define GL_INTENSITY16UI_EXT 0x8D79
#define GL_LUMINANCE16UI_EXT 0x8D7A
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#define GL_RGBA8UI_EXT 0x8D7C
#define GL_RGB8UI_EXT 0x8D7D
#define GL_ALPHA8UI_EXT 0x8D7E
#define GL_INTENSITY8UI_EXT 0x8D7F
#define GL_LUMINANCE8UI_EXT 0x8D80
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#define GL_RGBA32I_EXT 0x8D82
#define GL_RGB32I_EXT 0x8D83
#define GL_ALPHA32I_EXT 0x8D84
#define GL_INTENSITY32I_EXT 0x8D85
#define GL_LUMINANCE32I_EXT 0x8D86
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#define GL_RGBA16I_EXT 0x8D88
#define GL_RGB16I_EXT 0x8D89
#define GL_ALPHA16I_EXT 0x8D8A
#define GL_INTENSITY16I_EXT 0x8D8B
#define GL_LUMINANCE16I_EXT 0x8D8C
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#define GL_RGBA8I_EXT 0x8D8E
#define GL_RGB8I_EXT 0x8D8F
#define GL_ALPHA8I_EXT 0x8D90
#define GL_INTENSITY8I_EXT 0x8D91
#define GL_LUMINANCE8I_EXT 0x8D92
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#define GL_RED_INTEGER_EXT 0x8D94
#define GL_GREEN_INTEGER_EXT 0x8D95
#define GL_BLUE_INTEGER_EXT 0x8D96
#define GL_ALPHA_INTEGER_EXT 0x8D97
#define GL_RGB_INTEGER_EXT 0x8D98
#define GL_RGBA_INTEGER_EXT 0x8D99
#define GL_BGR_INTEGER_EXT 0x8D9A
#define GL_BGRA_INTEGER_EXT 0x8D9B
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
    typedef void (APIENTRYP PFNGLTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, const GLuint* params);
    typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, GLuint* params);
    typedef void (APIENTRYP PFNGLCLEARCOLORIIEXTPROC)(GLint red, GLint green, GLint blue, GLint alpha);
    typedef void (APIENTRYP PFNGLCLEARCOLORIUIEXTPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
#endif /* GL_EXT_texture_integer */

#ifndef GL_EXT_texture_lod_bias
#define GL_EXT_texture_lod_bias 1
#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
#define GL_TEXTURE_LOD_BIAS_EXT 0x8501
#endif /* GL_EXT_texture_lod_bias */

#ifndef GL_EXT_texture_mirror_clamp
#define GL_EXT_texture_mirror_clamp 1
#define GL_MIRROR_CLAMP_EXT 0x8742
#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
#endif /* GL_EXT_texture_mirror_clamp */

#ifndef GL_EXT_texture_object
#define GL_EXT_texture_object 1
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
    typedef GLboolean(APIENTRYP PFNGLARETEXTURESRESIDENTEXTPROC)(GLsizei n, const GLuint* textures, GLboolean* residences);
    typedef void (APIENTRYP PFNGLBINDTEXTUREEXTPROC)(GLenum target, GLuint texture);
    typedef void (APIENTRYP PFNGLDELETETEXTURESEXTPROC)(GLsizei n, const GLuint* textures);
    typedef void (APIENTRYP PFNGLGENTEXTURESEXTPROC)(GLsizei n, GLuint* textures);
    typedef GLboolean(APIENTRYP PFNGLISTEXTUREEXTPROC)(GLuint texture);
    typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESEXTPROC)(GLsizei n, const GLuint* textures, const GLclampf* priorities);
#endif /* GL_EXT_texture_object */

#ifndef GL_EXT_texture_perturb_normal
#define GL_EXT_texture_perturb_normal 1
#define GL_PERTURB_EXT 0x85AE
#define GL_TEXTURE_NORMAL_EXT 0x85AF
    typedef void (APIENTRYP PFNGLTEXTURENORMALEXTPROC)(GLenum mode);
#endif /* GL_EXT_texture_perturb_normal */

#ifndef GL_EXT_texture_sRGB
#define GL_EXT_texture_sRGB 1
#define GL_SRGB_EXT 0x8C40
#define GL_SRGB8_EXT 0x8C41
#define GL_SRGB_ALPHA_EXT 0x8C42
#define GL_SRGB8_ALPHA8_EXT 0x8C43
#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
#define GL_SLUMINANCE_EXT 0x8C46
#define GL_SLUMINANCE8_EXT 0x8C47
#define GL_COMPRESSED_SRGB_EXT 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
#endif /* GL_EXT_texture_sRGB */

#ifndef GL_EXT_texture_sRGB_R8
#define GL_EXT_texture_sRGB_R8 1
#define GL_SR8_EXT 0x8FBD
#endif /* GL_EXT_texture_sRGB_R8 */

#ifndef GL_EXT_texture_sRGB_decode
#define GL_EXT_texture_sRGB_decode 1
#define GL_TEXTURE_SRGB_DECODE_EXT 0x8A48
#define GL_DECODE_EXT 0x8A49
#define GL_SKIP_DECODE_EXT 0x8A4A
#endif /* GL_EXT_texture_sRGB_decode */

#ifndef GL_EXT_texture_shared_exponent
#define GL_EXT_texture_shared_exponent 1
#define GL_RGB9_E5_EXT 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
#endif /* GL_EXT_texture_shared_exponent */

#ifndef GL_EXT_texture_snorm
#define GL_EXT_texture_snorm 1
#define GL_ALPHA_SNORM 0x9010
#define GL_LUMINANCE_SNORM 0x9011
#define GL_LUMINANCE_ALPHA_SNORM 0x9012
#define GL_INTENSITY_SNORM 0x9013
#define GL_ALPHA8_SNORM 0x9014
#define GL_LUMINANCE8_SNORM 0x9015
#define GL_LUMINANCE8_ALPHA8_SNORM 0x9016
#define GL_INTENSITY8_SNORM 0x9017
#define GL_ALPHA16_SNORM 0x9018
#define GL_LUMINANCE16_SNORM 0x9019
#define GL_LUMINANCE16_ALPHA16_SNORM 0x901A
#define GL_INTENSITY16_SNORM 0x901B
#define GL_RED_SNORM 0x8F90
#define GL_RG_SNORM 0x8F91
#define GL_RGB_SNORM 0x8F92
#define GL_RGBA_SNORM 0x8F93
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#endif /* GL_EXT_texture_snorm */

#ifndef GL_EXT_texture_swizzle
#define GL_EXT_texture_swizzle 1
#define GL_TEXTURE_SWIZZLE_R_EXT 0x8E42
#define GL_TEXTURE_SWIZZLE_G_EXT 0x8E43
#define GL_TEXTURE_SWIZZLE_B_EXT 0x8E44
#define GL_TEXTURE_SWIZZLE_A_EXT 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA_EXT 0x8E46
#endif /* GL_EXT_texture_swizzle */

#ifndef GL_NV_timeline_semaphore
#define GL_NV_timeline_semaphore 1
#define GL_TIMELINE_SEMAPHORE_VALUE_NV 0x9595
#define GL_SEMAPHORE_TYPE_NV 0x95B3
#define GL_SEMAPHORE_TYPE_BINARY_NV 0x95B4
#define GL_SEMAPHORE_TYPE_TIMELINE_NV 0x95B5
#define GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV 0x95B6
    typedef void (APIENTRYP PFNGLCREATESEMAPHORESNVPROC)(GLsizei n, GLuint* semaphores);
    typedef void (APIENTRYP PFNGLSEMAPHOREPARAMETERIVNVPROC)(GLuint semaphore, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLGETSEMAPHOREPARAMETERIVNVPROC)(GLuint semaphore, GLenum pname, GLint* params);
#endif /* GL_NV_timeline_semaphore */

#ifndef GL_EXT_timer_query
#define GL_EXT_timer_query 1
#define GL_TIME_ELAPSED_EXT 0x88BF
    typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VEXTPROC)(GLuint id, GLenum pname, GLint64* params);
    typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VEXTPROC)(GLuint id, GLenum pname, GLuint64* params);
#endif /* GL_EXT_timer_query */

#ifndef GL_EXT_transform_feedback
#define GL_EXT_transform_feedback 1
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
    typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)(GLenum primitiveMode);
    typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKEXTPROC)(void);
    typedef void (APIENTRYP PFNGLBINDBUFFERRANGEEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
    typedef void (APIENTRYP PFNGLBINDBUFFERBASEEXTPROC)(GLenum target, GLuint index, GLuint buffer);
    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)(GLuint program, GLsizei count, const GLchar* const* varyings, GLenum bufferMode);
    typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
#endif /* GL_EXT_transform_feedback */

#ifndef GL_EXT_vertex_array
#define GL_EXT_vertex_array 1
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
    typedef void (APIENTRYP PFNGLARRAYELEMENTEXTPROC)(GLint i);
    typedef void (APIENTRYP PFNGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
    typedef void (APIENTRYP PFNGLDRAWARRAYSEXTPROC)(GLenum mode, GLint first, GLsizei count);
    typedef void (APIENTRYP PFNGLEDGEFLAGPOINTEREXTPROC)(GLsizei stride, GLsizei count, const GLboolean* pointer);
    typedef void (APIENTRYP PFNGLGETPOINTERVEXTPROC)(GLenum pname, void** params);
    typedef void (APIENTRYP PFNGLINDEXPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void* pointer);
    typedef void (APIENTRYP PFNGLNORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void* pointer);
    typedef void (APIENTRYP PFNGLTEXCOORDPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
    typedef void (APIENTRYP PFNGLVERTEXPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
#endif /* GL_EXT_vertex_array */

#ifndef GL_EXT_vertex_array_bgra
#define GL_EXT_vertex_array_bgra 1
#define GL_BGRA 0x80E1
#endif /* GL_EXT_vertex_array_bgra */

#ifndef GL_EXT_vertex_attrib_64bit
#define GL_EXT_vertex_attrib_64bit 1
#define GL_DOUBLE 0x140A
#define GL_DOUBLE_VEC2_EXT 0x8FFC
#define GL_DOUBLE_VEC3_EXT 0x8FFD
#define GL_DOUBLE_VEC4_EXT 0x8FFE
#define GL_DOUBLE_MAT2_EXT 0x8F46
#define GL_DOUBLE_MAT3_EXT 0x8F47
#define GL_DOUBLE_MAT4_EXT 0x8F48
#define GL_DOUBLE_MAT2x3_EXT 0x8F49
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DEXTPROC)(GLuint index, GLdouble x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DEXTPROC)(GLuint index, GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVEXTPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVEXTPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVEXTPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVEXTPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVEXTPROC)(GLuint index, GLenum pname, GLdouble* params);
#endif /* GL_EXT_vertex_attrib_64bit */

#ifndef GL_EXT_vertex_shader
#define GL_EXT_vertex_shader 1
#define GL_VERTEX_SHADER_EXT 0x8780
#define GL_VERTEX_SHADER_BINDING_EXT 0x8781
#define GL_OP_INDEX_EXT 0x8782
#define GL_OP_NEGATE_EXT 0x8783
#define GL_OP_DOT3_EXT 0x8784
#define GL_OP_DOT4_EXT 0x8785
#define GL_OP_MUL_EXT 0x8786
#define GL_OP_ADD_EXT 0x8787
#define GL_OP_MADD_EXT 0x8788
#define GL_OP_FRAC_EXT 0x8789
#define GL_OP_MAX_EXT 0x878A
#define GL_OP_MIN_EXT 0x878B
#define GL_OP_SET_GE_EXT 0x878C
#define GL_OP_SET_LT_EXT 0x878D
#define GL_OP_CLAMP_EXT 0x878E
#define GL_OP_FLOOR_EXT 0x878F
#define GL_OP_ROUND_EXT 0x8790
#define GL_OP_EXP_BASE_2_EXT 0x8791
#define GL_OP_LOG_BASE_2_EXT 0x8792
#define GL_OP_POWER_EXT 0x8793
#define GL_OP_RECIP_EXT 0x8794
#define GL_OP_RECIP_SQRT_EXT 0x8795
#define GL_OP_SUB_EXT 0x8796
#define GL_OP_CROSS_PRODUCT_EXT 0x8797
#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
#define GL_OP_MOV_EXT 0x8799
#define GL_OUTPUT_VERTEX_EXT 0x879A
#define GL_OUTPUT_COLOR0_EXT 0x879B
#define GL_OUTPUT_COLOR1_EXT 0x879C
#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
#define GL_OUTPUT_FOG_EXT 0x87BD
#define GL_SCALAR_EXT 0x87BE
#define GL_VECTOR_EXT 0x87BF
#define GL_MATRIX_EXT 0x87C0
#define GL_VARIANT_EXT 0x87C1
#define GL_INVARIANT_EXT 0x87C2
#define GL_LOCAL_CONSTANT_EXT 0x87C3
#define GL_LOCAL_EXT 0x87C4
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
#define GL_X_EXT 0x87D5
#define GL_Y_EXT 0x87D6
#define GL_Z_EXT 0x87D7
#define GL_W_EXT 0x87D8
#define GL_NEGATIVE_X_EXT 0x87D9
#define GL_NEGATIVE_Y_EXT 0x87DA
#define GL_NEGATIVE_Z_EXT 0x87DB
#define GL_NEGATIVE_W_EXT 0x87DC
#define GL_ZERO_EXT 0x87DD
#define GL_ONE_EXT 0x87DE
#define GL_NEGATIVE_ONE_EXT 0x87DF
#define GL_NORMALIZED_RANGE_EXT 0x87E0
#define GL_FULL_RANGE_EXT 0x87E1
#define GL_CURRENT_VERTEX_EXT 0x87E2
#define GL_MVP_MATRIX_EXT 0x87E3
#define GL_VARIANT_VALUE_EXT 0x87E4
#define GL_VARIANT_DATATYPE_EXT 0x87E5
#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
#define GL_VARIANT_ARRAY_EXT 0x87E8
#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
#define GL_INVARIANT_VALUE_EXT 0x87EA
#define GL_INVARIANT_DATATYPE_EXT 0x87EB
#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
    typedef void (APIENTRYP PFNGLBEGINVERTEXSHADEREXTPROC)(void);
    typedef void (APIENTRYP PFNGLENDVERTEXSHADEREXTPROC)(void);
    typedef void (APIENTRYP PFNGLBINDVERTEXSHADEREXTPROC)(GLuint id);
    typedef GLuint(APIENTRYP PFNGLGENVERTEXSHADERSEXTPROC)(GLuint range);
    typedef void (APIENTRYP PFNGLDELETEVERTEXSHADEREXTPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLSHADEROP1EXTPROC)(GLenum op, GLuint res, GLuint arg1);
    typedef void (APIENTRYP PFNGLSHADEROP2EXTPROC)(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
    typedef void (APIENTRYP PFNGLSHADEROP3EXTPROC)(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
    typedef void (APIENTRYP PFNGLSWIZZLEEXTPROC)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
    typedef void (APIENTRYP PFNGLWRITEMASKEXTPROC)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
    typedef void (APIENTRYP PFNGLINSERTCOMPONENTEXTPROC)(GLuint res, GLuint src, GLuint num);
    typedef void (APIENTRYP PFNGLEXTRACTCOMPONENTEXTPROC)(GLuint res, GLuint src, GLuint num);
    typedef GLuint(APIENTRYP PFNGLGENSYMBOLSEXTPROC)(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
    typedef void (APIENTRYP PFNGLSETINVARIANTEXTPROC)(GLuint id, GLenum type, const void* addr);
    typedef void (APIENTRYP PFNGLSETLOCALCONSTANTEXTPROC)(GLuint id, GLenum type, const void* addr);
    typedef void (APIENTRYP PFNGLVARIANTBVEXTPROC)(GLuint id, const GLbyte* addr);
    typedef void (APIENTRYP PFNGLVARIANTSVEXTPROC)(GLuint id, const GLshort* addr);
    typedef void (APIENTRYP PFNGLVARIANTIVEXTPROC)(GLuint id, const GLint* addr);
    typedef void (APIENTRYP PFNGLVARIANTFVEXTPROC)(GLuint id, const GLfloat* addr);
    typedef void (APIENTRYP PFNGLVARIANTDVEXTPROC)(GLuint id, const GLdouble* addr);
    typedef void (APIENTRYP PFNGLVARIANTUBVEXTPROC)(GLuint id, const GLubyte* addr);
    typedef void (APIENTRYP PFNGLVARIANTUSVEXTPROC)(GLuint id, const GLushort* addr);
    typedef void (APIENTRYP PFNGLVARIANTUIVEXTPROC)(GLuint id, const GLuint* addr);
    typedef void (APIENTRYP PFNGLVARIANTPOINTEREXTPROC)(GLuint id, GLenum type, GLuint stride, const void* addr);
    typedef void (APIENTRYP PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)(GLuint id);
    typedef GLuint(APIENTRYP PFNGLBINDLIGHTPARAMETEREXTPROC)(GLenum light, GLenum value);
    typedef GLuint(APIENTRYP PFNGLBINDMATERIALPARAMETEREXTPROC)(GLenum face, GLenum value);
    typedef GLuint(APIENTRYP PFNGLBINDTEXGENPARAMETEREXTPROC)(GLenum unit, GLenum coord, GLenum value);
    typedef GLuint(APIENTRYP PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)(GLenum unit, GLenum value);
    typedef GLuint(APIENTRYP PFNGLBINDPARAMETEREXTPROC)(GLenum value);
    typedef GLboolean(APIENTRYP PFNGLISVARIANTENABLEDEXTPROC)(GLuint id, GLenum cap);
    typedef void (APIENTRYP PFNGLGETVARIANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean* data);
    typedef void (APIENTRYP PFNGLGETVARIANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint* data);
    typedef void (APIENTRYP PFNGLGETVARIANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat* data);
    typedef void (APIENTRYP PFNGLGETVARIANTPOINTERVEXTPROC)(GLuint id, GLenum value, void** data);
    typedef void (APIENTRYP PFNGLGETINVARIANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean* data);
    typedef void (APIENTRYP PFNGLGETINVARIANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint* data);
    typedef void (APIENTRYP PFNGLGETINVARIANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat* data);
    typedef void (APIENTRYP PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean* data);
    typedef void (APIENTRYP PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint* data);
    typedef void (APIENTRYP PFNGLGETLOCALCONSTANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat* data);
#endif /* GL_EXT_vertex_shader */

#ifndef GL_EXT_vertex_weighting
#define GL_EXT_vertex_weighting 1
#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
#define GL_MODELVIEW1_MATRIX_EXT 0x8506
#define GL_VERTEX_WEIGHTING_EXT 0x8509
#define GL_MODELVIEW0_EXT 0x1700
#define GL_MODELVIEW1_EXT 0x850A
#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
    typedef void (APIENTRYP PFNGLVERTEXWEIGHTFEXTPROC)(GLfloat weight);
    typedef void (APIENTRYP PFNGLVERTEXWEIGHTFVEXTPROC)(const GLfloat* weight);
    typedef void (APIENTRYP PFNGLVERTEXWEIGHTPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
#endif /* GL_EXT_vertex_weighting */

#ifndef GL_EXT_win32_keyed_mutex
#define GL_EXT_win32_keyed_mutex 1
    typedef GLboolean(APIENTRYP PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC)(GLuint memory, GLuint64 key, GLuint timeout);
    typedef GLboolean(APIENTRYP PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC)(GLuint memory, GLuint64 key);
#endif /* GL_EXT_win32_keyed_mutex */

#ifndef GL_EXT_window_rectangles
#define GL_EXT_window_rectangles 1
#define GL_INCLUSIVE_EXT 0x8F10
#define GL_EXCLUSIVE_EXT 0x8F11
#define GL_WINDOW_RECTANGLE_EXT 0x8F12
#define GL_WINDOW_RECTANGLE_MODE_EXT 0x8F13
#define GL_MAX_WINDOW_RECTANGLES_EXT 0x8F14
#define GL_NUM_WINDOW_RECTANGLES_EXT 0x8F15
    typedef void (APIENTRYP PFNGLWINDOWRECTANGLESEXTPROC)(GLenum mode, GLsizei count, const GLint* box);
#endif /* GL_EXT_window_rectangles */

#ifndef GL_EXT_x11_sync_object
#define GL_EXT_x11_sync_object 1
#define GL_SYNC_X11_FENCE_EXT 0x90E1
    typedef GLsync(APIENTRYP PFNGLIMPORTSYNCEXTPROC)(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
#endif /* GL_EXT_x11_sync_object */

#ifndef GL_GREMEDY_frame_terminator
#define GL_GREMEDY_frame_terminator 1
    typedef void (APIENTRYP PFNGLFRAMETERMINATORGREMEDYPROC)(void);
#endif /* GL_GREMEDY_frame_terminator */

#ifndef GL_GREMEDY_string_marker
#define GL_GREMEDY_string_marker 1
    typedef void (APIENTRYP PFNGLSTRINGMARKERGREMEDYPROC)(GLsizei len, const void* string);
#endif /* GL_GREMEDY_string_marker */

#ifndef GL_HP_convolution_border_modes
#define GL_HP_convolution_border_modes 1
#define GL_IGNORE_BORDER_HP 0x8150
#define GL_CONSTANT_BORDER_HP 0x8151
#define GL_REPLICATE_BORDER_HP 0x8153
#define GL_CONVOLUTION_BORDER_COLOR_HP 0x8154
#endif /* GL_HP_convolution_border_modes */

#ifndef GL_HP_image_transform
#define GL_HP_image_transform 1
#define GL_IMAGE_SCALE_X_HP 0x8155
#define GL_IMAGE_SCALE_Y_HP 0x8156
#define GL_IMAGE_TRANSLATE_X_HP 0x8157
#define GL_IMAGE_TRANSLATE_Y_HP 0x8158
#define GL_IMAGE_ROTATE_ANGLE_HP 0x8159
#define GL_IMAGE_ROTATE_ORIGIN_X_HP 0x815A
#define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0x815B
#define GL_IMAGE_MAG_FILTER_HP 0x815C
#define GL_IMAGE_MIN_FILTER_HP 0x815D
#define GL_IMAGE_CUBIC_WEIGHT_HP 0x815E
#define GL_CUBIC_HP 0x815F
#define GL_AVERAGE_HP 0x8160
#define GL_IMAGE_TRANSFORM_2D_HP 0x8161
#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
    typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIHPPROC)(GLenum target, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFHPPROC)(GLenum target, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)(GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)(GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)(GLenum target, GLenum pname, GLfloat* params);
#endif /* GL_HP_image_transform */

#ifndef GL_HP_occlusion_test
#define GL_HP_occlusion_test 1
#define GL_OCCLUSION_TEST_HP 0x8165
#define GL_OCCLUSION_TEST_RESULT_HP 0x8166
#endif /* GL_HP_occlusion_test */

#ifndef GL_HP_texture_lighting
#define GL_HP_texture_lighting 1
#define GL_TEXTURE_LIGHTING_MODE_HP 0x8167
#define GL_TEXTURE_POST_SPECULAR_HP 0x8168
#define GL_TEXTURE_PRE_SPECULAR_HP 0x8169
#endif /* GL_HP_texture_lighting */

#ifndef GL_IBM_cull_vertex
#define GL_IBM_cull_vertex 1
#define GL_CULL_VERTEX_IBM 103050
#endif /* GL_IBM_cull_vertex */

#ifndef GL_IBM_multimode_draw_arrays
#define GL_IBM_multimode_draw_arrays 1
    typedef void (APIENTRYP PFNGLMULTIMODEDRAWARRAYSIBMPROC)(const GLenum* mode, const GLint* first, const GLsizei* count, GLsizei primcount, GLint modestride);
    typedef void (APIENTRYP PFNGLMULTIMODEDRAWELEMENTSIBMPROC)(const GLenum* mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei primcount, GLint modestride);
#endif /* GL_IBM_multimode_draw_arrays */

#ifndef GL_IBM_rasterpos_clip
#define GL_IBM_rasterpos_clip 1
#define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262
#endif /* GL_IBM_rasterpos_clip */

#ifndef GL_IBM_static_data
#define GL_IBM_static_data 1
#define GL_ALL_STATIC_DATA_IBM 103060
#define GL_STATIC_VERTEX_ARRAY_IBM 103061
    typedef void (APIENTRYP PFNGLFLUSHSTATICDATAIBMPROC)(GLenum target);
#endif /* GL_IBM_static_data */

#ifndef GL_IBM_texture_mirrored_repeat
#define GL_IBM_texture_mirrored_repeat 1
#define GL_MIRRORED_REPEAT_IBM 0x8370
#endif /* GL_IBM_texture_mirrored_repeat */

#ifndef GL_IBM_vertex_array_lists
#define GL_IBM_vertex_array_lists 1
#define GL_VERTEX_ARRAY_LIST_IBM 103070
#define GL_NORMAL_ARRAY_LIST_IBM 103071
#define GL_COLOR_ARRAY_LIST_IBM 103072
#define GL_INDEX_ARRAY_LIST_IBM 103073
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
    typedef void (APIENTRYP PFNGLCOLORPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
    typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
    typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERLISTIBMPROC)(GLint stride, const GLboolean** pointer, GLint ptrstride);
    typedef void (APIENTRYP PFNGLFOGCOORDPOINTERLISTIBMPROC)(GLenum type, GLint stride, const void** pointer, GLint ptrstride);
    typedef void (APIENTRYP PFNGLINDEXPOINTERLISTIBMPROC)(GLenum type, GLint stride, const void** pointer, GLint ptrstride);
    typedef void (APIENTRYP PFNGLNORMALPOINTERLISTIBMPROC)(GLenum type, GLint stride, const void** pointer, GLint ptrstride);
    typedef void (APIENTRYP PFNGLTEXCOORDPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
    typedef void (APIENTRYP PFNGLVERTEXPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
#endif /* GL_IBM_vertex_array_lists */

#ifndef GL_INGR_blend_func_separate
#define GL_INGR_blend_func_separate 1
    typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
#endif /* GL_INGR_blend_func_separate */

#ifndef GL_INGR_color_clamp
#define GL_INGR_color_clamp 1
#define GL_RED_MIN_CLAMP_INGR 0x8560
#define GL_GREEN_MIN_CLAMP_INGR 0x8561
#define GL_BLUE_MIN_CLAMP_INGR 0x8562
#define GL_ALPHA_MIN_CLAMP_INGR 0x8563
#define GL_RED_MAX_CLAMP_INGR 0x8564
#define GL_GREEN_MAX_CLAMP_INGR 0x8565
#define GL_BLUE_MAX_CLAMP_INGR 0x8566
#define GL_ALPHA_MAX_CLAMP_INGR 0x8567
#endif /* GL_INGR_color_clamp */

#ifndef GL_INGR_interlace_read
#define GL_INGR_interlace_read 1
#define GL_INTERLACE_READ_INGR 0x8568
#endif /* GL_INGR_interlace_read */

#ifndef GL_INTEL_conservative_rasterization
#define GL_INTEL_conservative_rasterization 1
#define GL_CONSERVATIVE_RASTERIZATION_INTEL 0x83FE
#endif /* GL_INTEL_conservative_rasterization */

#ifndef GL_INTEL_fragment_shader_ordering
#define GL_INTEL_fragment_shader_ordering 1
#endif /* GL_INTEL_fragment_shader_ordering */

#ifndef GL_INTEL_framebuffer_CMAA
#define GL_INTEL_framebuffer_CMAA 1
    typedef void (APIENTRYP PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC)(void);
#endif /* GL_INTEL_framebuffer_CMAA */

#ifndef GL_INTEL_map_texture
#define GL_INTEL_map_texture 1
#define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0x83FF
#define GL_LAYOUT_DEFAULT_INTEL 0
#define GL_LAYOUT_LINEAR_INTEL 1
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2
    typedef void (APIENTRYP PFNGLSYNCTEXTUREINTELPROC)(GLuint texture);
    typedef void (APIENTRYP PFNGLUNMAPTEXTURE2DINTELPROC)(GLuint texture, GLint level);
    typedef void* (APIENTRYP PFNGLMAPTEXTURE2DINTELPROC)(GLuint texture, GLint level, GLbitfield access, GLint* stride, GLenum* layout);
#endif /* GL_INTEL_map_texture */

#ifndef GL_INTEL_blackhole_render
#define GL_INTEL_blackhole_render 1
#define GL_BLACKHOLE_RENDER_INTEL 0x83FC
#endif /* GL_INTEL_blackhole_render */

#ifndef GL_INTEL_parallel_arrays
#define GL_INTEL_parallel_arrays 1
#define GL_PARALLEL_ARRAYS_INTEL 0x83F4
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
    typedef void (APIENTRYP PFNGLVERTEXPOINTERVINTELPROC)(GLint size, GLenum type, const void** pointer);
    typedef void (APIENTRYP PFNGLNORMALPOINTERVINTELPROC)(GLenum type, const void** pointer);
    typedef void (APIENTRYP PFNGLCOLORPOINTERVINTELPROC)(GLint size, GLenum type, const void** pointer);
    typedef void (APIENTRYP PFNGLTEXCOORDPOINTERVINTELPROC)(GLint size, GLenum type, const void** pointer);
#endif /* GL_INTEL_parallel_arrays */

#ifndef GL_INTEL_performance_query
#define GL_INTEL_performance_query 1
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001
#define GL_PERFQUERY_WAIT_INTEL 0x83FB
#define GL_PERFQUERY_FLUSH_INTEL 0x83FA
#define GL_PERFQUERY_DONOT_FLUSH_INTEL 0x83F9
#define GL_PERFQUERY_COUNTER_EVENT_INTEL 0x94F0
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3
#define GL_PERFQUERY_COUNTER_RAW_INTEL 0x94F4
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
    typedef void (APIENTRYP PFNGLBEGINPERFQUERYINTELPROC)(GLuint queryHandle);
    typedef void (APIENTRYP PFNGLCREATEPERFQUERYINTELPROC)(GLuint queryId, GLuint* queryHandle);
    typedef void (APIENTRYP PFNGLDELETEPERFQUERYINTELPROC)(GLuint queryHandle);
    typedef void (APIENTRYP PFNGLENDPERFQUERYINTELPROC)(GLuint queryHandle);
    typedef void (APIENTRYP PFNGLGETFIRSTPERFQUERYIDINTELPROC)(GLuint* queryId);
    typedef void (APIENTRYP PFNGLGETNEXTPERFQUERYIDINTELPROC)(GLuint queryId, GLuint* nextQueryId);
    typedef void (APIENTRYP PFNGLGETPERFCOUNTERINFOINTELPROC)(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar* counterDesc, GLuint* counterOffset, GLuint* counterDataSize, GLuint* counterTypeEnum, GLuint* counterDataTypeEnum, GLuint64* rawCounterMaxValue);
    typedef void (APIENTRYP PFNGLGETPERFQUERYDATAINTELPROC)(GLuint queryHandle, GLuint flags, GLsizei dataSize, void* data, GLuint* bytesWritten);
    typedef void (APIENTRYP PFNGLGETPERFQUERYIDBYNAMEINTELPROC)(GLchar* queryName, GLuint* queryId);
    typedef void (APIENTRYP PFNGLGETPERFQUERYINFOINTELPROC)(GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint* dataSize, GLuint* noCounters, GLuint* noInstances, GLuint* capsMask);
#endif /* GL_INTEL_performance_query */

#ifndef GL_KHR_blend_equation_advanced
#define GL_KHR_blend_equation_advanced 1
#define GL_MULTIPLY_KHR 0x9294
#define GL_SCREEN_KHR 0x9295
#define GL_OVERLAY_KHR 0x9296
#define GL_DARKEN_KHR 0x9297
#define GL_LIGHTEN_KHR 0x9298
#define GL_COLORDODGE_KHR 0x9299
#define GL_COLORBURN_KHR 0x929A
#define GL_HARDLIGHT_KHR 0x929B
#define GL_SOFTLIGHT_KHR 0x929C
#define GL_DIFFERENCE_KHR 0x929E
#define GL_EXCLUSION_KHR 0x92A0
#define GL_HSL_HUE_KHR 0x92AD
#define GL_HSL_SATURATION_KHR 0x92AE
#define GL_HSL_COLOR_KHR 0x92AF
#define GL_HSL_LUMINOSITY_KHR 0x92B0
    typedef void (APIENTRYP PFNGLBLENDBARRIERKHRPROC)(void);
#endif /* GL_KHR_blend_equation_advanced */

#ifndef GL_KHR_blend_equation_advanced_coherent
#define GL_KHR_blend_equation_advanced_coherent 1
#define GL_BLEND_ADVANCED_COHERENT_KHR 0x9285
#endif /* GL_KHR_blend_equation_advanced_coherent */

#ifndef GL_KHR_context_flush_control
#define GL_KHR_context_flush_control 1
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_NONE 0
#define GL_CONTEXT_RELEASE_BEHAVIOR_KHR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x82FC
#define GL_NONE 0
#endif /* GL_KHR_context_flush_control */

#ifndef GL_KHR_debug
#define GL_KHR_debug 1
    typedef void (APIENTRY* GLDEBUGPROCKHR)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_BUFFER 0x82E0
#define GL_SHADER 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_VERTEX_ARRAY 0x8074
#define GL_QUERY 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_SAMPLER 0x82E6
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION_KHR 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0x8245
#define GL_DEBUG_SOURCE_API_KHR 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0x8249
#define GL_DEBUG_SOURCE_APPLICATION_KHR 0x824A
#define GL_DEBUG_SOURCE_OTHER_KHR 0x824B
#define GL_DEBUG_TYPE_ERROR_KHR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY_KHR 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE_KHR 0x8250
#define GL_DEBUG_TYPE_OTHER_KHR 0x8251
#define GL_DEBUG_TYPE_MARKER_KHR 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0x8269
#define GL_DEBUG_TYPE_POP_GROUP_KHR 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0x826D
#define GL_BUFFER_KHR 0x82E0
#define GL_SHADER_KHR 0x82E1
#define GL_PROGRAM_KHR 0x82E2
#define GL_VERTEX_ARRAY_KHR 0x8074
#define GL_QUERY_KHR 0x82E3
#define GL_PROGRAM_PIPELINE_KHR 0x82E4
#define GL_SAMPLER_KHR 0x82E6
#define GL_MAX_LABEL_LENGTH_KHR 0x82E8
#define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0x9144
#define GL_DEBUG_LOGGED_MESSAGES_KHR 0x9145
#define GL_DEBUG_SEVERITY_HIGH_KHR 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM_KHR 0x9147
#define GL_DEBUG_SEVERITY_LOW_KHR 0x9148
#define GL_DEBUG_OUTPUT_KHR 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0x00000002
#define GL_STACK_OVERFLOW_KHR 0x0503
#define GL_STACK_UNDERFLOW_KHR 0x0504
#define GL_DISPLAY_LIST 0x82E7
    typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLKHRPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
    typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTKHRPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
    typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKKHRPROC)(GLDEBUGPROCKHR callback, const void* userParam);
    typedef GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGKHRPROC)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
    typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPKHRPROC)(GLenum source, GLuint id, GLsizei length, const GLchar* message);
    typedef void (APIENTRYP PFNGLPOPDEBUGGROUPKHRPROC)(void);
    typedef void (APIENTRYP PFNGLOBJECTLABELKHRPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
    typedef void (APIENTRYP PFNGLGETOBJECTLABELKHRPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
    typedef void (APIENTRYP PFNGLOBJECTPTRLABELKHRPROC)(const void* ptr, GLsizei length, const GLchar* label);
    typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELKHRPROC)(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);
    typedef void (APIENTRYP PFNGLGETPOINTERVKHRPROC)(GLenum pname, void** params);
#endif /* GL_KHR_debug */

#ifndef GL_KHR_no_error
#define GL_KHR_no_error 1
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0x00000008
#endif /* GL_KHR_no_error */

#ifndef GL_KHR_robust_buffer_access_behavior
#define GL_KHR_robust_buffer_access_behavior 1
#endif /* GL_KHR_robust_buffer_access_behavior */

#ifndef GL_KHR_robustness
#define GL_KHR_robustness 1
#define GL_NO_ERROR 0
#define GL_CONTEXT_ROBUST_ACCESS 0x90F3
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_CONTEXT_LOST 0x0507
#define GL_NO_ERROR 0
#define GL_CONTEXT_ROBUST_ACCESS_KHR 0x90F3
#define GL_LOSE_CONTEXT_ON_RESET_KHR 0x8252
#define GL_GUILTY_CONTEXT_RESET_KHR 0x8253
#define GL_INNOCENT_CONTEXT_RESET_KHR 0x8254
#define GL_UNKNOWN_CONTEXT_RESET_KHR 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256
#define GL_NO_RESET_NOTIFICATION_KHR 0x8261
#define GL_CONTEXT_LOST_KHR 0x0507
    typedef GLenum(APIENTRYP PFNGLGETGRAPHICSRESETSTATUSKHRPROC)(void);
    typedef void (APIENTRYP PFNGLREADNPIXELSKHRPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
    typedef void (APIENTRYP PFNGLGETNUNIFORMFVKHRPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETNUNIFORMIVKHRPROC)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
    typedef void (APIENTRYP PFNGLGETNUNIFORMUIVKHRPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
#endif /* GL_KHR_robustness */

#ifndef GL_KHR_shader_subgroup
#define GL_KHR_shader_subgroup 1
#define GL_SUBGROUP_SIZE_KHR 0x9532
#define GL_SUBGROUP_SUPPORTED_STAGES_KHR 0x9533
#define GL_SUBGROUP_SUPPORTED_FEATURES_KHR 0x9534
#define GL_SUBGROUP_QUAD_ALL_STAGES_KHR 0x9535
#define GL_SUBGROUP_FEATURE_BASIC_BIT_KHR 0x00000001
#define GL_SUBGROUP_FEATURE_VOTE_BIT_KHR 0x00000002
#define GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR 0x00000004
#define GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR 0x00000008
#define GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR 0x00000010
#define GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR 0x00000020
#define GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR 0x00000040
#define GL_SUBGROUP_FEATURE_QUAD_BIT_KHR 0x00000080
#endif /* GL_KHR_shader_subgroup */

#ifndef GL_KHR_texture_compression_astc_hdr
#define GL_KHR_texture_compression_astc_hdr 1
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#endif /* GL_KHR_texture_compression_astc_hdr */

#ifndef GL_KHR_texture_compression_astc_ldr
#define GL_KHR_texture_compression_astc_ldr 1
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#endif /* GL_KHR_texture_compression_astc_ldr */

#ifndef GL_KHR_texture_compression_astc_sliced_3d
#define GL_KHR_texture_compression_astc_sliced_3d 1
#endif /* GL_KHR_texture_compression_astc_sliced_3d */

#ifndef GL_KHR_parallel_shader_compile
#define GL_KHR_parallel_shader_compile 1
#define GL_MAX_SHADER_COMPILER_THREADS_KHR 0x91B0
#define GL_COMPLETION_STATUS_KHR 0x91B1
    typedef void (APIENTRYP PFNGLMAXSHADERCOMPILERTHREADSKHRPROC)(GLuint count);
#endif /* GL_KHR_parallel_shader_compile */

#ifndef GL_MESAX_texture_stack
#define GL_MESAX_texture_stack 1
#define GL_TEXTURE_1D_STACK_MESAX 0x8759
#define GL_TEXTURE_2D_STACK_MESAX 0x875A
#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
#endif /* GL_MESAX_texture_stack */

#ifndef GL_MESA_framebuffer_flip_x
#define GL_MESA_framebuffer_flip_x 1
#define GL_FRAMEBUFFER_FLIP_X_MESA 0x8BBC
#endif /* GL_MESA_framebuffer_flip_x */

#ifndef GL_MESA_framebuffer_flip_y
#define GL_MESA_framebuffer_flip_y 1
#define GL_FRAMEBUFFER_FLIP_Y_MESA 0x8BBB
    typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIMESAPROC)(GLenum target, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC)(GLenum target, GLenum pname, GLint* params);
#endif /* GL_MESA_framebuffer_flip_y */

#ifndef GL_MESA_framebuffer_swap_xy
#define GL_MESA_framebuffer_swap_xy 1
#define GL_FRAMEBUFFER_SWAP_XY_MESA 0x8BBD
#endif /* GL_MESA_framebuffer_swap_xy */

#ifndef GL_MESA_pack_invert
#define GL_MESA_pack_invert 1
#define GL_PACK_INVERT_MESA 0x8758
#endif /* GL_MESA_pack_invert */

#ifndef GL_MESA_program_binary_formats
#define GL_MESA_program_binary_formats 1
#define GL_PROGRAM_BINARY_FORMAT_MESA 0x875F
#endif /* GL_MESA_program_binary_formats */

#ifndef GL_MESA_resize_buffers
#define GL_MESA_resize_buffers 1
    typedef void (APIENTRYP PFNGLRESIZEBUFFERSMESAPROC)(void);
#endif /* GL_MESA_resize_buffers */

#ifndef GL_MESA_shader_integer_functions
#define GL_MESA_shader_integer_functions 1
#endif /* GL_MESA_shader_integer_functions */

#ifndef GL_MESA_tile_raster_order
#define GL_MESA_tile_raster_order 1
#define GL_TILE_RASTER_ORDER_FIXED_MESA 0x8BB8
#define GL_TILE_RASTER_ORDER_INCREASING_X_MESA 0x8BB9
#define GL_TILE_RASTER_ORDER_INCREASING_Y_MESA 0x8BBA
#endif /* GL_MESA_tile_raster_order */

#ifndef GL_MESA_window_pos
#define GL_MESA_window_pos 1
    typedef void (APIENTRYP PFNGLWINDOWPOS2DMESAPROC)(GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2DVMESAPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS2FMESAPROC)(GLfloat x, GLfloat y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2FVMESAPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS2IMESAPROC)(GLint x, GLint y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2IVMESAPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS2SMESAPROC)(GLshort x, GLshort y);
    typedef void (APIENTRYP PFNGLWINDOWPOS2SVMESAPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3DMESAPROC)(GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3DVMESAPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3FMESAPROC)(GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3FVMESAPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3IMESAPROC)(GLint x, GLint y, GLint z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3IVMESAPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS3SMESAPROC)(GLshort x, GLshort y, GLshort z);
    typedef void (APIENTRYP PFNGLWINDOWPOS3SVMESAPROC)(const GLshort* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS4DMESAPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLWINDOWPOS4DVMESAPROC)(const GLdouble* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS4FMESAPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLWINDOWPOS4FVMESAPROC)(const GLfloat* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS4IMESAPROC)(GLint x, GLint y, GLint z, GLint w);
    typedef void (APIENTRYP PFNGLWINDOWPOS4IVMESAPROC)(const GLint* v);
    typedef void (APIENTRYP PFNGLWINDOWPOS4SMESAPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
    typedef void (APIENTRYP PFNGLWINDOWPOS4SVMESAPROC)(const GLshort* v);
#endif /* GL_MESA_window_pos */

#ifndef GL_MESA_ycbcr_texture
#define GL_MESA_ycbcr_texture 1
#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
#define GL_YCBCR_MESA 0x8757
#endif /* GL_MESA_ycbcr_texture */

#ifndef GL_NVX_blend_equation_advanced_multi_draw_buffers
#define GL_NVX_blend_equation_advanced_multi_draw_buffers 1
#endif /* GL_NVX_blend_equation_advanced_multi_draw_buffers */

#ifndef GL_NVX_conditional_render
#define GL_NVX_conditional_render 1
    typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVXPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVXPROC)(void);
#endif /* GL_NVX_conditional_render */

#ifndef GL_NVX_gpu_memory_info
#define GL_NVX_gpu_memory_info 1
#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B
#endif /* GL_NVX_gpu_memory_info */

#ifndef GL_NVX_linked_gpu_multicast
#define GL_NVX_linked_gpu_multicast 1
#define GL_LGPU_SEPARATE_STORAGE_BIT_NVX 0x0800
#define GL_MAX_LGPU_GPUS_NVX 0x92BA
    typedef void (APIENTRYP PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC)(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
    typedef void (APIENTRYP PFNGLLGPUCOPYIMAGESUBDATANVXPROC)(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
    typedef void (APIENTRYP PFNGLLGPUINTERLOCKNVXPROC)(void);
#endif /* GL_NVX_linked_gpu_multicast */

#ifndef GL_NV_alpha_to_coverage_dither_control
#define GL_NV_alpha_to_coverage_dither_control 1
#define GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV 0x934D
#define GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV 0x934E
#define GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV 0x934F
#define GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV 0x92BF
    typedef void (APIENTRYP PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC)(GLenum mode);
#endif /* GL_NV_alpha_to_coverage_dither_control */

#ifndef GL_NV_bindless_multi_draw_indirect
#define GL_NV_bindless_multi_draw_indirect 1
    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC)(GLenum mode, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC)(GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
#endif /* GL_NV_bindless_multi_draw_indirect */

#ifndef GL_NV_bindless_multi_draw_indirect_count
#define GL_NV_bindless_multi_draw_indirect_count 1
    typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC)(GLenum mode, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
    typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC)(GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
#endif /* GL_NV_bindless_multi_draw_indirect_count */

#ifndef GL_NV_bindless_texture
#define GL_NV_bindless_texture 1
    typedef GLuint64(APIENTRYP PFNGLGETTEXTUREHANDLENVPROC)(GLuint texture);
    typedef GLuint64(APIENTRYP PFNGLGETTEXTURESAMPLERHANDLENVPROC)(GLuint texture, GLuint sampler);
    typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTNVPROC)(GLuint64 handle);
    typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC)(GLuint64 handle);
    typedef GLuint64(APIENTRYP PFNGLGETIMAGEHANDLENVPROC)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
    typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTNVPROC)(GLuint64 handle, GLenum access);
    typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC)(GLuint64 handle);
    typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64NVPROC)(GLint location, GLuint64 value);
    typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VNVPROC)(GLint location, GLsizei count, const GLuint64* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC)(GLuint program, GLint location, GLuint64 value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* values);
    typedef GLboolean(APIENTRYP PFNGLISTEXTUREHANDLERESIDENTNVPROC)(GLuint64 handle);
    typedef GLboolean(APIENTRYP PFNGLISIMAGEHANDLERESIDENTNVPROC)(GLuint64 handle);
#endif /* GL_NV_bindless_texture */

#ifndef GL_NV_blend_equation_advanced
#define GL_NV_blend_equation_advanced 1
#define GL_BLEND_OVERLAP_NV 0x9281
#define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280
#define GL_BLUE_NV 0x1905
#define GL_COLORBURN_NV 0x929A
#define GL_COLORDODGE_NV 0x9299
#define GL_CONJOINT_NV 0x9284
#define GL_CONTRAST_NV 0x92A1
#define GL_DARKEN_NV 0x9297
#define GL_DIFFERENCE_NV 0x929E
#define GL_DISJOINT_NV 0x9283
#define GL_DST_ATOP_NV 0x928F
#define GL_DST_IN_NV 0x928B
#define GL_DST_NV 0x9287
#define GL_DST_OUT_NV 0x928D
#define GL_DST_OVER_NV 0x9289
#define GL_EXCLUSION_NV 0x92A0
#define GL_GREEN_NV 0x1904
#define GL_HARDLIGHT_NV 0x929B
#define GL_HARDMIX_NV 0x92A9
#define GL_HSL_COLOR_NV 0x92AF
#define GL_HSL_HUE_NV 0x92AD
#define GL_HSL_LUMINOSITY_NV 0x92B0
#define GL_HSL_SATURATION_NV 0x92AE
#define GL_INVERT 0x150A
#define GL_INVERT_OVG_NV 0x92B4
#define GL_INVERT_RGB_NV 0x92A3
#define GL_LIGHTEN_NV 0x9298
#define GL_LINEARBURN_NV 0x92A5
#define GL_LINEARDODGE_NV 0x92A4
#define GL_LINEARLIGHT_NV 0x92A7
#define GL_MINUS_CLAMPED_NV 0x92B3
#define GL_MINUS_NV 0x929F
#define GL_MULTIPLY_NV 0x9294
#define GL_OVERLAY_NV 0x9296
#define GL_PINLIGHT_NV 0x92A8
#define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2
#define GL_PLUS_CLAMPED_NV 0x92B1
#define GL_PLUS_DARKER_NV 0x9292
#define GL_PLUS_NV 0x9291
#define GL_RED_NV 0x1903
#define GL_SCREEN_NV 0x9295
#define GL_SOFTLIGHT_NV 0x929C
#define GL_SRC_ATOP_NV 0x928E
#define GL_SRC_IN_NV 0x928A
#define GL_SRC_NV 0x9286
#define GL_SRC_OUT_NV 0x928C
#define GL_SRC_OVER_NV 0x9288
#define GL_UNCORRELATED_NV 0x9282
#define GL_VIVIDLIGHT_NV 0x92A6
#define GL_XOR_NV 0x1506
#define GL_ZERO 0
    typedef void (APIENTRYP PFNGLBLENDPARAMETERINVPROC)(GLenum pname, GLint value);
    typedef void (APIENTRYP PFNGLBLENDBARRIERNVPROC)(void);
#endif /* GL_NV_blend_equation_advanced */

#ifndef GL_NV_blend_equation_advanced_coherent
#define GL_NV_blend_equation_advanced_coherent 1
#define GL_BLEND_ADVANCED_COHERENT_NV 0x9285
#endif /* GL_NV_blend_equation_advanced_coherent */

#ifndef GL_NV_blend_minmax_factor
#define GL_NV_blend_minmax_factor 1
#define GL_FACTOR_MIN_AMD 0x901C
#define GL_FACTOR_MAX_AMD 0x901D
#endif /* GL_NV_blend_minmax_factor */

#ifndef GL_NV_blend_square
#define GL_NV_blend_square 1
#endif /* GL_NV_blend_square */

#ifndef GL_NV_clip_space_w_scaling
#define GL_NV_clip_space_w_scaling 1
#define GL_VIEWPORT_POSITION_W_SCALE_NV 0x937C
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E
    typedef void (APIENTRYP PFNGLVIEWPORTPOSITIONWSCALENVPROC)(GLuint index, GLfloat xcoeff, GLfloat ycoeff);
#endif /* GL_NV_clip_space_w_scaling */

#ifndef GL_NV_command_list
#define GL_NV_command_list 1
#define GL_TERMINATE_SEQUENCE_COMMAND_NV 0x0000
#define GL_NOP_COMMAND_NV 0x0001
#define GL_DRAW_ELEMENTS_COMMAND_NV 0x0002
#define GL_DRAW_ARRAYS_COMMAND_NV 0x0003
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0x0005
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007
#define GL_ELEMENT_ADDRESS_COMMAND_NV 0x0008
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0x0009
#define GL_UNIFORM_ADDRESS_COMMAND_NV 0x000A
#define GL_BLEND_COLOR_COMMAND_NV 0x000B
#define GL_STENCIL_REF_COMMAND_NV 0x000C
#define GL_LINE_WIDTH_COMMAND_NV 0x000D
#define GL_POLYGON_OFFSET_COMMAND_NV 0x000E
#define GL_ALPHA_REF_COMMAND_NV 0x000F
#define GL_VIEWPORT_COMMAND_NV 0x0010
#define GL_SCISSOR_COMMAND_NV 0x0011
#define GL_FRONT_FACE_COMMAND_NV 0x0012
    typedef void (APIENTRYP PFNGLCREATESTATESNVPROC)(GLsizei n, GLuint* states);
    typedef void (APIENTRYP PFNGLDELETESTATESNVPROC)(GLsizei n, const GLuint* states);
    typedef GLboolean(APIENTRYP PFNGLISSTATENVPROC)(GLuint state);
    typedef void (APIENTRYP PFNGLSTATECAPTURENVPROC)(GLuint state, GLenum mode);
    typedef GLuint(APIENTRYP PFNGLGETCOMMANDHEADERNVPROC)(GLenum tokenID, GLuint size);
    typedef GLushort(APIENTRYP PFNGLGETSTAGEINDEXNVPROC)(GLenum shadertype);
    typedef void (APIENTRYP PFNGLDRAWCOMMANDSNVPROC)(GLenum primitiveMode, GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, GLuint count);
    typedef void (APIENTRYP PFNGLDRAWCOMMANDSADDRESSNVPROC)(GLenum primitiveMode, const GLuint64* indirects, const GLsizei* sizes, GLuint count);
    typedef void (APIENTRYP PFNGLDRAWCOMMANDSSTATESNVPROC)(GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count);
    typedef void (APIENTRYP PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC)(const GLuint64* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count);
    typedef void (APIENTRYP PFNGLCREATECOMMANDLISTSNVPROC)(GLsizei n, GLuint* lists);
    typedef void (APIENTRYP PFNGLDELETECOMMANDLISTSNVPROC)(GLsizei n, const GLuint* lists);
    typedef GLboolean(APIENTRYP PFNGLISCOMMANDLISTNVPROC)(GLuint list);
    typedef void (APIENTRYP PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC)(GLuint list, GLuint segment, const void** indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count);
    typedef void (APIENTRYP PFNGLCOMMANDLISTSEGMENTSNVPROC)(GLuint list, GLuint segments);
    typedef void (APIENTRYP PFNGLCOMPILECOMMANDLISTNVPROC)(GLuint list);
    typedef void (APIENTRYP PFNGLCALLCOMMANDLISTNVPROC)(GLuint list);
#endif /* GL_NV_command_list */

#ifndef GL_NV_compute_program5
#define GL_NV_compute_program5 1
#define GL_COMPUTE_PROGRAM_NV 0x90FB
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC
#endif /* GL_NV_compute_program5 */

#ifndef GL_NV_compute_shader_derivatives
#define GL_NV_compute_shader_derivatives 1
#endif /* GL_NV_compute_shader_derivatives */

#ifndef GL_NV_conditional_render
#define GL_NV_conditional_render 1
#define GL_QUERY_WAIT_NV 0x8E13
#define GL_QUERY_NO_WAIT_NV 0x8E14
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
    typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC)(GLuint id, GLenum mode);
    typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC)(void);
#endif /* GL_NV_conditional_render */

#ifndef GL_NV_conservative_raster
#define GL_NV_conservative_raster 1
#define GL_CONSERVATIVE_RASTERIZATION_NV 0x9346
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349
    typedef void (APIENTRYP PFNGLSUBPIXELPRECISIONBIASNVPROC)(GLuint xbits, GLuint ybits);
#endif /* GL_NV_conservative_raster */

#ifndef GL_NV_conservative_raster_dilate
#define GL_NV_conservative_raster_dilate 1
#define GL_CONSERVATIVE_RASTER_DILATE_NV 0x9379
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B
    typedef void (APIENTRYP PFNGLCONSERVATIVERASTERPARAMETERFNVPROC)(GLenum pname, GLfloat value);
#endif /* GL_NV_conservative_raster_dilate */

#ifndef GL_NV_conservative_raster_pre_snap
#define GL_NV_conservative_raster_pre_snap 1
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV 0x9550
#endif /* GL_NV_conservative_raster_pre_snap */

#ifndef GL_NV_conservative_raster_pre_snap_triangles
#define GL_NV_conservative_raster_pre_snap_triangles 1
#define GL_CONSERVATIVE_RASTER_MODE_NV 0x954D
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F
#define GL_CONSERVATIVE_RASTER_MODE_NV 0x954D
    typedef void (APIENTRYP PFNGLCONSERVATIVERASTERPARAMETERINVPROC)(GLenum pname, GLint param);
#endif /* GL_NV_conservative_raster_pre_snap_triangles */

#ifndef GL_NV_conservative_raster_underestimation
#define GL_NV_conservative_raster_underestimation 1
#endif /* GL_NV_conservative_raster_underestimation */

#ifndef GL_NV_copy_depth_to_color
#define GL_NV_copy_depth_to_color 1
#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
#endif /* GL_NV_copy_depth_to_color */

#ifndef GL_NV_copy_image
#define GL_NV_copy_image 1
    typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATANVPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
#endif /* GL_NV_copy_image */

#ifndef GL_NV_deep_texture3D
#define GL_NV_deep_texture3D 1
#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0x90D1
#endif /* GL_NV_deep_texture3D */

#ifndef GL_NV_depth_buffer_float
#define GL_NV_depth_buffer_float 1
#define GL_DEPTH_COMPONENT32F_NV 0x8DAB
#define GL_DEPTH32F_STENCIL8_NV 0x8DAC
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
    typedef void (APIENTRYP PFNGLDEPTHRANGEDNVPROC)(GLdouble zNear, GLdouble zFar);
    typedef void (APIENTRYP PFNGLCLEARDEPTHDNVPROC)(GLdouble depth);
    typedef void (APIENTRYP PFNGLDEPTHBOUNDSDNVPROC)(GLdouble zmin, GLdouble zmax);
#endif /* GL_NV_depth_buffer_float */

#ifndef GL_NV_depth_clamp
#define GL_NV_depth_clamp 1
#define GL_DEPTH_CLAMP_NV 0x864F
#endif /* GL_NV_depth_clamp */

#ifndef GL_NV_draw_texture
#define GL_NV_draw_texture 1
    typedef void (APIENTRYP PFNGLDRAWTEXTURENVPROC)(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
#endif /* GL_NV_draw_texture */

#ifndef GL_NV_draw_vulkan_image
#define GL_NV_draw_vulkan_image 1
    typedef void (APIENTRY* GLVULKANPROCNV)(void);
    typedef void (APIENTRYP PFNGLDRAWVKIMAGENVPROC)(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
    typedef GLVULKANPROCNV(APIENTRYP PFNGLGETVKPROCADDRNVPROC)(const GLchar* name);
    typedef void (APIENTRYP PFNGLWAITVKSEMAPHORENVPROC)(GLuint64 vkSemaphore);
    typedef void (APIENTRYP PFNGLSIGNALVKSEMAPHORENVPROC)(GLuint64 vkSemaphore);
    typedef void (APIENTRYP PFNGLSIGNALVKFENCENVPROC)(GLuint64 vkFence);
#endif /* GL_NV_draw_vulkan_image */

#ifndef GL_NV_evaluators
#define GL_NV_evaluators 1
#define GL_EVAL_2D_NV 0x86C0
#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
#define GL_MAP_TESSELLATION_NV 0x86C2
#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
#define GL_MAX_MAP_TESSELLATION_NV 0x86D6
#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
    typedef void (APIENTRYP PFNGLMAPCONTROLPOINTSNVPROC)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void* points);
    typedef void (APIENTRYP PFNGLMAPPARAMETERIVNVPROC)(GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLMAPPARAMETERFVNVPROC)(GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLGETMAPCONTROLPOINTSNVPROC)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void* points);
    typedef void (APIENTRYP PFNGLGETMAPPARAMETERIVNVPROC)(GLenum target, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETMAPPARAMETERFVNVPROC)(GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERIVNVPROC)(GLenum target, GLuint index, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLEVALMAPSNVPROC)(GLenum target, GLenum mode);
#endif /* GL_NV_evaluators */

#ifndef GL_NV_explicit_multisample
#define GL_NV_explicit_multisample 1
#define GL_SAMPLE_POSITION_NV 0x8E50
#define GL_SAMPLE_MASK_NV 0x8E51
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
    typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVNVPROC)(GLenum pname, GLuint index, GLfloat* val);
    typedef void (APIENTRYP PFNGLSAMPLEMASKINDEXEDNVPROC)(GLuint index, GLbitfield mask);
    typedef void (APIENTRYP PFNGLTEXRENDERBUFFERNVPROC)(GLenum target, GLuint renderbuffer);
#endif /* GL_NV_explicit_multisample */

#ifndef GL_NV_fence
#define GL_NV_fence 1
#define GL_ALL_COMPLETED_NV 0x84F2
#define GL_FENCE_STATUS_NV 0x84F3
#define GL_FENCE_CONDITION_NV 0x84F4
    typedef void (APIENTRYP PFNGLDELETEFENCESNVPROC)(GLsizei n, const GLuint* fences);
    typedef void (APIENTRYP PFNGLGENFENCESNVPROC)(GLsizei n, GLuint* fences);
    typedef GLboolean(APIENTRYP PFNGLISFENCENVPROC)(GLuint fence);
    typedef GLboolean(APIENTRYP PFNGLTESTFENCENVPROC)(GLuint fence);
    typedef void (APIENTRYP PFNGLGETFENCEIVNVPROC)(GLuint fence, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLFINISHFENCENVPROC)(GLuint fence);
    typedef void (APIENTRYP PFNGLSETFENCENVPROC)(GLuint fence, GLenum condition);
#endif /* GL_NV_fence */

#ifndef GL_NV_fill_rectangle
#define GL_NV_fill_rectangle 1
#define GL_FILL_RECTANGLE_NV 0x933C
#endif /* GL_NV_fill_rectangle */

#ifndef GL_NV_float_buffer
#define GL_NV_float_buffer 1
#define GL_FLOAT_R_NV 0x8880
#define GL_FLOAT_RG_NV 0x8881
#define GL_FLOAT_RGB_NV 0x8882
#define GL_FLOAT_RGBA_NV 0x8883
#define GL_FLOAT_R16_NV 0x8884
#define GL_FLOAT_R32_NV 0x8885
#define GL_FLOAT_RG16_NV 0x8886
#define GL_FLOAT_RG32_NV 0x8887
#define GL_FLOAT_RGB16_NV 0x8888
#define GL_FLOAT_RGB32_NV 0x8889
#define GL_FLOAT_RGBA16_NV 0x888A
#define GL_FLOAT_RGBA32_NV 0x888B
#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
#define GL_FLOAT_RGBA_MODE_NV 0x888E
#endif /* GL_NV_float_buffer */

#ifndef GL_NV_fog_distance
#define GL_NV_fog_distance 1
#define GL_FOG_DISTANCE_MODE_NV 0x855A
#define GL_EYE_RADIAL_NV 0x855B
#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
#define GL_EYE_PLANE 0x2502
#endif /* GL_NV_fog_distance */

#ifndef GL_NV_fragment_coverage_to_color
#define GL_NV_fragment_coverage_to_color 1
#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0x92DD
#define GL_FRAGMENT_COVERAGE_COLOR_NV 0x92DE
    typedef void (APIENTRYP PFNGLFRAGMENTCOVERAGECOLORNVPROC)(GLuint color);
#endif /* GL_NV_fragment_coverage_to_color */

#ifndef GL_NV_fragment_program
#define GL_NV_fragment_program 1
#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
#define GL_FRAGMENT_PROGRAM_NV 0x8870
#define GL_MAX_TEXTURE_COORDS_NV 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
#define GL_PROGRAM_ERROR_STRING_NV 0x8874
    typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)(GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)(GLuint id, GLsizei len, const GLubyte* name, const GLfloat* v);
    typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)(GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)(GLuint id, GLsizei len, const GLubyte* name, const GLdouble* v);
    typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)(GLuint id, GLsizei len, const GLubyte* name, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)(GLuint id, GLsizei len, const GLubyte* name, GLdouble* params);
#endif /* GL_NV_fragment_program */

#ifndef GL_NV_fragment_program2
#define GL_NV_fragment_program2 1
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
#endif /* GL_NV_fragment_program2 */

#ifndef GL_NV_fragment_program4
#define GL_NV_fragment_program4 1
#endif /* GL_NV_fragment_program4 */

#ifndef GL_NV_fragment_program_option
#define GL_NV_fragment_program_option 1
#endif /* GL_NV_fragment_program_option */

#ifndef GL_NV_fragment_shader_barycentric
#define GL_NV_fragment_shader_barycentric 1
#endif /* GL_NV_fragment_shader_barycentric */

#ifndef GL_NV_fragment_shader_interlock
#define GL_NV_fragment_shader_interlock 1
#endif /* GL_NV_fragment_shader_interlock */

#ifndef GL_NV_framebuffer_mixed_samples
#define GL_NV_framebuffer_mixed_samples 1
#define GL_RASTER_MULTISAMPLE_EXT 0x9327
#define GL_COVERAGE_MODULATION_TABLE_NV 0x9331
#define GL_RASTER_SAMPLES_EXT 0x9328
#define GL_MAX_RASTER_SAMPLES_EXT 0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0x932C
#define GL_COLOR_SAMPLES_NV 0x8E20
#define GL_DEPTH_SAMPLES_NV 0x932D
#define GL_STENCIL_SAMPLES_NV 0x932E
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330
#define GL_COVERAGE_MODULATION_NV 0x9332
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333
    typedef void (APIENTRYP PFNGLCOVERAGEMODULATIONTABLENVPROC)(GLsizei n, const GLfloat* v);
    typedef void (APIENTRYP PFNGLGETCOVERAGEMODULATIONTABLENVPROC)(GLsizei bufSize, GLfloat* v);
    typedef void (APIENTRYP PFNGLCOVERAGEMODULATIONNVPROC)(GLenum components);
#endif /* GL_NV_framebuffer_mixed_samples */

#ifndef GL_NV_framebuffer_multisample_coverage
#define GL_NV_framebuffer_multisample_coverage 1
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
    typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
#endif /* GL_NV_framebuffer_multisample_coverage */

#ifndef GL_NV_geometry_program4
#define GL_NV_geometry_program4 1
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
    typedef void (APIENTRYP PFNGLPROGRAMVERTEXLIMITNVPROC)(GLenum target, GLint limit);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
#endif /* GL_NV_geometry_program4 */

#ifndef GL_NV_geometry_shader4
#define GL_NV_geometry_shader4 1
#endif /* GL_NV_geometry_shader4 */

#ifndef GL_NV_geometry_shader_passthrough
#define GL_NV_geometry_shader_passthrough 1
#endif /* GL_NV_geometry_shader_passthrough */

#ifndef GL_NV_gpu_program4
#define GL_NV_gpu_program4 1
#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4INVPROC)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)(GLenum target, GLuint index, const GLint* params);
    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLint* params);
    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)(GLenum target, GLuint index, const GLuint* params);
    typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLuint* params);
    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4INVPROC)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4IVNVPROC)(GLenum target, GLuint index, const GLint* params);
    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLint* params);
    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UINVPROC)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)(GLenum target, GLuint index, const GLuint* params);
    typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLuint* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)(GLenum target, GLuint index, GLint* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)(GLenum target, GLuint index, GLuint* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)(GLenum target, GLuint index, GLint* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)(GLenum target, GLuint index, GLuint* params);
#endif /* GL_NV_gpu_program4 */

#ifndef GL_NV_gpu_program5
#define GL_NV_gpu_program5 1
#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F
#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0x8F45
    typedef void (APIENTRYP PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC)(GLenum target, GLsizei count, const GLuint* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC)(GLenum target, GLuint index, GLuint* param);
#endif /* GL_NV_gpu_program5 */

#ifndef GL_NV_gpu_program5_mem_extended
#define GL_NV_gpu_program5_mem_extended 1
#endif /* GL_NV_gpu_program5_mem_extended */

#ifndef GL_NV_gpu_shader5
#define GL_NV_gpu_shader5 1
#define GL_INT64_NV 0x140E
#define GL_UNSIGNED_INT64_NV 0x140F
#define GL_INT8_NV 0x8FE0
#define GL_INT8_VEC2_NV 0x8FE1
#define GL_INT8_VEC3_NV 0x8FE2
#define GL_INT8_VEC4_NV 0x8FE3
#define GL_INT16_NV 0x8FE4
#define GL_INT16_VEC2_NV 0x8FE5
#define GL_INT16_VEC3_NV 0x8FE6
#define GL_INT16_VEC4_NV 0x8FE7
#define GL_INT64_VEC2_NV 0x8FE9
#define GL_INT64_VEC3_NV 0x8FEA
#define GL_INT64_VEC4_NV 0x8FEB
#define GL_UNSIGNED_INT8_NV 0x8FEC
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
#define GL_UNSIGNED_INT16_NV 0x8FF0
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
#define GL_FLOAT16_NV 0x8FF8
#define GL_FLOAT16_VEC2_NV 0x8FF9
#define GL_FLOAT16_VEC3_NV 0x8FFA
#define GL_FLOAT16_VEC4_NV 0x8FFB
#define GL_PATCHES 0x000E
#endif /* GL_NV_gpu_shader5 */

#ifndef GL_NV_half_float
#define GL_NV_half_float 1
    typedef unsigned short GLhalfNV;
#define GL_HALF_FLOAT_NV 0x140B
    typedef void (APIENTRYP PFNGLVERTEX2HNVPROC)(GLhalfNV x, GLhalfNV y);
    typedef void (APIENTRYP PFNGLVERTEX2HVNVPROC)(const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLVERTEX3HNVPROC)(GLhalfNV x, GLhalfNV y, GLhalfNV z);
    typedef void (APIENTRYP PFNGLVERTEX3HVNVPROC)(const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLVERTEX4HNVPROC)(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
    typedef void (APIENTRYP PFNGLVERTEX4HVNVPROC)(const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLNORMAL3HNVPROC)(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
    typedef void (APIENTRYP PFNGLNORMAL3HVNVPROC)(const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLCOLOR3HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
    typedef void (APIENTRYP PFNGLCOLOR3HVNVPROC)(const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLCOLOR4HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
    typedef void (APIENTRYP PFNGLCOLOR4HVNVPROC)(const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLTEXCOORD1HNVPROC)(GLhalfNV s);
    typedef void (APIENTRYP PFNGLTEXCOORD1HVNVPROC)(const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLTEXCOORD2HNVPROC)(GLhalfNV s, GLhalfNV t);
    typedef void (APIENTRYP PFNGLTEXCOORD2HVNVPROC)(const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLTEXCOORD3HNVPROC)(GLhalfNV s, GLhalfNV t, GLhalfNV r);
    typedef void (APIENTRYP PFNGLTEXCOORD3HVNVPROC)(const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLTEXCOORD4HNVPROC)(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
    typedef void (APIENTRYP PFNGLTEXCOORD4HVNVPROC)(const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1HNVPROC)(GLenum target, GLhalfNV s);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1HVNVPROC)(GLenum target, const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2HVNVPROC)(GLenum target, const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3HVNVPROC)(GLenum target, const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4HVNVPROC)(GLenum target, const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLFOGCOORDHNVPROC)(GLhalfNV fog);
    typedef void (APIENTRYP PFNGLFOGCOORDHVNVPROC)(const GLhalfNV* fog);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
    typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HVNVPROC)(const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLVERTEXWEIGHTHNVPROC)(GLhalfNV weight);
    typedef void (APIENTRYP PFNGLVERTEXWEIGHTHVNVPROC)(const GLhalfNV* weight);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1HNVPROC)(GLuint index, GLhalfNV x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1HVNVPROC)(GLuint index, const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2HVNVPROC)(GLuint index, const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3HVNVPROC)(GLuint index, const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4HVNVPROC)(GLuint index, const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS1HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS2HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS3HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS4HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV* v);
#endif /* GL_NV_half_float */

#ifndef GL_NV_internalformat_sample_query
#define GL_NV_internalformat_sample_query 1
#define GL_RENDERBUFFER 0x8D41
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_MULTISAMPLES_NV 0x9371
#define GL_SUPERSAMPLE_SCALE_X_NV 0x9372
#define GL_SUPERSAMPLE_SCALE_Y_NV 0x9373
#define GL_CONFORMANT_NV 0x9374
    typedef void (APIENTRYP PFNGLGETINTERNALFORMATSAMPLEIVNVPROC)(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint* params);
#endif /* GL_NV_internalformat_sample_query */

#ifndef GL_NV_light_max_exponent
#define GL_NV_light_max_exponent 1
#define GL_MAX_SHININESS_NV 0x8504
#define GL_MAX_SPOT_EXPONENT_NV 0x8505
#endif /* GL_NV_light_max_exponent */

#ifndef GL_NV_gpu_multicast
#define GL_NV_gpu_multicast 1
#define GL_PER_GPU_STORAGE_BIT_NV 0x0800
#define GL_MULTICAST_GPUS_NV 0x92BA
#define GL_RENDER_GPU_MASK_NV 0x9558
#define GL_PER_GPU_STORAGE_NV 0x9548
#define GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9549
    typedef void (APIENTRYP PFNGLRENDERGPUMASKNVPROC)(GLbitfield mask);
    typedef void (APIENTRYP PFNGLMULTICASTBUFFERSUBDATANVPROC)(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
    typedef void (APIENTRYP PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC)(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLMULTICASTCOPYIMAGESUBDATANVPROC)(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
    typedef void (APIENTRYP PFNGLMULTICASTBLITFRAMEBUFFERNVPROC)(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    typedef void (APIENTRYP PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLMULTICASTBARRIERNVPROC)(void);
    typedef void (APIENTRYP PFNGLMULTICASTWAITSYNCNVPROC)(GLuint signalGpu, GLbitfield waitGpuMask);
    typedef void (APIENTRYP PFNGLMULTICASTGETQUERYOBJECTIVNVPROC)(GLuint gpu, GLuint id, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC)(GLuint gpu, GLuint id, GLenum pname, GLuint* params);
    typedef void (APIENTRYP PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC)(GLuint gpu, GLuint id, GLenum pname, GLint64* params);
    typedef void (APIENTRYP PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC)(GLuint gpu, GLuint id, GLenum pname, GLuint64* params);
#endif /* GL_NV_gpu_multicast */

#ifndef GL_NVX_gpu_multicast2
#define GL_NVX_gpu_multicast2 1
#define GL_UPLOAD_GPU_MASK_NVX 0x954A
    typedef void (APIENTRYP PFNGLUPLOADGPUMASKNVXPROC)(GLbitfield mask);
    typedef void (APIENTRYP PFNGLMULTICASTVIEWPORTARRAYVNVXPROC)(GLuint gpu, GLuint first, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC)(GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff);
    typedef void (APIENTRYP PFNGLMULTICASTSCISSORARRAYVNVXPROC)(GLuint gpu, GLuint first, GLsizei count, const GLint* v);
    typedef GLuint(APIENTRYP PFNGLASYNCCOPYBUFFERSUBDATANVXPROC)(GLsizei waitSemaphoreCount, const GLuint* waitSemaphoreArray, const GLuint64* fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint* signalSemaphoreArray, const GLuint64* signalValueArray);
    typedef GLuint(APIENTRYP PFNGLASYNCCOPYIMAGESUBDATANVXPROC)(GLsizei waitSemaphoreCount, const GLuint* waitSemaphoreArray, const GLuint64* waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint* signalSemaphoreArray, const GLuint64* signalValueArray);
#endif /* GL_NVX_gpu_multicast2 */

#ifndef GL_NVX_progress_fence
#define GL_NVX_progress_fence 1
    typedef GLuint(APIENTRYP PFNGLCREATEPROGRESSFENCENVXPROC)(void);
    typedef void (APIENTRYP PFNGLSIGNALSEMAPHOREUI64NVXPROC)(GLuint signalGpu, GLsizei fenceObjectCount, const GLuint* semaphoreArray, const GLuint64* fenceValueArray);
    typedef void (APIENTRYP PFNGLWAITSEMAPHOREUI64NVXPROC)(GLuint waitGpu, GLsizei fenceObjectCount, const GLuint* semaphoreArray, const GLuint64* fenceValueArray);
    typedef void (APIENTRYP PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC)(GLsizei fenceObjectCount, const GLuint* semaphoreArray, const GLuint64* fenceValueArray);
#endif /* GL_NVX_progress_fence */

#ifndef GL_NV_memory_attachment
#define GL_NV_memory_attachment 1
#define GL_ATTACHED_MEMORY_OBJECT_NV 0x95A4
#define GL_ATTACHED_MEMORY_OFFSET_NV 0x95A5
#define GL_MEMORY_ATTACHABLE_ALIGNMENT_NV 0x95A6
#define GL_MEMORY_ATTACHABLE_SIZE_NV 0x95A7
#define GL_MEMORY_ATTACHABLE_NV 0x95A8
#define GL_DETACHED_MEMORY_INCARNATION_NV 0x95A9
#define GL_DETACHED_TEXTURES_NV 0x95AA
#define GL_DETACHED_BUFFERS_NV 0x95AB
#define GL_MAX_DETACHED_TEXTURES_NV 0x95AC
#define GL_MAX_DETACHED_BUFFERS_NV 0x95AD
    typedef void (APIENTRYP PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC)(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint* params);
    typedef void (APIENTRYP PFNGLRESETMEMORYOBJECTPARAMETERNVPROC)(GLuint memory, GLenum pname);
    typedef void (APIENTRYP PFNGLTEXATTACHMEMORYNVPROC)(GLenum target, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLBUFFERATTACHMEMORYNVPROC)(GLenum target, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLTEXTUREATTACHMEMORYNVPROC)(GLuint texture, GLuint memory, GLuint64 offset);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERATTACHMEMORYNVPROC)(GLuint buffer, GLuint memory, GLuint64 offset);
#endif /* GL_NV_memory_attachment */

#ifndef GL_NV_memory_object_sparse
#define GL_NV_memory_object_sparse 1
    typedef void (APIENTRYP PFNGLBUFFERPAGECOMMITMENTMEMNVPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit);
    typedef void (APIENTRYP PFNGLTEXPAGECOMMITMENTMEMNVPROC)(GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit);
    typedef void (APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit);
    typedef void (APIENTRYP PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC)(GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit);
#endif /* GL_NV_memory_object_sparse */

#ifndef GL_NV_mesh_shader
#define GL_NV_mesh_shader 1
#define GL_MESH_SHADER_NV 0x9559
#define GL_TASK_SHADER_NV 0x955A
#define GL_MAX_MESH_UNIFORM_BLOCKS_NV 0x8E60
#define GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV 0x8E61
#define GL_MAX_MESH_IMAGE_UNIFORMS_NV 0x8E62
#define GL_MAX_MESH_UNIFORM_COMPONENTS_NV 0x8E63
#define GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV 0x8E64
#define GL_MAX_MESH_ATOMIC_COUNTERS_NV 0x8E65
#define GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV 0x8E66
#define GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV 0x8E67
#define GL_MAX_TASK_UNIFORM_BLOCKS_NV 0x8E68
#define GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV 0x8E69
#define GL_MAX_TASK_IMAGE_UNIFORMS_NV 0x8E6A
#define GL_MAX_TASK_UNIFORM_COMPONENTS_NV 0x8E6B
#define GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV 0x8E6C
#define GL_MAX_TASK_ATOMIC_COUNTERS_NV 0x8E6D
#define GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV 0x8E6E
#define GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV 0x8E6F
#define GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV 0x95A2
#define GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV 0x95A3
#define GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV 0x9536
#define GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV 0x9537
#define GL_MAX_MESH_OUTPUT_VERTICES_NV 0x9538
#define GL_MAX_MESH_OUTPUT_PRIMITIVES_NV 0x9539
#define GL_MAX_TASK_OUTPUT_COUNT_NV 0x953A
#define GL_MAX_DRAW_MESH_TASKS_COUNT_NV 0x953D
#define GL_MAX_MESH_VIEWS_NV 0x9557
#define GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV 0x92DF
#define GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV 0x9543
#define GL_MAX_MESH_WORK_GROUP_SIZE_NV 0x953B
#define GL_MAX_TASK_WORK_GROUP_SIZE_NV 0x953C
#define GL_MESH_WORK_GROUP_SIZE_NV 0x953E
#define GL_TASK_WORK_GROUP_SIZE_NV 0x953F
#define GL_MESH_VERTICES_OUT_NV 0x9579
#define GL_MESH_PRIMITIVES_OUT_NV 0x957A
#define GL_MESH_OUTPUT_TYPE_NV 0x957B
#define GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV 0x959C
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV 0x959D
#define GL_REFERENCED_BY_MESH_SHADER_NV 0x95A0
#define GL_REFERENCED_BY_TASK_SHADER_NV 0x95A1
#define GL_MESH_SHADER_BIT_NV 0x00000040
#define GL_TASK_SHADER_BIT_NV 0x00000080
#define GL_MESH_SUBROUTINE_NV 0x957C
#define GL_TASK_SUBROUTINE_NV 0x957D
#define GL_MESH_SUBROUTINE_UNIFORM_NV 0x957E
#define GL_TASK_SUBROUTINE_UNIFORM_NV 0x957F
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV 0x959E
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV 0x959F
    typedef void (APIENTRYP PFNGLDRAWMESHTASKSNVPROC)(GLuint first, GLuint count);
    typedef void (APIENTRYP PFNGLDRAWMESHTASKSINDIRECTNVPROC)(GLintptr indirect);
    typedef void (APIENTRYP PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC)(GLintptr indirect, GLsizei drawcount, GLsizei stride);
    typedef void (APIENTRYP PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC)(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
#endif /* GL_NV_mesh_shader */

#ifndef GL_NV_multisample_coverage
#define GL_NV_multisample_coverage 1
#define GL_SAMPLES_ARB 0x80A9
#define GL_COLOR_SAMPLES_NV 0x8E20
#endif /* GL_NV_multisample_coverage */

#ifndef GL_NV_multisample_filter_hint
#define GL_NV_multisample_filter_hint 1
#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
#endif /* GL_NV_multisample_filter_hint */

#ifndef GL_NV_occlusion_query
#define GL_NV_occlusion_query 1
#define GL_PIXEL_COUNTER_BITS_NV 0x8864
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
#define GL_PIXEL_COUNT_NV 0x8866
#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
    typedef void (APIENTRYP PFNGLGENOCCLUSIONQUERIESNVPROC)(GLsizei n, GLuint* ids);
    typedef void (APIENTRYP PFNGLDELETEOCCLUSIONQUERIESNVPROC)(GLsizei n, const GLuint* ids);
    typedef GLboolean(APIENTRYP PFNGLISOCCLUSIONQUERYNVPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLBEGINOCCLUSIONQUERYNVPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLENDOCCLUSIONQUERYNVPROC)(void);
    typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYIVNVPROC)(GLuint id, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYUIVNVPROC)(GLuint id, GLenum pname, GLuint* params);
#endif /* GL_NV_occlusion_query */

#ifndef GL_NV_packed_depth_stencil
#define GL_NV_packed_depth_stencil 1
#define GL_DEPTH_STENCIL_NV 0x84F9
#define GL_UNSIGNED_INT_24_8_NV 0x84FA
#endif /* GL_NV_packed_depth_stencil */

#ifndef GL_NV_parameter_buffer_object
#define GL_NV_parameter_buffer_object 1
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
    typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat* params);
    typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint* params);
    typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint* params);
#endif /* GL_NV_parameter_buffer_object */

#ifndef GL_NV_parameter_buffer_object2
#define GL_NV_parameter_buffer_object2 1
#endif /* GL_NV_parameter_buffer_object2 */

#ifndef GL_NV_path_rendering
#define GL_NV_path_rendering 1
#define GL_PATH_FORMAT_SVG_NV 0x9070
#define GL_PATH_FORMAT_PS_NV 0x9071
#define GL_STANDARD_FONT_NAME_NV 0x9072
#define GL_SYSTEM_FONT_NAME_NV 0x9073
#define GL_FILE_NAME_NV 0x9074
#define GL_PATH_STROKE_WIDTH_NV 0x9075
#define GL_PATH_END_CAPS_NV 0x9076
#define GL_PATH_INITIAL_END_CAP_NV 0x9077
#define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#define GL_PATH_JOIN_STYLE_NV 0x9079
#define GL_PATH_MITER_LIMIT_NV 0x907A
#define GL_PATH_DASH_CAPS_NV 0x907B
#define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#define GL_PATH_DASH_OFFSET_NV 0x907E
#define GL_PATH_CLIENT_LENGTH_NV 0x907F
#define GL_PATH_FILL_MODE_NV 0x9080
#define GL_PATH_FILL_MASK_NV 0x9081
#define GL_PATH_FILL_COVER_MODE_NV 0x9082
#define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#define GL_PATH_STROKE_MASK_NV 0x9084
#define GL_COUNT_UP_NV 0x9088
#define GL_COUNT_DOWN_NV 0x9089
#define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#define GL_CONVEX_HULL_NV 0x908B
#define GL_BOUNDING_BOX_NV 0x908D
#define GL_TRANSLATE_X_NV 0x908E
#define GL_TRANSLATE_Y_NV 0x908F
#define GL_TRANSLATE_2D_NV 0x9090
#define GL_TRANSLATE_3D_NV 0x9091
#define GL_AFFINE_2D_NV 0x9092
#define GL_AFFINE_3D_NV 0x9094
#define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#define GL_UTF8_NV 0x909A
#define GL_UTF16_NV 0x909B
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#define GL_PATH_COMMAND_COUNT_NV 0x909D
#define GL_PATH_COORD_COUNT_NV 0x909E
#define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#define GL_SQUARE_NV 0x90A3
#define GL_ROUND_NV 0x90A4
#define GL_TRIANGULAR_NV 0x90A5
#define GL_BEVEL_NV 0x90A6
#define GL_MITER_REVERT_NV 0x90A7
#define GL_MITER_TRUNCATE_NV 0x90A8
#define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#define GL_USE_MISSING_GLYPH_NV 0x90AA
#define GL_PATH_ERROR_POSITION_NV 0x90AB
#define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#define GL_ADJACENT_PAIRS_NV 0x90AE
#define GL_FIRST_TO_REST_NV 0x90AF
#define GL_PATH_GEN_MODE_NV 0x90B0
#define GL_PATH_GEN_COEFF_NV 0x90B1
#define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#define GL_PATH_STENCIL_FUNC_NV 0x90B7
#define GL_PATH_STENCIL_REF_NV 0x90B8
#define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#define GL_MOVE_TO_RESETS_NV 0x90B5
#define GL_MOVE_TO_CONTINUES_NV 0x90B6
#define GL_CLOSE_PATH_NV 0x00
#define GL_MOVE_TO_NV 0x02
#define GL_RELATIVE_MOVE_TO_NV 0x03
#define GL_LINE_TO_NV 0x04
#define GL_RELATIVE_LINE_TO_NV 0x05
#define GL_HORIZONTAL_LINE_TO_NV 0x06
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#define GL_VERTICAL_LINE_TO_NV 0x08
#define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#define GL_QUADRATIC_CURVE_TO_NV 0x0A
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#define GL_CUBIC_CURVE_TO_NV 0x0C
#define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#define GL_SMALL_CCW_ARC_TO_NV 0x12
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#define GL_SMALL_CW_ARC_TO_NV 0x14
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#define GL_LARGE_CCW_ARC_TO_NV 0x16
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#define GL_LARGE_CW_ARC_TO_NV 0x18
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#define GL_RESTART_PATH_NV 0xF0
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#define GL_RECT_NV 0xF6
#define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#define GL_ARC_TO_NV 0xFE
#define GL_RELATIVE_ARC_TO_NV 0xFF
#define GL_BOLD_BIT_NV 0x01
#define GL_ITALIC_BIT_NV 0x02
#define GL_GLYPH_WIDTH_BIT_NV 0x01
#define GL_GLYPH_HEIGHT_BIT_NV 0x02
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#define GL_GLYPH_HAS_KERNING_BIT_NV 0x100
#define GL_FONT_X_MIN_BOUNDS_BIT_NV 0x00010000
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0x00020000
#define GL_FONT_X_MAX_BOUNDS_BIT_NV 0x00040000
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0x00080000
#define GL_FONT_UNITS_PER_EM_BIT_NV 0x00100000
#define GL_FONT_ASCENDER_BIT_NV 0x00200000
#define GL_FONT_DESCENDER_BIT_NV 0x00400000
#define GL_FONT_HEIGHT_BIT_NV 0x00800000
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0x01000000
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000
#define GL_FONT_HAS_KERNING_BIT_NV 0x10000000
#define GL_ROUNDED_RECT_NV 0xE8
#define GL_RELATIVE_ROUNDED_RECT_NV 0xE9
#define GL_ROUNDED_RECT2_NV 0xEA
#define GL_RELATIVE_ROUNDED_RECT2_NV 0xEB
#define GL_ROUNDED_RECT4_NV 0xEC
#define GL_RELATIVE_ROUNDED_RECT4_NV 0xED
#define GL_ROUNDED_RECT8_NV 0xEE
#define GL_RELATIVE_ROUNDED_RECT8_NV 0xEF
#define GL_RELATIVE_RECT_NV 0xF7
#define GL_FONT_GLYPHS_AVAILABLE_NV 0x9368
#define GL_FONT_TARGET_UNAVAILABLE_NV 0x9369
#define GL_FONT_UNAVAILABLE_NV 0x936A
#define GL_FONT_UNINTELLIGIBLE_NV 0x936B
#define GL_CONIC_CURVE_TO_NV 0x1A
#define GL_RELATIVE_CONIC_CURVE_TO_NV 0x1B
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0x20000000
#define GL_STANDARD_FONT_FORMAT_NV 0x936C
#define GL_2_BYTES_NV 0x1407
#define GL_3_BYTES_NV 0x1408
#define GL_4_BYTES_NV 0x1409
#define GL_EYE_LINEAR_NV 0x2400
#define GL_OBJECT_LINEAR_NV 0x2401
#define GL_CONSTANT_NV 0x8576
#define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#define GL_PRIMARY_COLOR 0x8577
#define GL_PRIMARY_COLOR_NV 0x852C
#define GL_SECONDARY_COLOR_NV 0x852D
#define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#define GL_PATH_PROJECTION_NV 0x1701
#define GL_PATH_MODELVIEW_NV 0x1700
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0x0BA3
#define GL_PATH_MODELVIEW_MATRIX_NV 0x0BA6
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4
#define GL_PATH_PROJECTION_MATRIX_NV 0x0BA7
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4
#define GL_FRAGMENT_INPUT_NV 0x936D
    typedef GLuint(APIENTRYP PFNGLGENPATHSNVPROC)(GLsizei range);
    typedef void (APIENTRYP PFNGLDELETEPATHSNVPROC)(GLuint path, GLsizei range);
    typedef GLboolean(APIENTRYP PFNGLISPATHNVPROC)(GLuint path);
    typedef void (APIENTRYP PFNGLPATHCOMMANDSNVPROC)(GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void* coords);
    typedef void (APIENTRYP PFNGLPATHCOORDSNVPROC)(GLuint path, GLsizei numCoords, GLenum coordType, const void* coords);
    typedef void (APIENTRYP PFNGLPATHSUBCOMMANDSNVPROC)(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void* coords);
    typedef void (APIENTRYP PFNGLPATHSUBCOORDSNVPROC)(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void* coords);
    typedef void (APIENTRYP PFNGLPATHSTRINGNVPROC)(GLuint path, GLenum format, GLsizei length, const void* pathString);
    typedef void (APIENTRYP PFNGLPATHGLYPHSNVPROC)(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void* charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    typedef void (APIENTRYP PFNGLPATHGLYPHRANGENVPROC)(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    typedef void (APIENTRYP PFNGLWEIGHTPATHSNVPROC)(GLuint resultPath, GLsizei numPaths, const GLuint* paths, const GLfloat* weights);
    typedef void (APIENTRYP PFNGLCOPYPATHNVPROC)(GLuint resultPath, GLuint srcPath);
    typedef void (APIENTRYP PFNGLINTERPOLATEPATHSNVPROC)(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
    typedef void (APIENTRYP PFNGLTRANSFORMPATHNVPROC)(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues);
    typedef void (APIENTRYP PFNGLPATHPARAMETERIVNVPROC)(GLuint path, GLenum pname, const GLint* value);
    typedef void (APIENTRYP PFNGLPATHPARAMETERINVPROC)(GLuint path, GLenum pname, GLint value);
    typedef void (APIENTRYP PFNGLPATHPARAMETERFVNVPROC)(GLuint path, GLenum pname, const GLfloat* value);
    typedef void (APIENTRYP PFNGLPATHPARAMETERFNVPROC)(GLuint path, GLenum pname, GLfloat value);
    typedef void (APIENTRYP PFNGLPATHDASHARRAYNVPROC)(GLuint path, GLsizei dashCount, const GLfloat* dashArray);
    typedef void (APIENTRYP PFNGLPATHSTENCILFUNCNVPROC)(GLenum func, GLint ref, GLuint mask);
    typedef void (APIENTRYP PFNGLPATHSTENCILDEPTHOFFSETNVPROC)(GLfloat factor, GLfloat units);
    typedef void (APIENTRYP PFNGLSTENCILFILLPATHNVPROC)(GLuint path, GLenum fillMode, GLuint mask);
    typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHNVPROC)(GLuint path, GLint reference, GLuint mask);
    typedef void (APIENTRYP PFNGLSTENCILFILLPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat* transformValues);
    typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat* transformValues);
    typedef void (APIENTRYP PFNGLPATHCOVERDEPTHFUNCNVPROC)(GLenum func);
    typedef void (APIENTRYP PFNGLCOVERFILLPATHNVPROC)(GLuint path, GLenum coverMode);
    typedef void (APIENTRYP PFNGLCOVERSTROKEPATHNVPROC)(GLuint path, GLenum coverMode);
    typedef void (APIENTRYP PFNGLCOVERFILLPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues);
    typedef void (APIENTRYP PFNGLCOVERSTROKEPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues);
    typedef void (APIENTRYP PFNGLGETPATHPARAMETERIVNVPROC)(GLuint path, GLenum pname, GLint* value);
    typedef void (APIENTRYP PFNGLGETPATHPARAMETERFVNVPROC)(GLuint path, GLenum pname, GLfloat* value);
    typedef void (APIENTRYP PFNGLGETPATHCOMMANDSNVPROC)(GLuint path, GLubyte* commands);
    typedef void (APIENTRYP PFNGLGETPATHCOORDSNVPROC)(GLuint path, GLfloat* coords);
    typedef void (APIENTRYP PFNGLGETPATHDASHARRAYNVPROC)(GLuint path, GLfloat* dashArray);
    typedef void (APIENTRYP PFNGLGETPATHMETRICSNVPROC)(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLsizei stride, GLfloat* metrics);
    typedef void (APIENTRYP PFNGLGETPATHMETRICRANGENVPROC)(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics);
    typedef void (APIENTRYP PFNGLGETPATHSPACINGNVPROC)(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat* returnedSpacing);
    typedef GLboolean(APIENTRYP PFNGLISPOINTINFILLPATHNVPROC)(GLuint path, GLuint mask, GLfloat x, GLfloat y);
    typedef GLboolean(APIENTRYP PFNGLISPOINTINSTROKEPATHNVPROC)(GLuint path, GLfloat x, GLfloat y);
    typedef GLfloat(APIENTRYP PFNGLGETPATHLENGTHNVPROC)(GLuint path, GLsizei startSegment, GLsizei numSegments);
    typedef GLboolean(APIENTRYP PFNGLPOINTALONGPATHNVPROC)(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat* y, GLfloat* tangentX, GLfloat* tangentY);
    typedef void (APIENTRYP PFNGLMATRIXLOAD3X2FNVPROC)(GLenum matrixMode, const GLfloat* m);
    typedef void (APIENTRYP PFNGLMATRIXLOAD3X3FNVPROC)(GLenum matrixMode, const GLfloat* m);
    typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC)(GLenum matrixMode, const GLfloat* m);
    typedef void (APIENTRYP PFNGLMATRIXMULT3X2FNVPROC)(GLenum matrixMode, const GLfloat* m);
    typedef void (APIENTRYP PFNGLMATRIXMULT3X3FNVPROC)(GLenum matrixMode, const GLfloat* m);
    typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC)(GLenum matrixMode, const GLfloat* m);
    typedef void (APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHNVPROC)(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
    typedef void (APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC)(GLuint path, GLint reference, GLuint mask, GLenum coverMode);
    typedef void (APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues);
    typedef void (APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues);
    typedef GLenum(APIENTRYP PFNGLPATHGLYPHINDEXRANGENVPROC)(GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount);
    typedef GLenum(APIENTRYP PFNGLPATHGLYPHINDEXARRAYNVPROC)(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    typedef GLenum(APIENTRYP PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC)(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void* fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    typedef void (APIENTRYP PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC)(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs);
    typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEFVNVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei count, GLsizei* length, GLfloat* params);
    typedef void (APIENTRYP PFNGLPATHCOLORGENNVPROC)(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs);
    typedef void (APIENTRYP PFNGLPATHTEXGENNVPROC)(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs);
    typedef void (APIENTRYP PFNGLPATHFOGGENNVPROC)(GLenum genMode);
    typedef void (APIENTRYP PFNGLGETPATHCOLORGENIVNVPROC)(GLenum color, GLenum pname, GLint* value);
    typedef void (APIENTRYP PFNGLGETPATHCOLORGENFVNVPROC)(GLenum color, GLenum pname, GLfloat* value);
    typedef void (APIENTRYP PFNGLGETPATHTEXGENIVNVPROC)(GLenum texCoordSet, GLenum pname, GLint* value);
    typedef void (APIENTRYP PFNGLGETPATHTEXGENFVNVPROC)(GLenum texCoordSet, GLenum pname, GLfloat* value);
#endif /* GL_NV_path_rendering */

#ifndef GL_NV_path_rendering_shared_edge
#define GL_NV_path_rendering_shared_edge 1
#define GL_SHARED_EDGE_NV 0xC0
#endif /* GL_NV_path_rendering_shared_edge */

#ifndef GL_NV_pixel_data_range
#define GL_NV_pixel_data_range 1
#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
    typedef void (APIENTRYP PFNGLPIXELDATARANGENVPROC)(GLenum target, GLsizei length, const void* pointer);
    typedef void (APIENTRYP PFNGLFLUSHPIXELDATARANGENVPROC)(GLenum target);
#endif /* GL_NV_pixel_data_range */

#ifndef GL_NV_point_sprite
#define GL_NV_point_sprite 1
#define GL_POINT_SPRITE_NV 0x8861
#define GL_COORD_REPLACE_NV 0x8862
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
    typedef void (APIENTRYP PFNGLPOINTPARAMETERINVPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLPOINTPARAMETERIVNVPROC)(GLenum pname, const GLint* params);
#endif /* GL_NV_point_sprite */

#ifndef GL_NV_present_video
#define GL_NV_present_video 1
#define GL_FRAME_NV 0x8E26
#define GL_FIELDS_NV 0x8E27
#define GL_CURRENT_TIME_NV 0x8E28
#define GL_NUM_FILL_STREAMS_NV 0x8E29
#define GL_PRESENT_TIME_NV 0x8E2A
#define GL_PRESENT_DURATION_NV 0x8E2B
    typedef void (APIENTRYP PFNGLPRESENTFRAMEKEYEDNVPROC)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
    typedef void (APIENTRYP PFNGLPRESENTFRAMEDUALFILLNVPROC)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
    typedef void (APIENTRYP PFNGLGETVIDEOIVNVPROC)(GLuint video_slot, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETVIDEOUIVNVPROC)(GLuint video_slot, GLenum pname, GLuint* params);
    typedef void (APIENTRYP PFNGLGETVIDEOI64VNVPROC)(GLuint video_slot, GLenum pname, GLint64EXT* params);
    typedef void (APIENTRYP PFNGLGETVIDEOUI64VNVPROC)(GLuint video_slot, GLenum pname, GLuint64EXT* params);
#endif /* GL_NV_present_video */

#ifndef GL_NV_primitive_restart
#define GL_NV_primitive_restart 1
#define GL_PRIMITIVE_RESTART_NV 0x8558
#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
    typedef void (APIENTRYP PFNGLPRIMITIVERESTARTNVPROC)(void);
    typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXNVPROC)(GLuint index);
#endif /* GL_NV_primitive_restart */

#ifndef GL_NV_query_resource
#define GL_NV_query_resource 1
#define GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV 0x9540
#define GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV 0x9542
#define GL_QUERY_RESOURCE_SYS_RESERVED_NV 0x9544
#define GL_QUERY_RESOURCE_TEXTURE_NV 0x9545
#define GL_QUERY_RESOURCE_RENDERBUFFER_NV 0x9546
#define GL_QUERY_RESOURCE_BUFFEROBJECT_NV 0x9547
    typedef GLint(APIENTRYP PFNGLQUERYRESOURCENVPROC)(GLenum queryType, GLint tagId, GLuint count, GLint* buffer);
#endif /* GL_NV_query_resource */

#ifndef GL_NV_query_resource_tag
#define GL_NV_query_resource_tag 1
    typedef void (APIENTRYP PFNGLGENQUERYRESOURCETAGNVPROC)(GLsizei n, GLint* tagIds);
    typedef void (APIENTRYP PFNGLDELETEQUERYRESOURCETAGNVPROC)(GLsizei n, const GLint* tagIds);
    typedef void (APIENTRYP PFNGLQUERYRESOURCETAGNVPROC)(GLint tagId, const GLchar* tagString);
#endif /* GL_NV_query_resource_tag */

#ifndef GL_NV_register_combiners
#define GL_NV_register_combiners 1
#define GL_REGISTER_COMBINERS_NV 0x8522
#define GL_VARIABLE_A_NV 0x8523
#define GL_VARIABLE_B_NV 0x8524
#define GL_VARIABLE_C_NV 0x8525
#define GL_VARIABLE_D_NV 0x8526
#define GL_VARIABLE_E_NV 0x8527
#define GL_VARIABLE_F_NV 0x8528
#define GL_VARIABLE_G_NV 0x8529
#define GL_CONSTANT_COLOR0_NV 0x852A
#define GL_CONSTANT_COLOR1_NV 0x852B
#define GL_PRIMARY_COLOR_NV 0x852C
#define GL_SECONDARY_COLOR_NV 0x852D
#define GL_SPARE0_NV 0x852E
#define GL_SPARE1_NV 0x852F
#define GL_DISCARD_NV 0x8530
#define GL_E_TIMES_F_NV 0x8531
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
#define GL_UNSIGNED_IDENTITY_NV 0x8536
#define GL_UNSIGNED_INVERT_NV 0x8537
#define GL_EXPAND_NORMAL_NV 0x8538
#define GL_EXPAND_NEGATE_NV 0x8539
#define GL_HALF_BIAS_NORMAL_NV 0x853A
#define GL_HALF_BIAS_NEGATE_NV 0x853B
#define GL_SIGNED_IDENTITY_NV 0x853C
#define GL_SIGNED_NEGATE_NV 0x853D
#define GL_SCALE_BY_TWO_NV 0x853E
#define GL_SCALE_BY_FOUR_NV 0x853F
#define GL_SCALE_BY_ONE_HALF_NV 0x8540
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
#define GL_COMBINER_INPUT_NV 0x8542
#define GL_COMBINER_MAPPING_NV 0x8543
#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
#define GL_COMBINER_MUX_SUM_NV 0x8547
#define GL_COMBINER_SCALE_NV 0x8548
#define GL_COMBINER_BIAS_NV 0x8549
#define GL_COMBINER_AB_OUTPUT_NV 0x854A
#define GL_COMBINER_CD_OUTPUT_NV 0x854B
#define GL_COMBINER_SUM_OUTPUT_NV 0x854C
#define GL_MAX_GENERAL_COMBINERS_NV 0x854D
#define GL_NUM_GENERAL_COMBINERS_NV 0x854E
#define GL_COLOR_SUM_CLAMP_NV 0x854F
#define GL_COMBINER0_NV 0x8550
#define GL_COMBINER1_NV 0x8551
#define GL_COMBINER2_NV 0x8552
#define GL_COMBINER3_NV 0x8553
#define GL_COMBINER4_NV 0x8554
#define GL_COMBINER5_NV 0x8555
#define GL_COMBINER6_NV 0x8556
#define GL_COMBINER7_NV 0x8557
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1_ARB 0x84C1
#define GL_ZERO 0
#define GL_NONE 0
#define GL_FOG 0x0B60
    typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFVNVPROC)(GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFNVPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLCOMBINERPARAMETERIVNVPROC)(GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLCOMBINERPARAMETERINVPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLCOMBINERINPUTNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
    typedef void (APIENTRYP PFNGLCOMBINEROUTPUTNVPROC)(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
    typedef void (APIENTRYP PFNGLFINALCOMBINERINPUTNVPROC)(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
    typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)(GLenum stage, GLenum portion, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)(GLenum stage, GLenum portion, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)(GLenum variable, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)(GLenum variable, GLenum pname, GLint* params);
#endif /* GL_NV_register_combiners */

#ifndef GL_NV_register_combiners2
#define GL_NV_register_combiners2 1
#define GL_PER_STAGE_CONSTANTS_NV 0x8535
    typedef void (APIENTRYP PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)(GLenum stage, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)(GLenum stage, GLenum pname, GLfloat* params);
#endif /* GL_NV_register_combiners2 */

#ifndef GL_NV_representative_fragment_test
#define GL_NV_representative_fragment_test 1
#define GL_REPRESENTATIVE_FRAGMENT_TEST_NV 0x937F
#endif /* GL_NV_representative_fragment_test */

#ifndef GL_NV_robustness_video_memory_purge
#define GL_NV_robustness_video_memory_purge 1
#define GL_PURGED_CONTEXT_RESET_NV 0x92BB
#endif /* GL_NV_robustness_video_memory_purge */

#ifndef GL_NV_sample_locations
#define GL_NV_sample_locations 1
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340
#define GL_SAMPLE_LOCATION_NV 0x8E50
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343
    typedef void (APIENTRYP PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)(GLenum target, GLuint start, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLRESOLVEDEPTHVALUESNVPROC)(void);
#endif /* GL_NV_sample_locations */

#ifndef GL_NV_sample_mask_override_coverage
#define GL_NV_sample_mask_override_coverage 1
#endif /* GL_NV_sample_mask_override_coverage */

#ifndef GL_NV_scissor_exclusive
#define GL_NV_scissor_exclusive 1
#define GL_SCISSOR_TEST_EXCLUSIVE_NV 0x9555
#define GL_SCISSOR_BOX_EXCLUSIVE_NV 0x9556
    typedef void (APIENTRYP PFNGLSCISSOREXCLUSIVENVPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
    typedef void (APIENTRYP PFNGLSCISSOREXCLUSIVEARRAYVNVPROC)(GLuint first, GLsizei count, const GLint* v);
#endif /* GL_NV_scissor_exclusive */

#ifndef GL_NV_shader_atomic_counters
#define GL_NV_shader_atomic_counters 1
#endif /* GL_NV_shader_atomic_counters */

#ifndef GL_NV_shader_atomic_float
#define GL_NV_shader_atomic_float 1
#endif /* GL_NV_shader_atomic_float */

#ifndef GL_NV_shader_atomic_float64
#define GL_NV_shader_atomic_float64 1
#endif /* GL_NV_shader_atomic_float64 */

#ifndef GL_NV_shader_atomic_fp16_vector
#define GL_NV_shader_atomic_fp16_vector 1
#endif /* GL_NV_shader_atomic_fp16_vector */

#ifndef GL_NV_shader_atomic_int64
#define GL_NV_shader_atomic_int64 1
#endif /* GL_NV_shader_atomic_int64 */

#ifndef GL_NV_shader_buffer_load
#define GL_NV_shader_buffer_load 1
#define GL_BUFFER_GPU_ADDRESS_NV 0x8F1D
#define GL_GPU_ADDRESS_NV 0x8F34
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0x8F35
    typedef void (APIENTRYP PFNGLMAKEBUFFERRESIDENTNVPROC)(GLenum target, GLenum access);
    typedef void (APIENTRYP PFNGLMAKEBUFFERNONRESIDENTNVPROC)(GLenum target);
    typedef GLboolean(APIENTRYP PFNGLISBUFFERRESIDENTNVPROC)(GLenum target);
    typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERRESIDENTNVPROC)(GLuint buffer, GLenum access);
    typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC)(GLuint buffer);
    typedef GLboolean(APIENTRYP PFNGLISNAMEDBUFFERRESIDENTNVPROC)(GLuint buffer);
    typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERUI64VNVPROC)(GLenum target, GLenum pname, GLuint64EXT* params);
    typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC)(GLuint buffer, GLenum pname, GLuint64EXT* params);
    typedef void (APIENTRYP PFNGLGETINTEGERUI64VNVPROC)(GLenum value, GLuint64EXT* result);
    typedef void (APIENTRYP PFNGLUNIFORMUI64NVPROC)(GLint location, GLuint64EXT value);
    typedef void (APIENTRYP PFNGLUNIFORMUI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT* value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64NVPROC)(GLuint program, GLint location, GLuint64EXT value);
    typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
#endif /* GL_NV_shader_buffer_load */

#ifndef GL_NV_shader_buffer_store
#define GL_NV_shader_buffer_store 1
#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
#define GL_READ_WRITE 0x88BA
#define GL_WRITE_ONLY 0x88B9
#endif /* GL_NV_shader_buffer_store */

#ifndef GL_NV_shader_storage_buffer_object
#define GL_NV_shader_storage_buffer_object 1
#endif /* GL_NV_shader_storage_buffer_object */

#ifndef GL_NV_shader_subgroup_partitioned
#define GL_NV_shader_subgroup_partitioned 1
#define GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV 0x00000100
#endif /* GL_NV_shader_subgroup_partitioned */

#ifndef GL_NV_shader_texture_footprint
#define GL_NV_shader_texture_footprint 1
#endif /* GL_NV_shader_texture_footprint */

#ifndef GL_NV_shader_thread_group
#define GL_NV_shader_thread_group 1
#define GL_WARP_SIZE_NV 0x9339
#define GL_WARPS_PER_SM_NV 0x933A
#define GL_SM_COUNT_NV 0x933B
#endif /* GL_NV_shader_thread_group */

#ifndef GL_NV_shader_thread_shuffle
#define GL_NV_shader_thread_shuffle 1
#endif /* GL_NV_shader_thread_shuffle */

#ifndef GL_NV_shading_rate_image
#define GL_NV_shading_rate_image 1
#define GL_SHADING_RATE_IMAGE_NV 0x9563
#define GL_SHADING_RATE_NO_INVOCATIONS_NV 0x9564
#define GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV 0x9565
#define GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV 0x9566
#define GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV 0x9567
#define GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV 0x9568
#define GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV 0x9569
#define GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV 0x956A
#define GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV 0x956B
#define GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV 0x956C
#define GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV 0x956D
#define GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV 0x956E
#define GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV 0x956F
#define GL_SHADING_RATE_IMAGE_BINDING_NV 0x955B
#define GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV 0x955C
#define GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV 0x955D
#define GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV 0x955E
#define GL_MAX_COARSE_FRAGMENT_SAMPLES_NV 0x955F
#define GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV 0x95AE
#define GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV 0x95AF
#define GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV 0x95B0
    typedef void (APIENTRYP PFNGLBINDSHADINGRATEIMAGENVPROC)(GLuint texture);
    typedef void (APIENTRYP PFNGLGETSHADINGRATEIMAGEPALETTENVPROC)(GLuint viewport, GLuint entry, GLenum* rate);
    typedef void (APIENTRYP PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC)(GLenum rate, GLuint samples, GLuint index, GLint* location);
    typedef void (APIENTRYP PFNGLSHADINGRATEIMAGEBARRIERNVPROC)(GLboolean synchronize);
    typedef void (APIENTRYP PFNGLSHADINGRATEIMAGEPALETTENVPROC)(GLuint viewport, GLuint first, GLsizei count, const GLenum* rates);
    typedef void (APIENTRYP PFNGLSHADINGRATESAMPLEORDERNVPROC)(GLenum order);
    typedef void (APIENTRYP PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC)(GLenum rate, GLuint samples, const GLint* locations);
#endif /* GL_NV_shading_rate_image */

#ifndef GL_NV_stereo_view_rendering
#define GL_NV_stereo_view_rendering 1
#endif /* GL_NV_stereo_view_rendering */

#ifndef GL_NV_tessellation_program5
#define GL_NV_tessellation_program5 1
#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0x86D8
#define GL_TESS_CONTROL_PROGRAM_NV 0x891E
#define GL_TESS_EVALUATION_PROGRAM_NV 0x891F
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
#endif /* GL_NV_tessellation_program5 */

#ifndef GL_NV_texgen_emboss
#define GL_NV_texgen_emboss 1
#define GL_EMBOSS_LIGHT_NV 0x855D
#define GL_EMBOSS_CONSTANT_NV 0x855E
#define GL_EMBOSS_MAP_NV 0x855F
#endif /* GL_NV_texgen_emboss */

#ifndef GL_NV_texgen_reflection
#define GL_NV_texgen_reflection 1
#define GL_NORMAL_MAP_NV 0x8511
#define GL_REFLECTION_MAP_NV 0x8512
#endif /* GL_NV_texgen_reflection */

#ifndef GL_NV_texture_barrier
#define GL_NV_texture_barrier 1
    typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC)(void);
#endif /* GL_NV_texture_barrier */

#ifndef GL_NV_texture_compression_vtc
#define GL_NV_texture_compression_vtc 1
#endif /* GL_NV_texture_compression_vtc */

#ifndef GL_NV_texture_env_combine4
#define GL_NV_texture_env_combine4 1
#define GL_COMBINE4_NV 0x8503
#define GL_SOURCE3_RGB_NV 0x8583
#define GL_SOURCE3_ALPHA_NV 0x858B
#define GL_OPERAND3_RGB_NV 0x8593
#define GL_OPERAND3_ALPHA_NV 0x859B
#endif /* GL_NV_texture_env_combine4 */

#ifndef GL_NV_texture_expand_normal
#define GL_NV_texture_expand_normal 1
#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
#endif /* GL_NV_texture_expand_normal */

#ifndef GL_NV_texture_multisample
#define GL_NV_texture_multisample 1
#define GL_TEXTURE_COVERAGE_SAMPLES_NV 0x9045
#define GL_TEXTURE_COLOR_SAMPLES_NV 0x9046
    typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
    typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
    typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
    typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
    typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
    typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
#endif /* GL_NV_texture_multisample */

#ifndef GL_NV_texture_rectangle
#define GL_NV_texture_rectangle 1
#define GL_TEXTURE_RECTANGLE_NV 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
#endif /* GL_NV_texture_rectangle */

#ifndef GL_NV_texture_rectangle_compressed
#define GL_NV_texture_rectangle_compressed 1
#endif /* GL_NV_texture_rectangle_compressed */

#ifndef GL_NV_texture_shader
#define GL_NV_texture_shader 1
#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
#define GL_SHADER_CONSISTENT_NV 0x86DD
#define GL_TEXTURE_SHADER_NV 0x86DE
#define GL_SHADER_OPERATION_NV 0x86DF
#define GL_CULL_MODES_NV 0x86E0
#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3
#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
#define GL_CONST_EYE_NV 0x86E5
#define GL_PASS_THROUGH_NV 0x86E6
#define GL_CULL_FRAGMENT_NV 0x86E7
#define GL_OFFSET_TEXTURE_2D_NV 0x86E8
#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
#define GL_DOT_PRODUCT_NV 0x86EC
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
#define GL_HILO_NV 0x86F4
#define GL_DSDT_NV 0x86F5
#define GL_DSDT_MAG_NV 0x86F6
#define GL_DSDT_MAG_VIB_NV 0x86F7
#define GL_HILO16_NV 0x86F8
#define GL_SIGNED_HILO_NV 0x86F9
#define GL_SIGNED_HILO16_NV 0x86FA
#define GL_SIGNED_RGBA_NV 0x86FB
#define GL_SIGNED_RGBA8_NV 0x86FC
#define GL_SIGNED_RGB_NV 0x86FE
#define GL_SIGNED_RGB8_NV 0x86FF
#define GL_SIGNED_LUMINANCE_NV 0x8701
#define GL_SIGNED_LUMINANCE8_NV 0x8702
#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
#define GL_SIGNED_ALPHA_NV 0x8705
#define GL_SIGNED_ALPHA8_NV 0x8706
#define GL_SIGNED_INTENSITY_NV 0x8707
#define GL_SIGNED_INTENSITY8_NV 0x8708
#define GL_DSDT8_NV 0x8709
#define GL_DSDT8_MAG8_NV 0x870A
#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
#define GL_HI_SCALE_NV 0x870E
#define GL_LO_SCALE_NV 0x870F
#define GL_DS_SCALE_NV 0x8710
#define GL_DT_SCALE_NV 0x8711
#define GL_MAGNITUDE_SCALE_NV 0x8712
#define GL_VIBRANCE_SCALE_NV 0x8713
#define GL_HI_BIAS_NV 0x8714
#define GL_LO_BIAS_NV 0x8715
#define GL_DS_BIAS_NV 0x8716
#define GL_DT_BIAS_NV 0x8717
#define GL_MAGNITUDE_BIAS_NV 0x8718
#define GL_VIBRANCE_BIAS_NV 0x8719
#define GL_TEXTURE_BORDER_VALUES_NV 0x871A
#define GL_TEXTURE_HI_SIZE_NV 0x871B
#define GL_TEXTURE_LO_SIZE_NV 0x871C
#define GL_TEXTURE_DS_SIZE_NV 0x871D
#define GL_TEXTURE_DT_SIZE_NV 0x871E
#define GL_TEXTURE_MAG_SIZE_NV 0x871F
#endif /* GL_NV_texture_shader */

#ifndef GL_NV_texture_shader2
#define GL_NV_texture_shader2 1
#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
#endif /* GL_NV_texture_shader2 */

#ifndef GL_NV_texture_shader3
#define GL_NV_texture_shader3 1
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
#define GL_HILO8_NV 0x885E
#define GL_SIGNED_HILO8_NV 0x885F
#define GL_FORCE_BLUE_TO_ONE_NV 0x8860
#endif /* GL_NV_texture_shader3 */

#ifndef GL_NV_transform_feedback
#define GL_NV_transform_feedback 1
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#define GL_TEXTURE_COORD_NV 0x8C79
#define GL_CLIP_DISTANCE_NV 0x8C7A
#define GL_VERTEX_ID_NV 0x8C7B
#define GL_PRIMITIVE_ID_NV 0x8C7C
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#define GL_LAYER_NV 0x8DAA
#define GL_NEXT_BUFFER_NV -2
#define GL_SKIP_COMPONENTS4_NV -3
#define GL_SKIP_COMPONENTS3_NV -4
#define GL_SKIP_COMPONENTS2_NV -5
#define GL_SKIP_COMPONENTS1_NV -6
    typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKNVPROC)(GLenum primitiveMode);
    typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKNVPROC)(void);
    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)(GLsizei count, const GLint* attribs, GLenum bufferMode);
    typedef void (APIENTRYP PFNGLBINDBUFFERRANGENVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETNVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
    typedef void (APIENTRYP PFNGLBINDBUFFERBASENVPROC)(GLenum target, GLuint index, GLuint buffer);
    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)(GLuint program, GLsizei count, const GLint* locations, GLenum bufferMode);
    typedef void (APIENTRYP PFNGLACTIVEVARYINGNVPROC)(GLuint program, const GLchar* name);
    typedef GLint(APIENTRYP PFNGLGETVARYINGLOCATIONNVPROC)(GLuint program, const GLchar* name);
    typedef void (APIENTRYP PFNGLGETACTIVEVARYINGNVPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
    typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)(GLuint program, GLuint index, GLint* location);
    typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)(GLsizei count, const GLint* attribs, GLsizei nbuffers, const GLint* bufstreams, GLenum bufferMode);
#endif /* GL_NV_transform_feedback */

#ifndef GL_NV_transform_feedback2
#define GL_NV_transform_feedback2 1
#define GL_TRANSFORM_FEEDBACK_NV 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
    typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKNVPROC)(GLenum target, GLuint id);
    typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSNVPROC)(GLsizei n, const GLuint* ids);
    typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSNVPROC)(GLsizei n, GLuint* ids);
    typedef GLboolean(APIENTRYP PFNGLISTRANSFORMFEEDBACKNVPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKNVPROC)(void);
    typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKNVPROC)(void);
    typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKNVPROC)(GLenum mode, GLuint id);
#endif /* GL_NV_transform_feedback2 */

#ifndef GL_NV_uniform_buffer_unified_memory
#define GL_NV_uniform_buffer_unified_memory 1
#define GL_UNIFORM_BUFFER_UNIFIED_NV 0x936E
#define GL_UNIFORM_BUFFER_ADDRESS_NV 0x936F
#define GL_UNIFORM_BUFFER_LENGTH_NV 0x9370
#endif /* GL_NV_uniform_buffer_unified_memory */

#ifndef GL_NV_vdpau_interop
#define GL_NV_vdpau_interop 1
    typedef GLintptr GLvdpauSurfaceNV;
#define GL_SURFACE_STATE_NV 0x86EB
#define GL_SURFACE_REGISTERED_NV 0x86FD
#define GL_SURFACE_MAPPED_NV 0x8700
#define GL_WRITE_DISCARD_NV 0x88BE
    typedef void (APIENTRYP PFNGLVDPAUINITNVPROC)(const void* vdpDevice, const void* getProcAddress);
    typedef void (APIENTRYP PFNGLVDPAUFININVPROC)(void);
    typedef GLvdpauSurfaceNV(APIENTRYP PFNGLVDPAUREGISTERVIDEOSURFACENVPROC)(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames);
    typedef GLvdpauSurfaceNV(APIENTRYP PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC)(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames);
    typedef GLboolean(APIENTRYP PFNGLVDPAUISSURFACENVPROC)(GLvdpauSurfaceNV surface);
    typedef void (APIENTRYP PFNGLVDPAUUNREGISTERSURFACENVPROC)(GLvdpauSurfaceNV surface);
    typedef void (APIENTRYP PFNGLVDPAUGETSURFACEIVNVPROC)(GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei* length, GLint* values);
    typedef void (APIENTRYP PFNGLVDPAUSURFACEACCESSNVPROC)(GLvdpauSurfaceNV surface, GLenum access);
    typedef void (APIENTRYP PFNGLVDPAUMAPSURFACESNVPROC)(GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces);
    typedef void (APIENTRYP PFNGLVDPAUUNMAPSURFACESNVPROC)(GLsizei numSurface, const GLvdpauSurfaceNV* surfaces);
#endif /* GL_NV_vdpau_interop */

#ifndef GL_NV_vdpau_interop2
#define GL_NV_vdpau_interop2 1
    typedef GLvdpauSurfaceNV(APIENTRYP PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC)(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames, GLboolean isFrameStructure);
#endif /* GL_NV_vdpau_interop2 */

#ifndef GL_NV_vertex_array_range
#define GL_NV_vertex_array_range 1
#define GL_VERTEX_ARRAY_RANGE_NV 0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
    typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGENVPROC)(void);
    typedef void (APIENTRYP PFNGLVERTEXARRAYRANGENVPROC)(GLsizei length, const void* pointer);
#endif /* GL_NV_vertex_array_range */

#ifndef GL_NV_vertex_array_range2
#define GL_NV_vertex_array_range2 1
#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
#endif /* GL_NV_vertex_array_range2 */

#ifndef GL_NV_vertex_attrib_integer_64bit
#define GL_NV_vertex_attrib_integer_64bit 1
#define GL_INT64_NV 0x140E
#define GL_UNSIGNED_INT64_NV 0x140F
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64NVPROC)(GLuint index, GLint64EXT x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64VNVPROC)(GLuint index, const GLint64EXT* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64VNVPROC)(GLuint index, const GLint64EXT* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64VNVPROC)(GLuint index, const GLint64EXT* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64VNVPROC)(GLuint index, const GLint64EXT* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64NVPROC)(GLuint index, GLuint64EXT x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VNVPROC)(GLuint index, const GLuint64EXT* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64VNVPROC)(GLuint index, const GLuint64EXT* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64VNVPROC)(GLuint index, const GLuint64EXT* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64VNVPROC)(GLuint index, const GLuint64EXT* v);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLI64VNVPROC)(GLuint index, GLenum pname, GLint64EXT* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VNVPROC)(GLuint index, GLenum pname, GLuint64EXT* params);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLsizei stride);
#endif /* GL_NV_vertex_attrib_integer_64bit */

#ifndef GL_NV_vertex_buffer_unified_memory
#define GL_NV_vertex_buffer_unified_memory 1
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
#define GL_ELEMENT_ARRAY_UNIFIED_NV 0x8F1F
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
#define GL_VERTEX_ARRAY_ADDRESS_NV 0x8F21
#define GL_NORMAL_ARRAY_ADDRESS_NV 0x8F22
#define GL_COLOR_ARRAY_ADDRESS_NV 0x8F23
#define GL_INDEX_ARRAY_ADDRESS_NV 0x8F24
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0x8F26
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
#define GL_FOG_COORD_ARRAY_ADDRESS_NV 0x8F28
#define GL_ELEMENT_ARRAY_ADDRESS_NV 0x8F29
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0x8F2A
#define GL_VERTEX_ARRAY_LENGTH_NV 0x8F2B
#define GL_NORMAL_ARRAY_LENGTH_NV 0x8F2C
#define GL_COLOR_ARRAY_LENGTH_NV 0x8F2D
#define GL_INDEX_ARRAY_LENGTH_NV 0x8F2E
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0x8F2F
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0x8F30
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
#define GL_FOG_COORD_ARRAY_LENGTH_NV 0x8F32
#define GL_ELEMENT_ARRAY_LENGTH_NV 0x8F33
#define GL_DRAW_INDIRECT_UNIFIED_NV 0x8F40
#define GL_DRAW_INDIRECT_ADDRESS_NV 0x8F41
#define GL_DRAW_INDIRECT_LENGTH_NV 0x8F42
    typedef void (APIENTRYP PFNGLBUFFERADDRESSRANGENVPROC)(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
    typedef void (APIENTRYP PFNGLVERTEXFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
    typedef void (APIENTRYP PFNGLNORMALFORMATNVPROC)(GLenum type, GLsizei stride);
    typedef void (APIENTRYP PFNGLCOLORFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
    typedef void (APIENTRYP PFNGLINDEXFORMATNVPROC)(GLenum type, GLsizei stride);
    typedef void (APIENTRYP PFNGLTEXCOORDFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
    typedef void (APIENTRYP PFNGLEDGEFLAGFORMATNVPROC)(GLsizei stride);
    typedef void (APIENTRYP PFNGLSECONDARYCOLORFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
    typedef void (APIENTRYP PFNGLFOGCOORDFORMATNVPROC)(GLenum type, GLsizei stride);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLsizei stride);
    typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC)(GLenum value, GLuint index, GLuint64EXT* result);
#endif /* GL_NV_vertex_buffer_unified_memory */

#ifndef GL_NV_vertex_program
#define GL_NV_vertex_program 1
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_IDENTITY_NV 0x862A
#define GL_INVERSE_NV 0x862B
#define GL_TRANSPOSE_NV 0x862C
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_NV 0x8637
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
    typedef GLboolean(APIENTRYP PFNGLAREPROGRAMSRESIDENTNVPROC)(GLsizei n, const GLuint* programs, GLboolean* residences);
    typedef void (APIENTRYP PFNGLBINDPROGRAMNVPROC)(GLenum target, GLuint id);
    typedef void (APIENTRYP PFNGLDELETEPROGRAMSNVPROC)(GLsizei n, const GLuint* programs);
    typedef void (APIENTRYP PFNGLEXECUTEPROGRAMNVPROC)(GLenum target, GLuint id, const GLfloat* params);
    typedef void (APIENTRYP PFNGLGENPROGRAMSNVPROC)(GLsizei n, GLuint* programs);
    typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERDVNVPROC)(GLenum target, GLuint index, GLenum pname, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMIVNVPROC)(GLuint id, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGNVPROC)(GLuint id, GLenum pname, GLubyte* program);
    typedef void (APIENTRYP PFNGLGETTRACKMATRIXIVNVPROC)(GLenum target, GLuint address, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVNVPROC)(GLuint index, GLenum pname, GLdouble* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVNVPROC)(GLuint index, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVNVPROC)(GLuint index, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVNVPROC)(GLuint index, GLenum pname, void** pointer);
    typedef GLboolean(APIENTRYP PFNGLISPROGRAMNVPROC)(GLuint id);
    typedef void (APIENTRYP PFNGLLOADPROGRAMNVPROC)(GLenum target, GLuint id, GLsizei len, const GLubyte* program);
    typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DNVPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DVNVPROC)(GLenum target, GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FNVPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FVNVPROC)(GLenum target, GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLdouble* v);
    typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLREQUESTRESIDENTPROGRAMSNVPROC)(GLsizei n, const GLuint* programs);
    typedef void (APIENTRYP PFNGLTRACKMATRIXNVPROC)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERNVPROC)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1DNVPROC)(GLuint index, GLdouble x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVNVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1FNVPROC)(GLuint index, GLfloat x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVNVPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1SNVPROC)(GLuint index, GLshort x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVNVPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2DNVPROC)(GLuint index, GLdouble x, GLdouble y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVNVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2FNVPROC)(GLuint index, GLfloat x, GLfloat y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVNVPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2SNVPROC)(GLuint index, GLshort x, GLshort y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVNVPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVNVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVNVPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVNVPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVNVPROC)(GLuint index, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVNVPROC)(GLuint index, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVNVPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBNVPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVNVPROC)(GLuint index, const GLubyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS1DVNVPROC)(GLuint index, GLsizei count, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS1FVNVPROC)(GLuint index, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS1SVNVPROC)(GLuint index, GLsizei count, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS2DVNVPROC)(GLuint index, GLsizei count, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS2FVNVPROC)(GLuint index, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS2SVNVPROC)(GLuint index, GLsizei count, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS3DVNVPROC)(GLuint index, GLsizei count, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS3FVNVPROC)(GLuint index, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS3SVNVPROC)(GLuint index, GLsizei count, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS4DVNVPROC)(GLuint index, GLsizei count, const GLdouble* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS4FVNVPROC)(GLuint index, GLsizei count, const GLfloat* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS4SVNVPROC)(GLuint index, GLsizei count, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBS4UBVNVPROC)(GLuint index, GLsizei count, const GLubyte* v);
#endif /* GL_NV_vertex_program */

#ifndef GL_NV_vertex_program1_1
#define GL_NV_vertex_program1_1 1
#endif /* GL_NV_vertex_program1_1 */

#ifndef GL_NV_vertex_program2
#define GL_NV_vertex_program2 1
#endif /* GL_NV_vertex_program2 */

#ifndef GL_NV_vertex_program2_option
#define GL_NV_vertex_program2_option 1
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
#endif /* GL_NV_vertex_program2_option */

#ifndef GL_NV_vertex_program3
#define GL_NV_vertex_program3 1
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#endif /* GL_NV_vertex_program3 */

#ifndef GL_NV_vertex_program4
#define GL_NV_vertex_program4 1
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IEXTPROC)(GLuint index, GLint x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IEXTPROC)(GLuint index, GLint x, GLint y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IEXTPROC)(GLuint index, GLint x, GLint y, GLint z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IEXTPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIEXTPROC)(GLuint index, GLuint x);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIEXTPROC)(GLuint index, GLuint x, GLuint y);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVEXTPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVEXTPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVEXTPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVEXTPROC)(GLuint index, const GLint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVEXTPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVEXTPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVEXTPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVEXTPROC)(GLuint index, const GLuint* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVEXTPROC)(GLuint index, const GLbyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVEXTPROC)(GLuint index, const GLshort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVEXTPROC)(GLuint index, const GLubyte* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVEXTPROC)(GLuint index, const GLushort* v);
    typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVEXTPROC)(GLuint index, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVEXTPROC)(GLuint index, GLenum pname, GLuint* params);
#endif /* GL_NV_vertex_program4 */

#ifndef GL_NV_video_capture
#define GL_NV_video_capture 1
#define GL_VIDEO_BUFFER_NV 0x9020
#define GL_VIDEO_BUFFER_BINDING_NV 0x9021
#define GL_FIELD_UPPER_NV 0x9022
#define GL_FIELD_LOWER_NV 0x9023
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0x9024
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0x9027
#define GL_VIDEO_BUFFER_PITCH_NV 0x9028
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0x902A
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0x902B
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
#define GL_PARTIAL_SUCCESS_NV 0x902E
#define GL_SUCCESS_NV 0x902F
#define GL_FAILURE_NV 0x9030
#define GL_YCBYCR8_422_NV 0x9031
#define GL_YCBAYCR8A_4224_NV 0x9032
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0x9033
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0x9035
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
#define GL_Z4Y12Z4CB12Z4CR12_444_NV 0x9037
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0x9038
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0x9039
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
    typedef void (APIENTRYP PFNGLBEGINVIDEOCAPTURENVPROC)(GLuint video_capture_slot);
    typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
    typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
    typedef void (APIENTRYP PFNGLENDVIDEOCAPTURENVPROC)(GLuint video_capture_slot);
    typedef void (APIENTRYP PFNGLGETVIDEOCAPTUREIVNVPROC)(GLuint video_capture_slot, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMIVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMFVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMDVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params);
    typedef GLenum(APIENTRYP PFNGLVIDEOCAPTURENVPROC)(GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT* capture_time);
    typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params);
#endif /* GL_NV_video_capture */

#ifndef GL_NV_viewport_array2
#define GL_NV_viewport_array2 1
#endif /* GL_NV_viewport_array2 */

#ifndef GL_NV_viewport_swizzle
#define GL_NV_viewport_swizzle 1
#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357
#define GL_VIEWPORT_SWIZZLE_X_NV 0x9358
#define GL_VIEWPORT_SWIZZLE_Y_NV 0x9359
#define GL_VIEWPORT_SWIZZLE_Z_NV 0x935A
#define GL_VIEWPORT_SWIZZLE_W_NV 0x935B
    typedef void (APIENTRYP PFNGLVIEWPORTSWIZZLENVPROC)(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
#endif /* GL_NV_viewport_swizzle */

#ifndef GL_OES_byte_coordinates
#define GL_OES_byte_coordinates 1
#define GL_BYTE 0x1400
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1BOESPROC)(GLenum texture, GLbyte s);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1BVOESPROC)(GLenum texture, const GLbyte* coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2BOESPROC)(GLenum texture, GLbyte s, GLbyte t);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2BVOESPROC)(GLenum texture, const GLbyte* coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3BOESPROC)(GLenum texture, GLbyte s, GLbyte t, GLbyte r);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3BVOESPROC)(GLenum texture, const GLbyte* coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4BOESPROC)(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4BVOESPROC)(GLenum texture, const GLbyte* coords);
    typedef void (APIENTRYP PFNGLTEXCOORD1BOESPROC)(GLbyte s);
    typedef void (APIENTRYP PFNGLTEXCOORD1BVOESPROC)(const GLbyte* coords);
    typedef void (APIENTRYP PFNGLTEXCOORD2BOESPROC)(GLbyte s, GLbyte t);
    typedef void (APIENTRYP PFNGLTEXCOORD2BVOESPROC)(const GLbyte* coords);
    typedef void (APIENTRYP PFNGLTEXCOORD3BOESPROC)(GLbyte s, GLbyte t, GLbyte r);
    typedef void (APIENTRYP PFNGLTEXCOORD3BVOESPROC)(const GLbyte* coords);
    typedef void (APIENTRYP PFNGLTEXCOORD4BOESPROC)(GLbyte s, GLbyte t, GLbyte r, GLbyte q);
    typedef void (APIENTRYP PFNGLTEXCOORD4BVOESPROC)(const GLbyte* coords);
    typedef void (APIENTRYP PFNGLVERTEX2BOESPROC)(GLbyte x, GLbyte y);
    typedef void (APIENTRYP PFNGLVERTEX2BVOESPROC)(const GLbyte* coords);
    typedef void (APIENTRYP PFNGLVERTEX3BOESPROC)(GLbyte x, GLbyte y, GLbyte z);
    typedef void (APIENTRYP PFNGLVERTEX3BVOESPROC)(const GLbyte* coords);
    typedef void (APIENTRYP PFNGLVERTEX4BOESPROC)(GLbyte x, GLbyte y, GLbyte z, GLbyte w);
    typedef void (APIENTRYP PFNGLVERTEX4BVOESPROC)(const GLbyte* coords);
#endif /* GL_OES_byte_coordinates */

#ifndef GL_OES_compressed_paletted_texture
#define GL_OES_compressed_paletted_texture 1
#define GL_PALETTE4_RGB8_OES 0x8B90
#define GL_PALETTE4_RGBA8_OES 0x8B91
#define GL_PALETTE4_R5_G6_B5_OES 0x8B92
#define GL_PALETTE4_RGBA4_OES 0x8B93
#define GL_PALETTE4_RGB5_A1_OES 0x8B94
#define GL_PALETTE8_RGB8_OES 0x8B95
#define GL_PALETTE8_RGBA8_OES 0x8B96
#define GL_PALETTE8_R5_G6_B5_OES 0x8B97
#define GL_PALETTE8_RGBA4_OES 0x8B98
#define GL_PALETTE8_RGB5_A1_OES 0x8B99
#endif /* GL_OES_compressed_paletted_texture */

#ifndef GL_OES_fixed_point
#define GL_OES_fixed_point 1
    typedef khronos_int32_t GLfixed;
    typedef khronos_int32_t GLclampx;
#define GL_FIXED_OES 0x140C
    typedef void (APIENTRYP PFNGLALPHAFUNCXOESPROC)(GLenum func, GLfixed ref);
    typedef void (APIENTRYP PFNGLCLEARCOLORXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    typedef void (APIENTRYP PFNGLCLEARDEPTHXOESPROC)(GLfixed depth);
    typedef void (APIENTRYP PFNGLCLIPPLANEXOESPROC)(GLenum plane, const GLfixed* equation);
    typedef void (APIENTRYP PFNGLCOLOR4XOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    typedef void (APIENTRYP PFNGLDEPTHRANGEXOESPROC)(GLfixed n, GLfixed f);
    typedef void (APIENTRYP PFNGLFOGXOESPROC)(GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLFOGXVOESPROC)(GLenum pname, const GLfixed* param);
    typedef void (APIENTRYP PFNGLFRUSTUMXOESPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
    typedef void (APIENTRYP PFNGLGETCLIPPLANEXOESPROC)(GLenum plane, GLfixed* equation);
    typedef void (APIENTRYP PFNGLGETFIXEDVOESPROC)(GLenum pname, GLfixed* params);
    typedef void (APIENTRYP PFNGLGETTEXENVXVOESPROC)(GLenum target, GLenum pname, GLfixed* params);
    typedef void (APIENTRYP PFNGLGETTEXPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed* params);
    typedef void (APIENTRYP PFNGLLIGHTMODELXOESPROC)(GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLLIGHTMODELXVOESPROC)(GLenum pname, const GLfixed* param);
    typedef void (APIENTRYP PFNGLLIGHTXOESPROC)(GLenum light, GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLLIGHTXVOESPROC)(GLenum light, GLenum pname, const GLfixed* params);
    typedef void (APIENTRYP PFNGLLINEWIDTHXOESPROC)(GLfixed width);
    typedef void (APIENTRYP PFNGLLOADMATRIXXOESPROC)(const GLfixed* m);
    typedef void (APIENTRYP PFNGLMATERIALXOESPROC)(GLenum face, GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLMATERIALXVOESPROC)(GLenum face, GLenum pname, const GLfixed* param);
    typedef void (APIENTRYP PFNGLMULTMATRIXXOESPROC)(const GLfixed* m);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4XOESPROC)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
    typedef void (APIENTRYP PFNGLNORMAL3XOESPROC)(GLfixed nx, GLfixed ny, GLfixed nz);
    typedef void (APIENTRYP PFNGLORTHOXOESPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
    typedef void (APIENTRYP PFNGLPOINTPARAMETERXVOESPROC)(GLenum pname, const GLfixed* params);
    typedef void (APIENTRYP PFNGLPOINTSIZEXOESPROC)(GLfixed size);
    typedef void (APIENTRYP PFNGLPOLYGONOFFSETXOESPROC)(GLfixed factor, GLfixed units);
    typedef void (APIENTRYP PFNGLROTATEXOESPROC)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
    typedef void (APIENTRYP PFNGLSCALEXOESPROC)(GLfixed x, GLfixed y, GLfixed z);
    typedef void (APIENTRYP PFNGLTEXENVXOESPROC)(GLenum target, GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLTEXENVXVOESPROC)(GLenum target, GLenum pname, const GLfixed* params);
    typedef void (APIENTRYP PFNGLTEXPARAMETERXOESPROC)(GLenum target, GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLTEXPARAMETERXVOESPROC)(GLenum target, GLenum pname, const GLfixed* params);
    typedef void (APIENTRYP PFNGLTRANSLATEXOESPROC)(GLfixed x, GLfixed y, GLfixed z);
    typedef void (APIENTRYP PFNGLGETLIGHTXVOESPROC)(GLenum light, GLenum pname, GLfixed* params);
    typedef void (APIENTRYP PFNGLGETMATERIALXVOESPROC)(GLenum face, GLenum pname, GLfixed* params);
    typedef void (APIENTRYP PFNGLPOINTPARAMETERXOESPROC)(GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLSAMPLECOVERAGEXOESPROC)(GLclampx value, GLboolean invert);
    typedef void (APIENTRYP PFNGLACCUMXOESPROC)(GLenum op, GLfixed value);
    typedef void (APIENTRYP PFNGLBITMAPXOESPROC)(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte* bitmap);
    typedef void (APIENTRYP PFNGLBLENDCOLORXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    typedef void (APIENTRYP PFNGLCLEARACCUMXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    typedef void (APIENTRYP PFNGLCOLOR3XOESPROC)(GLfixed red, GLfixed green, GLfixed blue);
    typedef void (APIENTRYP PFNGLCOLOR3XVOESPROC)(const GLfixed* components);
    typedef void (APIENTRYP PFNGLCOLOR4XVOESPROC)(const GLfixed* components);
    typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERXOESPROC)(GLenum target, GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERXVOESPROC)(GLenum target, GLenum pname, const GLfixed* params);
    typedef void (APIENTRYP PFNGLEVALCOORD1XOESPROC)(GLfixed u);
    typedef void (APIENTRYP PFNGLEVALCOORD1XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLEVALCOORD2XOESPROC)(GLfixed u, GLfixed v);
    typedef void (APIENTRYP PFNGLEVALCOORD2XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLFEEDBACKBUFFERXOESPROC)(GLsizei n, GLenum type, const GLfixed* buffer);
    typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed* params);
    typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed* params);
    typedef void (APIENTRYP PFNGLGETLIGHTXOESPROC)(GLenum light, GLenum pname, GLfixed* params);
    typedef void (APIENTRYP PFNGLGETMAPXVOESPROC)(GLenum target, GLenum query, GLfixed* v);
    typedef void (APIENTRYP PFNGLGETMATERIALXOESPROC)(GLenum face, GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLGETPIXELMAPXVPROC)(GLenum map, GLint size, GLfixed* values);
    typedef void (APIENTRYP PFNGLGETTEXGENXVOESPROC)(GLenum coord, GLenum pname, GLfixed* params);
    typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERXVOESPROC)(GLenum target, GLint level, GLenum pname, GLfixed* params);
    typedef void (APIENTRYP PFNGLINDEXXOESPROC)(GLfixed component);
    typedef void (APIENTRYP PFNGLINDEXXVOESPROC)(const GLfixed* component);
    typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXXOESPROC)(const GLfixed* m);
    typedef void (APIENTRYP PFNGLMAP1XOESPROC)(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
    typedef void (APIENTRYP PFNGLMAP2XOESPROC)(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
    typedef void (APIENTRYP PFNGLMAPGRID1XOESPROC)(GLint n, GLfixed u1, GLfixed u2);
    typedef void (APIENTRYP PFNGLMAPGRID2XOESPROC)(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
    typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXXOESPROC)(const GLfixed* m);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1XOESPROC)(GLenum texture, GLfixed s);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD1XVOESPROC)(GLenum texture, const GLfixed* coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2XOESPROC)(GLenum texture, GLfixed s, GLfixed t);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD2XVOESPROC)(GLenum texture, const GLfixed* coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3XOESPROC)(GLenum texture, GLfixed s, GLfixed t, GLfixed r);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD3XVOESPROC)(GLenum texture, const GLfixed* coords);
    typedef void (APIENTRYP PFNGLMULTITEXCOORD4XVOESPROC)(GLenum texture, const GLfixed* coords);
    typedef void (APIENTRYP PFNGLNORMAL3XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLPASSTHROUGHXOESPROC)(GLfixed token);
    typedef void (APIENTRYP PFNGLPIXELMAPXPROC)(GLenum map, GLint size, const GLfixed* values);
    typedef void (APIENTRYP PFNGLPIXELSTOREXPROC)(GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLPIXELTRANSFERXOESPROC)(GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLPIXELZOOMXOESPROC)(GLfixed xfactor, GLfixed yfactor);
    typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESXOESPROC)(GLsizei n, const GLuint* textures, const GLfixed* priorities);
    typedef void (APIENTRYP PFNGLRASTERPOS2XOESPROC)(GLfixed x, GLfixed y);
    typedef void (APIENTRYP PFNGLRASTERPOS2XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLRASTERPOS3XOESPROC)(GLfixed x, GLfixed y, GLfixed z);
    typedef void (APIENTRYP PFNGLRASTERPOS3XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLRASTERPOS4XOESPROC)(GLfixed x, GLfixed y, GLfixed z, GLfixed w);
    typedef void (APIENTRYP PFNGLRASTERPOS4XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLRECTXOESPROC)(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
    typedef void (APIENTRYP PFNGLRECTXVOESPROC)(const GLfixed* v1, const GLfixed* v2);
    typedef void (APIENTRYP PFNGLTEXCOORD1XOESPROC)(GLfixed s);
    typedef void (APIENTRYP PFNGLTEXCOORD1XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLTEXCOORD2XOESPROC)(GLfixed s, GLfixed t);
    typedef void (APIENTRYP PFNGLTEXCOORD2XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLTEXCOORD3XOESPROC)(GLfixed s, GLfixed t, GLfixed r);
    typedef void (APIENTRYP PFNGLTEXCOORD3XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLTEXCOORD4XOESPROC)(GLfixed s, GLfixed t, GLfixed r, GLfixed q);
    typedef void (APIENTRYP PFNGLTEXCOORD4XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLTEXGENXOESPROC)(GLenum coord, GLenum pname, GLfixed param);
    typedef void (APIENTRYP PFNGLTEXGENXVOESPROC)(GLenum coord, GLenum pname, const GLfixed* params);
    typedef void (APIENTRYP PFNGLVERTEX2XOESPROC)(GLfixed x);
    typedef void (APIENTRYP PFNGLVERTEX2XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLVERTEX3XOESPROC)(GLfixed x, GLfixed y);
    typedef void (APIENTRYP PFNGLVERTEX3XVOESPROC)(const GLfixed* coords);
    typedef void (APIENTRYP PFNGLVERTEX4XOESPROC)(GLfixed x, GLfixed y, GLfixed z);
    typedef void (APIENTRYP PFNGLVERTEX4XVOESPROC)(const GLfixed* coords);
#endif /* GL_OES_fixed_point */

#ifndef GL_OES_query_matrix
#define GL_OES_query_matrix 1
    typedef GLbitfield(APIENTRYP PFNGLQUERYMATRIXXOESPROC)(GLfixed* mantissa, GLint* exponent);
#endif /* GL_OES_query_matrix */

#ifndef GL_OES_read_format
#define GL_OES_read_format 1
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
#endif /* GL_OES_read_format */

#ifndef GL_OES_single_precision
#define GL_OES_single_precision 1
    typedef void (APIENTRYP PFNGLCLEARDEPTHFOESPROC)(GLclampf depth);
    typedef void (APIENTRYP PFNGLCLIPPLANEFOESPROC)(GLenum plane, const GLfloat* equation);
    typedef void (APIENTRYP PFNGLDEPTHRANGEFOESPROC)(GLclampf n, GLclampf f);
    typedef void (APIENTRYP PFNGLFRUSTUMFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
    typedef void (APIENTRYP PFNGLGETCLIPPLANEFOESPROC)(GLenum plane, GLfloat* equation);
    typedef void (APIENTRYP PFNGLORTHOFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
#endif /* GL_OES_single_precision */

#ifndef GL_OML_interlace
#define GL_OML_interlace 1
#define GL_INTERLACE_OML 0x8980
#define GL_INTERLACE_READ_OML 0x8981
#endif /* GL_OML_interlace */

#ifndef GL_OML_resample
#define GL_OML_resample 1
#define GL_PACK_RESAMPLE_OML 0x8984
#define GL_UNPACK_RESAMPLE_OML 0x8985
#define GL_RESAMPLE_REPLICATE_OML 0x8986
#define GL_RESAMPLE_ZERO_FILL_OML 0x8987
#define GL_RESAMPLE_AVERAGE_OML 0x8988
#define GL_RESAMPLE_DECIMATE_OML 0x8989
#endif /* GL_OML_resample */

#ifndef GL_OML_subsample
#define GL_OML_subsample 1
#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
#endif /* GL_OML_subsample */

#ifndef GL_OVR_multiview
#define GL_OVR_multiview 1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632
#define GL_MAX_VIEWS_OVR 0x9631
#define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633
    typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
#endif /* GL_OVR_multiview */

#ifndef GL_OVR_multiview2
#define GL_OVR_multiview2 1
#endif /* GL_OVR_multiview2 */

#ifndef GL_PGI_misc_hints
#define GL_PGI_misc_hints 1
#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0x1A1F8
#define GL_CONSERVE_MEMORY_HINT_PGI 0x1A1FD
#define GL_RECLAIM_MEMORY_HINT_PGI 0x1A1FE
#define GL_NATIVE_GRAPHICS_HANDLE_PGI 0x1A202
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
#define GL_NATIVE_GRAPHICS_END_HINT_PGI 0x1A204
#define GL_ALWAYS_FAST_HINT_PGI 0x1A20C
#define GL_ALWAYS_SOFT_HINT_PGI 0x1A20D
#define GL_ALLOW_DRAW_OBJ_HINT_PGI 0x1A20E
#define GL_ALLOW_DRAW_WIN_HINT_PGI 0x1A20F
#define GL_ALLOW_DRAW_FRG_HINT_PGI 0x1A210
#define GL_ALLOW_DRAW_MEM_HINT_PGI 0x1A211
#define GL_STRICT_DEPTHFUNC_HINT_PGI 0x1A216
#define GL_STRICT_LIGHTING_HINT_PGI 0x1A217
#define GL_STRICT_SCISSOR_HINT_PGI 0x1A218
#define GL_FULL_STIPPLE_HINT_PGI 0x1A219
#define GL_CLIP_NEAR_HINT_PGI 0x1A220
#define GL_CLIP_FAR_HINT_PGI 0x1A221
#define GL_WIDE_LINE_HINT_PGI 0x1A222
#define GL_BACK_NORMALS_HINT_PGI 0x1A223
    typedef void (APIENTRYP PFNGLHINTPGIPROC)(GLenum target, GLint mode);
#endif /* GL_PGI_misc_hints */

#ifndef GL_PGI_vertex_hints
#define GL_PGI_vertex_hints 1
#define GL_VERTEX_DATA_HINT_PGI 0x1A22A
#define GL_VERTEX_CONSISTENT_HINT_PGI 0x1A22B
#define GL_MATERIAL_SIDE_HINT_PGI 0x1A22C
#define GL_MAX_VERTEX_HINT_PGI 0x1A22D
#define GL_COLOR3_BIT_PGI 0x00010000
#define GL_COLOR4_BIT_PGI 0x00020000
#define GL_EDGEFLAG_BIT_PGI 0x00040000
#define GL_INDEX_BIT_PGI 0x00080000
#define GL_MAT_AMBIENT_BIT_PGI 0x00100000
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
#define GL_MAT_EMISSION_BIT_PGI 0x00800000
#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
#define GL_MAT_SHININESS_BIT_PGI 0x02000000
#define GL_MAT_SPECULAR_BIT_PGI 0x04000000
#define GL_NORMAL_BIT_PGI 0x08000000
#define GL_TEXCOORD1_BIT_PGI 0x10000000
#define GL_TEXCOORD2_BIT_PGI 0x20000000
#define GL_TEXCOORD3_BIT_PGI 0x40000000
#define GL_TEXCOORD4_BIT_PGI 0x80000000
#define GL_VERTEX23_BIT_PGI 0x00000004
#define GL_VERTEX4_BIT_PGI 0x00000008
#endif /* GL_PGI_vertex_hints */

#ifndef GL_REND_screen_coordinates
#define GL_REND_screen_coordinates 1
#define GL_SCREEN_COORDINATES_REND 0x8490
#define GL_INVERTED_SCREEN_W_REND 0x8491
#endif /* GL_REND_screen_coordinates */

#ifndef GL_S3_s3tc
#define GL_S3_s3tc 1
#define GL_RGB_S3TC 0x83A0
#define GL_RGB4_S3TC 0x83A1
#define GL_RGBA_S3TC 0x83A2
#define GL_RGBA4_S3TC 0x83A3
#define GL_RGBA_DXT5_S3TC 0x83A4
#define GL_RGBA4_DXT5_S3TC 0x83A5
#endif /* GL_S3_s3tc */

#ifndef GL_SGIS_detail_texture
#define GL_SGIS_detail_texture 1
#define GL_DETAIL_TEXTURE_2D_SGIS 0x8095
#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
#define GL_LINEAR_DETAIL_SGIS 0x8097
#define GL_LINEAR_DETAIL_ALPHA_SGIS 0x8098
#define GL_LINEAR_DETAIL_COLOR_SGIS 0x8099
#define GL_DETAIL_TEXTURE_LEVEL_SGIS 0x809A
#define GL_DETAIL_TEXTURE_MODE_SGIS 0x809B
#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
    typedef void (APIENTRYP PFNGLDETAILTEXFUNCSGISPROC)(GLenum target, GLsizei n, const GLfloat* points);
    typedef void (APIENTRYP PFNGLGETDETAILTEXFUNCSGISPROC)(GLenum target, GLfloat* points);
#endif /* GL_SGIS_detail_texture */

#ifndef GL_SGIS_fog_function
#define GL_SGIS_fog_function 1
#define GL_FOG_FUNC_SGIS 0x812A
#define GL_FOG_FUNC_POINTS_SGIS 0x812B
#define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C
    typedef void (APIENTRYP PFNGLFOGFUNCSGISPROC)(GLsizei n, const GLfloat* points);
    typedef void (APIENTRYP PFNGLGETFOGFUNCSGISPROC)(GLfloat* points);
#endif /* GL_SGIS_fog_function */

#ifndef GL_SGIS_generate_mipmap
#define GL_SGIS_generate_mipmap 1
#define GL_GENERATE_MIPMAP_SGIS 0x8191
#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
#endif /* GL_SGIS_generate_mipmap */

#ifndef GL_SGIS_multisample
#define GL_SGIS_multisample 1
#define GL_MULTISAMPLE_SGIS 0x809D
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
#define GL_SAMPLE_MASK_SGIS 0x80A0
#define GL_1PASS_SGIS 0x80A1
#define GL_2PASS_0_SGIS 0x80A2
#define GL_2PASS_1_SGIS 0x80A3
#define GL_4PASS_0_SGIS 0x80A4
#define GL_4PASS_1_SGIS 0x80A5
#define GL_4PASS_2_SGIS 0x80A6
#define GL_4PASS_3_SGIS 0x80A7
#define GL_SAMPLE_BUFFERS_SGIS 0x80A8
#define GL_SAMPLES_SGIS 0x80A9
#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
#define GL_SAMPLE_PATTERN_SGIS 0x80AC
    typedef void (APIENTRYP PFNGLSAMPLEMASKSGISPROC)(GLclampf value, GLboolean invert);
    typedef void (APIENTRYP PFNGLSAMPLEPATTERNSGISPROC)(GLenum pattern);
#endif /* GL_SGIS_multisample */

#ifndef GL_SGIS_pixel_texture
#define GL_SGIS_pixel_texture 1
#define GL_PIXEL_TEXTURE_SGIS 0x8353
#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
#define GL_PIXEL_GROUP_COLOR_SGIS 0x8356
    typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERISGISPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERIVSGISPROC)(GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFVSGISPROC)(GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)(GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)(GLenum pname, GLfloat* params);
#endif /* GL_SGIS_pixel_texture */

#ifndef GL_SGIS_point_line_texgen
#define GL_SGIS_point_line_texgen 1
#define GL_EYE_DISTANCE_TO_POINT_SGIS 0x81F0
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0x81F1
#define GL_EYE_DISTANCE_TO_LINE_SGIS 0x81F2
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0x81F3
#define GL_EYE_POINT_SGIS 0x81F4
#define GL_OBJECT_POINT_SGIS 0x81F5
#define GL_EYE_LINE_SGIS 0x81F6
#define GL_OBJECT_LINE_SGIS 0x81F7
#endif /* GL_SGIS_point_line_texgen */

#ifndef GL_SGIS_point_parameters
#define GL_SGIS_point_parameters 1
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
    typedef void (APIENTRYP PFNGLPOINTPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLPOINTPARAMETERFVSGISPROC)(GLenum pname, const GLfloat* params);
#endif /* GL_SGIS_point_parameters */

#ifndef GL_SGIS_sharpen_texture
#define GL_SGIS_sharpen_texture 1
#define GL_LINEAR_SHARPEN_SGIS 0x80AD
#define GL_LINEAR_SHARPEN_ALPHA_SGIS 0x80AE
#define GL_LINEAR_SHARPEN_COLOR_SGIS 0x80AF
#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
    typedef void (APIENTRYP PFNGLSHARPENTEXFUNCSGISPROC)(GLenum target, GLsizei n, const GLfloat* points);
    typedef void (APIENTRYP PFNGLGETSHARPENTEXFUNCSGISPROC)(GLenum target, GLfloat* points);
#endif /* GL_SGIS_sharpen_texture */

#ifndef GL_SGIS_texture4D
#define GL_SGIS_texture4D 1
#define GL_PACK_SKIP_VOLUMES_SGIS 0x8130
#define GL_PACK_IMAGE_DEPTH_SGIS 0x8131
#define GL_UNPACK_SKIP_VOLUMES_SGIS 0x8132
#define GL_UNPACK_IMAGE_DEPTH_SGIS 0x8133
#define GL_TEXTURE_4D_SGIS 0x8134
#define GL_PROXY_TEXTURE_4D_SGIS 0x8135
#define GL_TEXTURE_4DSIZE_SGIS 0x8136
#define GL_TEXTURE_WRAP_Q_SGIS 0x8137
#define GL_MAX_4D_TEXTURE_SIZE_SGIS 0x8138
#define GL_TEXTURE_4D_BINDING_SGIS 0x814F
    typedef void (APIENTRYP PFNGLTEXIMAGE4DSGISPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void* pixels);
    typedef void (APIENTRYP PFNGLTEXSUBIMAGE4DSGISPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void* pixels);
#endif /* GL_SGIS_texture4D */

#ifndef GL_SGIS_texture_border_clamp
#define GL_SGIS_texture_border_clamp 1
#define GL_CLAMP_TO_BORDER_SGIS 0x812D
#endif /* GL_SGIS_texture_border_clamp */

#ifndef GL_SGIS_texture_color_mask
#define GL_SGIS_texture_color_mask 1
#define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF
    typedef void (APIENTRYP PFNGLTEXTURECOLORMASKSGISPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
#endif /* GL_SGIS_texture_color_mask */

#ifndef GL_SGIS_texture_edge_clamp
#define GL_SGIS_texture_edge_clamp 1
#define GL_CLAMP_TO_EDGE_SGIS 0x812F
#endif /* GL_SGIS_texture_edge_clamp */

#ifndef GL_SGIS_texture_filter4
#define GL_SGIS_texture_filter4 1
#define GL_FILTER4_SGIS 0x8146
#define GL_TEXTURE_FILTER4_SIZE_SGIS 0x8147
    typedef void (APIENTRYP PFNGLGETTEXFILTERFUNCSGISPROC)(GLenum target, GLenum filter, GLfloat* weights);
    typedef void (APIENTRYP PFNGLTEXFILTERFUNCSGISPROC)(GLenum target, GLenum filter, GLsizei n, const GLfloat* weights);
#endif /* GL_SGIS_texture_filter4 */

#ifndef GL_SGIS_texture_lod
#define GL_SGIS_texture_lod 1
#define GL_TEXTURE_MIN_LOD_SGIS 0x813A
#define GL_TEXTURE_MAX_LOD_SGIS 0x813B
#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
#endif /* GL_SGIS_texture_lod */

#ifndef GL_SGIS_texture_select
#define GL_SGIS_texture_select 1
#define GL_DUAL_ALPHA4_SGIS 0x8110
#define GL_DUAL_ALPHA8_SGIS 0x8111
#define GL_DUAL_ALPHA12_SGIS 0x8112
#define GL_DUAL_ALPHA16_SGIS 0x8113
#define GL_DUAL_LUMINANCE4_SGIS 0x8114
#define GL_DUAL_LUMINANCE8_SGIS 0x8115
#define GL_DUAL_LUMINANCE12_SGIS 0x8116
#define GL_DUAL_LUMINANCE16_SGIS 0x8117
#define GL_DUAL_INTENSITY4_SGIS 0x8118
#define GL_DUAL_INTENSITY8_SGIS 0x8119
#define GL_DUAL_INTENSITY12_SGIS 0x811A
#define GL_DUAL_INTENSITY16_SGIS 0x811B
#define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0x811C
#define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0x811D
#define GL_QUAD_ALPHA4_SGIS 0x811E
#define GL_QUAD_ALPHA8_SGIS 0x811F
#define GL_QUAD_LUMINANCE4_SGIS 0x8120
#define GL_QUAD_LUMINANCE8_SGIS 0x8121
#define GL_QUAD_INTENSITY4_SGIS 0x8122
#define GL_QUAD_INTENSITY8_SGIS 0x8123
#define GL_DUAL_TEXTURE_SELECT_SGIS 0x8124
#define GL_QUAD_TEXTURE_SELECT_SGIS 0x8125
#endif /* GL_SGIS_texture_select */

#ifndef GL_SGIX_async
#define GL_SGIX_async 1
#define GL_ASYNC_MARKER_SGIX 0x8329
    typedef void (APIENTRYP PFNGLASYNCMARKERSGIXPROC)(GLuint marker);
    typedef GLint(APIENTRYP PFNGLFINISHASYNCSGIXPROC)(GLuint* markerp);
    typedef GLint(APIENTRYP PFNGLPOLLASYNCSGIXPROC)(GLuint* markerp);
    typedef GLuint(APIENTRYP PFNGLGENASYNCMARKERSSGIXPROC)(GLsizei range);
    typedef void (APIENTRYP PFNGLDELETEASYNCMARKERSSGIXPROC)(GLuint marker, GLsizei range);
    typedef GLboolean(APIENTRYP PFNGLISASYNCMARKERSGIXPROC)(GLuint marker);
#endif /* GL_SGIX_async */

#ifndef GL_SGIX_async_histogram
#define GL_SGIX_async_histogram 1
#define GL_ASYNC_HISTOGRAM_SGIX 0x832C
#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
#endif /* GL_SGIX_async_histogram */

#ifndef GL_SGIX_async_pixel
#define GL_SGIX_async_pixel 1
#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
#define GL_ASYNC_READ_PIXELS_SGIX 0x835E
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
#endif /* GL_SGIX_async_pixel */

#ifndef GL_SGIX_blend_alpha_minmax
#define GL_SGIX_blend_alpha_minmax 1
#define GL_ALPHA_MIN_SGIX 0x8320
#define GL_ALPHA_MAX_SGIX 0x8321
#endif /* GL_SGIX_blend_alpha_minmax */

#ifndef GL_SGIX_calligraphic_fragment
#define GL_SGIX_calligraphic_fragment 1
#define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0x8183
#endif /* GL_SGIX_calligraphic_fragment */

#ifndef GL_SGIX_clipmap
#define GL_SGIX_clipmap 1
#define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0x8170
#define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0x8171
#define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0x8172
#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0x8173
#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0x8176
#define GL_MAX_CLIPMAP_DEPTH_SGIX 0x8177
#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
#define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0x844D
#define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0x844E
#define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0x844F
#endif /* GL_SGIX_clipmap */

#ifndef GL_SGIX_convolution_accuracy
#define GL_SGIX_convolution_accuracy 1
#define GL_CONVOLUTION_HINT_SGIX 0x8316
#endif /* GL_SGIX_convolution_accuracy */

#ifndef GL_SGIX_depth_pass_instrument
#define GL_SGIX_depth_pass_instrument 1
#endif /* GL_SGIX_depth_pass_instrument */

#ifndef GL_SGIX_depth_texture
#define GL_SGIX_depth_texture 1
#define GL_DEPTH_COMPONENT16_SGIX 0x81A5
#define GL_DEPTH_COMPONENT24_SGIX 0x81A6
#define GL_DEPTH_COMPONENT32_SGIX 0x81A7
#endif /* GL_SGIX_depth_texture */

#ifndef GL_SGIX_flush_raster
#define GL_SGIX_flush_raster 1
    typedef void (APIENTRYP PFNGLFLUSHRASTERSGIXPROC)(void);
#endif /* GL_SGIX_flush_raster */

#ifndef GL_SGIX_fog_offset
#define GL_SGIX_fog_offset 1
#define GL_FOG_OFFSET_SGIX 0x8198
#define GL_FOG_OFFSET_VALUE_SGIX 0x8199
#endif /* GL_SGIX_fog_offset */

#ifndef GL_SGIX_fragment_lighting
#define GL_SGIX_fragment_lighting 1
#define GL_FRAGMENT_LIGHTING_SGIX 0x8400
#define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0x8401
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
#define GL_MAX_FRAGMENT_LIGHTS_SGIX 0x8404
#define GL_MAX_ACTIVE_LIGHTS_SGIX 0x8405
#define GL_CURRENT_RASTER_NORMAL_SGIX 0x8406
#define GL_LIGHT_ENV_MODE_SGIX 0x8407
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
#define GL_FRAGMENT_LIGHT0_SGIX 0x840C
#define GL_FRAGMENT_LIGHT1_SGIX 0x840D
#define GL_FRAGMENT_LIGHT2_SGIX 0x840E
#define GL_FRAGMENT_LIGHT3_SGIX 0x840F
#define GL_FRAGMENT_LIGHT4_SGIX 0x8410
#define GL_FRAGMENT_LIGHT5_SGIX 0x8411
#define GL_FRAGMENT_LIGHT6_SGIX 0x8412
#define GL_FRAGMENT_LIGHT7_SGIX 0x8413
    typedef void (APIENTRYP PFNGLFRAGMENTCOLORMATERIALSGIXPROC)(GLenum face, GLenum mode);
    typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFSGIXPROC)(GLenum light, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFVSGIXPROC)(GLenum light, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLFRAGMENTLIGHTISGIXPROC)(GLenum light, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLFRAGMENTLIGHTIVSGIXPROC)(GLenum light, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFSGIXPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)(GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELISGIXPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)(GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFSGIXPROC)(GLenum face, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFVSGIXPROC)(GLenum face, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLFRAGMENTMATERIALISGIXPROC)(GLenum face, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLFRAGMENTMATERIALIVSGIXPROC)(GLenum face, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTFVSGIXPROC)(GLenum light, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTIVSGIXPROC)(GLenum light, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALFVSGIXPROC)(GLenum face, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALIVSGIXPROC)(GLenum face, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLLIGHTENVISGIXPROC)(GLenum pname, GLint param);
#endif /* GL_SGIX_fragment_lighting */

#ifndef GL_SGIX_framezoom
#define GL_SGIX_framezoom 1
#define GL_FRAMEZOOM_SGIX 0x818B
#define GL_FRAMEZOOM_FACTOR_SGIX 0x818C
#define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0x818D
    typedef void (APIENTRYP PFNGLFRAMEZOOMSGIXPROC)(GLint factor);
#endif /* GL_SGIX_framezoom */

#ifndef GL_SGIX_igloo_interface
#define GL_SGIX_igloo_interface 1
    typedef void (APIENTRYP PFNGLIGLOOINTERFACESGIXPROC)(GLenum pname, const void* params);
#endif /* GL_SGIX_igloo_interface */

#ifndef GL_SGIX_instruments
#define GL_SGIX_instruments 1
#define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
#define GL_INSTRUMENT_MEASUREMENTS_SGIX 0x8181
    typedef GLint(APIENTRYP PFNGLGETINSTRUMENTSSGIXPROC)(void);
    typedef void (APIENTRYP PFNGLINSTRUMENTSBUFFERSGIXPROC)(GLsizei size, GLint* buffer);
    typedef GLint(APIENTRYP PFNGLPOLLINSTRUMENTSSGIXPROC)(GLint* marker_p);
    typedef void (APIENTRYP PFNGLREADINSTRUMENTSSGIXPROC)(GLint marker);
    typedef void (APIENTRYP PFNGLSTARTINSTRUMENTSSGIXPROC)(void);
    typedef void (APIENTRYP PFNGLSTOPINSTRUMENTSSGIXPROC)(GLint marker);
#endif /* GL_SGIX_instruments */

#ifndef GL_SGIX_interlace
#define GL_SGIX_interlace 1
#define GL_INTERLACE_SGIX 0x8094
#endif /* GL_SGIX_interlace */

#ifndef GL_SGIX_ir_instrument1
#define GL_SGIX_ir_instrument1 1
#define GL_IR_INSTRUMENT1_SGIX 0x817F
#endif /* GL_SGIX_ir_instrument1 */

#ifndef GL_SGIX_list_priority
#define GL_SGIX_list_priority 1
#define GL_LIST_PRIORITY_SGIX 0x8182
    typedef void (APIENTRYP PFNGLGETLISTPARAMETERFVSGIXPROC)(GLuint list, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETLISTPARAMETERIVSGIXPROC)(GLuint list, GLenum pname, GLint* params);
    typedef void (APIENTRYP PFNGLLISTPARAMETERFSGIXPROC)(GLuint list, GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLLISTPARAMETERFVSGIXPROC)(GLuint list, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLLISTPARAMETERISGIXPROC)(GLuint list, GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLLISTPARAMETERIVSGIXPROC)(GLuint list, GLenum pname, const GLint* params);
#endif /* GL_SGIX_list_priority */

#ifndef GL_SGIX_pixel_texture
#define GL_SGIX_pixel_texture 1
#define GL_PIXEL_TEX_GEN_SGIX 0x8139
#define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B
    typedef void (APIENTRYP PFNGLPIXELTEXGENSGIXPROC)(GLenum mode);
#endif /* GL_SGIX_pixel_texture */

#ifndef GL_SGIX_pixel_tiles
#define GL_SGIX_pixel_tiles 1
#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
#define GL_PIXEL_TILE_WIDTH_SGIX 0x8140
#define GL_PIXEL_TILE_HEIGHT_SGIX 0x8141
#define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0x8142
#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0x8143
#define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0x8144
#define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0x8145
#endif /* GL_SGIX_pixel_tiles */

#ifndef GL_SGIX_polynomial_ffd
#define GL_SGIX_polynomial_ffd 1
#define GL_TEXTURE_DEFORMATION_BIT_SGIX 0x00000001
#define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0x00000002
#define GL_GEOMETRY_DEFORMATION_SGIX 0x8194
#define GL_TEXTURE_DEFORMATION_SGIX 0x8195
#define GL_DEFORMATIONS_MASK_SGIX 0x8196
#define GL_MAX_DEFORMATION_ORDER_SGIX 0x8197
    typedef void (APIENTRYP PFNGLDEFORMATIONMAP3DSGIXPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble* points);
    typedef void (APIENTRYP PFNGLDEFORMATIONMAP3FSGIXPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat* points);
    typedef void (APIENTRYP PFNGLDEFORMSGIXPROC)(GLbitfield mask);
    typedef void (APIENTRYP PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)(GLbitfield mask);
#endif /* GL_SGIX_polynomial_ffd */

#ifndef GL_SGIX_reference_plane
#define GL_SGIX_reference_plane 1
#define GL_REFERENCE_PLANE_SGIX 0x817D
#define GL_REFERENCE_PLANE_EQUATION_SGIX 0x817E
    typedef void (APIENTRYP PFNGLREFERENCEPLANESGIXPROC)(const GLdouble* equation);
#endif /* GL_SGIX_reference_plane */

#ifndef GL_SGIX_resample
#define GL_SGIX_resample 1
#define GL_PACK_RESAMPLE_SGIX 0x842E
#define GL_UNPACK_RESAMPLE_SGIX 0x842F
#define GL_RESAMPLE_REPLICATE_SGIX 0x8433
#define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434
#define GL_RESAMPLE_DECIMATE_SGIX 0x8430
#endif /* GL_SGIX_resample */

#ifndef GL_SGIX_scalebias_hint
#define GL_SGIX_scalebias_hint 1
#define GL_SCALEBIAS_HINT_SGIX 0x8322
#endif /* GL_SGIX_scalebias_hint */

#ifndef GL_SGIX_shadow
#define GL_SGIX_shadow 1
#define GL_TEXTURE_COMPARE_SGIX 0x819A
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
#endif /* GL_SGIX_shadow */

#ifndef GL_SGIX_shadow_ambient
#define GL_SGIX_shadow_ambient 1
#define GL_SHADOW_AMBIENT_SGIX 0x80BF
#endif /* GL_SGIX_shadow_ambient */

#ifndef GL_SGIX_sprite
#define GL_SGIX_sprite 1
#define GL_SPRITE_SGIX 0x8148
#define GL_SPRITE_MODE_SGIX 0x8149
#define GL_SPRITE_AXIS_SGIX 0x814A
#define GL_SPRITE_TRANSLATION_SGIX 0x814B
#define GL_SPRITE_AXIAL_SGIX 0x814C
#define GL_SPRITE_OBJECT_ALIGNED_SGIX 0x814D
#define GL_SPRITE_EYE_ALIGNED_SGIX 0x814E
    typedef void (APIENTRYP PFNGLSPRITEPARAMETERFSGIXPROC)(GLenum pname, GLfloat param);
    typedef void (APIENTRYP PFNGLSPRITEPARAMETERFVSGIXPROC)(GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLSPRITEPARAMETERISGIXPROC)(GLenum pname, GLint param);
    typedef void (APIENTRYP PFNGLSPRITEPARAMETERIVSGIXPROC)(GLenum pname, const GLint* params);
#endif /* GL_SGIX_sprite */

#ifndef GL_SGIX_subsample
#define GL_SGIX_subsample 1
#define GL_PACK_SUBSAMPLE_RATE_SGIX 0x85A0
#define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0x85A1
#define GL_PIXEL_SUBSAMPLE_4444_SGIX 0x85A2
#define GL_PIXEL_SUBSAMPLE_2424_SGIX 0x85A3
#define GL_PIXEL_SUBSAMPLE_4242_SGIX 0x85A4
#endif /* GL_SGIX_subsample */

#ifndef GL_SGIX_tag_sample_buffer
#define GL_SGIX_tag_sample_buffer 1
    typedef void (APIENTRYP PFNGLTAGSAMPLEBUFFERSGIXPROC)(void);
#endif /* GL_SGIX_tag_sample_buffer */

#ifndef GL_SGIX_texture_add_env
#define GL_SGIX_texture_add_env 1
#define GL_TEXTURE_ENV_BIAS_SGIX 0x80BE
#endif /* GL_SGIX_texture_add_env */

#ifndef GL_SGIX_texture_coordinate_clamp
#define GL_SGIX_texture_coordinate_clamp 1
#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
#endif /* GL_SGIX_texture_coordinate_clamp */

#ifndef GL_SGIX_texture_lod_bias
#define GL_SGIX_texture_lod_bias 1
#define GL_TEXTURE_LOD_BIAS_S_SGIX 0x818E
#define GL_TEXTURE_LOD_BIAS_T_SGIX 0x818F
#define GL_TEXTURE_LOD_BIAS_R_SGIX 0x8190
#endif /* GL_SGIX_texture_lod_bias */

#ifndef GL_SGIX_texture_multi_buffer
#define GL_SGIX_texture_multi_buffer 1
#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
#endif /* GL_SGIX_texture_multi_buffer */

#ifndef GL_SGIX_texture_scale_bias
#define GL_SGIX_texture_scale_bias 1
#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
#endif /* GL_SGIX_texture_scale_bias */

#ifndef GL_SGIX_vertex_preclip
#define GL_SGIX_vertex_preclip 1
#define GL_VERTEX_PRECLIP_SGIX 0x83EE
#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
#endif /* GL_SGIX_vertex_preclip */

#ifndef GL_SGIX_ycrcb
#define GL_SGIX_ycrcb 1
#define GL_YCRCB_422_SGIX 0x81BB
#define GL_YCRCB_444_SGIX 0x81BC
#endif /* GL_SGIX_ycrcb */

#ifndef GL_SGIX_ycrcb_subsample
#define GL_SGIX_ycrcb_subsample 1
#endif /* GL_SGIX_ycrcb_subsample */

#ifndef GL_SGIX_ycrcba
#define GL_SGIX_ycrcba 1
#define GL_YCRCB_SGIX 0x8318
#define GL_YCRCBA_SGIX 0x8319
#endif /* GL_SGIX_ycrcba */

#ifndef GL_SGI_color_matrix
#define GL_SGI_color_matrix 1
#define GL_COLOR_MATRIX_SGI 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
#endif /* GL_SGI_color_matrix */

#ifndef GL_SGI_color_table
#define GL_SGI_color_table 1
#define GL_COLOR_TABLE_SGI 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
#define GL_PROXY_COLOR_TABLE_SGI 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
#define GL_COLOR_TABLE_SCALE_SGI 0x80D6
#define GL_COLOR_TABLE_BIAS_SGI 0x80D7
#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
    typedef void (APIENTRYP PFNGLCOLORTABLESGIPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table);
    typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVSGIPROC)(GLenum target, GLenum pname, const GLfloat* params);
    typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVSGIPROC)(GLenum target, GLenum pname, const GLint* params);
    typedef void (APIENTRYP PFNGLCOPYCOLORTABLESGIPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    typedef void (APIENTRYP PFNGLGETCOLORTABLESGIPROC)(GLenum target, GLenum format, GLenum type, void* table);
    typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)(GLenum target, GLenum pname, GLfloat* params);
    typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)(GLenum target, GLenum pname, GLint* params);
#endif /* GL_SGI_color_table */

#ifndef GL_SGI_texture_color_table
#define GL_SGI_texture_color_table 1
#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
#endif /* GL_SGI_texture_color_table */

#ifndef GL_SUNX_constant_data
#define GL_SUNX_constant_data 1
#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
    typedef void (APIENTRYP PFNGLFINISHTEXTURESUNXPROC)(void);
#endif /* GL_SUNX_constant_data */

#ifndef GL_SUN_convolution_border_modes
#define GL_SUN_convolution_border_modes 1
#define GL_WRAP_BORDER_SUN 0x81D4
#endif /* GL_SUN_convolution_border_modes */

#ifndef GL_SUN_global_alpha
#define GL_SUN_global_alpha 1
#define GL_GLOBAL_ALPHA_SUN 0x81D9
#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
    typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORBSUNPROC)(GLbyte factor);
    typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORSSUNPROC)(GLshort factor);
    typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORISUNPROC)(GLint factor);
    typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORFSUNPROC)(GLfloat factor);
    typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORDSUNPROC)(GLdouble factor);
    typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUBSUNPROC)(GLubyte factor);
    typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUSSUNPROC)(GLushort factor);
    typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUISUNPROC)(GLuint factor);
#endif /* GL_SUN_global_alpha */

#ifndef GL_SUN_mesh_array
#define GL_SUN_mesh_array 1
#define GL_QUAD_MESH_SUN 0x8614
#define GL_TRIANGLE_MESH_SUN 0x8615
    typedef void (APIENTRYP PFNGLDRAWMESHARRAYSSUNPROC)(GLenum mode, GLint first, GLsizei count, GLsizei width);
#endif /* GL_SUN_mesh_array */

#ifndef GL_SUN_slice_accum
#define GL_SUN_slice_accum 1
#define GL_SLICE_ACCUM_SUN 0x85CC
#endif /* GL_SUN_slice_accum */

#ifndef GL_SUN_triangle_list
#define GL_SUN_triangle_list 1
#define GL_RESTART_SUN 0x0001
#define GL_REPLACE_MIDDLE_SUN 0x0002
#define GL_REPLACE_OLDEST_SUN 0x0003
#define GL_TRIANGLE_LIST_SUN 0x81D7
#define GL_REPLACEMENT_CODE_SUN 0x81D8
#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
#define GL_R1UI_V3F_SUN 0x85C4
#define GL_R1UI_C4UB_V3F_SUN 0x85C5
#define GL_R1UI_C3F_V3F_SUN 0x85C6
#define GL_R1UI_N3F_V3F_SUN 0x85C7
#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
#define GL_R1UI_T2F_V3F_SUN 0x85C9
#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUISUNPROC)(GLuint code);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSSUNPROC)(GLushort code);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBSUNPROC)(GLubyte code);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVSUNPROC)(const GLuint* code);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSVSUNPROC)(const GLushort* code);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBVSUNPROC)(const GLubyte* code);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEPOINTERSUNPROC)(GLenum type, GLsizei stride, const void** pointer);
#endif /* GL_SUN_triangle_list */

#ifndef GL_SUN_vertex
#define GL_SUN_vertex 1
    typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FSUNPROC)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
    typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FVSUNPROC)(const GLubyte* c, const GLfloat* v);
    typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FSUNPROC)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FVSUNPROC)(const GLubyte* c, const GLfloat* v);
    typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FSUNPROC)(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FVSUNPROC)(const GLfloat* c, const GLfloat* v);
    typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FSUNPROC)(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FVSUNPROC)(const GLfloat* n, const GLfloat* v);
    typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLfloat* c, const GLfloat* n, const GLfloat* v);
    typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FVSUNPROC)(const GLfloat* tc, const GLfloat* v);
    typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FSUNPROC)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FVSUNPROC)(const GLfloat* tc, const GLfloat* v);
    typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)(const GLfloat* tc, const GLubyte* c, const GLfloat* v);
    typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)(const GLfloat* tc, const GLfloat* c, const GLfloat* v);
    typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)(const GLfloat* tc, const GLfloat* n, const GLfloat* v);
    typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
    typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* v);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)(const GLuint* rc, const GLubyte* c, const GLfloat* v);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* c, const GLfloat* v);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* n, const GLfloat* v);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* tc, const GLfloat* v);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* tc, const GLfloat* n, const GLfloat* v);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
#endif /* GL_SUN_vertex */

#ifndef GL_WIN_phong_shading
#define GL_WIN_phong_shading 1
#define GL_PHONG_WIN 0x80EA
#define GL_PHONG_HINT_WIN 0x80EB
#endif /* GL_WIN_phong_shading */

#ifndef GL_WIN_specular_fog
#define GL_WIN_specular_fog 1
#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
#endif /* GL_WIN_specular_fog */

#ifndef GL_EXT_texture_shadow_lod
#define GL_EXT_texture_shadow_lod 1
#endif /* GL_EXT_texture_shadow_lod */

#if defined(GLBIND_WGL)
#ifndef WGL_3DFX_multisample
#define WGL_3DFX_multisample 1
#define WGL_SAMPLE_BUFFERS_3DFX 0x2060
#define WGL_SAMPLES_3DFX 0x2061
#endif /* WGL_3DFX_multisample */

#ifndef WGL_3DL_stereo_control
#define WGL_3DL_stereo_control 1
#define WGL_STEREO_EMITTER_ENABLE_3DL 0x2055
#define WGL_STEREO_EMITTER_DISABLE_3DL 0x2056
#define WGL_STEREO_POLARITY_NORMAL_3DL 0x2057
#define WGL_STEREO_POLARITY_INVERT_3DL 0x2058
    typedef BOOL(APIENTRYP PFNWGLSETSTEREOEMITTERSTATE3DLPROC)(HDC hDC, UINT uState);
#endif /* WGL_3DL_stereo_control */

#ifndef WGL_AMD_gpu_association
#define WGL_AMD_gpu_association 1
#define WGL_GPU_VENDOR_AMD 0x1F00
#define WGL_GPU_RENDERER_STRING_AMD 0x1F01
#define WGL_GPU_OPENGL_VERSION_STRING_AMD 0x1F02
#define WGL_GPU_FASTEST_TARGET_GPUS_AMD 0x21A2
#define WGL_GPU_RAM_AMD 0x21A3
#define WGL_GPU_CLOCK_AMD 0x21A4
#define WGL_GPU_NUM_PIPES_AMD 0x21A5
#define WGL_GPU_NUM_SIMD_AMD 0x21A6
#define WGL_GPU_NUM_RB_AMD 0x21A7
#define WGL_GPU_NUM_SPI_AMD 0x21A8
    typedef UINT(APIENTRYP PFNWGLGETGPUIDSAMDPROC)(UINT maxCount, UINT* ids);
    typedef INT(APIENTRYP PFNWGLGETGPUINFOAMDPROC)(UINT id, INT property, GLenum dataType, UINT size, void* data);
    typedef UINT(APIENTRYP PFNWGLGETCONTEXTGPUIDAMDPROC)(HGLRC hglrc);
    typedef HGLRC(APIENTRYP PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC)(UINT id);
    typedef HGLRC(APIENTRYP PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)(UINT id, HGLRC hShareContext, const int* attribList);
    typedef BOOL(APIENTRYP PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC)(HGLRC hglrc);
    typedef BOOL(APIENTRYP PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)(HGLRC hglrc);
    typedef HGLRC(APIENTRYP PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC)(void);
    typedef VOID(APIENTRYP PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC)(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
#endif /* WGL_AMD_gpu_association */

#ifndef WGL_ARB_buffer_region
#define WGL_ARB_buffer_region 1
#define WGL_FRONT_COLOR_BUFFER_BIT_ARB 0x00000001
#define WGL_BACK_COLOR_BUFFER_BIT_ARB 0x00000002
#define WGL_DEPTH_BUFFER_BIT_ARB 0x00000004
#define WGL_STENCIL_BUFFER_BIT_ARB 0x00000008
    typedef HANDLE(APIENTRYP PFNWGLCREATEBUFFERREGIONARBPROC)(HDC hDC, int iLayerPlane, UINT uType);
    typedef VOID(APIENTRYP PFNWGLDELETEBUFFERREGIONARBPROC)(HANDLE hRegion);
    typedef BOOL(APIENTRYP PFNWGLSAVEBUFFERREGIONARBPROC)(HANDLE hRegion, int x, int y, int width, int height);
    typedef BOOL(APIENTRYP PFNWGLRESTOREBUFFERREGIONARBPROC)(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);
#endif /* WGL_ARB_buffer_region */

#ifndef WGL_ARB_context_flush_control
#define WGL_ARB_context_flush_control 1
#define WGL_CONTEXT_RELEASE_BEHAVIOR_ARB 0x2097
#define WGL_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB 0
#define WGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB 0x2098
#endif /* WGL_ARB_context_flush_control */

#ifndef WGL_ARB_create_context
#define WGL_ARB_create_context 1
#define WGL_CONTEXT_DEBUG_BIT_ARB 0x00000001
#define WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x00000002
#define WGL_CONTEXT_MAJOR_VERSION_ARB 0x2091
#define WGL_CONTEXT_MINOR_VERSION_ARB 0x2092
#define WGL_CONTEXT_LAYER_PLANE_ARB 0x2093
#define WGL_CONTEXT_FLAGS_ARB 0x2094
#define ERROR_INVALID_VERSION_ARB 0x2095
    typedef HGLRC(APIENTRYP PFNWGLCREATECONTEXTATTRIBSARBPROC)(HDC hDC, HGLRC hShareContext, const int* attribList);
#endif /* WGL_ARB_create_context */

#ifndef WGL_ARB_create_context_no_error
#define WGL_ARB_create_context_no_error 1
#define WGL_CONTEXT_OPENGL_NO_ERROR_ARB 0x31B3
#endif /* WGL_ARB_create_context_no_error */

#ifndef WGL_ARB_create_context_profile
#define WGL_ARB_create_context_profile 1
#define WGL_CONTEXT_PROFILE_MASK_ARB 0x9126
#define WGL_CONTEXT_CORE_PROFILE_BIT_ARB 0x00000001
#define WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
#define ERROR_INVALID_PROFILE_ARB 0x2096
#endif /* WGL_ARB_create_context_profile */

#ifndef WGL_ARB_create_context_robustness
#define WGL_ARB_create_context_robustness 1
#define WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB 0x00000004
#define WGL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define WGL_NO_RESET_NOTIFICATION_ARB 0x8261
#endif /* WGL_ARB_create_context_robustness */

#ifndef WGL_ARB_extensions_string
#define WGL_ARB_extensions_string 1
    typedef const char* (APIENTRYP PFNWGLGETEXTENSIONSSTRINGARBPROC)(HDC hdc);
#endif /* WGL_ARB_extensions_string */

#ifndef WGL_ARB_framebuffer_sRGB
#define WGL_ARB_framebuffer_sRGB 1
#define WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB 0x20A9
#endif /* WGL_ARB_framebuffer_sRGB */

#ifndef WGL_ARB_make_current_read
#define WGL_ARB_make_current_read 1
#define ERROR_INVALID_PIXEL_TYPE_ARB 0x2043
#define ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB 0x2054
    typedef BOOL(APIENTRYP PFNWGLMAKECONTEXTCURRENTARBPROC)(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
    typedef HDC(APIENTRYP PFNWGLGETCURRENTREADDCARBPROC)(void);
#endif /* WGL_ARB_make_current_read */

#ifndef WGL_ARB_multisample
#define WGL_ARB_multisample 1
#define WGL_SAMPLE_BUFFERS_ARB 0x2041
#define WGL_SAMPLES_ARB 0x2042
#endif /* WGL_ARB_multisample */

#ifndef WGL_ARB_pbuffer
#define WGL_ARB_pbuffer 1
    DECLARE_HANDLE(HPBUFFERARB);
#define WGL_DRAW_TO_PBUFFER_ARB 0x202D
#define WGL_MAX_PBUFFER_PIXELS_ARB 0x202E
#define WGL_MAX_PBUFFER_WIDTH_ARB 0x202F
#define WGL_MAX_PBUFFER_HEIGHT_ARB 0x2030
#define WGL_PBUFFER_LARGEST_ARB 0x2033
#define WGL_PBUFFER_WIDTH_ARB 0x2034
#define WGL_PBUFFER_HEIGHT_ARB 0x2035
#define WGL_PBUFFER_LOST_ARB 0x2036
    typedef HPBUFFERARB(APIENTRYP PFNWGLCREATEPBUFFERARBPROC)(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int* piAttribList);
    typedef HDC(APIENTRYP PFNWGLGETPBUFFERDCARBPROC)(HPBUFFERARB hPbuffer);
    typedef int (APIENTRYP PFNWGLRELEASEPBUFFERDCARBPROC)(HPBUFFERARB hPbuffer, HDC hDC);
    typedef BOOL(APIENTRYP PFNWGLDESTROYPBUFFERARBPROC)(HPBUFFERARB hPbuffer);
    typedef BOOL(APIENTRYP PFNWGLQUERYPBUFFERARBPROC)(HPBUFFERARB hPbuffer, int iAttribute, int* piValue);
#endif /* WGL_ARB_pbuffer */

#ifndef WGL_ARB_pixel_format
#define WGL_ARB_pixel_format 1
#define WGL_NUMBER_PIXEL_FORMATS_ARB 0x2000
#define WGL_DRAW_TO_WINDOW_ARB 0x2001
#define WGL_DRAW_TO_BITMAP_ARB 0x2002
#define WGL_ACCELERATION_ARB 0x2003
#define WGL_NEED_PALETTE_ARB 0x2004
#define WGL_NEED_SYSTEM_PALETTE_ARB 0x2005
#define WGL_SWAP_LAYER_BUFFERS_ARB 0x2006
#define WGL_SWAP_METHOD_ARB 0x2007
#define WGL_NUMBER_OVERLAYS_ARB 0x2008
#define WGL_NUMBER_UNDERLAYS_ARB 0x2009
#define WGL_TRANSPARENT_ARB 0x200A
#define WGL_TRANSPARENT_RED_VALUE_ARB 0x2037
#define WGL_TRANSPARENT_GREEN_VALUE_ARB 0x2038
#define WGL_TRANSPARENT_BLUE_VALUE_ARB 0x2039
#define WGL_TRANSPARENT_ALPHA_VALUE_ARB 0x203A
#define WGL_TRANSPARENT_INDEX_VALUE_ARB 0x203B
#define WGL_SHARE_DEPTH_ARB 0x200C
#define WGL_SHARE_STENCIL_ARB 0x200D
#define WGL_SHARE_ACCUM_ARB 0x200E
#define WGL_SUPPORT_GDI_ARB 0x200F
#define WGL_SUPPORT_OPENGL_ARB 0x2010
#define WGL_DOUBLE_BUFFER_ARB 0x2011
#define WGL_STEREO_ARB 0x2012
#define WGL_PIXEL_TYPE_ARB 0x2013
#define WGL_COLOR_BITS_ARB 0x2014
#define WGL_RED_BITS_ARB 0x2015
#define WGL_RED_SHIFT_ARB 0x2016
#define WGL_GREEN_BITS_ARB 0x2017
#define WGL_GREEN_SHIFT_ARB 0x2018
#define WGL_BLUE_BITS_ARB 0x2019
#define WGL_BLUE_SHIFT_ARB 0x201A
#define WGL_ALPHA_BITS_ARB 0x201B
#define WGL_ALPHA_SHIFT_ARB 0x201C
#define WGL_ACCUM_BITS_ARB 0x201D
#define WGL_ACCUM_RED_BITS_ARB 0x201E
#define WGL_ACCUM_GREEN_BITS_ARB 0x201F
#define WGL_ACCUM_BLUE_BITS_ARB 0x2020
#define WGL_ACCUM_ALPHA_BITS_ARB 0x2021
#define WGL_DEPTH_BITS_ARB 0x2022
#define WGL_STENCIL_BITS_ARB 0x2023
#define WGL_AUX_BUFFERS_ARB 0x2024
#define WGL_NO_ACCELERATION_ARB 0x2025
#define WGL_GENERIC_ACCELERATION_ARB 0x2026
#define WGL_FULL_ACCELERATION_ARB 0x2027
#define WGL_SWAP_EXCHANGE_ARB 0x2028
#define WGL_SWAP_COPY_ARB 0x2029
#define WGL_SWAP_UNDEFINED_ARB 0x202A
#define WGL_TYPE_RGBA_ARB 0x202B
#define WGL_TYPE_COLORINDEX_ARB 0x202C
    typedef BOOL(APIENTRYP PFNWGLGETPIXELFORMATATTRIBIVARBPROC)(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int* piAttributes, int* piValues);
    typedef BOOL(APIENTRYP PFNWGLGETPIXELFORMATATTRIBFVARBPROC)(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int* piAttributes, FLOAT* pfValues);
    typedef BOOL(APIENTRYP PFNWGLCHOOSEPIXELFORMATARBPROC)(HDC hdc, const int* piAttribIList, const FLOAT* pfAttribFList, UINT nMaxFormats, int* piFormats, UINT* nNumFormats);
#endif /* WGL_ARB_pixel_format */

#ifndef WGL_ARB_pixel_format_float
#define WGL_ARB_pixel_format_float 1
#define WGL_TYPE_RGBA_FLOAT_ARB 0x21A0
#endif /* WGL_ARB_pixel_format_float */

#ifndef WGL_ARB_render_texture
#define WGL_ARB_render_texture 1
#define WGL_BIND_TO_TEXTURE_RGB_ARB 0x2070
#define WGL_BIND_TO_TEXTURE_RGBA_ARB 0x2071
#define WGL_TEXTURE_FORMAT_ARB 0x2072
#define WGL_TEXTURE_TARGET_ARB 0x2073
#define WGL_MIPMAP_TEXTURE_ARB 0x2074
#define WGL_TEXTURE_RGB_ARB 0x2075
#define WGL_TEXTURE_RGBA_ARB 0x2076
#define WGL_NO_TEXTURE_ARB 0x2077
#define WGL_TEXTURE_CUBE_MAP_ARB 0x2078
#define WGL_TEXTURE_1D_ARB 0x2079
#define WGL_TEXTURE_2D_ARB 0x207A
#define WGL_MIPMAP_LEVEL_ARB 0x207B
#define WGL_CUBE_MAP_FACE_ARB 0x207C
#define WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x207D
#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x207E
#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x207F
#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x2080
#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x2081
#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x2082
#define WGL_FRONT_LEFT_ARB 0x2083
#define WGL_FRONT_RIGHT_ARB 0x2084
#define WGL_BACK_LEFT_ARB 0x2085
#define WGL_BACK_RIGHT_ARB 0x2086
#define WGL_AUX0_ARB 0x2087
#define WGL_AUX1_ARB 0x2088
#define WGL_AUX2_ARB 0x2089
#define WGL_AUX3_ARB 0x208A
#define WGL_AUX4_ARB 0x208B
#define WGL_AUX5_ARB 0x208C
#define WGL_AUX6_ARB 0x208D
#define WGL_AUX7_ARB 0x208E
#define WGL_AUX8_ARB 0x208F
#define WGL_AUX9_ARB 0x2090
    typedef BOOL(APIENTRYP PFNWGLBINDTEXIMAGEARBPROC)(HPBUFFERARB hPbuffer, int iBuffer);
    typedef BOOL(APIENTRYP PFNWGLRELEASETEXIMAGEARBPROC)(HPBUFFERARB hPbuffer, int iBuffer);
    typedef BOOL(APIENTRYP PFNWGLSETPBUFFERATTRIBARBPROC)(HPBUFFERARB hPbuffer, const int* piAttribList);
#endif /* WGL_ARB_render_texture */

#ifndef WGL_ARB_robustness_application_isolation
#define WGL_ARB_robustness_application_isolation 1
#define WGL_CONTEXT_RESET_ISOLATION_BIT_ARB 0x00000008
#endif /* WGL_ARB_robustness_application_isolation */

#ifndef WGL_ARB_robustness_share_group_isolation
#define WGL_ARB_robustness_share_group_isolation 1
#define WGL_CONTEXT_RESET_ISOLATION_BIT_ARB 0x00000008
#endif /* WGL_ARB_robustness_share_group_isolation */

#ifndef WGL_ATI_pixel_format_float
#define WGL_ATI_pixel_format_float 1
#define WGL_TYPE_RGBA_FLOAT_ATI 0x21A0
#endif /* WGL_ATI_pixel_format_float */

#ifndef WGL_ATI_render_texture_rectangle
#define WGL_ATI_render_texture_rectangle 1
#define WGL_TEXTURE_RECTANGLE_ATI 0x21A5
#endif /* WGL_ATI_render_texture_rectangle */

#ifndef WGL_EXT_colorspace
#define WGL_EXT_colorspace 1
#define WGL_COLORSPACE_EXT 0x309D
#define WGL_COLORSPACE_SRGB_EXT 0x3089
#define WGL_COLORSPACE_LINEAR_EXT 0x308A
#endif /* WGL_EXT_colorspace */

#ifndef WGL_EXT_create_context_es_profile
#define WGL_EXT_create_context_es_profile 1
#define WGL_CONTEXT_ES_PROFILE_BIT_EXT 0x00000004
#endif /* WGL_EXT_create_context_es_profile */

#ifndef WGL_EXT_create_context_es2_profile
#define WGL_EXT_create_context_es2_profile 1
#define WGL_CONTEXT_ES2_PROFILE_BIT_EXT 0x00000004
#endif /* WGL_EXT_create_context_es2_profile */

#ifndef WGL_EXT_depth_float
#define WGL_EXT_depth_float 1
#define WGL_DEPTH_FLOAT_EXT 0x2040
#endif /* WGL_EXT_depth_float */

#ifndef WGL_EXT_display_color_table
#define WGL_EXT_display_color_table 1
    typedef GLboolean(APIENTRYP PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC)(GLushort id);
    typedef GLboolean(APIENTRYP PFNWGLLOADDISPLAYCOLORTABLEEXTPROC)(const GLushort* table, GLuint length);
    typedef GLboolean(APIENTRYP PFNWGLBINDDISPLAYCOLORTABLEEXTPROC)(GLushort id);
    typedef VOID(APIENTRYP PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC)(GLushort id);
#endif /* WGL_EXT_display_color_table */

#ifndef WGL_EXT_extensions_string
#define WGL_EXT_extensions_string 1
    typedef const char* (APIENTRYP PFNWGLGETEXTENSIONSSTRINGEXTPROC)(void);
#endif /* WGL_EXT_extensions_string */

#ifndef WGL_EXT_framebuffer_sRGB
#define WGL_EXT_framebuffer_sRGB 1
#define WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20A9
#endif /* WGL_EXT_framebuffer_sRGB */

#ifndef WGL_EXT_make_current_read
#define WGL_EXT_make_current_read 1
#define ERROR_INVALID_PIXEL_TYPE_EXT 0x2043
    typedef BOOL(APIENTRYP PFNWGLMAKECONTEXTCURRENTEXTPROC)(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
    typedef HDC(APIENTRYP PFNWGLGETCURRENTREADDCEXTPROC)(void);
#endif /* WGL_EXT_make_current_read */

#ifndef WGL_EXT_multisample
#define WGL_EXT_multisample 1
#define WGL_SAMPLE_BUFFERS_EXT 0x2041
#define WGL_SAMPLES_EXT 0x2042
#endif /* WGL_EXT_multisample */

#ifndef WGL_EXT_pbuffer
#define WGL_EXT_pbuffer 1
    DECLARE_HANDLE(HPBUFFEREXT);
#define WGL_DRAW_TO_PBUFFER_EXT 0x202D
#define WGL_MAX_PBUFFER_PIXELS_EXT 0x202E
#define WGL_MAX_PBUFFER_WIDTH_EXT 0x202F
#define WGL_MAX_PBUFFER_HEIGHT_EXT 0x2030
#define WGL_OPTIMAL_PBUFFER_WIDTH_EXT 0x2031
#define WGL_OPTIMAL_PBUFFER_HEIGHT_EXT 0x2032
#define WGL_PBUFFER_LARGEST_EXT 0x2033
#define WGL_PBUFFER_WIDTH_EXT 0x2034
#define WGL_PBUFFER_HEIGHT_EXT 0x2035
    typedef HPBUFFEREXT(APIENTRYP PFNWGLCREATEPBUFFEREXTPROC)(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int* piAttribList);
    typedef HDC(APIENTRYP PFNWGLGETPBUFFERDCEXTPROC)(HPBUFFEREXT hPbuffer);
    typedef int (APIENTRYP PFNWGLRELEASEPBUFFERDCEXTPROC)(HPBUFFEREXT hPbuffer, HDC hDC);
    typedef BOOL(APIENTRYP PFNWGLDESTROYPBUFFEREXTPROC)(HPBUFFEREXT hPbuffer);
    typedef BOOL(APIENTRYP PFNWGLQUERYPBUFFEREXTPROC)(HPBUFFEREXT hPbuffer, int iAttribute, int* piValue);
#endif /* WGL_EXT_pbuffer */

#ifndef WGL_EXT_pixel_format
#define WGL_EXT_pixel_format 1
#define WGL_NUMBER_PIXEL_FORMATS_EXT 0x2000
#define WGL_DRAW_TO_WINDOW_EXT 0x2001
#define WGL_DRAW_TO_BITMAP_EXT 0x2002
#define WGL_ACCELERATION_EXT 0x2003
#define WGL_NEED_PALETTE_EXT 0x2004
#define WGL_NEED_SYSTEM_PALETTE_EXT 0x2005
#define WGL_SWAP_LAYER_BUFFERS_EXT 0x2006
#define WGL_SWAP_METHOD_EXT 0x2007
#define WGL_NUMBER_OVERLAYS_EXT 0x2008
#define WGL_NUMBER_UNDERLAYS_EXT 0x2009
#define WGL_TRANSPARENT_EXT 0x200A
#define WGL_TRANSPARENT_VALUE_EXT 0x200B
#define WGL_SHARE_DEPTH_EXT 0x200C
#define WGL_SHARE_STENCIL_EXT 0x200D
#define WGL_SHARE_ACCUM_EXT 0x200E
#define WGL_SUPPORT_GDI_EXT 0x200F
#define WGL_SUPPORT_OPENGL_EXT 0x2010
#define WGL_DOUBLE_BUFFER_EXT 0x2011
#define WGL_STEREO_EXT 0x2012
#define WGL_PIXEL_TYPE_EXT 0x2013
#define WGL_COLOR_BITS_EXT 0x2014
#define WGL_RED_BITS_EXT 0x2015
#define WGL_RED_SHIFT_EXT 0x2016
#define WGL_GREEN_BITS_EXT 0x2017
#define WGL_GREEN_SHIFT_EXT 0x2018
#define WGL_BLUE_BITS_EXT 0x2019
#define WGL_BLUE_SHIFT_EXT 0x201A
#define WGL_ALPHA_BITS_EXT 0x201B
#define WGL_ALPHA_SHIFT_EXT 0x201C
#define WGL_ACCUM_BITS_EXT 0x201D
#define WGL_ACCUM_RED_BITS_EXT 0x201E
#define WGL_ACCUM_GREEN_BITS_EXT 0x201F
#define WGL_ACCUM_BLUE_BITS_EXT 0x2020
#define WGL_ACCUM_ALPHA_BITS_EXT 0x2021
#define WGL_DEPTH_BITS_EXT 0x2022
#define WGL_STENCIL_BITS_EXT 0x2023
#define WGL_AUX_BUFFERS_EXT 0x2024
#define WGL_NO_ACCELERATION_EXT 0x2025
#define WGL_GENERIC_ACCELERATION_EXT 0x2026
#define WGL_FULL_ACCELERATION_EXT 0x2027
#define WGL_SWAP_EXCHANGE_EXT 0x2028
#define WGL_SWAP_COPY_EXT 0x2029
#define WGL_SWAP_UNDEFINED_EXT 0x202A
#define WGL_TYPE_RGBA_EXT 0x202B
#define WGL_TYPE_COLORINDEX_EXT 0x202C
    typedef BOOL(APIENTRYP PFNWGLGETPIXELFORMATATTRIBIVEXTPROC)(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int* piAttributes, int* piValues);
    typedef BOOL(APIENTRYP PFNWGLGETPIXELFORMATATTRIBFVEXTPROC)(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int* piAttributes, FLOAT* pfValues);
    typedef BOOL(APIENTRYP PFNWGLCHOOSEPIXELFORMATEXTPROC)(HDC hdc, const int* piAttribIList, const FLOAT* pfAttribFList, UINT nMaxFormats, int* piFormats, UINT* nNumFormats);
#endif /* WGL_EXT_pixel_format */

#ifndef WGL_EXT_pixel_format_packed_float
#define WGL_EXT_pixel_format_packed_float 1
#define WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT 0x20A8
#endif /* WGL_EXT_pixel_format_packed_float */

#ifndef WGL_EXT_swap_control
#define WGL_EXT_swap_control 1
    typedef BOOL(APIENTRYP PFNWGLSWAPINTERVALEXTPROC)(int interval);
    typedef int (APIENTRYP PFNWGLGETSWAPINTERVALEXTPROC)(void);
#endif /* WGL_EXT_swap_control */

#ifndef WGL_EXT_swap_control_tear
#define WGL_EXT_swap_control_tear 1
#endif /* WGL_EXT_swap_control_tear */

#ifndef WGL_I3D_digital_video_control
#define WGL_I3D_digital_video_control 1
#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D 0x2050
#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D 0x2051
#define WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D 0x2052
#define WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D 0x2053
    typedef BOOL(APIENTRYP PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC)(HDC hDC, int iAttribute, int* piValue);
    typedef BOOL(APIENTRYP PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC)(HDC hDC, int iAttribute, const int* piValue);
#endif /* WGL_I3D_digital_video_control */

#ifndef WGL_I3D_gamma
#define WGL_I3D_gamma 1
#define WGL_GAMMA_TABLE_SIZE_I3D 0x204E
#define WGL_GAMMA_EXCLUDE_DESKTOP_I3D 0x204F
    typedef BOOL(APIENTRYP PFNWGLGETGAMMATABLEPARAMETERSI3DPROC)(HDC hDC, int iAttribute, int* piValue);
    typedef BOOL(APIENTRYP PFNWGLSETGAMMATABLEPARAMETERSI3DPROC)(HDC hDC, int iAttribute, const int* piValue);
    typedef BOOL(APIENTRYP PFNWGLGETGAMMATABLEI3DPROC)(HDC hDC, int iEntries, USHORT* puRed, USHORT* puGreen, USHORT* puBlue);
    typedef BOOL(APIENTRYP PFNWGLSETGAMMATABLEI3DPROC)(HDC hDC, int iEntries, const USHORT* puRed, const USHORT* puGreen, const USHORT* puBlue);
#endif /* WGL_I3D_gamma */

#ifndef WGL_I3D_genlock
#define WGL_I3D_genlock 1
#define WGL_GENLOCK_SOURCE_MULTIVIEW_I3D 0x2044
#define WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D 0x2045
#define WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D 0x2046
#define WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D 0x2047
#define WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D 0x2048
#define WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D 0x2049
#define WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D 0x204A
#define WGL_GENLOCK_SOURCE_EDGE_RISING_I3D 0x204B
#define WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D 0x204C
    typedef BOOL(APIENTRYP PFNWGLENABLEGENLOCKI3DPROC)(HDC hDC);
    typedef BOOL(APIENTRYP PFNWGLDISABLEGENLOCKI3DPROC)(HDC hDC);
    typedef BOOL(APIENTRYP PFNWGLISENABLEDGENLOCKI3DPROC)(HDC hDC, BOOL* pFlag);
    typedef BOOL(APIENTRYP PFNWGLGENLOCKSOURCEI3DPROC)(HDC hDC, UINT uSource);
    typedef BOOL(APIENTRYP PFNWGLGETGENLOCKSOURCEI3DPROC)(HDC hDC, UINT* uSource);
    typedef BOOL(APIENTRYP PFNWGLGENLOCKSOURCEEDGEI3DPROC)(HDC hDC, UINT uEdge);
    typedef BOOL(APIENTRYP PFNWGLGETGENLOCKSOURCEEDGEI3DPROC)(HDC hDC, UINT* uEdge);
    typedef BOOL(APIENTRYP PFNWGLGENLOCKSAMPLERATEI3DPROC)(HDC hDC, UINT uRate);
    typedef BOOL(APIENTRYP PFNWGLGETGENLOCKSAMPLERATEI3DPROC)(HDC hDC, UINT* uRate);
    typedef BOOL(APIENTRYP PFNWGLGENLOCKSOURCEDELAYI3DPROC)(HDC hDC, UINT uDelay);
    typedef BOOL(APIENTRYP PFNWGLGETGENLOCKSOURCEDELAYI3DPROC)(HDC hDC, UINT* uDelay);
    typedef BOOL(APIENTRYP PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC)(HDC hDC, UINT* uMaxLineDelay, UINT* uMaxPixelDelay);
#endif /* WGL_I3D_genlock */

#ifndef WGL_I3D_image_buffer
#define WGL_I3D_image_buffer 1
#define WGL_IMAGE_BUFFER_MIN_ACCESS_I3D 0x00000001
#define WGL_IMAGE_BUFFER_LOCK_I3D 0x00000002
    typedef LPVOID(APIENTRYP PFNWGLCREATEIMAGEBUFFERI3DPROC)(HDC hDC, DWORD dwSize, UINT uFlags);
    typedef BOOL(APIENTRYP PFNWGLDESTROYIMAGEBUFFERI3DPROC)(HDC hDC, LPVOID pAddress);
    typedef BOOL(APIENTRYP PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC)(HDC hDC, const HANDLE* pEvent, const LPVOID* pAddress, const DWORD* pSize, UINT count);
    typedef BOOL(APIENTRYP PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC)(HDC hDC, const LPVOID* pAddress, UINT count);
#endif /* WGL_I3D_image_buffer */

#ifndef WGL_I3D_swap_frame_lock
#define WGL_I3D_swap_frame_lock 1
    typedef BOOL(APIENTRYP PFNWGLENABLEFRAMELOCKI3DPROC)(void);
    typedef BOOL(APIENTRYP PFNWGLDISABLEFRAMELOCKI3DPROC)(void);
    typedef BOOL(APIENTRYP PFNWGLISENABLEDFRAMELOCKI3DPROC)(BOOL* pFlag);
    typedef BOOL(APIENTRYP PFNWGLQUERYFRAMELOCKMASTERI3DPROC)(BOOL* pFlag);
#endif /* WGL_I3D_swap_frame_lock */

#ifndef WGL_I3D_swap_frame_usage
#define WGL_I3D_swap_frame_usage 1
    typedef BOOL(APIENTRYP PFNWGLGETFRAMEUSAGEI3DPROC)(float* pUsage);
    typedef BOOL(APIENTRYP PFNWGLBEGINFRAMETRACKINGI3DPROC)(void);
    typedef BOOL(APIENTRYP PFNWGLENDFRAMETRACKINGI3DPROC)(void);
    typedef BOOL(APIENTRYP PFNWGLQUERYFRAMETRACKINGI3DPROC)(DWORD* pFrameCount, DWORD* pMissedFrames, float* pLastMissedUsage);
#endif /* WGL_I3D_swap_frame_usage */

#ifndef WGL_NV_copy_image
#define WGL_NV_copy_image 1
    typedef BOOL(APIENTRYP PFNWGLCOPYIMAGESUBDATANVPROC)(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
#endif /* WGL_NV_copy_image */

#ifndef WGL_NV_delay_before_swap
#define WGL_NV_delay_before_swap 1
    typedef BOOL(APIENTRYP PFNWGLDELAYBEFORESWAPNVPROC)(HDC hDC, GLfloat seconds);
#endif /* WGL_NV_delay_before_swap */

#ifndef WGL_NV_DX_interop
#define WGL_NV_DX_interop 1
#define WGL_ACCESS_READ_ONLY_NV 0x00000000
#define WGL_ACCESS_READ_WRITE_NV 0x00000001
#define WGL_ACCESS_WRITE_DISCARD_NV 0x00000002
    typedef BOOL(APIENTRYP PFNWGLDXSETRESOURCESHAREHANDLENVPROC)(void* dxObject, HANDLE shareHandle);
    typedef HANDLE(APIENTRYP PFNWGLDXOPENDEVICENVPROC)(void* dxDevice);
    typedef BOOL(APIENTRYP PFNWGLDXCLOSEDEVICENVPROC)(HANDLE hDevice);
    typedef HANDLE(APIENTRYP PFNWGLDXREGISTEROBJECTNVPROC)(HANDLE hDevice, void* dxObject, GLuint name, GLenum type, GLenum access);
    typedef BOOL(APIENTRYP PFNWGLDXUNREGISTEROBJECTNVPROC)(HANDLE hDevice, HANDLE hObject);
    typedef BOOL(APIENTRYP PFNWGLDXOBJECTACCESSNVPROC)(HANDLE hObject, GLenum access);
    typedef BOOL(APIENTRYP PFNWGLDXLOCKOBJECTSNVPROC)(HANDLE hDevice, GLint count, HANDLE* hObjects);
    typedef BOOL(APIENTRYP PFNWGLDXUNLOCKOBJECTSNVPROC)(HANDLE hDevice, GLint count, HANDLE* hObjects);
#endif /* WGL_NV_DX_interop */

#ifndef WGL_NV_DX_interop2
#define WGL_NV_DX_interop2 1
#endif /* WGL_NV_DX_interop2 */

#ifndef WGL_NV_float_buffer
#define WGL_NV_float_buffer 1
#define WGL_FLOAT_COMPONENTS_NV 0x20B0
#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV 0x20B1
#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV 0x20B2
#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV 0x20B3
#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV 0x20B4
#define WGL_TEXTURE_FLOAT_R_NV 0x20B5
#define WGL_TEXTURE_FLOAT_RG_NV 0x20B6
#define WGL_TEXTURE_FLOAT_RGB_NV 0x20B7
#define WGL_TEXTURE_FLOAT_RGBA_NV 0x20B8
#endif /* WGL_NV_float_buffer */

#ifndef WGL_NV_gpu_affinity
#define WGL_NV_gpu_affinity 1
    DECLARE_HANDLE(HGPUNV);
    typedef struct _GPU_DEVICE* PGPU_DEVICE;
#define ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV 0x20D0
#define ERROR_MISSING_AFFINITY_MASK_NV 0x20D1
    typedef BOOL(APIENTRYP PFNWGLENUMGPUSNVPROC)(UINT iGpuIndex, HGPUNV* phGpu);
    typedef BOOL(APIENTRYP PFNWGLENUMGPUDEVICESNVPROC)(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
    typedef HDC(APIENTRYP PFNWGLCREATEAFFINITYDCNVPROC)(const HGPUNV* phGpuList);
    typedef BOOL(APIENTRYP PFNWGLENUMGPUSFROMAFFINITYDCNVPROC)(HDC hAffinityDC, UINT iGpuIndex, HGPUNV* hGpu);
    typedef BOOL(APIENTRYP PFNWGLDELETEDCNVPROC)(HDC hdc);
#endif /* WGL_NV_gpu_affinity */

#ifndef WGL_NV_multisample_coverage
#define WGL_NV_multisample_coverage 1
#define WGL_COVERAGE_SAMPLES_NV 0x2042
#define WGL_COLOR_SAMPLES_NV 0x20B9
#endif /* WGL_NV_multisample_coverage */

#ifndef WGL_NV_present_video
#define WGL_NV_present_video 1
    DECLARE_HANDLE(HVIDEOOUTPUTDEVICENV);
#define WGL_NUM_VIDEO_SLOTS_NV 0x20F0
    typedef int (APIENTRYP PFNWGLENUMERATEVIDEODEVICESNVPROC)(HDC hDc, HVIDEOOUTPUTDEVICENV* phDeviceList);
    typedef BOOL(APIENTRYP PFNWGLBINDVIDEODEVICENVPROC)(HDC hDc, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int* piAttribList);
    typedef BOOL(APIENTRYP PFNWGLQUERYCURRENTCONTEXTNVPROC)(int iAttribute, int* piValue);
#endif /* WGL_NV_present_video */

#ifndef WGL_NV_render_depth_texture
#define WGL_NV_render_depth_texture 1
#define WGL_BIND_TO_TEXTURE_DEPTH_NV 0x20A3
#define WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV 0x20A4
#define WGL_DEPTH_TEXTURE_FORMAT_NV 0x20A5
#define WGL_TEXTURE_DEPTH_COMPONENT_NV 0x20A6
#define WGL_DEPTH_COMPONENT_NV 0x20A7
#endif /* WGL_NV_render_depth_texture */

#ifndef WGL_NV_render_texture_rectangle
#define WGL_NV_render_texture_rectangle 1
#define WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV 0x20A0
#define WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV 0x20A1
#define WGL_TEXTURE_RECTANGLE_NV 0x20A2
#endif /* WGL_NV_render_texture_rectangle */

#ifndef WGL_NV_swap_group
#define WGL_NV_swap_group 1
    typedef BOOL(APIENTRYP PFNWGLJOINSWAPGROUPNVPROC)(HDC hDC, GLuint group);
    typedef BOOL(APIENTRYP PFNWGLBINDSWAPBARRIERNVPROC)(GLuint group, GLuint barrier);
    typedef BOOL(APIENTRYP PFNWGLQUERYSWAPGROUPNVPROC)(HDC hDC, GLuint* group, GLuint* barrier);
    typedef BOOL(APIENTRYP PFNWGLQUERYMAXSWAPGROUPSNVPROC)(HDC hDC, GLuint* maxGroups, GLuint* maxBarriers);
    typedef BOOL(APIENTRYP PFNWGLQUERYFRAMECOUNTNVPROC)(HDC hDC, GLuint* count);
    typedef BOOL(APIENTRYP PFNWGLRESETFRAMECOUNTNVPROC)(HDC hDC);
#endif /* WGL_NV_swap_group */

#ifndef WGL_NV_video_capture
#define WGL_NV_video_capture 1
    DECLARE_HANDLE(HVIDEOINPUTDEVICENV);
#define WGL_UNIQUE_ID_NV 0x20CE
#define WGL_NUM_VIDEO_CAPTURE_SLOTS_NV 0x20CF
    typedef BOOL(APIENTRYP PFNWGLBINDVIDEOCAPTUREDEVICENVPROC)(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);
    typedef UINT(APIENTRYP PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC)(HDC hDc, HVIDEOINPUTDEVICENV* phDeviceList);
    typedef BOOL(APIENTRYP PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC)(HDC hDc, HVIDEOINPUTDEVICENV hDevice);
    typedef BOOL(APIENTRYP PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC)(HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int* piValue);
    typedef BOOL(APIENTRYP PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC)(HDC hDc, HVIDEOINPUTDEVICENV hDevice);
#endif /* WGL_NV_video_capture */

#ifndef WGL_NV_video_output
#define WGL_NV_video_output 1
    DECLARE_HANDLE(HPVIDEODEV);
#define WGL_BIND_TO_VIDEO_RGB_NV 0x20C0
#define WGL_BIND_TO_VIDEO_RGBA_NV 0x20C1
#define WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV 0x20C2
#define WGL_VIDEO_OUT_COLOR_NV 0x20C3
#define WGL_VIDEO_OUT_ALPHA_NV 0x20C4
#define WGL_VIDEO_OUT_DEPTH_NV 0x20C5
#define WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV 0x20C6
#define WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV 0x20C7
#define WGL_VIDEO_OUT_FRAME 0x20C8
#define WGL_VIDEO_OUT_FIELD_1 0x20C9
#define WGL_VIDEO_OUT_FIELD_2 0x20CA
#define WGL_VIDEO_OUT_STACKED_FIELDS_1_2 0x20CB
#define WGL_VIDEO_OUT_STACKED_FIELDS_2_1 0x20CC
    typedef BOOL(APIENTRYP PFNWGLGETVIDEODEVICENVPROC)(HDC hDC, int numDevices, HPVIDEODEV* hVideoDevice);
    typedef BOOL(APIENTRYP PFNWGLRELEASEVIDEODEVICENVPROC)(HPVIDEODEV hVideoDevice);
    typedef BOOL(APIENTRYP PFNWGLBINDVIDEOIMAGENVPROC)(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);
    typedef BOOL(APIENTRYP PFNWGLRELEASEVIDEOIMAGENVPROC)(HPBUFFERARB hPbuffer, int iVideoBuffer);
    typedef BOOL(APIENTRYP PFNWGLSENDPBUFFERTOVIDEONVPROC)(HPBUFFERARB hPbuffer, int iBufferType, unsigned long* pulCounterPbuffer, BOOL bBlock);
    typedef BOOL(APIENTRYP PFNWGLGETVIDEOINFONVPROC)(HPVIDEODEV hpVideoDevice, unsigned long* pulCounterOutputPbuffer, unsigned long* pulCounterOutputVideo);
#endif /* WGL_NV_video_output */

#ifndef WGL_NV_vertex_array_range
#define WGL_NV_vertex_array_range 1
    typedef void* (APIENTRYP PFNWGLALLOCATEMEMORYNVPROC)(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority);
    typedef void (APIENTRYP PFNWGLFREEMEMORYNVPROC)(void* pointer);
#endif /* WGL_NV_vertex_array_range */

#ifndef WGL_OML_sync_control
#define WGL_OML_sync_control 1
    typedef BOOL(APIENTRYP PFNWGLGETSYNCVALUESOMLPROC)(HDC hdc, INT64* ust, INT64* msc, INT64* sbc);
    typedef BOOL(APIENTRYP PFNWGLGETMSCRATEOMLPROC)(HDC hdc, INT32* numerator, INT32* denominator);
    typedef INT64(APIENTRYP PFNWGLSWAPBUFFERSMSCOMLPROC)(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder);
    typedef INT64(APIENTRYP PFNWGLSWAPLAYERBUFFERSMSCOMLPROC)(HDC hdc, INT fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);
    typedef BOOL(APIENTRYP PFNWGLWAITFORMSCOMLPROC)(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64* ust, INT64* msc, INT64* sbc);
    typedef BOOL(APIENTRYP PFNWGLWAITFORSBCOMLPROC)(HDC hdc, INT64 target_sbc, INT64* ust, INT64* msc, INT64* sbc);
#endif /* WGL_OML_sync_control */

#ifndef WGL_NV_multigpu_context
#define WGL_NV_multigpu_context 1
#define WGL_CONTEXT_MULTIGPU_ATTRIB_NV 0x20AA
#define WGL_CONTEXT_MULTIGPU_ATTRIB_SINGLE_NV 0x20AB
#define WGL_CONTEXT_MULTIGPU_ATTRIB_AFR_NV 0x20AC
#define WGL_CONTEXT_MULTIGPU_ATTRIB_MULTICAST_NV 0x20AD
#define WGL_CONTEXT_MULTIGPU_ATTRIB_MULTI_DISPLAY_MULTICAST_NV 0x20AE
#endif /* WGL_NV_multigpu_context */
#endif /* GLBIND_WGL */

#if defined(GLBIND_GLX)
#ifndef GLX_3DFX_multisample
#define GLX_3DFX_multisample 1
#define GLX_SAMPLE_BUFFERS_3DFX 0x8050
#define GLX_SAMPLES_3DFX 0x8051
#endif /* GLX_3DFX_multisample */

#ifndef GLX_AMD_gpu_association
#define GLX_AMD_gpu_association 1
#define GLX_GPU_VENDOR_AMD 0x1F00
#define GLX_GPU_RENDERER_STRING_AMD 0x1F01
#define GLX_GPU_OPENGL_VERSION_STRING_AMD 0x1F02
#define GLX_GPU_FASTEST_TARGET_GPUS_AMD 0x21A2
#define GLX_GPU_RAM_AMD 0x21A3
#define GLX_GPU_CLOCK_AMD 0x21A4
#define GLX_GPU_NUM_PIPES_AMD 0x21A5
#define GLX_GPU_NUM_SIMD_AMD 0x21A6
#define GLX_GPU_NUM_RB_AMD 0x21A7
#define GLX_GPU_NUM_SPI_AMD 0x21A8
    typedef unsigned int (APIENTRYP PFNGLXGETGPUIDSAMDPROC)(unsigned int maxCount, unsigned int* ids);
    typedef int (APIENTRYP PFNGLXGETGPUINFOAMDPROC)(unsigned int id, int property, GLenum dataType, unsigned int size, void* data);
    typedef unsigned int (APIENTRYP PFNGLXGETCONTEXTGPUIDAMDPROC)(GLXContext ctx);
    typedef GLXContext(APIENTRYP PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC)(unsigned int id, GLXContext share_list);
    typedef GLXContext(APIENTRYP PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)(unsigned int id, GLXContext share_context, const int* attribList);
    typedef Bool(APIENTRYP PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC)(GLXContext ctx);
    typedef Bool(APIENTRYP PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)(GLXContext ctx);
    typedef GLXContext(APIENTRYP PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC)(void);
    typedef void (APIENTRYP PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC)(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
#endif /* GLX_AMD_gpu_association */

#ifndef GLX_ARB_context_flush_control
#define GLX_ARB_context_flush_control 1
#define GLX_CONTEXT_RELEASE_BEHAVIOR_ARB 0x2097
#define GLX_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB 0
#define GLX_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB 0x2098
#endif /* GLX_ARB_context_flush_control */

#ifndef GLX_ARB_create_context
#define GLX_ARB_create_context 1
#define GLX_CONTEXT_DEBUG_BIT_ARB 0x00000001
#define GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x00000002
#define GLX_CONTEXT_MAJOR_VERSION_ARB 0x2091
#define GLX_CONTEXT_MINOR_VERSION_ARB 0x2092
#define GLX_CONTEXT_FLAGS_ARB 0x2094
    typedef GLXContext(APIENTRYP PFNGLXCREATECONTEXTATTRIBSARBPROC)(Display* dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int* attrib_list);
#endif /* GLX_ARB_create_context */

#ifndef GLX_ARB_create_context_no_error
#define GLX_ARB_create_context_no_error 1
#define GLX_CONTEXT_OPENGL_NO_ERROR_ARB 0x31B3
#endif /* GLX_ARB_create_context_no_error */

#ifndef GLX_ARB_create_context_profile
#define GLX_ARB_create_context_profile 1
#define GLX_CONTEXT_CORE_PROFILE_BIT_ARB 0x00000001
#define GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
#define GLX_CONTEXT_PROFILE_MASK_ARB 0x9126
#endif /* GLX_ARB_create_context_profile */

#ifndef GLX_ARB_create_context_robustness
#define GLX_ARB_create_context_robustness 1
#define GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GLX_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GLX_NO_RESET_NOTIFICATION_ARB 0x8261
#endif /* GLX_ARB_create_context_robustness */

#ifndef GLX_ARB_fbconfig_float
#define GLX_ARB_fbconfig_float 1
#define GLX_RGBA_FLOAT_TYPE_ARB 0x20B9
#define GLX_RGBA_FLOAT_BIT_ARB 0x00000004
#endif /* GLX_ARB_fbconfig_float */

#ifndef GLX_ARB_framebuffer_sRGB
#define GLX_ARB_framebuffer_sRGB 1
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB 0x20B2
#endif /* GLX_ARB_framebuffer_sRGB */

#ifndef GLX_ARB_get_proc_address
#define GLX_ARB_get_proc_address 1
    typedef __GLXextFuncPtr(APIENTRYP PFNGLXGETPROCADDRESSARBPROC)(const GLubyte* procName);
#endif /* GLX_ARB_get_proc_address */

#ifndef GLX_ARB_multisample
#define GLX_ARB_multisample 1
#define GLX_SAMPLE_BUFFERS_ARB 100000
#define GLX_SAMPLES_ARB 100001
#endif /* GLX_ARB_multisample */

#ifndef GLX_ARB_robustness_application_isolation
#define GLX_ARB_robustness_application_isolation 1
#define GLX_CONTEXT_RESET_ISOLATION_BIT_ARB 0x00000008
#endif /* GLX_ARB_robustness_application_isolation */

#ifndef GLX_ARB_robustness_share_group_isolation
#define GLX_ARB_robustness_share_group_isolation 1
#define GLX_CONTEXT_RESET_ISOLATION_BIT_ARB 0x00000008
#endif /* GLX_ARB_robustness_share_group_isolation */

#ifndef GLX_ARB_vertex_buffer_object
#define GLX_ARB_vertex_buffer_object 1
#define GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB 0x2095
#endif /* GLX_ARB_vertex_buffer_object */

#ifndef GLX_EXT_buffer_age
#define GLX_EXT_buffer_age 1
#define GLX_BACK_BUFFER_AGE_EXT 0x20F4
#endif /* GLX_EXT_buffer_age */

#ifndef GLX_EXT_context_priority
#define GLX_EXT_context_priority 1
#define GLX_CONTEXT_PRIORITY_LEVEL_EXT 0x3100
#define GLX_CONTEXT_PRIORITY_HIGH_EXT 0x3101
#define GLX_CONTEXT_PRIORITY_MEDIUM_EXT 0x3102
#define GLX_CONTEXT_PRIORITY_LOW_EXT 0x3103
#endif /* GLX_EXT_context_priority */

#ifndef GLX_EXT_create_context_es_profile
#define GLX_EXT_create_context_es_profile 1
#define GLX_CONTEXT_ES_PROFILE_BIT_EXT 0x00000004
#endif /* GLX_EXT_create_context_es_profile */

#ifndef GLX_EXT_create_context_es2_profile
#define GLX_EXT_create_context_es2_profile 1
#define GLX_CONTEXT_ES2_PROFILE_BIT_EXT 0x00000004
#endif /* GLX_EXT_create_context_es2_profile */

#ifndef GLX_EXT_fbconfig_packed_float
#define GLX_EXT_fbconfig_packed_float 1
#define GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT 0x20B1
#define GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT 0x00000008
#endif /* GLX_EXT_fbconfig_packed_float */

#ifndef GLX_EXT_framebuffer_sRGB
#define GLX_EXT_framebuffer_sRGB 1
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20B2
#endif /* GLX_EXT_framebuffer_sRGB */

#ifndef GLX_EXT_import_context
#define GLX_EXT_import_context 1
#define GLX_SHARE_CONTEXT_EXT 0x800A
#define GLX_VISUAL_ID_EXT 0x800B
#define GLX_SCREEN_EXT 0x800C
    typedef Display* (APIENTRYP PFNGLXGETCURRENTDISPLAYEXTPROC)(void);
    typedef int (APIENTRYP PFNGLXQUERYCONTEXTINFOEXTPROC)(Display* dpy, GLXContext context, int attribute, int* value);
    typedef GLXContextID(APIENTRYP PFNGLXGETCONTEXTIDEXTPROC)(const GLXContext context);
    typedef GLXContext(APIENTRYP PFNGLXIMPORTCONTEXTEXTPROC)(Display* dpy, GLXContextID contextID);
    typedef void (APIENTRYP PFNGLXFREECONTEXTEXTPROC)(Display* dpy, GLXContext context);
#endif /* GLX_EXT_import_context */

#ifndef GLX_EXT_libglvnd
#define GLX_EXT_libglvnd 1
#define GLX_VENDOR_NAMES_EXT 0x20F6
#endif /* GLX_EXT_libglvnd */

#ifndef GLX_EXT_no_config_context
#define GLX_EXT_no_config_context 1
#endif /* GLX_EXT_no_config_context */

#ifndef GLX_EXT_stereo_tree
#define GLX_EXT_stereo_tree 1
    typedef struct {
        int type;
        unsigned long serial;
        Bool send_event;
        Display* display;
        int extension;
        int evtype;
        GLXDrawable window;
        Bool stereo_tree;
    } GLXStereoNotifyEventEXT;
#define GLX_STEREO_TREE_EXT 0x20F5
#define GLX_STEREO_NOTIFY_MASK_EXT 0x00000001
#define GLX_STEREO_NOTIFY_EXT 0x00000000
#endif /* GLX_EXT_stereo_tree */

#ifndef GLX_EXT_swap_control
#define GLX_EXT_swap_control 1
#define GLX_SWAP_INTERVAL_EXT 0x20F1
#define GLX_MAX_SWAP_INTERVAL_EXT 0x20F2
    typedef void (APIENTRYP PFNGLXSWAPINTERVALEXTPROC)(Display* dpy, GLXDrawable drawable, int interval);
#endif /* GLX_EXT_swap_control */

#ifndef GLX_EXT_swap_control_tear
#define GLX_EXT_swap_control_tear 1
#define GLX_LATE_SWAPS_TEAR_EXT 0x20F3
#endif /* GLX_EXT_swap_control_tear */

#ifndef GLX_EXT_texture_from_pixmap
#define GLX_EXT_texture_from_pixmap 1
#define GLX_TEXTURE_1D_BIT_EXT 0x00000001
#define GLX_TEXTURE_2D_BIT_EXT 0x00000002
#define GLX_TEXTURE_RECTANGLE_BIT_EXT 0x00000004
#define GLX_BIND_TO_TEXTURE_RGB_EXT 0x20D0
#define GLX_BIND_TO_TEXTURE_RGBA_EXT 0x20D1
#define GLX_BIND_TO_MIPMAP_TEXTURE_EXT 0x20D2
#define GLX_BIND_TO_TEXTURE_TARGETS_EXT 0x20D3
#define GLX_Y_INVERTED_EXT 0x20D4
#define GLX_TEXTURE_FORMAT_EXT 0x20D5
#define GLX_TEXTURE_TARGET_EXT 0x20D6
#define GLX_MIPMAP_TEXTURE_EXT 0x20D7
#define GLX_TEXTURE_FORMAT_NONE_EXT 0x20D8
#define GLX_TEXTURE_FORMAT_RGB_EXT 0x20D9
#define GLX_TEXTURE_FORMAT_RGBA_EXT 0x20DA
#define GLX_TEXTURE_1D_EXT 0x20DB
#define GLX_TEXTURE_2D_EXT 0x20DC
#define GLX_TEXTURE_RECTANGLE_EXT 0x20DD
#define GLX_FRONT_LEFT_EXT 0x20DE
#define GLX_FRONT_RIGHT_EXT 0x20DF
#define GLX_BACK_LEFT_EXT 0x20E0
#define GLX_BACK_RIGHT_EXT 0x20E1
#define GLX_FRONT_EXT 0x20DE
#define GLX_BACK_EXT 0x20E0
#define GLX_AUX0_EXT 0x20E2
#define GLX_AUX1_EXT 0x20E3
#define GLX_AUX2_EXT 0x20E4
#define GLX_AUX3_EXT 0x20E5
#define GLX_AUX4_EXT 0x20E6
#define GLX_AUX5_EXT 0x20E7
#define GLX_AUX6_EXT 0x20E8
#define GLX_AUX7_EXT 0x20E9
#define GLX_AUX8_EXT 0x20EA
#define GLX_AUX9_EXT 0x20EB
    typedef void (APIENTRYP PFNGLXBINDTEXIMAGEEXTPROC)(Display* dpy, GLXDrawable drawable, int buffer, const int* attrib_list);
    typedef void (APIENTRYP PFNGLXRELEASETEXIMAGEEXTPROC)(Display* dpy, GLXDrawable drawable, int buffer);
#endif /* GLX_EXT_texture_from_pixmap */

#ifndef GLX_EXT_visual_info
#define GLX_EXT_visual_info 1
#define GLX_X_VISUAL_TYPE_EXT 0x22
#define GLX_TRANSPARENT_TYPE_EXT 0x23
#define GLX_TRANSPARENT_INDEX_VALUE_EXT 0x24
#define GLX_TRANSPARENT_RED_VALUE_EXT 0x25
#define GLX_TRANSPARENT_GREEN_VALUE_EXT 0x26
#define GLX_TRANSPARENT_BLUE_VALUE_EXT 0x27
#define GLX_TRANSPARENT_ALPHA_VALUE_EXT 0x28
#define GLX_NONE_EXT 0x8000
#define GLX_TRUE_COLOR_EXT 0x8002
#define GLX_DIRECT_COLOR_EXT 0x8003
#define GLX_PSEUDO_COLOR_EXT 0x8004
#define GLX_STATIC_COLOR_EXT 0x8005
#define GLX_GRAY_SCALE_EXT 0x8006
#define GLX_STATIC_GRAY_EXT 0x8007
#define GLX_TRANSPARENT_RGB_EXT 0x8008
#define GLX_TRANSPARENT_INDEX_EXT 0x8009
#endif /* GLX_EXT_visual_info */

#ifndef GLX_EXT_visual_rating
#define GLX_EXT_visual_rating 1
#define GLX_VISUAL_CAVEAT_EXT 0x20
#define GLX_SLOW_VISUAL_EXT 0x8001
#define GLX_NON_CONFORMANT_VISUAL_EXT 0x800D
#define GLX_NONE_EXT 0x8000
#endif /* GLX_EXT_visual_rating */

#ifndef GLX_INTEL_swap_event
#define GLX_INTEL_swap_event 1
#define GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK 0x04000000
#define GLX_EXCHANGE_COMPLETE_INTEL 0x8180
#define GLX_COPY_COMPLETE_INTEL 0x8181
#define GLX_FLIP_COMPLETE_INTEL 0x8182
#endif /* GLX_INTEL_swap_event */

#ifndef GLX_MESA_agp_offset
#define GLX_MESA_agp_offset 1
    typedef unsigned int (APIENTRYP PFNGLXGETAGPOFFSETMESAPROC)(const void* pointer);
#endif /* GLX_MESA_agp_offset */

#ifndef GLX_MESA_copy_sub_buffer
#define GLX_MESA_copy_sub_buffer 1
    typedef void (APIENTRYP PFNGLXCOPYSUBBUFFERMESAPROC)(Display* dpy, GLXDrawable drawable, int x, int y, int width, int height);
#endif /* GLX_MESA_copy_sub_buffer */

#ifndef GLX_MESA_pixmap_colormap
#define GLX_MESA_pixmap_colormap 1
    typedef GLXPixmap(APIENTRYP PFNGLXCREATEGLXPIXMAPMESAPROC)(Display* dpy, XVisualInfo* visual, Pixmap pixmap, Colormap cmap);
#endif /* GLX_MESA_pixmap_colormap */

#ifndef GLX_MESA_query_renderer
#define GLX_MESA_query_renderer 1
#define GLX_RENDERER_VENDOR_ID_MESA 0x8183
#define GLX_RENDERER_DEVICE_ID_MESA 0x8184
#define GLX_RENDERER_VERSION_MESA 0x8185
#define GLX_RENDERER_ACCELERATED_MESA 0x8186
#define GLX_RENDERER_VIDEO_MEMORY_MESA 0x8187
#define GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA 0x8188
#define GLX_RENDERER_PREFERRED_PROFILE_MESA 0x8189
#define GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA 0x818A
#define GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA 0x818B
#define GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA 0x818C
#define GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA 0x818D
    typedef Bool(APIENTRYP PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC)(int attribute, unsigned int* value);
    typedef const char* (APIENTRYP PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC)(int attribute);
    typedef Bool(APIENTRYP PFNGLXQUERYRENDERERINTEGERMESAPROC)(Display* dpy, int screen, int renderer, int attribute, unsigned int* value);
    typedef const char* (APIENTRYP PFNGLXQUERYRENDERERSTRINGMESAPROC)(Display* dpy, int screen, int renderer, int attribute);
#endif /* GLX_MESA_query_renderer */

#ifndef GLX_MESA_release_buffers
#define GLX_MESA_release_buffers 1
    typedef Bool(APIENTRYP PFNGLXRELEASEBUFFERSMESAPROC)(Display* dpy, GLXDrawable drawable);
#endif /* GLX_MESA_release_buffers */

#ifndef GLX_MESA_set_3dfx_mode
#define GLX_MESA_set_3dfx_mode 1
#define GLX_3DFX_WINDOW_MODE_MESA 0x1
#define GLX_3DFX_FULLSCREEN_MODE_MESA 0x2
    typedef GLboolean(APIENTRYP PFNGLXSET3DFXMODEMESAPROC)(GLint mode);
#endif /* GLX_MESA_set_3dfx_mode */

#ifndef GLX_MESA_swap_control
#define GLX_MESA_swap_control 1
    typedef int (APIENTRYP PFNGLXGETSWAPINTERVALMESAPROC)(void);
    typedef int (APIENTRYP PFNGLXSWAPINTERVALMESAPROC)(unsigned int interval);
#endif /* GLX_MESA_swap_control */

#ifndef GLX_NV_copy_buffer
#define GLX_NV_copy_buffer 1
    typedef void (APIENTRYP PFNGLXCOPYBUFFERSUBDATANVPROC)(Display* dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    typedef void (APIENTRYP PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC)(Display* dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
#endif /* GLX_NV_copy_buffer */

#ifndef GLX_NV_copy_image
#define GLX_NV_copy_image 1
    typedef void (APIENTRYP PFNGLXCOPYIMAGESUBDATANVPROC)(Display* dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
#endif /* GLX_NV_copy_image */

#ifndef GLX_NV_delay_before_swap
#define GLX_NV_delay_before_swap 1
    typedef Bool(APIENTRYP PFNGLXDELAYBEFORESWAPNVPROC)(Display* dpy, GLXDrawable drawable, GLfloat seconds);
#endif /* GLX_NV_delay_before_swap */

#ifndef GLX_NV_float_buffer
#define GLX_NV_float_buffer 1
#define GLX_FLOAT_COMPONENTS_NV 0x20B0
#endif /* GLX_NV_float_buffer */

#ifndef GLX_NV_multisample_coverage
#define GLX_NV_multisample_coverage 1
#define GLX_COVERAGE_SAMPLES_NV 100001
#define GLX_COLOR_SAMPLES_NV 0x20B3
#endif /* GLX_NV_multisample_coverage */

#ifndef GLX_NV_present_video
#define GLX_NV_present_video 1
#define GLX_NUM_VIDEO_SLOTS_NV 0x20F0
    typedef unsigned int* (APIENTRYP PFNGLXENUMERATEVIDEODEVICESNVPROC)(Display* dpy, int screen, int* nelements);
    typedef int (APIENTRYP PFNGLXBINDVIDEODEVICENVPROC)(Display* dpy, unsigned int video_slot, unsigned int video_device, const int* attrib_list);
#endif /* GLX_NV_present_video */

#ifndef GLX_NV_robustness_video_memory_purge
#define GLX_NV_robustness_video_memory_purge 1
#define GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV 0x20F7
#endif /* GLX_NV_robustness_video_memory_purge */

#ifndef GLX_NV_swap_group
#define GLX_NV_swap_group 1
    typedef Bool(APIENTRYP PFNGLXJOINSWAPGROUPNVPROC)(Display* dpy, GLXDrawable drawable, GLuint group);
    typedef Bool(APIENTRYP PFNGLXBINDSWAPBARRIERNVPROC)(Display* dpy, GLuint group, GLuint barrier);
    typedef Bool(APIENTRYP PFNGLXQUERYSWAPGROUPNVPROC)(Display* dpy, GLXDrawable drawable, GLuint* group, GLuint* barrier);
    typedef Bool(APIENTRYP PFNGLXQUERYMAXSWAPGROUPSNVPROC)(Display* dpy, int screen, GLuint* maxGroups, GLuint* maxBarriers);
    typedef Bool(APIENTRYP PFNGLXQUERYFRAMECOUNTNVPROC)(Display* dpy, int screen, GLuint* count);
    typedef Bool(APIENTRYP PFNGLXRESETFRAMECOUNTNVPROC)(Display* dpy, int screen);
#endif /* GLX_NV_swap_group */

#ifndef GLX_NV_video_capture
#define GLX_NV_video_capture 1
    typedef XID GLXVideoCaptureDeviceNV;
#define GLX_DEVICE_ID_NV 0x20CD
#define GLX_UNIQUE_ID_NV 0x20CE
#define GLX_NUM_VIDEO_CAPTURE_SLOTS_NV 0x20CF
    typedef int (APIENTRYP PFNGLXBINDVIDEOCAPTUREDEVICENVPROC)(Display* dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
    typedef GLXVideoCaptureDeviceNV* (APIENTRYP PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC)(Display* dpy, int screen, int* nelements);
    typedef void (APIENTRYP PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC)(Display* dpy, GLXVideoCaptureDeviceNV device);
    typedef int (APIENTRYP PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC)(Display* dpy, GLXVideoCaptureDeviceNV device, int attribute, int* value);
    typedef void (APIENTRYP PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC)(Display* dpy, GLXVideoCaptureDeviceNV device);
#endif /* GLX_NV_video_capture */

#ifndef GLX_NV_video_out
#define GLX_NV_video_out 1
    typedef unsigned int GLXVideoDeviceNV;
#define GLX_VIDEO_OUT_COLOR_NV 0x20C3
#define GLX_VIDEO_OUT_ALPHA_NV 0x20C4
#define GLX_VIDEO_OUT_DEPTH_NV 0x20C5
#define GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV 0x20C6
#define GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV 0x20C7
#define GLX_VIDEO_OUT_FRAME_NV 0x20C8
#define GLX_VIDEO_OUT_FIELD_1_NV 0x20C9
#define GLX_VIDEO_OUT_FIELD_2_NV 0x20CA
#define GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV 0x20CB
#define GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV 0x20CC
    typedef int (APIENTRYP PFNGLXGETVIDEODEVICENVPROC)(Display* dpy, int screen, int numVideoDevices, GLXVideoDeviceNV* pVideoDevice);
    typedef int (APIENTRYP PFNGLXRELEASEVIDEODEVICENVPROC)(Display* dpy, int screen, GLXVideoDeviceNV VideoDevice);
    typedef int (APIENTRYP PFNGLXBINDVIDEOIMAGENVPROC)(Display* dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
    typedef int (APIENTRYP PFNGLXRELEASEVIDEOIMAGENVPROC)(Display* dpy, GLXPbuffer pbuf);
    typedef int (APIENTRYP PFNGLXSENDPBUFFERTOVIDEONVPROC)(Display* dpy, GLXPbuffer pbuf, int iBufferType, unsigned long* pulCounterPbuffer, GLboolean bBlock);
    typedef int (APIENTRYP PFNGLXGETVIDEOINFONVPROC)(Display* dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long* pulCounterOutputPbuffer, unsigned long* pulCounterOutputVideo);
#endif /* GLX_NV_video_out */

#ifndef GLX_OML_swap_method
#define GLX_OML_swap_method 1
#define GLX_SWAP_METHOD_OML 0x8060
#define GLX_SWAP_EXCHANGE_OML 0x8061
#define GLX_SWAP_COPY_OML 0x8062
#define GLX_SWAP_UNDEFINED_OML 0x8063
#endif /* GLX_OML_swap_method */

#ifndef GLX_OML_sync_control
#define GLX_OML_sync_control 1
    typedef Bool(APIENTRYP PFNGLXGETSYNCVALUESOMLPROC)(Display* dpy, GLXDrawable drawable, int64_t* ust, int64_t* msc, int64_t* sbc);
    typedef Bool(APIENTRYP PFNGLXGETMSCRATEOMLPROC)(Display* dpy, GLXDrawable drawable, int32_t* numerator, int32_t* denominator);
    typedef int64_t(APIENTRYP PFNGLXSWAPBUFFERSMSCOMLPROC)(Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
    typedef Bool(APIENTRYP PFNGLXWAITFORMSCOMLPROC)(Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t* ust, int64_t* msc, int64_t* sbc);
    typedef Bool(APIENTRYP PFNGLXWAITFORSBCOMLPROC)(Display* dpy, GLXDrawable drawable, int64_t target_sbc, int64_t* ust, int64_t* msc, int64_t* sbc);
#endif /* GLX_OML_sync_control */

#ifndef GLX_SGI_cushion
#define GLX_SGI_cushion 1
    typedef void (APIENTRYP PFNGLXCUSHIONSGIPROC)(Display* dpy, Window window, float cushion);
#endif /* GLX_SGI_cushion */

#ifndef GLX_SGI_make_current_read
#define GLX_SGI_make_current_read 1
    typedef Bool(APIENTRYP PFNGLXMAKECURRENTREADSGIPROC)(Display* dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
    typedef GLXDrawable(APIENTRYP PFNGLXGETCURRENTREADDRAWABLESGIPROC)(void);
#endif /* GLX_SGI_make_current_read */

#ifndef GLX_SGI_swap_control
#define GLX_SGI_swap_control 1
    typedef int (APIENTRYP PFNGLXSWAPINTERVALSGIPROC)(int interval);
#endif /* GLX_SGI_swap_control */

#ifndef GLX_SGI_video_sync
#define GLX_SGI_video_sync 1
    typedef int (APIENTRYP PFNGLXGETVIDEOSYNCSGIPROC)(unsigned int* count);
    typedef int (APIENTRYP PFNGLXWAITVIDEOSYNCSGIPROC)(int divisor, int remainder, unsigned int* count);
#endif /* GLX_SGI_video_sync */

#ifndef GLX_SGIS_blended_overlay
#define GLX_SGIS_blended_overlay 1
#define GLX_BLENDED_RGBA_SGIS 0x8025
#endif /* GLX_SGIS_blended_overlay */

#ifndef GLX_SGIS_multisample
#define GLX_SGIS_multisample 1
#define GLX_SAMPLE_BUFFERS_SGIS 100000
#define GLX_SAMPLES_SGIS 100001
#endif /* GLX_SGIS_multisample */

#ifndef GLX_SGIS_shared_multisample
#define GLX_SGIS_shared_multisample 1
#define GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS 0x8026
#define GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS 0x8027
#endif /* GLX_SGIS_shared_multisample */

#ifndef GLX_SGIX_fbconfig
#define GLX_SGIX_fbconfig 1
    typedef struct __GLXFBConfigRec* GLXFBConfigSGIX;
#define GLX_WINDOW_BIT_SGIX 0x00000001
#define GLX_PIXMAP_BIT_SGIX 0x00000002
#define GLX_RGBA_BIT_SGIX 0x00000001
#define GLX_COLOR_INDEX_BIT_SGIX 0x00000002
#define GLX_DRAWABLE_TYPE_SGIX 0x8010
#define GLX_RENDER_TYPE_SGIX 0x8011
#define GLX_X_RENDERABLE_SGIX 0x8012
#define GLX_FBCONFIG_ID_SGIX 0x8013
#define GLX_RGBA_TYPE_SGIX 0x8014
#define GLX_COLOR_INDEX_TYPE_SGIX 0x8015
#define GLX_SCREEN_EXT 0x800C
    typedef int (APIENTRYP PFNGLXGETFBCONFIGATTRIBSGIXPROC)(Display* dpy, GLXFBConfigSGIX config, int attribute, int* value);
    typedef GLXFBConfigSGIX* (APIENTRYP PFNGLXCHOOSEFBCONFIGSGIXPROC)(Display* dpy, int screen, int* attrib_list, int* nelements);
    typedef GLXPixmap(APIENTRYP PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC)(Display* dpy, GLXFBConfigSGIX config, Pixmap pixmap);
    typedef GLXContext(APIENTRYP PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC)(Display* dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct);
    typedef XVisualInfo* (APIENTRYP PFNGLXGETVISUALFROMFBCONFIGSGIXPROC)(Display* dpy, GLXFBConfigSGIX config);
    typedef GLXFBConfigSGIX(APIENTRYP PFNGLXGETFBCONFIGFROMVISUALSGIXPROC)(Display* dpy, XVisualInfo* vis);
#endif /* GLX_SGIX_fbconfig */

#ifndef GLX_SGIX_hyperpipe
#define GLX_SGIX_hyperpipe 1
    typedef struct {
        char    pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
        int     networkId;
    } GLXHyperpipeNetworkSGIX;
    typedef struct {
        char    pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
        int     channel;
        unsigned int participationType;
        int     timeSlice;
    } GLXHyperpipeConfigSGIX;
    typedef struct {
        char pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
        int srcXOrigin, srcYOrigin, srcWidth, srcHeight;
        int destXOrigin, destYOrigin, destWidth, destHeight;
    } GLXPipeRect;
    typedef struct {
        char pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
        int XOrigin, YOrigin, maxHeight, maxWidth;
    } GLXPipeRectLimits;
#define GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX 80
#define GLX_BAD_HYPERPIPE_CONFIG_SGIX 91
#define GLX_BAD_HYPERPIPE_SGIX 92
#define GLX_HYPERPIPE_DISPLAY_PIPE_SGIX 0x00000001
#define GLX_HYPERPIPE_RENDER_PIPE_SGIX 0x00000002
#define GLX_PIPE_RECT_SGIX 0x00000001
#define GLX_PIPE_RECT_LIMITS_SGIX 0x00000002
#define GLX_HYPERPIPE_STEREO_SGIX 0x00000003
#define GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX 0x00000004
#define GLX_HYPERPIPE_ID_SGIX 0x8030
    typedef GLXHyperpipeNetworkSGIX* (APIENTRYP PFNGLXQUERYHYPERPIPENETWORKSGIXPROC)(Display* dpy, int* npipes);
    typedef int (APIENTRYP PFNGLXHYPERPIPECONFIGSGIXPROC)(Display* dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX* cfg, int* hpId);
    typedef GLXHyperpipeConfigSGIX* (APIENTRYP PFNGLXQUERYHYPERPIPECONFIGSGIXPROC)(Display* dpy, int hpId, int* npipes);
    typedef int (APIENTRYP PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC)(Display* dpy, int hpId);
    typedef int (APIENTRYP PFNGLXBINDHYPERPIPESGIXPROC)(Display* dpy, int hpId);
    typedef int (APIENTRYP PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC)(Display* dpy, int timeSlice, int attrib, int size, void* attribList, void* returnAttribList);
    typedef int (APIENTRYP PFNGLXHYPERPIPEATTRIBSGIXPROC)(Display* dpy, int timeSlice, int attrib, int size, void* attribList);
    typedef int (APIENTRYP PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC)(Display* dpy, int timeSlice, int attrib, int size, void* returnAttribList);
#endif /* GLX_SGIX_hyperpipe */

#ifndef GLX_SGIX_pbuffer
#define GLX_SGIX_pbuffer 1
    typedef XID GLXPbufferSGIX;
#define GLX_PBUFFER_BIT_SGIX 0x00000004
#define GLX_BUFFER_CLOBBER_MASK_SGIX 0x08000000
#define GLX_FRONT_LEFT_BUFFER_BIT_SGIX 0x00000001
#define GLX_FRONT_RIGHT_BUFFER_BIT_SGIX 0x00000002
#define GLX_BACK_LEFT_BUFFER_BIT_SGIX 0x00000004
#define GLX_BACK_RIGHT_BUFFER_BIT_SGIX 0x00000008
#define GLX_AUX_BUFFERS_BIT_SGIX 0x00000010
#define GLX_DEPTH_BUFFER_BIT_SGIX 0x00000020
#define GLX_STENCIL_BUFFER_BIT_SGIX 0x00000040
#define GLX_ACCUM_BUFFER_BIT_SGIX 0x00000080
#define GLX_SAMPLE_BUFFERS_BIT_SGIX 0x00000100
#define GLX_MAX_PBUFFER_WIDTH_SGIX 0x8016
#define GLX_MAX_PBUFFER_HEIGHT_SGIX 0x8017
#define GLX_MAX_PBUFFER_PIXELS_SGIX 0x8018
#define GLX_OPTIMAL_PBUFFER_WIDTH_SGIX 0x8019
#define GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX 0x801A
#define GLX_PRESERVED_CONTENTS_SGIX 0x801B
#define GLX_LARGEST_PBUFFER_SGIX 0x801C
#define GLX_WIDTH_SGIX 0x801D
#define GLX_HEIGHT_SGIX 0x801E
#define GLX_EVENT_MASK_SGIX 0x801F
#define GLX_DAMAGED_SGIX 0x8020
#define GLX_SAVED_SGIX 0x8021
#define GLX_WINDOW_SGIX 0x8022
#define GLX_PBUFFER_SGIX 0x8023
    typedef GLXPbufferSGIX(APIENTRYP PFNGLXCREATEGLXPBUFFERSGIXPROC)(Display* dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int* attrib_list);
    typedef void (APIENTRYP PFNGLXDESTROYGLXPBUFFERSGIXPROC)(Display* dpy, GLXPbufferSGIX pbuf);
    typedef void (APIENTRYP PFNGLXQUERYGLXPBUFFERSGIXPROC)(Display* dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int* value);
    typedef void (APIENTRYP PFNGLXSELECTEVENTSGIXPROC)(Display* dpy, GLXDrawable drawable, unsigned long mask);
    typedef void (APIENTRYP PFNGLXGETSELECTEDEVENTSGIXPROC)(Display* dpy, GLXDrawable drawable, unsigned long* mask);
#endif /* GLX_SGIX_pbuffer */

#ifndef GLX_SGIX_swap_barrier
#define GLX_SGIX_swap_barrier 1
    typedef void (APIENTRYP PFNGLXBINDSWAPBARRIERSGIXPROC)(Display* dpy, GLXDrawable drawable, int barrier);
    typedef Bool(APIENTRYP PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC)(Display* dpy, int screen, int* max);
#endif /* GLX_SGIX_swap_barrier */

#ifndef GLX_SGIX_swap_group
#define GLX_SGIX_swap_group 1
    typedef void (APIENTRYP PFNGLXJOINSWAPGROUPSGIXPROC)(Display* dpy, GLXDrawable drawable, GLXDrawable member);
#endif /* GLX_SGIX_swap_group */

#ifndef GLX_SGIX_video_resize
#define GLX_SGIX_video_resize 1
#define GLX_SYNC_FRAME_SGIX 0x00000000
#define GLX_SYNC_SWAP_SGIX 0x00000001
    typedef int (APIENTRYP PFNGLXBINDCHANNELTOWINDOWSGIXPROC)(Display* display, int screen, int channel, Window window);
    typedef int (APIENTRYP PFNGLXCHANNELRECTSGIXPROC)(Display* display, int screen, int channel, int x, int y, int w, int h);
    typedef int (APIENTRYP PFNGLXQUERYCHANNELRECTSGIXPROC)(Display* display, int screen, int channel, int* dx, int* dy, int* dw, int* dh);
    typedef int (APIENTRYP PFNGLXQUERYCHANNELDELTASSGIXPROC)(Display* display, int screen, int channel, int* x, int* y, int* w, int* h);
    typedef int (APIENTRYP PFNGLXCHANNELRECTSYNCSGIXPROC)(Display* display, int screen, int channel, GLenum synctype);
#endif /* GLX_SGIX_video_resize */

#ifndef GLX_SGIX_visual_select_group
#define GLX_SGIX_visual_select_group 1
#define GLX_VISUAL_SELECT_GROUP_SGIX 0x8028
#endif /* GLX_SGIX_visual_select_group */

#ifndef GLX_SUN_get_transparent_index
#define GLX_SUN_get_transparent_index 1
    typedef Status(APIENTRYP PFNGLXGETTRANSPARENTINDEXSUNPROC)(Display* dpy, Window overlay, Window underlay, unsigned long* pTransparentIndex);
#endif /* GLX_SUN_get_transparent_index */

#ifndef GLX_NV_multigpu_context
#define GLX_NV_multigpu_context 1
#define GLX_CONTEXT_MULTIGPU_ATTRIB_NV 0x20AA
#define GLX_CONTEXT_MULTIGPU_ATTRIB_SINGLE_NV 0x20AB
#define GLX_CONTEXT_MULTIGPU_ATTRIB_AFR_NV 0x20AC
#define GLX_CONTEXT_MULTIGPU_ATTRIB_MULTICAST_NV 0x20AD
#define GLX_CONTEXT_MULTIGPU_ATTRIB_MULTI_DISPLAY_MULTICAST_NV 0x20AE
#endif /* GLX_NV_multigpu_context */
#endif /* GLBIND_GLX */


    PFNGLCULLFACEPROC glCullFace;
    PFNGLFRONTFACEPROC glFrontFace;
    PFNGLHINTPROC glHint;
    PFNGLLINEWIDTHPROC glLineWidth;
    PFNGLPOINTSIZEPROC glPointSize;
    PFNGLPOLYGONMODEPROC glPolygonMode;
    PFNGLSCISSORPROC glScissor;
    PFNGLTEXPARAMETERFPROC glTexParameterf;
    PFNGLTEXPARAMETERFVPROC glTexParameterfv;
    PFNGLTEXPARAMETERIPROC glTexParameteri;
    PFNGLTEXPARAMETERIVPROC glTexParameteriv;
    PFNGLTEXIMAGE1DPROC glTexImage1D;
    PFNGLTEXIMAGE2DPROC glTexImage2D;
    PFNGLDRAWBUFFERPROC glDrawBuffer;
    PFNGLCLEARPROC glClear;
    PFNGLCLEARCOLORPROC glClearColor;
    PFNGLCLEARSTENCILPROC glClearStencil;
    PFNGLCLEARDEPTHPROC glClearDepth;
    PFNGLSTENCILMASKPROC glStencilMask;
    PFNGLCOLORMASKPROC glColorMask;
    PFNGLDEPTHMASKPROC glDepthMask;
    PFNGLDISABLEPROC glDisable;
    PFNGLENABLEPROC glEnable;
    PFNGLFINISHPROC glFinish;
    PFNGLFLUSHPROC glFlush;
    PFNGLBLENDFUNCPROC glBlendFunc;
    PFNGLLOGICOPPROC glLogicOp;
    PFNGLSTENCILFUNCPROC glStencilFunc;
    PFNGLSTENCILOPPROC glStencilOp;
    PFNGLDEPTHFUNCPROC glDepthFunc;
    PFNGLPIXELSTOREFPROC glPixelStoref;
    PFNGLPIXELSTOREIPROC glPixelStorei;
    PFNGLREADBUFFERPROC glReadBuffer;
    PFNGLREADPIXELSPROC glReadPixels;
    PFNGLGETBOOLEANVPROC glGetBooleanv;
    PFNGLGETDOUBLEVPROC glGetDoublev;
    PFNGLGETERRORPROC glGetError;
    PFNGLGETFLOATVPROC glGetFloatv;
    PFNGLGETINTEGERVPROC glGetIntegerv;
    PFNGLGETSTRINGPROC glGetString;
    PFNGLGETTEXIMAGEPROC glGetTexImage;
    PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv;
    PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv;
    PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv;
    PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv;
    PFNGLISENABLEDPROC glIsEnabled;
    PFNGLDEPTHRANGEPROC glDepthRange;
    PFNGLVIEWPORTPROC glViewport;
    PFNGLNEWLISTPROC glNewList;
    PFNGLENDLISTPROC glEndList;
    PFNGLCALLLISTPROC glCallList;
    PFNGLCALLLISTSPROC glCallLists;
    PFNGLDELETELISTSPROC glDeleteLists;
    PFNGLGENLISTSPROC glGenLists;
    PFNGLLISTBASEPROC glListBase;
    PFNGLBEGINPROC glBegin;
    PFNGLBITMAPPROC glBitmap;
    PFNGLCOLOR3BPROC glColor3b;
    PFNGLCOLOR3BVPROC glColor3bv;
    PFNGLCOLOR3DPROC glColor3d;
    PFNGLCOLOR3DVPROC glColor3dv;
    PFNGLCOLOR3FPROC glColor3f;
    PFNGLCOLOR3FVPROC glColor3fv;
    PFNGLCOLOR3IPROC glColor3i;
    PFNGLCOLOR3IVPROC glColor3iv;
    PFNGLCOLOR3SPROC glColor3s;
    PFNGLCOLOR3SVPROC glColor3sv;
    PFNGLCOLOR3UBPROC glColor3ub;
    PFNGLCOLOR3UBVPROC glColor3ubv;
    PFNGLCOLOR3UIPROC glColor3ui;
    PFNGLCOLOR3UIVPROC glColor3uiv;
    PFNGLCOLOR3USPROC glColor3us;
    PFNGLCOLOR3USVPROC glColor3usv;
    PFNGLCOLOR4BPROC glColor4b;
    PFNGLCOLOR4BVPROC glColor4bv;
    PFNGLCOLOR4DPROC glColor4d;
    PFNGLCOLOR4DVPROC glColor4dv;
    PFNGLCOLOR4FPROC glColor4f;
    PFNGLCOLOR4FVPROC glColor4fv;
    PFNGLCOLOR4IPROC glColor4i;
    PFNGLCOLOR4IVPROC glColor4iv;
    PFNGLCOLOR4SPROC glColor4s;
    PFNGLCOLOR4SVPROC glColor4sv;
    PFNGLCOLOR4UBPROC glColor4ub;
    PFNGLCOLOR4UBVPROC glColor4ubv;
    PFNGLCOLOR4UIPROC glColor4ui;
    PFNGLCOLOR4UIVPROC glColor4uiv;
    PFNGLCOLOR4USPROC glColor4us;
    PFNGLCOLOR4USVPROC glColor4usv;
    PFNGLEDGEFLAGPROC glEdgeFlag;
    PFNGLEDGEFLAGVPROC glEdgeFlagv;
    PFNGLENDPROC glEnd;
    PFNGLINDEXDPROC glIndexd;
    PFNGLINDEXDVPROC glIndexdv;
    PFNGLINDEXFPROC glIndexf;
    PFNGLINDEXFVPROC glIndexfv;
    PFNGLINDEXIPROC glIndexi;
    PFNGLINDEXIVPROC glIndexiv;
    PFNGLINDEXSPROC glIndexs;
    PFNGLINDEXSVPROC glIndexsv;
    PFNGLNORMAL3BPROC glNormal3b;
    PFNGLNORMAL3BVPROC glNormal3bv;
    PFNGLNORMAL3DPROC glNormal3d;
    PFNGLNORMAL3DVPROC glNormal3dv;
    PFNGLNORMAL3FPROC glNormal3f;
    PFNGLNORMAL3FVPROC glNormal3fv;
    PFNGLNORMAL3IPROC glNormal3i;
    PFNGLNORMAL3IVPROC glNormal3iv;
    PFNGLNORMAL3SPROC glNormal3s;
    PFNGLNORMAL3SVPROC glNormal3sv;
    PFNGLRASTERPOS2DPROC glRasterPos2d;
    PFNGLRASTERPOS2DVPROC glRasterPos2dv;
    PFNGLRASTERPOS2FPROC glRasterPos2f;
    PFNGLRASTERPOS2FVPROC glRasterPos2fv;
    PFNGLRASTERPOS2IPROC glRasterPos2i;
    PFNGLRASTERPOS2IVPROC glRasterPos2iv;
    PFNGLRASTERPOS2SPROC glRasterPos2s;
    PFNGLRASTERPOS2SVPROC glRasterPos2sv;
    PFNGLRASTERPOS3DPROC glRasterPos3d;
    PFNGLRASTERPOS3DVPROC glRasterPos3dv;
    PFNGLRASTERPOS3FPROC glRasterPos3f;
    PFNGLRASTERPOS3FVPROC glRasterPos3fv;
    PFNGLRASTERPOS3IPROC glRasterPos3i;
    PFNGLRASTERPOS3IVPROC glRasterPos3iv;
    PFNGLRASTERPOS3SPROC glRasterPos3s;
    PFNGLRASTERPOS3SVPROC glRasterPos3sv;
    PFNGLRASTERPOS4DPROC glRasterPos4d;
    PFNGLRASTERPOS4DVPROC glRasterPos4dv;
    PFNGLRASTERPOS4FPROC glRasterPos4f;
    PFNGLRASTERPOS4FVPROC glRasterPos4fv;
    PFNGLRASTERPOS4IPROC glRasterPos4i;
    PFNGLRASTERPOS4IVPROC glRasterPos4iv;
    PFNGLRASTERPOS4SPROC glRasterPos4s;
    PFNGLRASTERPOS4SVPROC glRasterPos4sv;
    PFNGLRECTDPROC glRectd;
    PFNGLRECTDVPROC glRectdv;
    PFNGLRECTFPROC glRectf;
    PFNGLRECTFVPROC glRectfv;
    PFNGLRECTIPROC glRecti;
    PFNGLRECTIVPROC glRectiv;
    PFNGLRECTSPROC glRects;
    PFNGLRECTSVPROC glRectsv;
    PFNGLTEXCOORD1DPROC glTexCoord1d;
    PFNGLTEXCOORD1DVPROC glTexCoord1dv;
    PFNGLTEXCOORD1FPROC glTexCoord1f;
    PFNGLTEXCOORD1FVPROC glTexCoord1fv;
    PFNGLTEXCOORD1IPROC glTexCoord1i;
    PFNGLTEXCOORD1IVPROC glTexCoord1iv;
    PFNGLTEXCOORD1SPROC glTexCoord1s;
    PFNGLTEXCOORD1SVPROC glTexCoord1sv;
    PFNGLTEXCOORD2DPROC glTexCoord2d;
    PFNGLTEXCOORD2DVPROC glTexCoord2dv;
    PFNGLTEXCOORD2FPROC glTexCoord2f;
    PFNGLTEXCOORD2FVPROC glTexCoord2fv;
    PFNGLTEXCOORD2IPROC glTexCoord2i;
    PFNGLTEXCOORD2IVPROC glTexCoord2iv;
    PFNGLTEXCOORD2SPROC glTexCoord2s;
    PFNGLTEXCOORD2SVPROC glTexCoord2sv;
    PFNGLTEXCOORD3DPROC glTexCoord3d;
    PFNGLTEXCOORD3DVPROC glTexCoord3dv;
    PFNGLTEXCOORD3FPROC glTexCoord3f;
    PFNGLTEXCOORD3FVPROC glTexCoord3fv;
    PFNGLTEXCOORD3IPROC glTexCoord3i;
    PFNGLTEXCOORD3IVPROC glTexCoord3iv;
    PFNGLTEXCOORD3SPROC glTexCoord3s;
    PFNGLTEXCOORD3SVPROC glTexCoord3sv;
    PFNGLTEXCOORD4DPROC glTexCoord4d;
    PFNGLTEXCOORD4DVPROC glTexCoord4dv;
    PFNGLTEXCOORD4FPROC glTexCoord4f;
    PFNGLTEXCOORD4FVPROC glTexCoord4fv;
    PFNGLTEXCOORD4IPROC glTexCoord4i;
    PFNGLTEXCOORD4IVPROC glTexCoord4iv;
    PFNGLTEXCOORD4SPROC glTexCoord4s;
    PFNGLTEXCOORD4SVPROC glTexCoord4sv;
    PFNGLVERTEX2DPROC glVertex2d;
    PFNGLVERTEX2DVPROC glVertex2dv;
    PFNGLVERTEX2FPROC glVertex2f;
    PFNGLVERTEX2FVPROC glVertex2fv;
    PFNGLVERTEX2IPROC glVertex2i;
    PFNGLVERTEX2IVPROC glVertex2iv;
    PFNGLVERTEX2SPROC glVertex2s;
    PFNGLVERTEX2SVPROC glVertex2sv;
    PFNGLVERTEX3DPROC glVertex3d;
    PFNGLVERTEX3DVPROC glVertex3dv;
    PFNGLVERTEX3FPROC glVertex3f;
    PFNGLVERTEX3FVPROC glVertex3fv;
    PFNGLVERTEX3IPROC glVertex3i;
    PFNGLVERTEX3IVPROC glVertex3iv;
    PFNGLVERTEX3SPROC glVertex3s;
    PFNGLVERTEX3SVPROC glVertex3sv;
    PFNGLVERTEX4DPROC glVertex4d;
    PFNGLVERTEX4DVPROC glVertex4dv;
    PFNGLVERTEX4FPROC glVertex4f;
    PFNGLVERTEX4FVPROC glVertex4fv;
    PFNGLVERTEX4IPROC glVertex4i;
    PFNGLVERTEX4IVPROC glVertex4iv;
    PFNGLVERTEX4SPROC glVertex4s;
    PFNGLVERTEX4SVPROC glVertex4sv;
    PFNGLCLIPPLANEPROC glClipPlane;
    PFNGLCOLORMATERIALPROC glColorMaterial;
    PFNGLFOGFPROC glFogf;
    PFNGLFOGFVPROC glFogfv;
    PFNGLFOGIPROC glFogi;
    PFNGLFOGIVPROC glFogiv;
    PFNGLLIGHTFPROC glLightf;
    PFNGLLIGHTFVPROC glLightfv;
    PFNGLLIGHTIPROC glLighti;
    PFNGLLIGHTIVPROC glLightiv;
    PFNGLLIGHTMODELFPROC glLightModelf;
    PFNGLLIGHTMODELFVPROC glLightModelfv;
    PFNGLLIGHTMODELIPROC glLightModeli;
    PFNGLLIGHTMODELIVPROC glLightModeliv;
    PFNGLLINESTIPPLEPROC glLineStipple;
    PFNGLMATERIALFPROC glMaterialf;
    PFNGLMATERIALFVPROC glMaterialfv;
    PFNGLMATERIALIPROC glMateriali;
    PFNGLMATERIALIVPROC glMaterialiv;
    PFNGLPOLYGONSTIPPLEPROC glPolygonStipple;
    PFNGLSHADEMODELPROC glShadeModel;
    PFNGLTEXENVFPROC glTexEnvf;
    PFNGLTEXENVFVPROC glTexEnvfv;
    PFNGLTEXENVIPROC glTexEnvi;
    PFNGLTEXENVIVPROC glTexEnviv;
    PFNGLTEXGENDPROC glTexGend;
    PFNGLTEXGENDVPROC glTexGendv;
    PFNGLTEXGENFPROC glTexGenf;
    PFNGLTEXGENFVPROC glTexGenfv;
    PFNGLTEXGENIPROC glTexGeni;
    PFNGLTEXGENIVPROC glTexGeniv;
    PFNGLFEEDBACKBUFFERPROC glFeedbackBuffer;
    PFNGLSELECTBUFFERPROC glSelectBuffer;
    PFNGLRENDERMODEPROC glRenderMode;
    PFNGLINITNAMESPROC glInitNames;
    PFNGLLOADNAMEPROC glLoadName;
    PFNGLPASSTHROUGHPROC glPassThrough;
    PFNGLPOPNAMEPROC glPopName;
    PFNGLPUSHNAMEPROC glPushName;
    PFNGLCLEARACCUMPROC glClearAccum;
    PFNGLCLEARINDEXPROC glClearIndex;
    PFNGLINDEXMASKPROC glIndexMask;
    PFNGLACCUMPROC glAccum;
    PFNGLPOPATTRIBPROC glPopAttrib;
    PFNGLPUSHATTRIBPROC glPushAttrib;
    PFNGLMAP1DPROC glMap1d;
    PFNGLMAP1FPROC glMap1f;
    PFNGLMAP2DPROC glMap2d;
    PFNGLMAP2FPROC glMap2f;
    PFNGLMAPGRID1DPROC glMapGrid1d;
    PFNGLMAPGRID1FPROC glMapGrid1f;
    PFNGLMAPGRID2DPROC glMapGrid2d;
    PFNGLMAPGRID2FPROC glMapGrid2f;
    PFNGLEVALCOORD1DPROC glEvalCoord1d;
    PFNGLEVALCOORD1DVPROC glEvalCoord1dv;
    PFNGLEVALCOORD1FPROC glEvalCoord1f;
    PFNGLEVALCOORD1FVPROC glEvalCoord1fv;
    PFNGLEVALCOORD2DPROC glEvalCoord2d;
    PFNGLEVALCOORD2DVPROC glEvalCoord2dv;
    PFNGLEVALCOORD2FPROC glEvalCoord2f;
    PFNGLEVALCOORD2FVPROC glEvalCoord2fv;
    PFNGLEVALMESH1PROC glEvalMesh1;
    PFNGLEVALPOINT1PROC glEvalPoint1;
    PFNGLEVALMESH2PROC glEvalMesh2;
    PFNGLEVALPOINT2PROC glEvalPoint2;
    PFNGLALPHAFUNCPROC glAlphaFunc;
    PFNGLPIXELZOOMPROC glPixelZoom;
    PFNGLPIXELTRANSFERFPROC glPixelTransferf;
    PFNGLPIXELTRANSFERIPROC glPixelTransferi;
    PFNGLPIXELMAPFVPROC glPixelMapfv;
    PFNGLPIXELMAPUIVPROC glPixelMapuiv;
    PFNGLPIXELMAPUSVPROC glPixelMapusv;
    PFNGLCOPYPIXELSPROC glCopyPixels;
    PFNGLDRAWPIXELSPROC glDrawPixels;
    PFNGLGETCLIPPLANEPROC glGetClipPlane;
    PFNGLGETLIGHTFVPROC glGetLightfv;
    PFNGLGETLIGHTIVPROC glGetLightiv;
    PFNGLGETMAPDVPROC glGetMapdv;
    PFNGLGETMAPFVPROC glGetMapfv;
    PFNGLGETMAPIVPROC glGetMapiv;
    PFNGLGETMATERIALFVPROC glGetMaterialfv;
    PFNGLGETMATERIALIVPROC glGetMaterialiv;
    PFNGLGETPIXELMAPFVPROC glGetPixelMapfv;
    PFNGLGETPIXELMAPUIVPROC glGetPixelMapuiv;
    PFNGLGETPIXELMAPUSVPROC glGetPixelMapusv;
    PFNGLGETPOLYGONSTIPPLEPROC glGetPolygonStipple;
    PFNGLGETTEXENVFVPROC glGetTexEnvfv;
    PFNGLGETTEXENVIVPROC glGetTexEnviv;
    PFNGLGETTEXGENDVPROC glGetTexGendv;
    PFNGLGETTEXGENFVPROC glGetTexGenfv;
    PFNGLGETTEXGENIVPROC glGetTexGeniv;
    PFNGLISLISTPROC glIsList;
    PFNGLFRUSTUMPROC glFrustum;
    PFNGLLOADIDENTITYPROC glLoadIdentity;
    PFNGLLOADMATRIXFPROC glLoadMatrixf;
    PFNGLLOADMATRIXDPROC glLoadMatrixd;
    PFNGLMATRIXMODEPROC glMatrixMode;
    PFNGLMULTMATRIXFPROC glMultMatrixf;
    PFNGLMULTMATRIXDPROC glMultMatrixd;
    PFNGLORTHOPROC glOrtho;
    PFNGLPOPMATRIXPROC glPopMatrix;
    PFNGLPUSHMATRIXPROC glPushMatrix;
    PFNGLROTATEDPROC glRotated;
    PFNGLROTATEFPROC glRotatef;
    PFNGLSCALEDPROC glScaled;
    PFNGLSCALEFPROC glScalef;
    PFNGLTRANSLATEDPROC glTranslated;
    PFNGLTRANSLATEFPROC glTranslatef;
    PFNGLDRAWARRAYSPROC glDrawArrays;
    PFNGLDRAWELEMENTSPROC glDrawElements;
    PFNGLGETPOINTERVPROC glGetPointerv;
    PFNGLPOLYGONOFFSETPROC glPolygonOffset;
    PFNGLCOPYTEXIMAGE1DPROC glCopyTexImage1D;
    PFNGLCOPYTEXIMAGE2DPROC glCopyTexImage2D;
    PFNGLCOPYTEXSUBIMAGE1DPROC glCopyTexSubImage1D;
    PFNGLCOPYTEXSUBIMAGE2DPROC glCopyTexSubImage2D;
    PFNGLTEXSUBIMAGE1DPROC glTexSubImage1D;
    PFNGLTEXSUBIMAGE2DPROC glTexSubImage2D;
    PFNGLBINDTEXTUREPROC glBindTexture;
    PFNGLDELETETEXTURESPROC glDeleteTextures;
    PFNGLGENTEXTURESPROC glGenTextures;
    PFNGLISTEXTUREPROC glIsTexture;
    PFNGLARRAYELEMENTPROC glArrayElement;
    PFNGLCOLORPOINTERPROC glColorPointer;
    PFNGLDISABLECLIENTSTATEPROC glDisableClientState;
    PFNGLEDGEFLAGPOINTERPROC glEdgeFlagPointer;
    PFNGLENABLECLIENTSTATEPROC glEnableClientState;
    PFNGLINDEXPOINTERPROC glIndexPointer;
    PFNGLINTERLEAVEDARRAYSPROC glInterleavedArrays;
    PFNGLNORMALPOINTERPROC glNormalPointer;
    PFNGLTEXCOORDPOINTERPROC glTexCoordPointer;
    PFNGLVERTEXPOINTERPROC glVertexPointer;
    PFNGLARETEXTURESRESIDENTPROC glAreTexturesResident;
    PFNGLPRIORITIZETEXTURESPROC glPrioritizeTextures;
    PFNGLINDEXUBPROC glIndexub;
    PFNGLINDEXUBVPROC glIndexubv;
    PFNGLPOPCLIENTATTRIBPROC glPopClientAttrib;
    PFNGLPUSHCLIENTATTRIBPROC glPushClientAttrib;
    PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
    PFNGLTEXIMAGE3DPROC glTexImage3D;
    PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
    PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;
    PFNGLACTIVETEXTUREPROC glActiveTexture;
    PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
    PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
    PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
    PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
    PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
    PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
    PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
    PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;
    PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture;
    PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d;
    PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv;
    PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f;
    PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv;
    PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i;
    PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv;
    PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s;
    PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv;
    PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d;
    PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv;
    PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f;
    PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv;
    PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i;
    PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv;
    PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s;
    PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv;
    PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d;
    PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv;
    PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f;
    PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv;
    PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i;
    PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv;
    PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s;
    PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv;
    PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d;
    PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv;
    PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f;
    PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv;
    PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i;
    PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv;
    PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s;
    PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv;
    PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf;
    PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd;
    PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf;
    PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd;
    PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
    PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
    PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
    PFNGLPOINTPARAMETERFPROC glPointParameterf;
    PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
    PFNGLPOINTPARAMETERIPROC glPointParameteri;
    PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
    PFNGLFOGCOORDFPROC glFogCoordf;
    PFNGLFOGCOORDFVPROC glFogCoordfv;
    PFNGLFOGCOORDDPROC glFogCoordd;
    PFNGLFOGCOORDDVPROC glFogCoorddv;
    PFNGLFOGCOORDPOINTERPROC glFogCoordPointer;
    PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b;
    PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv;
    PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d;
    PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv;
    PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f;
    PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv;
    PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i;
    PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv;
    PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s;
    PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv;
    PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub;
    PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv;
    PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui;
    PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv;
    PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us;
    PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv;
    PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer;
    PFNGLWINDOWPOS2DPROC glWindowPos2d;
    PFNGLWINDOWPOS2DVPROC glWindowPos2dv;
    PFNGLWINDOWPOS2FPROC glWindowPos2f;
    PFNGLWINDOWPOS2FVPROC glWindowPos2fv;
    PFNGLWINDOWPOS2IPROC glWindowPos2i;
    PFNGLWINDOWPOS2IVPROC glWindowPos2iv;
    PFNGLWINDOWPOS2SPROC glWindowPos2s;
    PFNGLWINDOWPOS2SVPROC glWindowPos2sv;
    PFNGLWINDOWPOS3DPROC glWindowPos3d;
    PFNGLWINDOWPOS3DVPROC glWindowPos3dv;
    PFNGLWINDOWPOS3FPROC glWindowPos3f;
    PFNGLWINDOWPOS3FVPROC glWindowPos3fv;
    PFNGLWINDOWPOS3IPROC glWindowPos3i;
    PFNGLWINDOWPOS3IVPROC glWindowPos3iv;
    PFNGLWINDOWPOS3SPROC glWindowPos3s;
    PFNGLWINDOWPOS3SVPROC glWindowPos3sv;
    PFNGLBLENDCOLORPROC glBlendColor;
    PFNGLBLENDEQUATIONPROC glBlendEquation;
    PFNGLGENQUERIESPROC glGenQueries;
    PFNGLDELETEQUERIESPROC glDeleteQueries;
    PFNGLISQUERYPROC glIsQuery;
    PFNGLBEGINQUERYPROC glBeginQuery;
    PFNGLENDQUERYPROC glEndQuery;
    PFNGLGETQUERYIVPROC glGetQueryiv;
    PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
    PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
    PFNGLBINDBUFFERPROC glBindBuffer;
    PFNGLDELETEBUFFERSPROC glDeleteBuffers;
    PFNGLGENBUFFERSPROC glGenBuffers;
    PFNGLISBUFFERPROC glIsBuffer;
    PFNGLBUFFERDATAPROC glBufferData;
    PFNGLBUFFERSUBDATAPROC glBufferSubData;
    PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
    PFNGLMAPBUFFERPROC glMapBuffer;
    PFNGLUNMAPBUFFERPROC glUnmapBuffer;
    PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
    PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;
    PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
    PFNGLDRAWBUFFERSPROC glDrawBuffers;
    PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
    PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
    PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
    PFNGLATTACHSHADERPROC glAttachShader;
    PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
    PFNGLCOMPILESHADERPROC glCompileShader;
    PFNGLCREATEPROGRAMPROC glCreateProgram;
    PFNGLCREATESHADERPROC glCreateShader;
    PFNGLDELETEPROGRAMPROC glDeleteProgram;
    PFNGLDELETESHADERPROC glDeleteShader;
    PFNGLDETACHSHADERPROC glDetachShader;
    PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
    PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
    PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
    PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
    PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
    PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
    PFNGLGETPROGRAMIVPROC glGetProgramiv;
    PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
    PFNGLGETSHADERIVPROC glGetShaderiv;
    PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
    PFNGLGETSHADERSOURCEPROC glGetShaderSource;
    PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
    PFNGLGETUNIFORMFVPROC glGetUniformfv;
    PFNGLGETUNIFORMIVPROC glGetUniformiv;
    PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
    PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
    PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
    PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
    PFNGLISPROGRAMPROC glIsProgram;
    PFNGLISSHADERPROC glIsShader;
    PFNGLLINKPROGRAMPROC glLinkProgram;
    PFNGLSHADERSOURCEPROC glShaderSource;
    PFNGLUSEPROGRAMPROC glUseProgram;
    PFNGLUNIFORM1FPROC glUniform1f;
    PFNGLUNIFORM2FPROC glUniform2f;
    PFNGLUNIFORM3FPROC glUniform3f;
    PFNGLUNIFORM4FPROC glUniform4f;
    PFNGLUNIFORM1IPROC glUniform1i;
    PFNGLUNIFORM2IPROC glUniform2i;
    PFNGLUNIFORM3IPROC glUniform3i;
    PFNGLUNIFORM4IPROC glUniform4i;
    PFNGLUNIFORM1FVPROC glUniform1fv;
    PFNGLUNIFORM2FVPROC glUniform2fv;
    PFNGLUNIFORM3FVPROC glUniform3fv;
    PFNGLUNIFORM4FVPROC glUniform4fv;
    PFNGLUNIFORM1IVPROC glUniform1iv;
    PFNGLUNIFORM2IVPROC glUniform2iv;
    PFNGLUNIFORM3IVPROC glUniform3iv;
    PFNGLUNIFORM4IVPROC glUniform4iv;
    PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
    PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
    PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
    PFNGLVALIDATEPROGRAMPROC glValidateProgram;
    PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
    PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
    PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
    PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
    PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
    PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
    PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
    PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
    PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
    PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
    PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
    PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
    PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
    PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
    PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
    PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
    PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
    PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
    PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
    PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
    PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
    PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
    PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
    PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
    PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
    PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
    PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
    PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
    PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
    PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
    PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
    PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
    PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
    PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
    PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
    PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
    PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;
    PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
    PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
    PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
    PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
    PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
    PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;
    PFNGLCOLORMASKIPROC glColorMaski;
    PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
    PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
    PFNGLENABLEIPROC glEnablei;
    PFNGLDISABLEIPROC glDisablei;
    PFNGLISENABLEDIPROC glIsEnabledi;
    PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
    PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
    PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
    PFNGLBINDBUFFERBASEPROC glBindBufferBase;
    PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
    PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
    PFNGLCLAMPCOLORPROC glClampColor;
    PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
    PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
    PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
    PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
    PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
    PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
    PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
    PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
    PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
    PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
    PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
    PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
    PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
    PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
    PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
    PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
    PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
    PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
    PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
    PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
    PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
    PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
    PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
    PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
    PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
    PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
    PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
    PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
    PFNGLUNIFORM1UIPROC glUniform1ui;
    PFNGLUNIFORM2UIPROC glUniform2ui;
    PFNGLUNIFORM3UIPROC glUniform3ui;
    PFNGLUNIFORM4UIPROC glUniform4ui;
    PFNGLUNIFORM1UIVPROC glUniform1uiv;
    PFNGLUNIFORM2UIVPROC glUniform2uiv;
    PFNGLUNIFORM3UIVPROC glUniform3uiv;
    PFNGLUNIFORM4UIVPROC glUniform4uiv;
    PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
    PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
    PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
    PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
    PFNGLCLEARBUFFERIVPROC glClearBufferiv;
    PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
    PFNGLCLEARBUFFERFVPROC glClearBufferfv;
    PFNGLCLEARBUFFERFIPROC glClearBufferfi;
    PFNGLGETSTRINGIPROC glGetStringi;
    PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
    PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
    PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
    PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
    PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
    PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
    PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
    PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
    PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
    PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
    PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
    PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
    PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
    PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
    PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
    PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
    PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
    PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
    PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
    PFNGLMAPBUFFERRANGEPROC glMapBufferRange;
    PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
    PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
    PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
    PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
    PFNGLISVERTEXARRAYPROC glIsVertexArray;
    PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
    PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
    PFNGLTEXBUFFERPROC glTexBuffer;
    PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
    PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
    PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
    PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
    PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
    PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
    PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
    PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
    PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
    PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
    PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
    PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
    PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
    PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
    PFNGLFENCESYNCPROC glFenceSync;
    PFNGLISSYNCPROC glIsSync;
    PFNGLDELETESYNCPROC glDeleteSync;
    PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
    PFNGLWAITSYNCPROC glWaitSync;
    PFNGLGETINTEGER64VPROC glGetInteger64v;
    PFNGLGETSYNCIVPROC glGetSynciv;
    PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
    PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
    PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
    PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
    PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
    PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
    PFNGLSAMPLEMASKIPROC glSampleMaski;
    PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
    PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
    PFNGLGENSAMPLERSPROC glGenSamplers;
    PFNGLDELETESAMPLERSPROC glDeleteSamplers;
    PFNGLISSAMPLERPROC glIsSampler;
    PFNGLBINDSAMPLERPROC glBindSampler;
    PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
    PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
    PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
    PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
    PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
    PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
    PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
    PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
    PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
    PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
    PFNGLQUERYCOUNTERPROC glQueryCounter;
    PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
    PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
    PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
    PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
    PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
    PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
    PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
    PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
    PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
    PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
    PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;
    PFNGLVERTEXP2UIPROC glVertexP2ui;
    PFNGLVERTEXP2UIVPROC glVertexP2uiv;
    PFNGLVERTEXP3UIPROC glVertexP3ui;
    PFNGLVERTEXP3UIVPROC glVertexP3uiv;
    PFNGLVERTEXP4UIPROC glVertexP4ui;
    PFNGLVERTEXP4UIVPROC glVertexP4uiv;
    PFNGLTEXCOORDP1UIPROC glTexCoordP1ui;
    PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv;
    PFNGLTEXCOORDP2UIPROC glTexCoordP2ui;
    PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv;
    PFNGLTEXCOORDP3UIPROC glTexCoordP3ui;
    PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv;
    PFNGLTEXCOORDP4UIPROC glTexCoordP4ui;
    PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv;
    PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui;
    PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv;
    PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui;
    PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv;
    PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui;
    PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv;
    PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui;
    PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv;
    PFNGLNORMALP3UIPROC glNormalP3ui;
    PFNGLNORMALP3UIVPROC glNormalP3uiv;
    PFNGLCOLORP3UIPROC glColorP3ui;
    PFNGLCOLORP3UIVPROC glColorP3uiv;
    PFNGLCOLORP4UIPROC glColorP4ui;
    PFNGLCOLORP4UIVPROC glColorP4uiv;
    PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui;
    PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv;
    PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
    PFNGLBLENDEQUATIONIPROC glBlendEquationi;
    PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
    PFNGLBLENDFUNCIPROC glBlendFunci;
    PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
    PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
    PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
    PFNGLUNIFORM1DPROC glUniform1d;
    PFNGLUNIFORM2DPROC glUniform2d;
    PFNGLUNIFORM3DPROC glUniform3d;
    PFNGLUNIFORM4DPROC glUniform4d;
    PFNGLUNIFORM1DVPROC glUniform1dv;
    PFNGLUNIFORM2DVPROC glUniform2dv;
    PFNGLUNIFORM3DVPROC glUniform3dv;
    PFNGLUNIFORM4DVPROC glUniform4dv;
    PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
    PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
    PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
    PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
    PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
    PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
    PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
    PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
    PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
    PFNGLGETUNIFORMDVPROC glGetUniformdv;
    PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
    PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
    PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
    PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
    PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
    PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
    PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
    PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
    PFNGLPATCHPARAMETERIPROC glPatchParameteri;
    PFNGLPATCHPARAMETERFVPROC glPatchParameterfv;
    PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
    PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
    PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
    PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
    PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
    PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
    PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
    PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
    PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
    PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed;
    PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv;
    PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler;
    PFNGLSHADERBINARYPROC glShaderBinary;
    PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat;
    PFNGLDEPTHRANGEFPROC glDepthRangef;
    PFNGLCLEARDEPTHFPROC glClearDepthf;
    PFNGLGETPROGRAMBINARYPROC glGetProgramBinary;
    PFNGLPROGRAMBINARYPROC glProgramBinary;
    PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
    PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages;
    PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram;
    PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv;
    PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline;
    PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines;
    PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines;
    PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline;
    PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv;
    PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i;
    PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv;
    PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f;
    PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv;
    PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d;
    PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv;
    PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui;
    PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv;
    PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i;
    PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv;
    PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f;
    PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv;
    PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d;
    PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv;
    PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui;
    PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv;
    PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i;
    PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv;
    PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f;
    PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv;
    PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d;
    PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv;
    PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui;
    PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv;
    PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i;
    PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv;
    PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f;
    PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv;
    PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d;
    PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv;
    PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui;
    PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv;
    PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv;
    PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv;
    PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv;
    PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv;
    PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv;
    PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv;
    PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv;
    PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv;
    PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv;
    PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv;
    PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv;
    PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv;
    PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv;
    PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv;
    PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv;
    PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv;
    PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv;
    PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv;
    PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline;
    PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog;
    PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d;
    PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d;
    PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d;
    PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d;
    PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv;
    PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv;
    PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv;
    PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv;
    PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer;
    PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv;
    PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
    PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
    PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
    PFNGLSCISSORARRAYVPROC glScissorArrayv;
    PFNGLSCISSORINDEXEDPROC glScissorIndexed;
    PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
    PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
    PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
    PFNGLGETFLOATI_VPROC glGetFloati_v;
    PFNGLGETDOUBLEI_VPROC glGetDoublei_v;
    PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance;
    PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance;
    PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance;
    PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ;
    PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
    PFNGLBINDIMAGETEXTUREPROC glBindImageTexture;
    PFNGLMEMORYBARRIERPROC glMemoryBarrier;
    PFNGLTEXSTORAGE1DPROC glTexStorage1D;
    PFNGLTEXSTORAGE2DPROC glTexStorage2D;
    PFNGLTEXSTORAGE3DPROC glTexStorage3D;
    PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced;
    PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced;
    PFNGLCLEARBUFFERDATAPROC glClearBufferData;
    PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData;
    PFNGLDISPATCHCOMPUTEPROC glDispatchCompute;
    PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect;
    PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData;
    PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri;
    PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv;
    PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v;
    PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage;
    PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage;
    PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData;
    PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData;
    PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer;
    PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer;
    PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect;
    PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect;
    PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv;
    PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex;
    PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName;
    PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv;
    PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation;
    PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex;
    PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding;
    PFNGLTEXBUFFERRANGEPROC glTexBufferRange;
    PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample;
    PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample;
    PFNGLTEXTUREVIEWPROC glTextureView;
    PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer;
    PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat;
    PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat;
    PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat;
    PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding;
    PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor;
    PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl;
    PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
    PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
    PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
    PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup;
    PFNGLPOPDEBUGGROUPPROC glPopDebugGroup;
    PFNGLOBJECTLABELPROC glObjectLabel;
    PFNGLGETOBJECTLABELPROC glGetObjectLabel;
    PFNGLOBJECTPTRLABELPROC glObjectPtrLabel;
    PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
    PFNGLBUFFERSTORAGEPROC glBufferStorage;
    PFNGLCLEARTEXIMAGEPROC glClearTexImage;
    PFNGLCLEARTEXSUBIMAGEPROC glClearTexSubImage;
    PFNGLBINDBUFFERSBASEPROC glBindBuffersBase;
    PFNGLBINDBUFFERSRANGEPROC glBindBuffersRange;
    PFNGLBINDTEXTURESPROC glBindTextures;
    PFNGLBINDSAMPLERSPROC glBindSamplers;
    PFNGLBINDIMAGETEXTURESPROC glBindImageTextures;
    PFNGLBINDVERTEXBUFFERSPROC glBindVertexBuffers;
    PFNGLCLIPCONTROLPROC glClipControl;
    PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks;
    PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase;
    PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange;
    PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv;
    PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v;
    PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v;
    PFNGLCREATEBUFFERSPROC glCreateBuffers;
    PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage;
    PFNGLNAMEDBUFFERDATAPROC glNamedBufferData;
    PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData;
    PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData;
    PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData;
    PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData;
    PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer;
    PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange;
    PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer;
    PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange;
    PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv;
    PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v;
    PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv;
    PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData;
    PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers;
    PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer;
    PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri;
    PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture;
    PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer;
    PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer;
    PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers;
    PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer;
    PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData;
    PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData;
    PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv;
    PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv;
    PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv;
    PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi;
    PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer;
    PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus;
    PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv;
    PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv;
    PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers;
    PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage;
    PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample;
    PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv;
    PFNGLCREATETEXTURESPROC glCreateTextures;
    PFNGLTEXTUREBUFFERPROC glTextureBuffer;
    PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange;
    PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D;
    PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D;
    PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D;
    PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample;
    PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample;
    PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D;
    PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D;
    PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D;
    PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D;
    PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D;
    PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D;
    PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D;
    PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D;
    PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D;
    PFNGLTEXTUREPARAMETERFPROC glTextureParameterf;
    PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv;
    PFNGLTEXTUREPARAMETERIPROC glTextureParameteri;
    PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv;
    PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv;
    PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv;
    PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap;
    PFNGLBINDTEXTUREUNITPROC glBindTextureUnit;
    PFNGLGETTEXTUREIMAGEPROC glGetTextureImage;
    PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage;
    PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv;
    PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv;
    PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv;
    PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv;
    PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv;
    PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv;
    PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays;
    PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib;
    PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib;
    PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer;
    PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer;
    PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers;
    PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding;
    PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat;
    PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat;
    PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat;
    PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor;
    PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv;
    PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv;
    PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv;
    PFNGLCREATESAMPLERSPROC glCreateSamplers;
    PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines;
    PFNGLCREATEQUERIESPROC glCreateQueries;
    PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v;
    PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv;
    PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v;
    PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv;
    PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion;
    PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage;
    PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage;
    PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus;
    PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage;
    PFNGLGETNTEXIMAGEPROC glGetnTexImage;
    PFNGLGETNUNIFORMDVPROC glGetnUniformdv;
    PFNGLGETNUNIFORMFVPROC glGetnUniformfv;
    PFNGLGETNUNIFORMIVPROC glGetnUniformiv;
    PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv;
    PFNGLREADNPIXELSPROC glReadnPixels;
    PFNGLGETNMAPDVPROC glGetnMapdv;
    PFNGLGETNMAPFVPROC glGetnMapfv;
    PFNGLGETNMAPIVPROC glGetnMapiv;
    PFNGLGETNPIXELMAPFVPROC glGetnPixelMapfv;
    PFNGLGETNPIXELMAPUIVPROC glGetnPixelMapuiv;
    PFNGLGETNPIXELMAPUSVPROC glGetnPixelMapusv;
    PFNGLGETNPOLYGONSTIPPLEPROC glGetnPolygonStipple;
    PFNGLGETNCOLORTABLEPROC glGetnColorTable;
    PFNGLGETNCONVOLUTIONFILTERPROC glGetnConvolutionFilter;
    PFNGLGETNSEPARABLEFILTERPROC glGetnSeparableFilter;
    PFNGLGETNHISTOGRAMPROC glGetnHistogram;
    PFNGLGETNMINMAXPROC glGetnMinmax;
    PFNGLTEXTUREBARRIERPROC glTextureBarrier;
    PFNGLSPECIALIZESHADERPROC glSpecializeShader;
    PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glMultiDrawArraysIndirectCount;
    PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glMultiDrawElementsIndirectCount;
    PFNGLPOLYGONOFFSETCLAMPPROC glPolygonOffsetClamp;
    PFNGLTBUFFERMASK3DFXPROC glTbufferMask3DFX;
    PFNGLDEBUGMESSAGEENABLEAMDPROC glDebugMessageEnableAMD;
    PFNGLDEBUGMESSAGEINSERTAMDPROC glDebugMessageInsertAMD;
    PFNGLDEBUGMESSAGECALLBACKAMDPROC glDebugMessageCallbackAMD;
    PFNGLGETDEBUGMESSAGELOGAMDPROC glGetDebugMessageLogAMD;
    PFNGLBLENDFUNCINDEXEDAMDPROC glBlendFuncIndexedAMD;
    PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glBlendFuncSeparateIndexedAMD;
    PFNGLBLENDEQUATIONINDEXEDAMDPROC glBlendEquationIndexedAMD;
    PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glBlendEquationSeparateIndexedAMD;
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC glRenderbufferStorageMultisampleAdvancedAMD;
    PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC glNamedRenderbufferStorageMultisampleAdvancedAMD;
    PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC glFramebufferSamplePositionsfvAMD;
    PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC glNamedFramebufferSamplePositionsfvAMD;
    PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC glGetFramebufferParameterfvAMD;
    PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC glGetNamedFramebufferParameterfvAMD;
    PFNGLUNIFORM1I64NVPROC glUniform1i64NV;
    PFNGLUNIFORM2I64NVPROC glUniform2i64NV;
    PFNGLUNIFORM3I64NVPROC glUniform3i64NV;
    PFNGLUNIFORM4I64NVPROC glUniform4i64NV;
    PFNGLUNIFORM1I64VNVPROC glUniform1i64vNV;
    PFNGLUNIFORM2I64VNVPROC glUniform2i64vNV;
    PFNGLUNIFORM3I64VNVPROC glUniform3i64vNV;
    PFNGLUNIFORM4I64VNVPROC glUniform4i64vNV;
    PFNGLUNIFORM1UI64NVPROC glUniform1ui64NV;
    PFNGLUNIFORM2UI64NVPROC glUniform2ui64NV;
    PFNGLUNIFORM3UI64NVPROC glUniform3ui64NV;
    PFNGLUNIFORM4UI64NVPROC glUniform4ui64NV;
    PFNGLUNIFORM1UI64VNVPROC glUniform1ui64vNV;
    PFNGLUNIFORM2UI64VNVPROC glUniform2ui64vNV;
    PFNGLUNIFORM3UI64VNVPROC glUniform3ui64vNV;
    PFNGLUNIFORM4UI64VNVPROC glUniform4ui64vNV;
    PFNGLGETUNIFORMI64VNVPROC glGetUniformi64vNV;
    PFNGLGETUNIFORMUI64VNVPROC glGetUniformui64vNV;
    PFNGLPROGRAMUNIFORM1I64NVPROC glProgramUniform1i64NV;
    PFNGLPROGRAMUNIFORM2I64NVPROC glProgramUniform2i64NV;
    PFNGLPROGRAMUNIFORM3I64NVPROC glProgramUniform3i64NV;
    PFNGLPROGRAMUNIFORM4I64NVPROC glProgramUniform4i64NV;
    PFNGLPROGRAMUNIFORM1I64VNVPROC glProgramUniform1i64vNV;
    PFNGLPROGRAMUNIFORM2I64VNVPROC glProgramUniform2i64vNV;
    PFNGLPROGRAMUNIFORM3I64VNVPROC glProgramUniform3i64vNV;
    PFNGLPROGRAMUNIFORM4I64VNVPROC glProgramUniform4i64vNV;
    PFNGLPROGRAMUNIFORM1UI64NVPROC glProgramUniform1ui64NV;
    PFNGLPROGRAMUNIFORM2UI64NVPROC glProgramUniform2ui64NV;
    PFNGLPROGRAMUNIFORM3UI64NVPROC glProgramUniform3ui64NV;
    PFNGLPROGRAMUNIFORM4UI64NVPROC glProgramUniform4ui64NV;
    PFNGLPROGRAMUNIFORM1UI64VNVPROC glProgramUniform1ui64vNV;
    PFNGLPROGRAMUNIFORM2UI64VNVPROC glProgramUniform2ui64vNV;
    PFNGLPROGRAMUNIFORM3UI64VNVPROC glProgramUniform3ui64vNV;
    PFNGLPROGRAMUNIFORM4UI64VNVPROC glProgramUniform4ui64vNV;
    PFNGLVERTEXATTRIBPARAMETERIAMDPROC glVertexAttribParameteriAMD;
    PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glMultiDrawArraysIndirectAMD;
    PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glMultiDrawElementsIndirectAMD;
    PFNGLGENNAMESAMDPROC glGenNamesAMD;
    PFNGLDELETENAMESAMDPROC glDeleteNamesAMD;
    PFNGLISNAMEAMDPROC glIsNameAMD;
    PFNGLQUERYOBJECTPARAMETERUIAMDPROC glQueryObjectParameteruiAMD;
    PFNGLGETPERFMONITORGROUPSAMDPROC glGetPerfMonitorGroupsAMD;
    PFNGLGETPERFMONITORCOUNTERSAMDPROC glGetPerfMonitorCountersAMD;
    PFNGLGETPERFMONITORGROUPSTRINGAMDPROC glGetPerfMonitorGroupStringAMD;
    PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC glGetPerfMonitorCounterStringAMD;
    PFNGLGETPERFMONITORCOUNTERINFOAMDPROC glGetPerfMonitorCounterInfoAMD;
    PFNGLGENPERFMONITORSAMDPROC glGenPerfMonitorsAMD;
    PFNGLDELETEPERFMONITORSAMDPROC glDeletePerfMonitorsAMD;
    PFNGLSELECTPERFMONITORCOUNTERSAMDPROC glSelectPerfMonitorCountersAMD;
    PFNGLBEGINPERFMONITORAMDPROC glBeginPerfMonitorAMD;
    PFNGLENDPERFMONITORAMDPROC glEndPerfMonitorAMD;
    PFNGLGETPERFMONITORCOUNTERDATAAMDPROC glGetPerfMonitorCounterDataAMD;
    PFNGLSETMULTISAMPLEFVAMDPROC glSetMultisamplefvAMD;
    PFNGLTEXSTORAGESPARSEAMDPROC glTexStorageSparseAMD;
    PFNGLTEXTURESTORAGESPARSEAMDPROC glTextureStorageSparseAMD;
    PFNGLSTENCILOPVALUEAMDPROC glStencilOpValueAMD;
    PFNGLTESSELLATIONFACTORAMDPROC glTessellationFactorAMD;
    PFNGLTESSELLATIONMODEAMDPROC glTessellationModeAMD;
    PFNGLELEMENTPOINTERAPPLEPROC glElementPointerAPPLE;
    PFNGLDRAWELEMENTARRAYAPPLEPROC glDrawElementArrayAPPLE;
    PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC glDrawRangeElementArrayAPPLE;
    PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC glMultiDrawElementArrayAPPLE;
    PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC glMultiDrawRangeElementArrayAPPLE;
    PFNGLGENFENCESAPPLEPROC glGenFencesAPPLE;
    PFNGLDELETEFENCESAPPLEPROC glDeleteFencesAPPLE;
    PFNGLSETFENCEAPPLEPROC glSetFenceAPPLE;
    PFNGLISFENCEAPPLEPROC glIsFenceAPPLE;
    PFNGLTESTFENCEAPPLEPROC glTestFenceAPPLE;
    PFNGLFINISHFENCEAPPLEPROC glFinishFenceAPPLE;
    PFNGLTESTOBJECTAPPLEPROC glTestObjectAPPLE;
    PFNGLFINISHOBJECTAPPLEPROC glFinishObjectAPPLE;
    PFNGLBUFFERPARAMETERIAPPLEPROC glBufferParameteriAPPLE;
    PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glFlushMappedBufferRangeAPPLE;
    PFNGLOBJECTPURGEABLEAPPLEPROC glObjectPurgeableAPPLE;
    PFNGLOBJECTUNPURGEABLEAPPLEPROC glObjectUnpurgeableAPPLE;
    PFNGLGETOBJECTPARAMETERIVAPPLEPROC glGetObjectParameterivAPPLE;
    PFNGLTEXTURERANGEAPPLEPROC glTextureRangeAPPLE;
    PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC glGetTexParameterPointervAPPLE;
    PFNGLBINDVERTEXARRAYAPPLEPROC glBindVertexArrayAPPLE;
    PFNGLDELETEVERTEXARRAYSAPPLEPROC glDeleteVertexArraysAPPLE;
    PFNGLGENVERTEXARRAYSAPPLEPROC glGenVertexArraysAPPLE;
    PFNGLISVERTEXARRAYAPPLEPROC glIsVertexArrayAPPLE;
    PFNGLVERTEXARRAYRANGEAPPLEPROC glVertexArrayRangeAPPLE;
    PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC glFlushVertexArrayRangeAPPLE;
    PFNGLVERTEXARRAYPARAMETERIAPPLEPROC glVertexArrayParameteriAPPLE;
    PFNGLENABLEVERTEXATTRIBAPPLEPROC glEnableVertexAttribAPPLE;
    PFNGLDISABLEVERTEXATTRIBAPPLEPROC glDisableVertexAttribAPPLE;
    PFNGLISVERTEXATTRIBENABLEDAPPLEPROC glIsVertexAttribEnabledAPPLE;
    PFNGLMAPVERTEXATTRIB1DAPPLEPROC glMapVertexAttrib1dAPPLE;
    PFNGLMAPVERTEXATTRIB1FAPPLEPROC glMapVertexAttrib1fAPPLE;
    PFNGLMAPVERTEXATTRIB2DAPPLEPROC glMapVertexAttrib2dAPPLE;
    PFNGLMAPVERTEXATTRIB2FAPPLEPROC glMapVertexAttrib2fAPPLE;
    PFNGLPRIMITIVEBOUNDINGBOXARBPROC glPrimitiveBoundingBoxARB;
    PFNGLGETTEXTUREHANDLEARBPROC glGetTextureHandleARB;
    PFNGLGETTEXTURESAMPLERHANDLEARBPROC glGetTextureSamplerHandleARB;
    PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glMakeTextureHandleResidentARB;
    PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glMakeTextureHandleNonResidentARB;
    PFNGLGETIMAGEHANDLEARBPROC glGetImageHandleARB;
    PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glMakeImageHandleResidentARB;
    PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glMakeImageHandleNonResidentARB;
    PFNGLUNIFORMHANDLEUI64ARBPROC glUniformHandleui64ARB;
    PFNGLUNIFORMHANDLEUI64VARBPROC glUniformHandleui64vARB;
    PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC glProgramUniformHandleui64ARB;
    PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC glProgramUniformHandleui64vARB;
    PFNGLISTEXTUREHANDLERESIDENTARBPROC glIsTextureHandleResidentARB;
    PFNGLISIMAGEHANDLERESIDENTARBPROC glIsImageHandleResidentARB;
    PFNGLVERTEXATTRIBL1UI64ARBPROC glVertexAttribL1ui64ARB;
    PFNGLVERTEXATTRIBL1UI64VARBPROC glVertexAttribL1ui64vARB;
    PFNGLGETVERTEXATTRIBLUI64VARBPROC glGetVertexAttribLui64vARB;
    PFNGLCREATESYNCFROMCLEVENTARBPROC glCreateSyncFromCLeventARB;
    PFNGLCLAMPCOLORARBPROC glClampColorARB;
    PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC glDispatchComputeGroupSizeARB;
    PFNGLDEBUGMESSAGECONTROLARBPROC glDebugMessageControlARB;
    PFNGLDEBUGMESSAGEINSERTARBPROC glDebugMessageInsertARB;
    PFNGLDEBUGMESSAGECALLBACKARBPROC glDebugMessageCallbackARB;
    PFNGLGETDEBUGMESSAGELOGARBPROC glGetDebugMessageLogARB;
    PFNGLDRAWBUFFERSARBPROC glDrawBuffersARB;
    PFNGLBLENDEQUATIONIARBPROC glBlendEquationiARB;
    PFNGLBLENDEQUATIONSEPARATEIARBPROC glBlendEquationSeparateiARB;
    PFNGLBLENDFUNCIARBPROC glBlendFunciARB;
    PFNGLBLENDFUNCSEPARATEIARBPROC glBlendFuncSeparateiARB;
    PFNGLDRAWARRAYSINSTANCEDARBPROC glDrawArraysInstancedARB;
    PFNGLDRAWELEMENTSINSTANCEDARBPROC glDrawElementsInstancedARB;
    PFNGLPROGRAMSTRINGARBPROC glProgramStringARB;
    PFNGLBINDPROGRAMARBPROC glBindProgramARB;
    PFNGLDELETEPROGRAMSARBPROC glDeleteProgramsARB;
    PFNGLGENPROGRAMSARBPROC glGenProgramsARB;
    PFNGLPROGRAMENVPARAMETER4DARBPROC glProgramEnvParameter4dARB;
    PFNGLPROGRAMENVPARAMETER4DVARBPROC glProgramEnvParameter4dvARB;
    PFNGLPROGRAMENVPARAMETER4FARBPROC glProgramEnvParameter4fARB;
    PFNGLPROGRAMENVPARAMETER4FVARBPROC glProgramEnvParameter4fvARB;
    PFNGLPROGRAMLOCALPARAMETER4DARBPROC glProgramLocalParameter4dARB;
    PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glProgramLocalParameter4dvARB;
    PFNGLPROGRAMLOCALPARAMETER4FARBPROC glProgramLocalParameter4fARB;
    PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glProgramLocalParameter4fvARB;
    PFNGLGETPROGRAMENVPARAMETERDVARBPROC glGetProgramEnvParameterdvARB;
    PFNGLGETPROGRAMENVPARAMETERFVARBPROC glGetProgramEnvParameterfvARB;
    PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glGetProgramLocalParameterdvARB;
    PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glGetProgramLocalParameterfvARB;
    PFNGLGETPROGRAMIVARBPROC glGetProgramivARB;
    PFNGLGETPROGRAMSTRINGARBPROC glGetProgramStringARB;
    PFNGLISPROGRAMARBPROC glIsProgramARB;
    PFNGLPROGRAMPARAMETERIARBPROC glProgramParameteriARB;
    PFNGLFRAMEBUFFERTEXTUREARBPROC glFramebufferTextureARB;
    PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glFramebufferTextureLayerARB;
    PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glFramebufferTextureFaceARB;
    PFNGLSPECIALIZESHADERARBPROC glSpecializeShaderARB;
    PFNGLUNIFORM1I64ARBPROC glUniform1i64ARB;
    PFNGLUNIFORM2I64ARBPROC glUniform2i64ARB;
    PFNGLUNIFORM3I64ARBPROC glUniform3i64ARB;
    PFNGLUNIFORM4I64ARBPROC glUniform4i64ARB;
    PFNGLUNIFORM1I64VARBPROC glUniform1i64vARB;
    PFNGLUNIFORM2I64VARBPROC glUniform2i64vARB;
    PFNGLUNIFORM3I64VARBPROC glUniform3i64vARB;
    PFNGLUNIFORM4I64VARBPROC glUniform4i64vARB;
    PFNGLUNIFORM1UI64ARBPROC glUniform1ui64ARB;
    PFNGLUNIFORM2UI64ARBPROC glUniform2ui64ARB;
    PFNGLUNIFORM3UI64ARBPROC glUniform3ui64ARB;
    PFNGLUNIFORM4UI64ARBPROC glUniform4ui64ARB;
    PFNGLUNIFORM1UI64VARBPROC glUniform1ui64vARB;
    PFNGLUNIFORM2UI64VARBPROC glUniform2ui64vARB;
    PFNGLUNIFORM3UI64VARBPROC glUniform3ui64vARB;
    PFNGLUNIFORM4UI64VARBPROC glUniform4ui64vARB;
    PFNGLGETUNIFORMI64VARBPROC glGetUniformi64vARB;
    PFNGLGETUNIFORMUI64VARBPROC glGetUniformui64vARB;
    PFNGLGETNUNIFORMI64VARBPROC glGetnUniformi64vARB;
    PFNGLGETNUNIFORMUI64VARBPROC glGetnUniformui64vARB;
    PFNGLPROGRAMUNIFORM1I64ARBPROC glProgramUniform1i64ARB;
    PFNGLPROGRAMUNIFORM2I64ARBPROC glProgramUniform2i64ARB;
    PFNGLPROGRAMUNIFORM3I64ARBPROC glProgramUniform3i64ARB;
    PFNGLPROGRAMUNIFORM4I64ARBPROC glProgramUniform4i64ARB;
    PFNGLPROGRAMUNIFORM1I64VARBPROC glProgramUniform1i64vARB;
    PFNGLPROGRAMUNIFORM2I64VARBPROC glProgramUniform2i64vARB;
    PFNGLPROGRAMUNIFORM3I64VARBPROC glProgramUniform3i64vARB;
    PFNGLPROGRAMUNIFORM4I64VARBPROC glProgramUniform4i64vARB;
    PFNGLPROGRAMUNIFORM1UI64ARBPROC glProgramUniform1ui64ARB;
    PFNGLPROGRAMUNIFORM2UI64ARBPROC glProgramUniform2ui64ARB;
    PFNGLPROGRAMUNIFORM3UI64ARBPROC glProgramUniform3ui64ARB;
    PFNGLPROGRAMUNIFORM4UI64ARBPROC glProgramUniform4ui64ARB;
    PFNGLPROGRAMUNIFORM1UI64VARBPROC glProgramUniform1ui64vARB;
    PFNGLPROGRAMUNIFORM2UI64VARBPROC glProgramUniform2ui64vARB;
    PFNGLPROGRAMUNIFORM3UI64VARBPROC glProgramUniform3ui64vARB;
    PFNGLPROGRAMUNIFORM4UI64VARBPROC glProgramUniform4ui64vARB;
    PFNGLCOLORTABLEPROC glColorTable;
    PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv;
    PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv;
    PFNGLCOPYCOLORTABLEPROC glCopyColorTable;
    PFNGLGETCOLORTABLEPROC glGetColorTable;
    PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv;
    PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv;
    PFNGLCOLORSUBTABLEPROC glColorSubTable;
    PFNGLCOPYCOLORSUBTABLEPROC glCopyColorSubTable;
    PFNGLCONVOLUTIONFILTER1DPROC glConvolutionFilter1D;
    PFNGLCONVOLUTIONFILTER2DPROC glConvolutionFilter2D;
    PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf;
    PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv;
    PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri;
    PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv;
    PFNGLCOPYCONVOLUTIONFILTER1DPROC glCopyConvolutionFilter1D;
    PFNGLCOPYCONVOLUTIONFILTER2DPROC glCopyConvolutionFilter2D;
    PFNGLGETCONVOLUTIONFILTERPROC glGetConvolutionFilter;
    PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv;
    PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv;
    PFNGLGETSEPARABLEFILTERPROC glGetSeparableFilter;
    PFNGLSEPARABLEFILTER2DPROC glSeparableFilter2D;
    PFNGLGETHISTOGRAMPROC glGetHistogram;
    PFNGLGETHISTOGRAMPARAMETERFVPROC glGetHistogramParameterfv;
    PFNGLGETHISTOGRAMPARAMETERIVPROC glGetHistogramParameteriv;
    PFNGLGETMINMAXPROC glGetMinmax;
    PFNGLGETMINMAXPARAMETERFVPROC glGetMinmaxParameterfv;
    PFNGLGETMINMAXPARAMETERIVPROC glGetMinmaxParameteriv;
    PFNGLHISTOGRAMPROC glHistogram;
    PFNGLMINMAXPROC glMinmax;
    PFNGLRESETHISTOGRAMPROC glResetHistogram;
    PFNGLRESETMINMAXPROC glResetMinmax;
    PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glMultiDrawArraysIndirectCountARB;
    PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glMultiDrawElementsIndirectCountARB;
    PFNGLVERTEXATTRIBDIVISORARBPROC glVertexAttribDivisorARB;
    PFNGLCURRENTPALETTEMATRIXARBPROC glCurrentPaletteMatrixARB;
    PFNGLMATRIXINDEXUBVARBPROC glMatrixIndexubvARB;
    PFNGLMATRIXINDEXUSVARBPROC glMatrixIndexusvARB;
    PFNGLMATRIXINDEXUIVARBPROC glMatrixIndexuivARB;
    PFNGLMATRIXINDEXPOINTERARBPROC glMatrixIndexPointerARB;
    PFNGLSAMPLECOVERAGEARBPROC glSampleCoverageARB;
    PFNGLACTIVETEXTUREARBPROC glActiveTextureARB;
    PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTextureARB;
    PFNGLMULTITEXCOORD1DARBPROC glMultiTexCoord1dARB;
    PFNGLMULTITEXCOORD1DVARBPROC glMultiTexCoord1dvARB;
    PFNGLMULTITEXCOORD1FARBPROC glMultiTexCoord1fARB;
    PFNGLMULTITEXCOORD1FVARBPROC glMultiTexCoord1fvARB;
    PFNGLMULTITEXCOORD1IARBPROC glMultiTexCoord1iARB;
    PFNGLMULTITEXCOORD1IVARBPROC glMultiTexCoord1ivARB;
    PFNGLMULTITEXCOORD1SARBPROC glMultiTexCoord1sARB;
    PFNGLMULTITEXCOORD1SVARBPROC glMultiTexCoord1svARB;
    PFNGLMULTITEXCOORD2DARBPROC glMultiTexCoord2dARB;
    PFNGLMULTITEXCOORD2DVARBPROC glMultiTexCoord2dvARB;
    PFNGLMULTITEXCOORD2FARBPROC glMultiTexCoord2fARB;
    PFNGLMULTITEXCOORD2FVARBPROC glMultiTexCoord2fvARB;
    PFNGLMULTITEXCOORD2IARBPROC glMultiTexCoord2iARB;
    PFNGLMULTITEXCOORD2IVARBPROC glMultiTexCoord2ivARB;
    PFNGLMULTITEXCOORD2SARBPROC glMultiTexCoord2sARB;
    PFNGLMULTITEXCOORD2SVARBPROC glMultiTexCoord2svARB;
    PFNGLMULTITEXCOORD3DARBPROC glMultiTexCoord3dARB;
    PFNGLMULTITEXCOORD3DVARBPROC glMultiTexCoord3dvARB;
    PFNGLMULTITEXCOORD3FARBPROC glMultiTexCoord3fARB;
    PFNGLMULTITEXCOORD3FVARBPROC glMultiTexCoord3fvARB;
    PFNGLMULTITEXCOORD3IARBPROC glMultiTexCoord3iARB;
    PFNGLMULTITEXCOORD3IVARBPROC glMultiTexCoord3ivARB;
    PFNGLMULTITEXCOORD3SARBPROC glMultiTexCoord3sARB;
    PFNGLMULTITEXCOORD3SVARBPROC glMultiTexCoord3svARB;
    PFNGLMULTITEXCOORD4DARBPROC glMultiTexCoord4dARB;
    PFNGLMULTITEXCOORD4DVARBPROC glMultiTexCoord4dvARB;
    PFNGLMULTITEXCOORD4FARBPROC glMultiTexCoord4fARB;
    PFNGLMULTITEXCOORD4FVARBPROC glMultiTexCoord4fvARB;
    PFNGLMULTITEXCOORD4IARBPROC glMultiTexCoord4iARB;
    PFNGLMULTITEXCOORD4IVARBPROC glMultiTexCoord4ivARB;
    PFNGLMULTITEXCOORD4SARBPROC glMultiTexCoord4sARB;
    PFNGLMULTITEXCOORD4SVARBPROC glMultiTexCoord4svARB;
    PFNGLGENQUERIESARBPROC glGenQueriesARB;
    PFNGLDELETEQUERIESARBPROC glDeleteQueriesARB;
    PFNGLISQUERYARBPROC glIsQueryARB;
    PFNGLBEGINQUERYARBPROC glBeginQueryARB;
    PFNGLENDQUERYARBPROC glEndQueryARB;
    PFNGLGETQUERYIVARBPROC glGetQueryivARB;
    PFNGLGETQUERYOBJECTIVARBPROC glGetQueryObjectivARB;
    PFNGLGETQUERYOBJECTUIVARBPROC glGetQueryObjectuivARB;
    PFNGLMAXSHADERCOMPILERTHREADSARBPROC glMaxShaderCompilerThreadsARB;
    PFNGLPOINTPARAMETERFARBPROC glPointParameterfARB;
    PFNGLPOINTPARAMETERFVARBPROC glPointParameterfvARB;
    PFNGLGETGRAPHICSRESETSTATUSARBPROC glGetGraphicsResetStatusARB;
    PFNGLGETNTEXIMAGEARBPROC glGetnTexImageARB;
    PFNGLREADNPIXELSARBPROC glReadnPixelsARB;
    PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glGetnCompressedTexImageARB;
    PFNGLGETNUNIFORMFVARBPROC glGetnUniformfvARB;
    PFNGLGETNUNIFORMIVARBPROC glGetnUniformivARB;
    PFNGLGETNUNIFORMUIVARBPROC glGetnUniformuivARB;
    PFNGLGETNUNIFORMDVARBPROC glGetnUniformdvARB;
    PFNGLGETNMAPDVARBPROC glGetnMapdvARB;
    PFNGLGETNMAPFVARBPROC glGetnMapfvARB;
    PFNGLGETNMAPIVARBPROC glGetnMapivARB;
    PFNGLGETNPIXELMAPFVARBPROC glGetnPixelMapfvARB;
    PFNGLGETNPIXELMAPUIVARBPROC glGetnPixelMapuivARB;
    PFNGLGETNPIXELMAPUSVARBPROC glGetnPixelMapusvARB;
    PFNGLGETNPOLYGONSTIPPLEARBPROC glGetnPolygonStippleARB;
    PFNGLGETNCOLORTABLEARBPROC glGetnColorTableARB;
    PFNGLGETNCONVOLUTIONFILTERARBPROC glGetnConvolutionFilterARB;
    PFNGLGETNSEPARABLEFILTERARBPROC glGetnSeparableFilterARB;
    PFNGLGETNHISTOGRAMARBPROC glGetnHistogramARB;
    PFNGLGETNMINMAXARBPROC glGetnMinmaxARB;
    PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glFramebufferSampleLocationsfvARB;
    PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glNamedFramebufferSampleLocationsfvARB;
    PFNGLEVALUATEDEPTHVALUESARBPROC glEvaluateDepthValuesARB;
    PFNGLMINSAMPLESHADINGARBPROC glMinSampleShadingARB;
    PFNGLDELETEOBJECTARBPROC glDeleteObjectARB;
    PFNGLGETHANDLEARBPROC glGetHandleARB;
    PFNGLDETACHOBJECTARBPROC glDetachObjectARB;
    PFNGLCREATESHADEROBJECTARBPROC glCreateShaderObjectARB;
    PFNGLSHADERSOURCEARBPROC glShaderSourceARB;
    PFNGLCOMPILESHADERARBPROC glCompileShaderARB;
    PFNGLCREATEPROGRAMOBJECTARBPROC glCreateProgramObjectARB;
    PFNGLATTACHOBJECTARBPROC glAttachObjectARB;
    PFNGLLINKPROGRAMARBPROC glLinkProgramARB;
    PFNGLUSEPROGRAMOBJECTARBPROC glUseProgramObjectARB;
    PFNGLVALIDATEPROGRAMARBPROC glValidateProgramARB;
    PFNGLUNIFORM1FARBPROC glUniform1fARB;
    PFNGLUNIFORM2FARBPROC glUniform2fARB;
    PFNGLUNIFORM3FARBPROC glUniform3fARB;
    PFNGLUNIFORM4FARBPROC glUniform4fARB;
    PFNGLUNIFORM1IARBPROC glUniform1iARB;
    PFNGLUNIFORM2IARBPROC glUniform2iARB;
    PFNGLUNIFORM3IARBPROC glUniform3iARB;
    PFNGLUNIFORM4IARBPROC glUniform4iARB;
    PFNGLUNIFORM1FVARBPROC glUniform1fvARB;
    PFNGLUNIFORM2FVARBPROC glUniform2fvARB;
    PFNGLUNIFORM3FVARBPROC glUniform3fvARB;
    PFNGLUNIFORM4FVARBPROC glUniform4fvARB;
    PFNGLUNIFORM1IVARBPROC glUniform1ivARB;
    PFNGLUNIFORM2IVARBPROC glUniform2ivARB;
    PFNGLUNIFORM3IVARBPROC glUniform3ivARB;
    PFNGLUNIFORM4IVARBPROC glUniform4ivARB;
    PFNGLUNIFORMMATRIX2FVARBPROC glUniformMatrix2fvARB;
    PFNGLUNIFORMMATRIX3FVARBPROC glUniformMatrix3fvARB;
    PFNGLUNIFORMMATRIX4FVARBPROC glUniformMatrix4fvARB;
    PFNGLGETOBJECTPARAMETERFVARBPROC glGetObjectParameterfvARB;
    PFNGLGETOBJECTPARAMETERIVARBPROC glGetObjectParameterivARB;
    PFNGLGETINFOLOGARBPROC glGetInfoLogARB;
    PFNGLGETATTACHEDOBJECTSARBPROC glGetAttachedObjectsARB;
    PFNGLGETUNIFORMLOCATIONARBPROC glGetUniformLocationARB;
    PFNGLGETACTIVEUNIFORMARBPROC glGetActiveUniformARB;
    PFNGLGETUNIFORMFVARBPROC glGetUniformfvARB;
    PFNGLGETUNIFORMIVARBPROC glGetUniformivARB;
    PFNGLGETSHADERSOURCEARBPROC glGetShaderSourceARB;
    PFNGLNAMEDSTRINGARBPROC glNamedStringARB;
    PFNGLDELETENAMEDSTRINGARBPROC glDeleteNamedStringARB;
    PFNGLCOMPILESHADERINCLUDEARBPROC glCompileShaderIncludeARB;
    PFNGLISNAMEDSTRINGARBPROC glIsNamedStringARB;
    PFNGLGETNAMEDSTRINGARBPROC glGetNamedStringARB;
    PFNGLGETNAMEDSTRINGIVARBPROC glGetNamedStringivARB;
    PFNGLBUFFERPAGECOMMITMENTARBPROC glBufferPageCommitmentARB;
    PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC glNamedBufferPageCommitmentEXT;
    PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC glNamedBufferPageCommitmentARB;
    PFNGLTEXPAGECOMMITMENTARBPROC glTexPageCommitmentARB;
    PFNGLTEXBUFFERARBPROC glTexBufferARB;
    PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glCompressedTexImage3DARB;
    PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glCompressedTexImage2DARB;
    PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glCompressedTexImage1DARB;
    PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glCompressedTexSubImage3DARB;
    PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glCompressedTexSubImage2DARB;
    PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glCompressedTexSubImage1DARB;
    PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glGetCompressedTexImageARB;
    PFNGLLOADTRANSPOSEMATRIXFARBPROC glLoadTransposeMatrixfARB;
    PFNGLLOADTRANSPOSEMATRIXDARBPROC glLoadTransposeMatrixdARB;
    PFNGLMULTTRANSPOSEMATRIXFARBPROC glMultTransposeMatrixfARB;
    PFNGLMULTTRANSPOSEMATRIXDARBPROC glMultTransposeMatrixdARB;
    PFNGLWEIGHTBVARBPROC glWeightbvARB;
    PFNGLWEIGHTSVARBPROC glWeightsvARB;
    PFNGLWEIGHTIVARBPROC glWeightivARB;
    PFNGLWEIGHTFVARBPROC glWeightfvARB;
    PFNGLWEIGHTDVARBPROC glWeightdvARB;
    PFNGLWEIGHTUBVARBPROC glWeightubvARB;
    PFNGLWEIGHTUSVARBPROC glWeightusvARB;
    PFNGLWEIGHTUIVARBPROC glWeightuivARB;
    PFNGLWEIGHTPOINTERARBPROC glWeightPointerARB;
    PFNGLVERTEXBLENDARBPROC glVertexBlendARB;
    PFNGLBINDBUFFERARBPROC glBindBufferARB;
    PFNGLDELETEBUFFERSARBPROC glDeleteBuffersARB;
    PFNGLGENBUFFERSARBPROC glGenBuffersARB;
    PFNGLISBUFFERARBPROC glIsBufferARB;
    PFNGLBUFFERDATAARBPROC glBufferDataARB;
    PFNGLBUFFERSUBDATAARBPROC glBufferSubDataARB;
    PFNGLGETBUFFERSUBDATAARBPROC glGetBufferSubDataARB;
    PFNGLMAPBUFFERARBPROC glMapBufferARB;
    PFNGLUNMAPBUFFERARBPROC glUnmapBufferARB;
    PFNGLGETBUFFERPARAMETERIVARBPROC glGetBufferParameterivARB;
    PFNGLGETBUFFERPOINTERVARBPROC glGetBufferPointervARB;
    PFNGLVERTEXATTRIB1DARBPROC glVertexAttrib1dARB;
    PFNGLVERTEXATTRIB1DVARBPROC glVertexAttrib1dvARB;
    PFNGLVERTEXATTRIB1FARBPROC glVertexAttrib1fARB;
    PFNGLVERTEXATTRIB1FVARBPROC glVertexAttrib1fvARB;
    PFNGLVERTEXATTRIB1SARBPROC glVertexAttrib1sARB;
    PFNGLVERTEXATTRIB1SVARBPROC glVertexAttrib1svARB;
    PFNGLVERTEXATTRIB2DARBPROC glVertexAttrib2dARB;
    PFNGLVERTEXATTRIB2DVARBPROC glVertexAttrib2dvARB;
    PFNGLVERTEXATTRIB2FARBPROC glVertexAttrib2fARB;
    PFNGLVERTEXATTRIB2FVARBPROC glVertexAttrib2fvARB;
    PFNGLVERTEXATTRIB2SARBPROC glVertexAttrib2sARB;
    PFNGLVERTEXATTRIB2SVARBPROC glVertexAttrib2svARB;
    PFNGLVERTEXATTRIB3DARBPROC glVertexAttrib3dARB;
    PFNGLVERTEXATTRIB3DVARBPROC glVertexAttrib3dvARB;
    PFNGLVERTEXATTRIB3FARBPROC glVertexAttrib3fARB;
    PFNGLVERTEXATTRIB3FVARBPROC glVertexAttrib3fvARB;
    PFNGLVERTEXATTRIB3SARBPROC glVertexAttrib3sARB;
    PFNGLVERTEXATTRIB3SVARBPROC glVertexAttrib3svARB;
    PFNGLVERTEXATTRIB4NBVARBPROC glVertexAttrib4NbvARB;
    PFNGLVERTEXATTRIB4NIVARBPROC glVertexAttrib4NivARB;
    PFNGLVERTEXATTRIB4NSVARBPROC glVertexAttrib4NsvARB;
    PFNGLVERTEXATTRIB4NUBARBPROC glVertexAttrib4NubARB;
    PFNGLVERTEXATTRIB4NUBVARBPROC glVertexAttrib4NubvARB;
    PFNGLVERTEXATTRIB4NUIVARBPROC glVertexAttrib4NuivARB;
    PFNGLVERTEXATTRIB4NUSVARBPROC glVertexAttrib4NusvARB;
    PFNGLVERTEXATTRIB4BVARBPROC glVertexAttrib4bvARB;
    PFNGLVERTEXATTRIB4DARBPROC glVertexAttrib4dARB;
    PFNGLVERTEXATTRIB4DVARBPROC glVertexAttrib4dvARB;
    PFNGLVERTEXATTRIB4FARBPROC glVertexAttrib4fARB;
    PFNGLVERTEXATTRIB4FVARBPROC glVertexAttrib4fvARB;
    PFNGLVERTEXATTRIB4IVARBPROC glVertexAttrib4ivARB;
    PFNGLVERTEXATTRIB4SARBPROC glVertexAttrib4sARB;
    PFNGLVERTEXATTRIB4SVARBPROC glVertexAttrib4svARB;
    PFNGLVERTEXATTRIB4UBVARBPROC glVertexAttrib4ubvARB;
    PFNGLVERTEXATTRIB4UIVARBPROC glVertexAttrib4uivARB;
    PFNGLVERTEXATTRIB4USVARBPROC glVertexAttrib4usvARB;
    PFNGLVERTEXATTRIBPOINTERARBPROC glVertexAttribPointerARB;
    PFNGLENABLEVERTEXATTRIBARRAYARBPROC glEnableVertexAttribArrayARB;
    PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glDisableVertexAttribArrayARB;
    PFNGLGETVERTEXATTRIBDVARBPROC glGetVertexAttribdvARB;
    PFNGLGETVERTEXATTRIBFVARBPROC glGetVertexAttribfvARB;
    PFNGLGETVERTEXATTRIBIVARBPROC glGetVertexAttribivARB;
    PFNGLGETVERTEXATTRIBPOINTERVARBPROC glGetVertexAttribPointervARB;
    PFNGLBINDATTRIBLOCATIONARBPROC glBindAttribLocationARB;
    PFNGLGETACTIVEATTRIBARBPROC glGetActiveAttribARB;
    PFNGLGETATTRIBLOCATIONARBPROC glGetAttribLocationARB;
    PFNGLDEPTHRANGEARRAYDVNVPROC glDepthRangeArraydvNV;
    PFNGLDEPTHRANGEINDEXEDDNVPROC glDepthRangeIndexeddNV;
    PFNGLWINDOWPOS2DARBPROC glWindowPos2dARB;
    PFNGLWINDOWPOS2DVARBPROC glWindowPos2dvARB;
    PFNGLWINDOWPOS2FARBPROC glWindowPos2fARB;
    PFNGLWINDOWPOS2FVARBPROC glWindowPos2fvARB;
    PFNGLWINDOWPOS2IARBPROC glWindowPos2iARB;
    PFNGLWINDOWPOS2IVARBPROC glWindowPos2ivARB;
    PFNGLWINDOWPOS2SARBPROC glWindowPos2sARB;
    PFNGLWINDOWPOS2SVARBPROC glWindowPos2svARB;
    PFNGLWINDOWPOS3DARBPROC glWindowPos3dARB;
    PFNGLWINDOWPOS3DVARBPROC glWindowPos3dvARB;
    PFNGLWINDOWPOS3FARBPROC glWindowPos3fARB;
    PFNGLWINDOWPOS3FVARBPROC glWindowPos3fvARB;
    PFNGLWINDOWPOS3IARBPROC glWindowPos3iARB;
    PFNGLWINDOWPOS3IVARBPROC glWindowPos3ivARB;
    PFNGLWINDOWPOS3SARBPROC glWindowPos3sARB;
    PFNGLWINDOWPOS3SVARBPROC glWindowPos3svARB;
    PFNGLDRAWBUFFERSATIPROC glDrawBuffersATI;
    PFNGLELEMENTPOINTERATIPROC glElementPointerATI;
    PFNGLDRAWELEMENTARRAYATIPROC glDrawElementArrayATI;
    PFNGLDRAWRANGEELEMENTARRAYATIPROC glDrawRangeElementArrayATI;
    PFNGLTEXBUMPPARAMETERIVATIPROC glTexBumpParameterivATI;
    PFNGLTEXBUMPPARAMETERFVATIPROC glTexBumpParameterfvATI;
    PFNGLGETTEXBUMPPARAMETERIVATIPROC glGetTexBumpParameterivATI;
    PFNGLGETTEXBUMPPARAMETERFVATIPROC glGetTexBumpParameterfvATI;
    PFNGLGENFRAGMENTSHADERSATIPROC glGenFragmentShadersATI;
    PFNGLBINDFRAGMENTSHADERATIPROC glBindFragmentShaderATI;
    PFNGLDELETEFRAGMENTSHADERATIPROC glDeleteFragmentShaderATI;
    PFNGLBEGINFRAGMENTSHADERATIPROC glBeginFragmentShaderATI;
    PFNGLENDFRAGMENTSHADERATIPROC glEndFragmentShaderATI;
    PFNGLPASSTEXCOORDATIPROC glPassTexCoordATI;
    PFNGLSAMPLEMAPATIPROC glSampleMapATI;
    PFNGLCOLORFRAGMENTOP1ATIPROC glColorFragmentOp1ATI;
    PFNGLCOLORFRAGMENTOP2ATIPROC glColorFragmentOp2ATI;
    PFNGLCOLORFRAGMENTOP3ATIPROC glColorFragmentOp3ATI;
    PFNGLALPHAFRAGMENTOP1ATIPROC glAlphaFragmentOp1ATI;
    PFNGLALPHAFRAGMENTOP2ATIPROC glAlphaFragmentOp2ATI;
    PFNGLALPHAFRAGMENTOP3ATIPROC glAlphaFragmentOp3ATI;
    PFNGLSETFRAGMENTSHADERCONSTANTATIPROC glSetFragmentShaderConstantATI;
    PFNGLMAPOBJECTBUFFERATIPROC glMapObjectBufferATI;
    PFNGLUNMAPOBJECTBUFFERATIPROC glUnmapObjectBufferATI;
    PFNGLPNTRIANGLESIATIPROC glPNTrianglesiATI;
    PFNGLPNTRIANGLESFATIPROC glPNTrianglesfATI;
    PFNGLSTENCILOPSEPARATEATIPROC glStencilOpSeparateATI;
    PFNGLSTENCILFUNCSEPARATEATIPROC glStencilFuncSeparateATI;
    PFNGLNEWOBJECTBUFFERATIPROC glNewObjectBufferATI;
    PFNGLISOBJECTBUFFERATIPROC glIsObjectBufferATI;
    PFNGLUPDATEOBJECTBUFFERATIPROC glUpdateObjectBufferATI;
    PFNGLGETOBJECTBUFFERFVATIPROC glGetObjectBufferfvATI;
    PFNGLGETOBJECTBUFFERIVATIPROC glGetObjectBufferivATI;
    PFNGLFREEOBJECTBUFFERATIPROC glFreeObjectBufferATI;
    PFNGLARRAYOBJECTATIPROC glArrayObjectATI;
    PFNGLGETARRAYOBJECTFVATIPROC glGetArrayObjectfvATI;
    PFNGLGETARRAYOBJECTIVATIPROC glGetArrayObjectivATI;
    PFNGLVARIANTARRAYOBJECTATIPROC glVariantArrayObjectATI;
    PFNGLGETVARIANTARRAYOBJECTFVATIPROC glGetVariantArrayObjectfvATI;
    PFNGLGETVARIANTARRAYOBJECTIVATIPROC glGetVariantArrayObjectivATI;
    PFNGLVERTEXATTRIBARRAYOBJECTATIPROC glVertexAttribArrayObjectATI;
    PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC glGetVertexAttribArrayObjectfvATI;
    PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC glGetVertexAttribArrayObjectivATI;
    PFNGLVERTEXSTREAM1SATIPROC glVertexStream1sATI;
    PFNGLVERTEXSTREAM1SVATIPROC glVertexStream1svATI;
    PFNGLVERTEXSTREAM1IATIPROC glVertexStream1iATI;
    PFNGLVERTEXSTREAM1IVATIPROC glVertexStream1ivATI;
    PFNGLVERTEXSTREAM1FATIPROC glVertexStream1fATI;
    PFNGLVERTEXSTREAM1FVATIPROC glVertexStream1fvATI;
    PFNGLVERTEXSTREAM1DATIPROC glVertexStream1dATI;
    PFNGLVERTEXSTREAM1DVATIPROC glVertexStream1dvATI;
    PFNGLVERTEXSTREAM2SATIPROC glVertexStream2sATI;
    PFNGLVERTEXSTREAM2SVATIPROC glVertexStream2svATI;
    PFNGLVERTEXSTREAM2IATIPROC glVertexStream2iATI;
    PFNGLVERTEXSTREAM2IVATIPROC glVertexStream2ivATI;
    PFNGLVERTEXSTREAM2FATIPROC glVertexStream2fATI;
    PFNGLVERTEXSTREAM2FVATIPROC glVertexStream2fvATI;
    PFNGLVERTEXSTREAM2DATIPROC glVertexStream2dATI;
    PFNGLVERTEXSTREAM2DVATIPROC glVertexStream2dvATI;
    PFNGLVERTEXSTREAM3SATIPROC glVertexStream3sATI;
    PFNGLVERTEXSTREAM3SVATIPROC glVertexStream3svATI;
    PFNGLVERTEXSTREAM3IATIPROC glVertexStream3iATI;
    PFNGLVERTEXSTREAM3IVATIPROC glVertexStream3ivATI;
    PFNGLVERTEXSTREAM3FATIPROC glVertexStream3fATI;
    PFNGLVERTEXSTREAM3FVATIPROC glVertexStream3fvATI;
    PFNGLVERTEXSTREAM3DATIPROC glVertexStream3dATI;
    PFNGLVERTEXSTREAM3DVATIPROC glVertexStream3dvATI;
    PFNGLVERTEXSTREAM4SATIPROC glVertexStream4sATI;
    PFNGLVERTEXSTREAM4SVATIPROC glVertexStream4svATI;
    PFNGLVERTEXSTREAM4IATIPROC glVertexStream4iATI;
    PFNGLVERTEXSTREAM4IVATIPROC glVertexStream4ivATI;
    PFNGLVERTEXSTREAM4FATIPROC glVertexStream4fATI;
    PFNGLVERTEXSTREAM4FVATIPROC glVertexStream4fvATI;
    PFNGLVERTEXSTREAM4DATIPROC glVertexStream4dATI;
    PFNGLVERTEXSTREAM4DVATIPROC glVertexStream4dvATI;
    PFNGLNORMALSTREAM3BATIPROC glNormalStream3bATI;
    PFNGLNORMALSTREAM3BVATIPROC glNormalStream3bvATI;
    PFNGLNORMALSTREAM3SATIPROC glNormalStream3sATI;
    PFNGLNORMALSTREAM3SVATIPROC glNormalStream3svATI;
    PFNGLNORMALSTREAM3IATIPROC glNormalStream3iATI;
    PFNGLNORMALSTREAM3IVATIPROC glNormalStream3ivATI;
    PFNGLNORMALSTREAM3FATIPROC glNormalStream3fATI;
    PFNGLNORMALSTREAM3FVATIPROC glNormalStream3fvATI;
    PFNGLNORMALSTREAM3DATIPROC glNormalStream3dATI;
    PFNGLNORMALSTREAM3DVATIPROC glNormalStream3dvATI;
    PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC glClientActiveVertexStreamATI;
    PFNGLVERTEXBLENDENVIATIPROC glVertexBlendEnviATI;
    PFNGLVERTEXBLENDENVFATIPROC glVertexBlendEnvfATI;
    PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC glEGLImageTargetTexStorageEXT;
    PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC glEGLImageTargetTextureStorageEXT;
    PFNGLUNIFORMBUFFEREXTPROC glUniformBufferEXT;
    PFNGLGETUNIFORMBUFFERSIZEEXTPROC glGetUniformBufferSizeEXT;
    PFNGLGETUNIFORMOFFSETEXTPROC glGetUniformOffsetEXT;
    PFNGLBLENDCOLOREXTPROC glBlendColorEXT;
    PFNGLBLENDEQUATIONSEPARATEEXTPROC glBlendEquationSeparateEXT;
    PFNGLBLENDFUNCSEPARATEEXTPROC glBlendFuncSeparateEXT;
    PFNGLBLENDEQUATIONEXTPROC glBlendEquationEXT;
    PFNGLCOLORSUBTABLEEXTPROC glColorSubTableEXT;
    PFNGLCOPYCOLORSUBTABLEEXTPROC glCopyColorSubTableEXT;
    PFNGLLOCKARRAYSEXTPROC glLockArraysEXT;
    PFNGLUNLOCKARRAYSEXTPROC glUnlockArraysEXT;
    PFNGLCONVOLUTIONFILTER1DEXTPROC glConvolutionFilter1DEXT;
    PFNGLCONVOLUTIONFILTER2DEXTPROC glConvolutionFilter2DEXT;
    PFNGLCONVOLUTIONPARAMETERFEXTPROC glConvolutionParameterfEXT;
    PFNGLCONVOLUTIONPARAMETERFVEXTPROC glConvolutionParameterfvEXT;
    PFNGLCONVOLUTIONPARAMETERIEXTPROC glConvolutionParameteriEXT;
    PFNGLCONVOLUTIONPARAMETERIVEXTPROC glConvolutionParameterivEXT;
    PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC glCopyConvolutionFilter1DEXT;
    PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC glCopyConvolutionFilter2DEXT;
    PFNGLGETCONVOLUTIONFILTEREXTPROC glGetConvolutionFilterEXT;
    PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC glGetConvolutionParameterfvEXT;
    PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC glGetConvolutionParameterivEXT;
    PFNGLGETSEPARABLEFILTEREXTPROC glGetSeparableFilterEXT;
    PFNGLSEPARABLEFILTER2DEXTPROC glSeparableFilter2DEXT;
    PFNGLTANGENT3BEXTPROC glTangent3bEXT;
    PFNGLTANGENT3BVEXTPROC glTangent3bvEXT;
    PFNGLTANGENT3DEXTPROC glTangent3dEXT;
    PFNGLTANGENT3DVEXTPROC glTangent3dvEXT;
    PFNGLTANGENT3FEXTPROC glTangent3fEXT;
    PFNGLTANGENT3FVEXTPROC glTangent3fvEXT;
    PFNGLTANGENT3IEXTPROC glTangent3iEXT;
    PFNGLTANGENT3IVEXTPROC glTangent3ivEXT;
    PFNGLTANGENT3SEXTPROC glTangent3sEXT;
    PFNGLTANGENT3SVEXTPROC glTangent3svEXT;
    PFNGLBINORMAL3BEXTPROC glBinormal3bEXT;
    PFNGLBINORMAL3BVEXTPROC glBinormal3bvEXT;
    PFNGLBINORMAL3DEXTPROC glBinormal3dEXT;
    PFNGLBINORMAL3DVEXTPROC glBinormal3dvEXT;
    PFNGLBINORMAL3FEXTPROC glBinormal3fEXT;
    PFNGLBINORMAL3FVEXTPROC glBinormal3fvEXT;
    PFNGLBINORMAL3IEXTPROC glBinormal3iEXT;
    PFNGLBINORMAL3IVEXTPROC glBinormal3ivEXT;
    PFNGLBINORMAL3SEXTPROC glBinormal3sEXT;
    PFNGLBINORMAL3SVEXTPROC glBinormal3svEXT;
    PFNGLTANGENTPOINTEREXTPROC glTangentPointerEXT;
    PFNGLBINORMALPOINTEREXTPROC glBinormalPointerEXT;
    PFNGLCOPYTEXIMAGE1DEXTPROC glCopyTexImage1DEXT;
    PFNGLCOPYTEXIMAGE2DEXTPROC glCopyTexImage2DEXT;
    PFNGLCOPYTEXSUBIMAGE1DEXTPROC glCopyTexSubImage1DEXT;
    PFNGLCOPYTEXSUBIMAGE2DEXTPROC glCopyTexSubImage2DEXT;
    PFNGLCOPYTEXSUBIMAGE3DEXTPROC glCopyTexSubImage3DEXT;
    PFNGLCULLPARAMETERDVEXTPROC glCullParameterdvEXT;
    PFNGLCULLPARAMETERFVEXTPROC glCullParameterfvEXT;
    PFNGLLABELOBJECTEXTPROC glLabelObjectEXT;
    PFNGLGETOBJECTLABELEXTPROC glGetObjectLabelEXT;
    PFNGLINSERTEVENTMARKEREXTPROC glInsertEventMarkerEXT;
    PFNGLPUSHGROUPMARKEREXTPROC glPushGroupMarkerEXT;
    PFNGLPOPGROUPMARKEREXTPROC glPopGroupMarkerEXT;
    PFNGLDEPTHBOUNDSEXTPROC glDepthBoundsEXT;
    PFNGLMATRIXLOADFEXTPROC glMatrixLoadfEXT;
    PFNGLMATRIXLOADDEXTPROC glMatrixLoaddEXT;
    PFNGLMATRIXMULTFEXTPROC glMatrixMultfEXT;
    PFNGLMATRIXMULTDEXTPROC glMatrixMultdEXT;
    PFNGLMATRIXLOADIDENTITYEXTPROC glMatrixLoadIdentityEXT;
    PFNGLMATRIXROTATEFEXTPROC glMatrixRotatefEXT;
    PFNGLMATRIXROTATEDEXTPROC glMatrixRotatedEXT;
    PFNGLMATRIXSCALEFEXTPROC glMatrixScalefEXT;
    PFNGLMATRIXSCALEDEXTPROC glMatrixScaledEXT;
    PFNGLMATRIXTRANSLATEFEXTPROC glMatrixTranslatefEXT;
    PFNGLMATRIXTRANSLATEDEXTPROC glMatrixTranslatedEXT;
    PFNGLMATRIXFRUSTUMEXTPROC glMatrixFrustumEXT;
    PFNGLMATRIXORTHOEXTPROC glMatrixOrthoEXT;
    PFNGLMATRIXPOPEXTPROC glMatrixPopEXT;
    PFNGLMATRIXPUSHEXTPROC glMatrixPushEXT;
    PFNGLCLIENTATTRIBDEFAULTEXTPROC glClientAttribDefaultEXT;
    PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glPushClientAttribDefaultEXT;
    PFNGLTEXTUREPARAMETERFEXTPROC glTextureParameterfEXT;
    PFNGLTEXTUREPARAMETERFVEXTPROC glTextureParameterfvEXT;
    PFNGLTEXTUREPARAMETERIEXTPROC glTextureParameteriEXT;
    PFNGLTEXTUREPARAMETERIVEXTPROC glTextureParameterivEXT;
    PFNGLTEXTUREIMAGE1DEXTPROC glTextureImage1DEXT;
    PFNGLTEXTUREIMAGE2DEXTPROC glTextureImage2DEXT;
    PFNGLTEXTURESUBIMAGE1DEXTPROC glTextureSubImage1DEXT;
    PFNGLTEXTURESUBIMAGE2DEXTPROC glTextureSubImage2DEXT;
    PFNGLCOPYTEXTUREIMAGE1DEXTPROC glCopyTextureImage1DEXT;
    PFNGLCOPYTEXTUREIMAGE2DEXTPROC glCopyTextureImage2DEXT;
    PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glCopyTextureSubImage1DEXT;
    PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glCopyTextureSubImage2DEXT;
    PFNGLGETTEXTUREIMAGEEXTPROC glGetTextureImageEXT;
    PFNGLGETTEXTUREPARAMETERFVEXTPROC glGetTextureParameterfvEXT;
    PFNGLGETTEXTUREPARAMETERIVEXTPROC glGetTextureParameterivEXT;
    PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glGetTextureLevelParameterfvEXT;
    PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glGetTextureLevelParameterivEXT;
    PFNGLTEXTUREIMAGE3DEXTPROC glTextureImage3DEXT;
    PFNGLTEXTURESUBIMAGE3DEXTPROC glTextureSubImage3DEXT;
    PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glCopyTextureSubImage3DEXT;
    PFNGLBINDMULTITEXTUREEXTPROC glBindMultiTextureEXT;
    PFNGLMULTITEXCOORDPOINTEREXTPROC glMultiTexCoordPointerEXT;
    PFNGLMULTITEXENVFEXTPROC glMultiTexEnvfEXT;
    PFNGLMULTITEXENVFVEXTPROC glMultiTexEnvfvEXT;
    PFNGLMULTITEXENVIEXTPROC glMultiTexEnviEXT;
    PFNGLMULTITEXENVIVEXTPROC glMultiTexEnvivEXT;
    PFNGLMULTITEXGENDEXTPROC glMultiTexGendEXT;
    PFNGLMULTITEXGENDVEXTPROC glMultiTexGendvEXT;
    PFNGLMULTITEXGENFEXTPROC glMultiTexGenfEXT;
    PFNGLMULTITEXGENFVEXTPROC glMultiTexGenfvEXT;
    PFNGLMULTITEXGENIEXTPROC glMultiTexGeniEXT;
    PFNGLMULTITEXGENIVEXTPROC glMultiTexGenivEXT;
    PFNGLGETMULTITEXENVFVEXTPROC glGetMultiTexEnvfvEXT;
    PFNGLGETMULTITEXENVIVEXTPROC glGetMultiTexEnvivEXT;
    PFNGLGETMULTITEXGENDVEXTPROC glGetMultiTexGendvEXT;
    PFNGLGETMULTITEXGENFVEXTPROC glGetMultiTexGenfvEXT;
    PFNGLGETMULTITEXGENIVEXTPROC glGetMultiTexGenivEXT;
    PFNGLMULTITEXPARAMETERIEXTPROC glMultiTexParameteriEXT;
    PFNGLMULTITEXPARAMETERIVEXTPROC glMultiTexParameterivEXT;
    PFNGLMULTITEXPARAMETERFEXTPROC glMultiTexParameterfEXT;
    PFNGLMULTITEXPARAMETERFVEXTPROC glMultiTexParameterfvEXT;
    PFNGLMULTITEXIMAGE1DEXTPROC glMultiTexImage1DEXT;
    PFNGLMULTITEXIMAGE2DEXTPROC glMultiTexImage2DEXT;
    PFNGLMULTITEXSUBIMAGE1DEXTPROC glMultiTexSubImage1DEXT;
    PFNGLMULTITEXSUBIMAGE2DEXTPROC glMultiTexSubImage2DEXT;
    PFNGLCOPYMULTITEXIMAGE1DEXTPROC glCopyMultiTexImage1DEXT;
    PFNGLCOPYMULTITEXIMAGE2DEXTPROC glCopyMultiTexImage2DEXT;
    PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glCopyMultiTexSubImage1DEXT;
    PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glCopyMultiTexSubImage2DEXT;
    PFNGLGETMULTITEXIMAGEEXTPROC glGetMultiTexImageEXT;
    PFNGLGETMULTITEXPARAMETERFVEXTPROC glGetMultiTexParameterfvEXT;
    PFNGLGETMULTITEXPARAMETERIVEXTPROC glGetMultiTexParameterivEXT;
    PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glGetMultiTexLevelParameterfvEXT;
    PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glGetMultiTexLevelParameterivEXT;
    PFNGLMULTITEXIMAGE3DEXTPROC glMultiTexImage3DEXT;
    PFNGLMULTITEXSUBIMAGE3DEXTPROC glMultiTexSubImage3DEXT;
    PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glCopyMultiTexSubImage3DEXT;
    PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glEnableClientStateIndexedEXT;
    PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glDisableClientStateIndexedEXT;
    PFNGLGETFLOATINDEXEDVEXTPROC glGetFloatIndexedvEXT;
    PFNGLGETDOUBLEINDEXEDVEXTPROC glGetDoubleIndexedvEXT;
    PFNGLGETPOINTERINDEXEDVEXTPROC glGetPointerIndexedvEXT;
    PFNGLENABLEINDEXEDEXTPROC glEnableIndexedEXT;
    PFNGLDISABLEINDEXEDEXTPROC glDisableIndexedEXT;
    PFNGLISENABLEDINDEXEDEXTPROC glIsEnabledIndexedEXT;
    PFNGLGETINTEGERINDEXEDVEXTPROC glGetIntegerIndexedvEXT;
    PFNGLGETBOOLEANINDEXEDVEXTPROC glGetBooleanIndexedvEXT;
    PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glCompressedTextureImage3DEXT;
    PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glCompressedTextureImage2DEXT;
    PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glCompressedTextureImage1DEXT;
    PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glCompressedTextureSubImage3DEXT;
    PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glCompressedTextureSubImage2DEXT;
    PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glCompressedTextureSubImage1DEXT;
    PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glGetCompressedTextureImageEXT;
    PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glCompressedMultiTexImage3DEXT;
    PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glCompressedMultiTexImage2DEXT;
    PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glCompressedMultiTexImage1DEXT;
    PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glCompressedMultiTexSubImage3DEXT;
    PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glCompressedMultiTexSubImage2DEXT;
    PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glCompressedMultiTexSubImage1DEXT;
    PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glGetCompressedMultiTexImageEXT;
    PFNGLMATRIXLOADTRANSPOSEFEXTPROC glMatrixLoadTransposefEXT;
    PFNGLMATRIXLOADTRANSPOSEDEXTPROC glMatrixLoadTransposedEXT;
    PFNGLMATRIXMULTTRANSPOSEFEXTPROC glMatrixMultTransposefEXT;
    PFNGLMATRIXMULTTRANSPOSEDEXTPROC glMatrixMultTransposedEXT;
    PFNGLNAMEDBUFFERDATAEXTPROC glNamedBufferDataEXT;
    PFNGLNAMEDBUFFERSUBDATAEXTPROC glNamedBufferSubDataEXT;
    PFNGLMAPNAMEDBUFFEREXTPROC glMapNamedBufferEXT;
    PFNGLUNMAPNAMEDBUFFEREXTPROC glUnmapNamedBufferEXT;
    PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glGetNamedBufferParameterivEXT;
    PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glGetNamedBufferPointervEXT;
    PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glGetNamedBufferSubDataEXT;
    PFNGLPROGRAMUNIFORM1FEXTPROC glProgramUniform1fEXT;
    PFNGLPROGRAMUNIFORM2FEXTPROC glProgramUniform2fEXT;
    PFNGLPROGRAMUNIFORM3FEXTPROC glProgramUniform3fEXT;
    PFNGLPROGRAMUNIFORM4FEXTPROC glProgramUniform4fEXT;
    PFNGLPROGRAMUNIFORM1IEXTPROC glProgramUniform1iEXT;
    PFNGLPROGRAMUNIFORM2IEXTPROC glProgramUniform2iEXT;
    PFNGLPROGRAMUNIFORM3IEXTPROC glProgramUniform3iEXT;
    PFNGLPROGRAMUNIFORM4IEXTPROC glProgramUniform4iEXT;
    PFNGLPROGRAMUNIFORM1FVEXTPROC glProgramUniform1fvEXT;
    PFNGLPROGRAMUNIFORM2FVEXTPROC glProgramUniform2fvEXT;
    PFNGLPROGRAMUNIFORM3FVEXTPROC glProgramUniform3fvEXT;
    PFNGLPROGRAMUNIFORM4FVEXTPROC glProgramUniform4fvEXT;
    PFNGLPROGRAMUNIFORM1IVEXTPROC glProgramUniform1ivEXT;
    PFNGLPROGRAMUNIFORM2IVEXTPROC glProgramUniform2ivEXT;
    PFNGLPROGRAMUNIFORM3IVEXTPROC glProgramUniform3ivEXT;
    PFNGLPROGRAMUNIFORM4IVEXTPROC glProgramUniform4ivEXT;
    PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glProgramUniformMatrix2fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glProgramUniformMatrix3fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glProgramUniformMatrix4fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glProgramUniformMatrix2x3fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glProgramUniformMatrix3x2fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glProgramUniformMatrix2x4fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glProgramUniformMatrix4x2fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glProgramUniformMatrix3x4fvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glProgramUniformMatrix4x3fvEXT;
    PFNGLTEXTUREBUFFEREXTPROC glTextureBufferEXT;
    PFNGLMULTITEXBUFFEREXTPROC glMultiTexBufferEXT;
    PFNGLTEXTUREPARAMETERIIVEXTPROC glTextureParameterIivEXT;
    PFNGLTEXTUREPARAMETERIUIVEXTPROC glTextureParameterIuivEXT;
    PFNGLGETTEXTUREPARAMETERIIVEXTPROC glGetTextureParameterIivEXT;
    PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glGetTextureParameterIuivEXT;
    PFNGLMULTITEXPARAMETERIIVEXTPROC glMultiTexParameterIivEXT;
    PFNGLMULTITEXPARAMETERIUIVEXTPROC glMultiTexParameterIuivEXT;
    PFNGLGETMULTITEXPARAMETERIIVEXTPROC glGetMultiTexParameterIivEXT;
    PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glGetMultiTexParameterIuivEXT;
    PFNGLPROGRAMUNIFORM1UIEXTPROC glProgramUniform1uiEXT;
    PFNGLPROGRAMUNIFORM2UIEXTPROC glProgramUniform2uiEXT;
    PFNGLPROGRAMUNIFORM3UIEXTPROC glProgramUniform3uiEXT;
    PFNGLPROGRAMUNIFORM4UIEXTPROC glProgramUniform4uiEXT;
    PFNGLPROGRAMUNIFORM1UIVEXTPROC glProgramUniform1uivEXT;
    PFNGLPROGRAMUNIFORM2UIVEXTPROC glProgramUniform2uivEXT;
    PFNGLPROGRAMUNIFORM3UIVEXTPROC glProgramUniform3uivEXT;
    PFNGLPROGRAMUNIFORM4UIVEXTPROC glProgramUniform4uivEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glNamedProgramLocalParameters4fvEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glNamedProgramLocalParameterI4iEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glNamedProgramLocalParameterI4ivEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glNamedProgramLocalParametersI4ivEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glNamedProgramLocalParameterI4uiEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glNamedProgramLocalParameterI4uivEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glNamedProgramLocalParametersI4uivEXT;
    PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glGetNamedProgramLocalParameterIivEXT;
    PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glGetNamedProgramLocalParameterIuivEXT;
    PFNGLENABLECLIENTSTATEIEXTPROC glEnableClientStateiEXT;
    PFNGLDISABLECLIENTSTATEIEXTPROC glDisableClientStateiEXT;
    PFNGLGETFLOATI_VEXTPROC glGetFloati_vEXT;
    PFNGLGETDOUBLEI_VEXTPROC glGetDoublei_vEXT;
    PFNGLGETPOINTERI_VEXTPROC glGetPointeri_vEXT;
    PFNGLNAMEDPROGRAMSTRINGEXTPROC glNamedProgramStringEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glNamedProgramLocalParameter4dEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glNamedProgramLocalParameter4dvEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glNamedProgramLocalParameter4fEXT;
    PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glNamedProgramLocalParameter4fvEXT;
    PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glGetNamedProgramLocalParameterdvEXT;
    PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glGetNamedProgramLocalParameterfvEXT;
    PFNGLGETNAMEDPROGRAMIVEXTPROC glGetNamedProgramivEXT;
    PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glGetNamedProgramStringEXT;
    PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glNamedRenderbufferStorageEXT;
    PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glGetNamedRenderbufferParameterivEXT;
    PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glNamedRenderbufferStorageMultisampleEXT;
    PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glNamedRenderbufferStorageMultisampleCoverageEXT;
    PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glCheckNamedFramebufferStatusEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glNamedFramebufferTexture1DEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glNamedFramebufferTexture2DEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glNamedFramebufferTexture3DEXT;
    PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glNamedFramebufferRenderbufferEXT;
    PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetNamedFramebufferAttachmentParameterivEXT;
    PFNGLGENERATETEXTUREMIPMAPEXTPROC glGenerateTextureMipmapEXT;
    PFNGLGENERATEMULTITEXMIPMAPEXTPROC glGenerateMultiTexMipmapEXT;
    PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glFramebufferDrawBufferEXT;
    PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glFramebufferDrawBuffersEXT;
    PFNGLFRAMEBUFFERREADBUFFEREXTPROC glFramebufferReadBufferEXT;
    PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glGetFramebufferParameterivEXT;
    PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glNamedCopyBufferSubDataEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glNamedFramebufferTextureEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glNamedFramebufferTextureLayerEXT;
    PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glNamedFramebufferTextureFaceEXT;
    PFNGLTEXTURERENDERBUFFEREXTPROC glTextureRenderbufferEXT;
    PFNGLMULTITEXRENDERBUFFEREXTPROC glMultiTexRenderbufferEXT;
    PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC glVertexArrayVertexOffsetEXT;
    PFNGLVERTEXARRAYCOLOROFFSETEXTPROC glVertexArrayColorOffsetEXT;
    PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC glVertexArrayEdgeFlagOffsetEXT;
    PFNGLVERTEXARRAYINDEXOFFSETEXTPROC glVertexArrayIndexOffsetEXT;
    PFNGLVERTEXARRAYNORMALOFFSETEXTPROC glVertexArrayNormalOffsetEXT;
    PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC glVertexArrayTexCoordOffsetEXT;
    PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC glVertexArrayMultiTexCoordOffsetEXT;
    PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC glVertexArrayFogCoordOffsetEXT;
    PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC glVertexArraySecondaryColorOffsetEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC glVertexArrayVertexAttribOffsetEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC glVertexArrayVertexAttribIOffsetEXT;
    PFNGLENABLEVERTEXARRAYEXTPROC glEnableVertexArrayEXT;
    PFNGLDISABLEVERTEXARRAYEXTPROC glDisableVertexArrayEXT;
    PFNGLENABLEVERTEXARRAYATTRIBEXTPROC glEnableVertexArrayAttribEXT;
    PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC glDisableVertexArrayAttribEXT;
    PFNGLGETVERTEXARRAYINTEGERVEXTPROC glGetVertexArrayIntegervEXT;
    PFNGLGETVERTEXARRAYPOINTERVEXTPROC glGetVertexArrayPointervEXT;
    PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC glGetVertexArrayIntegeri_vEXT;
    PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC glGetVertexArrayPointeri_vEXT;
    PFNGLMAPNAMEDBUFFERRANGEEXTPROC glMapNamedBufferRangeEXT;
    PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glFlushMappedNamedBufferRangeEXT;
    PFNGLNAMEDBUFFERSTORAGEEXTPROC glNamedBufferStorageEXT;
    PFNGLCLEARNAMEDBUFFERDATAEXTPROC glClearNamedBufferDataEXT;
    PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glClearNamedBufferSubDataEXT;
    PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glNamedFramebufferParameteriEXT;
    PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glGetNamedFramebufferParameterivEXT;
    PFNGLPROGRAMUNIFORM1DEXTPROC glProgramUniform1dEXT;
    PFNGLPROGRAMUNIFORM2DEXTPROC glProgramUniform2dEXT;
    PFNGLPROGRAMUNIFORM3DEXTPROC glProgramUniform3dEXT;
    PFNGLPROGRAMUNIFORM4DEXTPROC glProgramUniform4dEXT;
    PFNGLPROGRAMUNIFORM1DVEXTPROC glProgramUniform1dvEXT;
    PFNGLPROGRAMUNIFORM2DVEXTPROC glProgramUniform2dvEXT;
    PFNGLPROGRAMUNIFORM3DVEXTPROC glProgramUniform3dvEXT;
    PFNGLPROGRAMUNIFORM4DVEXTPROC glProgramUniform4dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glProgramUniformMatrix2dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glProgramUniformMatrix3dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glProgramUniformMatrix4dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glProgramUniformMatrix2x3dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glProgramUniformMatrix2x4dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glProgramUniformMatrix3x2dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glProgramUniformMatrix3x4dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glProgramUniformMatrix4x2dvEXT;
    PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glProgramUniformMatrix4x3dvEXT;
    PFNGLTEXTUREBUFFERRANGEEXTPROC glTextureBufferRangeEXT;
    PFNGLTEXTURESTORAGE1DEXTPROC glTextureStorage1DEXT;
    PFNGLTEXTURESTORAGE2DEXTPROC glTextureStorage2DEXT;
    PFNGLTEXTURESTORAGE3DEXTPROC glTextureStorage3DEXT;
    PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glTextureStorage2DMultisampleEXT;
    PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glTextureStorage3DMultisampleEXT;
    PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glVertexArrayBindVertexBufferEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glVertexArrayVertexAttribFormatEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glVertexArrayVertexAttribIFormatEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glVertexArrayVertexAttribLFormatEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glVertexArrayVertexAttribBindingEXT;
    PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glVertexArrayVertexBindingDivisorEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glVertexArrayVertexAttribLOffsetEXT;
    PFNGLTEXTUREPAGECOMMITMENTEXTPROC glTexturePageCommitmentEXT;
    PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC glVertexArrayVertexAttribDivisorEXT;
    PFNGLCOLORMASKINDEXEDEXTPROC glColorMaskIndexedEXT;
    PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstancedEXT;
    PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstancedEXT;
    PFNGLDRAWRANGEELEMENTSEXTPROC glDrawRangeElementsEXT;
    PFNGLBUFFERSTORAGEEXTERNALEXTPROC glBufferStorageExternalEXT;
    PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC glNamedBufferStorageExternalEXT;
    PFNGLFOGCOORDFEXTPROC glFogCoordfEXT;
    PFNGLFOGCOORDFVEXTPROC glFogCoordfvEXT;
    PFNGLFOGCOORDDEXTPROC glFogCoorddEXT;
    PFNGLFOGCOORDDVEXTPROC glFogCoorddvEXT;
    PFNGLFOGCOORDPOINTEREXTPROC glFogCoordPointerEXT;
    PFNGLBLITFRAMEBUFFEREXTPROC glBlitFramebufferEXT;
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glRenderbufferStorageMultisampleEXT;
    PFNGLISRENDERBUFFEREXTPROC glIsRenderbufferEXT;
    PFNGLBINDRENDERBUFFEREXTPROC glBindRenderbufferEXT;
    PFNGLDELETERENDERBUFFERSEXTPROC glDeleteRenderbuffersEXT;
    PFNGLGENRENDERBUFFERSEXTPROC glGenRenderbuffersEXT;
    PFNGLRENDERBUFFERSTORAGEEXTPROC glRenderbufferStorageEXT;
    PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glGetRenderbufferParameterivEXT;
    PFNGLISFRAMEBUFFEREXTPROC glIsFramebufferEXT;
    PFNGLBINDFRAMEBUFFEREXTPROC glBindFramebufferEXT;
    PFNGLDELETEFRAMEBUFFERSEXTPROC glDeleteFramebuffersEXT;
    PFNGLGENFRAMEBUFFERSEXTPROC glGenFramebuffersEXT;
    PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glCheckFramebufferStatusEXT;
    PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glFramebufferTexture1DEXT;
    PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glFramebufferTexture2DEXT;
    PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glFramebufferTexture3DEXT;
    PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glFramebufferRenderbufferEXT;
    PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetFramebufferAttachmentParameterivEXT;
    PFNGLGENERATEMIPMAPEXTPROC glGenerateMipmapEXT;
    PFNGLPROGRAMPARAMETERIEXTPROC glProgramParameteriEXT;
    PFNGLPROGRAMENVPARAMETERS4FVEXTPROC glProgramEnvParameters4fvEXT;
    PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC glProgramLocalParameters4fvEXT;
    PFNGLGETUNIFORMUIVEXTPROC glGetUniformuivEXT;
    PFNGLBINDFRAGDATALOCATIONEXTPROC glBindFragDataLocationEXT;
    PFNGLGETFRAGDATALOCATIONEXTPROC glGetFragDataLocationEXT;
    PFNGLUNIFORM1UIEXTPROC glUniform1uiEXT;
    PFNGLUNIFORM2UIEXTPROC glUniform2uiEXT;
    PFNGLUNIFORM3UIEXTPROC glUniform3uiEXT;
    PFNGLUNIFORM4UIEXTPROC glUniform4uiEXT;
    PFNGLUNIFORM1UIVEXTPROC glUniform1uivEXT;
    PFNGLUNIFORM2UIVEXTPROC glUniform2uivEXT;
    PFNGLUNIFORM3UIVEXTPROC glUniform3uivEXT;
    PFNGLUNIFORM4UIVEXTPROC glUniform4uivEXT;
    PFNGLGETHISTOGRAMEXTPROC glGetHistogramEXT;
    PFNGLGETHISTOGRAMPARAMETERFVEXTPROC glGetHistogramParameterfvEXT;
    PFNGLGETHISTOGRAMPARAMETERIVEXTPROC glGetHistogramParameterivEXT;
    PFNGLGETMINMAXEXTPROC glGetMinmaxEXT;
    PFNGLGETMINMAXPARAMETERFVEXTPROC glGetMinmaxParameterfvEXT;
    PFNGLGETMINMAXPARAMETERIVEXTPROC glGetMinmaxParameterivEXT;
    PFNGLHISTOGRAMEXTPROC glHistogramEXT;
    PFNGLMINMAXEXTPROC glMinmaxEXT;
    PFNGLRESETHISTOGRAMEXTPROC glResetHistogramEXT;
    PFNGLRESETMINMAXEXTPROC glResetMinmaxEXT;
    PFNGLINDEXFUNCEXTPROC glIndexFuncEXT;
    PFNGLINDEXMATERIALEXTPROC glIndexMaterialEXT;
    PFNGLAPPLYTEXTUREEXTPROC glApplyTextureEXT;
    PFNGLTEXTURELIGHTEXTPROC glTextureLightEXT;
    PFNGLTEXTUREMATERIALEXTPROC glTextureMaterialEXT;
    PFNGLGETUNSIGNEDBYTEVEXTPROC glGetUnsignedBytevEXT;
    PFNGLGETUNSIGNEDBYTEI_VEXTPROC glGetUnsignedBytei_vEXT;
    PFNGLDELETEMEMORYOBJECTSEXTPROC glDeleteMemoryObjectsEXT;
    PFNGLISMEMORYOBJECTEXTPROC glIsMemoryObjectEXT;
    PFNGLCREATEMEMORYOBJECTSEXTPROC glCreateMemoryObjectsEXT;
    PFNGLMEMORYOBJECTPARAMETERIVEXTPROC glMemoryObjectParameterivEXT;
    PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC glGetMemoryObjectParameterivEXT;
    PFNGLTEXSTORAGEMEM2DEXTPROC glTexStorageMem2DEXT;
    PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC glTexStorageMem2DMultisampleEXT;
    PFNGLTEXSTORAGEMEM3DEXTPROC glTexStorageMem3DEXT;
    PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC glTexStorageMem3DMultisampleEXT;
    PFNGLBUFFERSTORAGEMEMEXTPROC glBufferStorageMemEXT;
    PFNGLTEXTURESTORAGEMEM2DEXTPROC glTextureStorageMem2DEXT;
    PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC glTextureStorageMem2DMultisampleEXT;
    PFNGLTEXTURESTORAGEMEM3DEXTPROC glTextureStorageMem3DEXT;
    PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC glTextureStorageMem3DMultisampleEXT;
    PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC glNamedBufferStorageMemEXT;
    PFNGLTEXSTORAGEMEM1DEXTPROC glTexStorageMem1DEXT;
    PFNGLTEXTURESTORAGEMEM1DEXTPROC glTextureStorageMem1DEXT;
    PFNGLIMPORTMEMORYFDEXTPROC glImportMemoryFdEXT;
    PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC glImportMemoryWin32HandleEXT;
    PFNGLIMPORTMEMORYWIN32NAMEEXTPROC glImportMemoryWin32NameEXT;
    PFNGLMULTIDRAWARRAYSEXTPROC glMultiDrawArraysEXT;
    PFNGLMULTIDRAWELEMENTSEXTPROC glMultiDrawElementsEXT;
    PFNGLSAMPLEMASKEXTPROC glSampleMaskEXT;
    PFNGLSAMPLEPATTERNEXTPROC glSamplePatternEXT;
    PFNGLCOLORTABLEEXTPROC glColorTableEXT;
    PFNGLGETCOLORTABLEEXTPROC glGetColorTableEXT;
    PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glGetColorTableParameterivEXT;
    PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glGetColorTableParameterfvEXT;
    PFNGLPIXELTRANSFORMPARAMETERIEXTPROC glPixelTransformParameteriEXT;
    PFNGLPIXELTRANSFORMPARAMETERFEXTPROC glPixelTransformParameterfEXT;
    PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC glPixelTransformParameterivEXT;
    PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC glPixelTransformParameterfvEXT;
    PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC glGetPixelTransformParameterivEXT;
    PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC glGetPixelTransformParameterfvEXT;
    PFNGLPOINTPARAMETERFEXTPROC glPointParameterfEXT;
    PFNGLPOINTPARAMETERFVEXTPROC glPointParameterfvEXT;
    PFNGLPOLYGONOFFSETEXTPROC glPolygonOffsetEXT;
    PFNGLPOLYGONOFFSETCLAMPEXTPROC glPolygonOffsetClampEXT;
    PFNGLPROVOKINGVERTEXEXTPROC glProvokingVertexEXT;
    PFNGLRASTERSAMPLESEXTPROC glRasterSamplesEXT;
    PFNGLGENSEMAPHORESEXTPROC glGenSemaphoresEXT;
    PFNGLDELETESEMAPHORESEXTPROC glDeleteSemaphoresEXT;
    PFNGLISSEMAPHOREEXTPROC glIsSemaphoreEXT;
    PFNGLSEMAPHOREPARAMETERUI64VEXTPROC glSemaphoreParameterui64vEXT;
    PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC glGetSemaphoreParameterui64vEXT;
    PFNGLWAITSEMAPHOREEXTPROC glWaitSemaphoreEXT;
    PFNGLSIGNALSEMAPHOREEXTPROC glSignalSemaphoreEXT;
    PFNGLIMPORTSEMAPHOREFDEXTPROC glImportSemaphoreFdEXT;
    PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC glImportSemaphoreWin32HandleEXT;
    PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC glImportSemaphoreWin32NameEXT;
    PFNGLSECONDARYCOLOR3BEXTPROC glSecondaryColor3bEXT;
    PFNGLSECONDARYCOLOR3BVEXTPROC glSecondaryColor3bvEXT;
    PFNGLSECONDARYCOLOR3DEXTPROC glSecondaryColor3dEXT;
    PFNGLSECONDARYCOLOR3DVEXTPROC glSecondaryColor3dvEXT;
    PFNGLSECONDARYCOLOR3FEXTPROC glSecondaryColor3fEXT;
    PFNGLSECONDARYCOLOR3FVEXTPROC glSecondaryColor3fvEXT;
    PFNGLSECONDARYCOLOR3IEXTPROC glSecondaryColor3iEXT;
    PFNGLSECONDARYCOLOR3IVEXTPROC glSecondaryColor3ivEXT;
    PFNGLSECONDARYCOLOR3SEXTPROC glSecondaryColor3sEXT;
    PFNGLSECONDARYCOLOR3SVEXTPROC glSecondaryColor3svEXT;
    PFNGLSECONDARYCOLOR3UBEXTPROC glSecondaryColor3ubEXT;
    PFNGLSECONDARYCOLOR3UBVEXTPROC glSecondaryColor3ubvEXT;
    PFNGLSECONDARYCOLOR3UIEXTPROC glSecondaryColor3uiEXT;
    PFNGLSECONDARYCOLOR3UIVEXTPROC glSecondaryColor3uivEXT;
    PFNGLSECONDARYCOLOR3USEXTPROC glSecondaryColor3usEXT;
    PFNGLSECONDARYCOLOR3USVEXTPROC glSecondaryColor3usvEXT;
    PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointerEXT;
    PFNGLUSESHADERPROGRAMEXTPROC glUseShaderProgramEXT;
    PFNGLACTIVEPROGRAMEXTPROC glActiveProgramEXT;
    PFNGLCREATESHADERPROGRAMEXTPROC glCreateShaderProgramEXT;
    PFNGLACTIVESHADERPROGRAMEXTPROC glActiveShaderProgramEXT;
    PFNGLBINDPROGRAMPIPELINEEXTPROC glBindProgramPipelineEXT;
    PFNGLCREATESHADERPROGRAMVEXTPROC glCreateShaderProgramvEXT;
    PFNGLDELETEPROGRAMPIPELINESEXTPROC glDeleteProgramPipelinesEXT;
    PFNGLGENPROGRAMPIPELINESEXTPROC glGenProgramPipelinesEXT;
    PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC glGetProgramPipelineInfoLogEXT;
    PFNGLGETPROGRAMPIPELINEIVEXTPROC glGetProgramPipelineivEXT;
    PFNGLISPROGRAMPIPELINEEXTPROC glIsProgramPipelineEXT;
    PFNGLUSEPROGRAMSTAGESEXTPROC glUseProgramStagesEXT;
    PFNGLVALIDATEPROGRAMPIPELINEEXTPROC glValidateProgramPipelineEXT;
    PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC glFramebufferFetchBarrierEXT;
    PFNGLBINDIMAGETEXTUREEXTPROC glBindImageTextureEXT;
    PFNGLMEMORYBARRIEREXTPROC glMemoryBarrierEXT;
    PFNGLSTENCILCLEARTAGEXTPROC glStencilClearTagEXT;
    PFNGLACTIVESTENCILFACEEXTPROC glActiveStencilFaceEXT;
    PFNGLTEXSUBIMAGE1DEXTPROC glTexSubImage1DEXT;
    PFNGLTEXSUBIMAGE2DEXTPROC glTexSubImage2DEXT;
    PFNGLTEXIMAGE3DEXTPROC glTexImage3DEXT;
    PFNGLTEXSUBIMAGE3DEXTPROC glTexSubImage3DEXT;
    PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glFramebufferTextureLayerEXT;
    PFNGLTEXBUFFEREXTPROC glTexBufferEXT;
    PFNGLTEXPARAMETERIIVEXTPROC glTexParameterIivEXT;
    PFNGLTEXPARAMETERIUIVEXTPROC glTexParameterIuivEXT;
    PFNGLGETTEXPARAMETERIIVEXTPROC glGetTexParameterIivEXT;
    PFNGLGETTEXPARAMETERIUIVEXTPROC glGetTexParameterIuivEXT;
    PFNGLCLEARCOLORIIEXTPROC glClearColorIiEXT;
    PFNGLCLEARCOLORIUIEXTPROC glClearColorIuiEXT;
    PFNGLARETEXTURESRESIDENTEXTPROC glAreTexturesResidentEXT;
    PFNGLBINDTEXTUREEXTPROC glBindTextureEXT;
    PFNGLDELETETEXTURESEXTPROC glDeleteTexturesEXT;
    PFNGLGENTEXTURESEXTPROC glGenTexturesEXT;
    PFNGLISTEXTUREEXTPROC glIsTextureEXT;
    PFNGLPRIORITIZETEXTURESEXTPROC glPrioritizeTexturesEXT;
    PFNGLTEXTURENORMALEXTPROC glTextureNormalEXT;
    PFNGLCREATESEMAPHORESNVPROC glCreateSemaphoresNV;
    PFNGLSEMAPHOREPARAMETERIVNVPROC glSemaphoreParameterivNV;
    PFNGLGETSEMAPHOREPARAMETERIVNVPROC glGetSemaphoreParameterivNV;
    PFNGLGETQUERYOBJECTI64VEXTPROC glGetQueryObjecti64vEXT;
    PFNGLGETQUERYOBJECTUI64VEXTPROC glGetQueryObjectui64vEXT;
    PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glBeginTransformFeedbackEXT;
    PFNGLENDTRANSFORMFEEDBACKEXTPROC glEndTransformFeedbackEXT;
    PFNGLBINDBUFFERRANGEEXTPROC glBindBufferRangeEXT;
    PFNGLBINDBUFFEROFFSETEXTPROC glBindBufferOffsetEXT;
    PFNGLBINDBUFFERBASEEXTPROC glBindBufferBaseEXT;
    PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glTransformFeedbackVaryingsEXT;
    PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glGetTransformFeedbackVaryingEXT;
    PFNGLARRAYELEMENTEXTPROC glArrayElementEXT;
    PFNGLCOLORPOINTEREXTPROC glColorPointerEXT;
    PFNGLDRAWARRAYSEXTPROC glDrawArraysEXT;
    PFNGLEDGEFLAGPOINTEREXTPROC glEdgeFlagPointerEXT;
    PFNGLGETPOINTERVEXTPROC glGetPointervEXT;
    PFNGLINDEXPOINTEREXTPROC glIndexPointerEXT;
    PFNGLNORMALPOINTEREXTPROC glNormalPointerEXT;
    PFNGLTEXCOORDPOINTEREXTPROC glTexCoordPointerEXT;
    PFNGLVERTEXPOINTEREXTPROC glVertexPointerEXT;
    PFNGLVERTEXATTRIBL1DEXTPROC glVertexAttribL1dEXT;
    PFNGLVERTEXATTRIBL2DEXTPROC glVertexAttribL2dEXT;
    PFNGLVERTEXATTRIBL3DEXTPROC glVertexAttribL3dEXT;
    PFNGLVERTEXATTRIBL4DEXTPROC glVertexAttribL4dEXT;
    PFNGLVERTEXATTRIBL1DVEXTPROC glVertexAttribL1dvEXT;
    PFNGLVERTEXATTRIBL2DVEXTPROC glVertexAttribL2dvEXT;
    PFNGLVERTEXATTRIBL3DVEXTPROC glVertexAttribL3dvEXT;
    PFNGLVERTEXATTRIBL4DVEXTPROC glVertexAttribL4dvEXT;
    PFNGLVERTEXATTRIBLPOINTEREXTPROC glVertexAttribLPointerEXT;
    PFNGLGETVERTEXATTRIBLDVEXTPROC glGetVertexAttribLdvEXT;
    PFNGLBEGINVERTEXSHADEREXTPROC glBeginVertexShaderEXT;
    PFNGLENDVERTEXSHADEREXTPROC glEndVertexShaderEXT;
    PFNGLBINDVERTEXSHADEREXTPROC glBindVertexShaderEXT;
    PFNGLGENVERTEXSHADERSEXTPROC glGenVertexShadersEXT;
    PFNGLDELETEVERTEXSHADEREXTPROC glDeleteVertexShaderEXT;
    PFNGLSHADEROP1EXTPROC glShaderOp1EXT;
    PFNGLSHADEROP2EXTPROC glShaderOp2EXT;
    PFNGLSHADEROP3EXTPROC glShaderOp3EXT;
    PFNGLSWIZZLEEXTPROC glSwizzleEXT;
    PFNGLWRITEMASKEXTPROC glWriteMaskEXT;
    PFNGLINSERTCOMPONENTEXTPROC glInsertComponentEXT;
    PFNGLEXTRACTCOMPONENTEXTPROC glExtractComponentEXT;
    PFNGLGENSYMBOLSEXTPROC glGenSymbolsEXT;
    PFNGLSETINVARIANTEXTPROC glSetInvariantEXT;
    PFNGLSETLOCALCONSTANTEXTPROC glSetLocalConstantEXT;
    PFNGLVARIANTBVEXTPROC glVariantbvEXT;
    PFNGLVARIANTSVEXTPROC glVariantsvEXT;
    PFNGLVARIANTIVEXTPROC glVariantivEXT;
    PFNGLVARIANTFVEXTPROC glVariantfvEXT;
    PFNGLVARIANTDVEXTPROC glVariantdvEXT;
    PFNGLVARIANTUBVEXTPROC glVariantubvEXT;
    PFNGLVARIANTUSVEXTPROC glVariantusvEXT;
    PFNGLVARIANTUIVEXTPROC glVariantuivEXT;
    PFNGLVARIANTPOINTEREXTPROC glVariantPointerEXT;
    PFNGLENABLEVARIANTCLIENTSTATEEXTPROC glEnableVariantClientStateEXT;
    PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC glDisableVariantClientStateEXT;
    PFNGLBINDLIGHTPARAMETEREXTPROC glBindLightParameterEXT;
    PFNGLBINDMATERIALPARAMETEREXTPROC glBindMaterialParameterEXT;
    PFNGLBINDTEXGENPARAMETEREXTPROC glBindTexGenParameterEXT;
    PFNGLBINDTEXTUREUNITPARAMETEREXTPROC glBindTextureUnitParameterEXT;
    PFNGLBINDPARAMETEREXTPROC glBindParameterEXT;
    PFNGLISVARIANTENABLEDEXTPROC glIsVariantEnabledEXT;
    PFNGLGETVARIANTBOOLEANVEXTPROC glGetVariantBooleanvEXT;
    PFNGLGETVARIANTINTEGERVEXTPROC glGetVariantIntegervEXT;
    PFNGLGETVARIANTFLOATVEXTPROC glGetVariantFloatvEXT;
    PFNGLGETVARIANTPOINTERVEXTPROC glGetVariantPointervEXT;
    PFNGLGETINVARIANTBOOLEANVEXTPROC glGetInvariantBooleanvEXT;
    PFNGLGETINVARIANTINTEGERVEXTPROC glGetInvariantIntegervEXT;
    PFNGLGETINVARIANTFLOATVEXTPROC glGetInvariantFloatvEXT;
    PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC glGetLocalConstantBooleanvEXT;
    PFNGLGETLOCALCONSTANTINTEGERVEXTPROC glGetLocalConstantIntegervEXT;
    PFNGLGETLOCALCONSTANTFLOATVEXTPROC glGetLocalConstantFloatvEXT;
    PFNGLVERTEXWEIGHTFEXTPROC glVertexWeightfEXT;
    PFNGLVERTEXWEIGHTFVEXTPROC glVertexWeightfvEXT;
    PFNGLVERTEXWEIGHTPOINTEREXTPROC glVertexWeightPointerEXT;
    PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC glAcquireKeyedMutexWin32EXT;
    PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC glReleaseKeyedMutexWin32EXT;
    PFNGLWINDOWRECTANGLESEXTPROC glWindowRectanglesEXT;
    PFNGLIMPORTSYNCEXTPROC glImportSyncEXT;
    PFNGLFRAMETERMINATORGREMEDYPROC glFrameTerminatorGREMEDY;
    PFNGLSTRINGMARKERGREMEDYPROC glStringMarkerGREMEDY;
    PFNGLIMAGETRANSFORMPARAMETERIHPPROC glImageTransformParameteriHP;
    PFNGLIMAGETRANSFORMPARAMETERFHPPROC glImageTransformParameterfHP;
    PFNGLIMAGETRANSFORMPARAMETERIVHPPROC glImageTransformParameterivHP;
    PFNGLIMAGETRANSFORMPARAMETERFVHPPROC glImageTransformParameterfvHP;
    PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC glGetImageTransformParameterivHP;
    PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC glGetImageTransformParameterfvHP;
    PFNGLMULTIMODEDRAWARRAYSIBMPROC glMultiModeDrawArraysIBM;
    PFNGLMULTIMODEDRAWELEMENTSIBMPROC glMultiModeDrawElementsIBM;
    PFNGLFLUSHSTATICDATAIBMPROC glFlushStaticDataIBM;
    PFNGLCOLORPOINTERLISTIBMPROC glColorPointerListIBM;
    PFNGLSECONDARYCOLORPOINTERLISTIBMPROC glSecondaryColorPointerListIBM;
    PFNGLEDGEFLAGPOINTERLISTIBMPROC glEdgeFlagPointerListIBM;
    PFNGLFOGCOORDPOINTERLISTIBMPROC glFogCoordPointerListIBM;
    PFNGLINDEXPOINTERLISTIBMPROC glIndexPointerListIBM;
    PFNGLNORMALPOINTERLISTIBMPROC glNormalPointerListIBM;
    PFNGLTEXCOORDPOINTERLISTIBMPROC glTexCoordPointerListIBM;
    PFNGLVERTEXPOINTERLISTIBMPROC glVertexPointerListIBM;
    PFNGLBLENDFUNCSEPARATEINGRPROC glBlendFuncSeparateINGR;
    PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC glApplyFramebufferAttachmentCMAAINTEL;
    PFNGLSYNCTEXTUREINTELPROC glSyncTextureINTEL;
    PFNGLUNMAPTEXTURE2DINTELPROC glUnmapTexture2DINTEL;
    PFNGLMAPTEXTURE2DINTELPROC glMapTexture2DINTEL;
    PFNGLVERTEXPOINTERVINTELPROC glVertexPointervINTEL;
    PFNGLNORMALPOINTERVINTELPROC glNormalPointervINTEL;
    PFNGLCOLORPOINTERVINTELPROC glColorPointervINTEL;
    PFNGLTEXCOORDPOINTERVINTELPROC glTexCoordPointervINTEL;
    PFNGLBEGINPERFQUERYINTELPROC glBeginPerfQueryINTEL;
    PFNGLCREATEPERFQUERYINTELPROC glCreatePerfQueryINTEL;
    PFNGLDELETEPERFQUERYINTELPROC glDeletePerfQueryINTEL;
    PFNGLENDPERFQUERYINTELPROC glEndPerfQueryINTEL;
    PFNGLGETFIRSTPERFQUERYIDINTELPROC glGetFirstPerfQueryIdINTEL;
    PFNGLGETNEXTPERFQUERYIDINTELPROC glGetNextPerfQueryIdINTEL;
    PFNGLGETPERFCOUNTERINFOINTELPROC glGetPerfCounterInfoINTEL;
    PFNGLGETPERFQUERYDATAINTELPROC glGetPerfQueryDataINTEL;
    PFNGLGETPERFQUERYIDBYNAMEINTELPROC glGetPerfQueryIdByNameINTEL;
    PFNGLGETPERFQUERYINFOINTELPROC glGetPerfQueryInfoINTEL;
    PFNGLBLENDBARRIERKHRPROC glBlendBarrierKHR;
    PFNGLDEBUGMESSAGECONTROLKHRPROC glDebugMessageControlKHR;
    PFNGLDEBUGMESSAGEINSERTKHRPROC glDebugMessageInsertKHR;
    PFNGLDEBUGMESSAGECALLBACKKHRPROC glDebugMessageCallbackKHR;
    PFNGLGETDEBUGMESSAGELOGKHRPROC glGetDebugMessageLogKHR;
    PFNGLPUSHDEBUGGROUPKHRPROC glPushDebugGroupKHR;
    PFNGLPOPDEBUGGROUPKHRPROC glPopDebugGroupKHR;
    PFNGLOBJECTLABELKHRPROC glObjectLabelKHR;
    PFNGLGETOBJECTLABELKHRPROC glGetObjectLabelKHR;
    PFNGLOBJECTPTRLABELKHRPROC glObjectPtrLabelKHR;
    PFNGLGETOBJECTPTRLABELKHRPROC glGetObjectPtrLabelKHR;
    PFNGLGETPOINTERVKHRPROC glGetPointervKHR;
    PFNGLGETGRAPHICSRESETSTATUSKHRPROC glGetGraphicsResetStatusKHR;
    PFNGLREADNPIXELSKHRPROC glReadnPixelsKHR;
    PFNGLGETNUNIFORMFVKHRPROC glGetnUniformfvKHR;
    PFNGLGETNUNIFORMIVKHRPROC glGetnUniformivKHR;
    PFNGLGETNUNIFORMUIVKHRPROC glGetnUniformuivKHR;
    PFNGLMAXSHADERCOMPILERTHREADSKHRPROC glMaxShaderCompilerThreadsKHR;
    PFNGLFRAMEBUFFERPARAMETERIMESAPROC glFramebufferParameteriMESA;
    PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC glGetFramebufferParameterivMESA;
    PFNGLRESIZEBUFFERSMESAPROC glResizeBuffersMESA;
    PFNGLWINDOWPOS2DMESAPROC glWindowPos2dMESA;
    PFNGLWINDOWPOS2DVMESAPROC glWindowPos2dvMESA;
    PFNGLWINDOWPOS2FMESAPROC glWindowPos2fMESA;
    PFNGLWINDOWPOS2FVMESAPROC glWindowPos2fvMESA;
    PFNGLWINDOWPOS2IMESAPROC glWindowPos2iMESA;
    PFNGLWINDOWPOS2IVMESAPROC glWindowPos2ivMESA;
    PFNGLWINDOWPOS2SMESAPROC glWindowPos2sMESA;
    PFNGLWINDOWPOS2SVMESAPROC glWindowPos2svMESA;
    PFNGLWINDOWPOS3DMESAPROC glWindowPos3dMESA;
    PFNGLWINDOWPOS3DVMESAPROC glWindowPos3dvMESA;
    PFNGLWINDOWPOS3FMESAPROC glWindowPos3fMESA;
    PFNGLWINDOWPOS3FVMESAPROC glWindowPos3fvMESA;
    PFNGLWINDOWPOS3IMESAPROC glWindowPos3iMESA;
    PFNGLWINDOWPOS3IVMESAPROC glWindowPos3ivMESA;
    PFNGLWINDOWPOS3SMESAPROC glWindowPos3sMESA;
    PFNGLWINDOWPOS3SVMESAPROC glWindowPos3svMESA;
    PFNGLWINDOWPOS4DMESAPROC glWindowPos4dMESA;
    PFNGLWINDOWPOS4DVMESAPROC glWindowPos4dvMESA;
    PFNGLWINDOWPOS4FMESAPROC glWindowPos4fMESA;
    PFNGLWINDOWPOS4FVMESAPROC glWindowPos4fvMESA;
    PFNGLWINDOWPOS4IMESAPROC glWindowPos4iMESA;
    PFNGLWINDOWPOS4IVMESAPROC glWindowPos4ivMESA;
    PFNGLWINDOWPOS4SMESAPROC glWindowPos4sMESA;
    PFNGLWINDOWPOS4SVMESAPROC glWindowPos4svMESA;
    PFNGLBEGINCONDITIONALRENDERNVXPROC glBeginConditionalRenderNVX;
    PFNGLENDCONDITIONALRENDERNVXPROC glEndConditionalRenderNVX;
    PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC glLGPUNamedBufferSubDataNVX;
    PFNGLLGPUCOPYIMAGESUBDATANVXPROC glLGPUCopyImageSubDataNVX;
    PFNGLLGPUINTERLOCKNVXPROC glLGPUInterlockNVX;
    PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC glAlphaToCoverageDitherControlNV;
    PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC glMultiDrawArraysIndirectBindlessNV;
    PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC glMultiDrawElementsIndirectBindlessNV;
    PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC glMultiDrawArraysIndirectBindlessCountNV;
    PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC glMultiDrawElementsIndirectBindlessCountNV;
    PFNGLGETTEXTUREHANDLENVPROC glGetTextureHandleNV;
    PFNGLGETTEXTURESAMPLERHANDLENVPROC glGetTextureSamplerHandleNV;
    PFNGLMAKETEXTUREHANDLERESIDENTNVPROC glMakeTextureHandleResidentNV;
    PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC glMakeTextureHandleNonResidentNV;
    PFNGLGETIMAGEHANDLENVPROC glGetImageHandleNV;
    PFNGLMAKEIMAGEHANDLERESIDENTNVPROC glMakeImageHandleResidentNV;
    PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC glMakeImageHandleNonResidentNV;
    PFNGLUNIFORMHANDLEUI64NVPROC glUniformHandleui64NV;
    PFNGLUNIFORMHANDLEUI64VNVPROC glUniformHandleui64vNV;
    PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC glProgramUniformHandleui64NV;
    PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC glProgramUniformHandleui64vNV;
    PFNGLISTEXTUREHANDLERESIDENTNVPROC glIsTextureHandleResidentNV;
    PFNGLISIMAGEHANDLERESIDENTNVPROC glIsImageHandleResidentNV;
    PFNGLBLENDPARAMETERINVPROC glBlendParameteriNV;
    PFNGLBLENDBARRIERNVPROC glBlendBarrierNV;
    PFNGLVIEWPORTPOSITIONWSCALENVPROC glViewportPositionWScaleNV;
    PFNGLCREATESTATESNVPROC glCreateStatesNV;
    PFNGLDELETESTATESNVPROC glDeleteStatesNV;
    PFNGLISSTATENVPROC glIsStateNV;
    PFNGLSTATECAPTURENVPROC glStateCaptureNV;
    PFNGLGETCOMMANDHEADERNVPROC glGetCommandHeaderNV;
    PFNGLGETSTAGEINDEXNVPROC glGetStageIndexNV;
    PFNGLDRAWCOMMANDSNVPROC glDrawCommandsNV;
    PFNGLDRAWCOMMANDSADDRESSNVPROC glDrawCommandsAddressNV;
    PFNGLDRAWCOMMANDSSTATESNVPROC glDrawCommandsStatesNV;
    PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC glDrawCommandsStatesAddressNV;
    PFNGLCREATECOMMANDLISTSNVPROC glCreateCommandListsNV;
    PFNGLDELETECOMMANDLISTSNVPROC glDeleteCommandListsNV;
    PFNGLISCOMMANDLISTNVPROC glIsCommandListNV;
    PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC glListDrawCommandsStatesClientNV;
    PFNGLCOMMANDLISTSEGMENTSNVPROC glCommandListSegmentsNV;
    PFNGLCOMPILECOMMANDLISTNVPROC glCompileCommandListNV;
    PFNGLCALLCOMMANDLISTNVPROC glCallCommandListNV;
    PFNGLBEGINCONDITIONALRENDERNVPROC glBeginConditionalRenderNV;
    PFNGLENDCONDITIONALRENDERNVPROC glEndConditionalRenderNV;
    PFNGLSUBPIXELPRECISIONBIASNVPROC glSubpixelPrecisionBiasNV;
    PFNGLCONSERVATIVERASTERPARAMETERFNVPROC glConservativeRasterParameterfNV;
    PFNGLCONSERVATIVERASTERPARAMETERINVPROC glConservativeRasterParameteriNV;
    PFNGLCOPYIMAGESUBDATANVPROC glCopyImageSubDataNV;
    PFNGLDEPTHRANGEDNVPROC glDepthRangedNV;
    PFNGLCLEARDEPTHDNVPROC glClearDepthdNV;
    PFNGLDEPTHBOUNDSDNVPROC glDepthBoundsdNV;
    PFNGLDRAWTEXTURENVPROC glDrawTextureNV;
    PFNGLDRAWVKIMAGENVPROC glDrawVkImageNV;
    PFNGLGETVKPROCADDRNVPROC glGetVkProcAddrNV;
    PFNGLWAITVKSEMAPHORENVPROC glWaitVkSemaphoreNV;
    PFNGLSIGNALVKSEMAPHORENVPROC glSignalVkSemaphoreNV;
    PFNGLSIGNALVKFENCENVPROC glSignalVkFenceNV;
    PFNGLMAPCONTROLPOINTSNVPROC glMapControlPointsNV;
    PFNGLMAPPARAMETERIVNVPROC glMapParameterivNV;
    PFNGLMAPPARAMETERFVNVPROC glMapParameterfvNV;
    PFNGLGETMAPCONTROLPOINTSNVPROC glGetMapControlPointsNV;
    PFNGLGETMAPPARAMETERIVNVPROC glGetMapParameterivNV;
    PFNGLGETMAPPARAMETERFVNVPROC glGetMapParameterfvNV;
    PFNGLGETMAPATTRIBPARAMETERIVNVPROC glGetMapAttribParameterivNV;
    PFNGLGETMAPATTRIBPARAMETERFVNVPROC glGetMapAttribParameterfvNV;
    PFNGLEVALMAPSNVPROC glEvalMapsNV;
    PFNGLGETMULTISAMPLEFVNVPROC glGetMultisamplefvNV;
    PFNGLSAMPLEMASKINDEXEDNVPROC glSampleMaskIndexedNV;
    PFNGLTEXRENDERBUFFERNVPROC glTexRenderbufferNV;
    PFNGLDELETEFENCESNVPROC glDeleteFencesNV;
    PFNGLGENFENCESNVPROC glGenFencesNV;
    PFNGLISFENCENVPROC glIsFenceNV;
    PFNGLTESTFENCENVPROC glTestFenceNV;
    PFNGLGETFENCEIVNVPROC glGetFenceivNV;
    PFNGLFINISHFENCENVPROC glFinishFenceNV;
    PFNGLSETFENCENVPROC glSetFenceNV;
    PFNGLFRAGMENTCOVERAGECOLORNVPROC glFragmentCoverageColorNV;
    PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glProgramNamedParameter4fNV;
    PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glProgramNamedParameter4fvNV;
    PFNGLPROGRAMNAMEDPARAMETER4DNVPROC glProgramNamedParameter4dNV;
    PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC glProgramNamedParameter4dvNV;
    PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC glGetProgramNamedParameterfvNV;
    PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC glGetProgramNamedParameterdvNV;
    PFNGLCOVERAGEMODULATIONTABLENVPROC glCoverageModulationTableNV;
    PFNGLGETCOVERAGEMODULATIONTABLENVPROC glGetCoverageModulationTableNV;
    PFNGLCOVERAGEMODULATIONNVPROC glCoverageModulationNV;
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC glRenderbufferStorageMultisampleCoverageNV;
    PFNGLPROGRAMVERTEXLIMITNVPROC glProgramVertexLimitNV;
    PFNGLFRAMEBUFFERTEXTUREEXTPROC glFramebufferTextureEXT;
    PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glFramebufferTextureFaceEXT;
    PFNGLPROGRAMLOCALPARAMETERI4INVPROC glProgramLocalParameterI4iNV;
    PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC glProgramLocalParameterI4ivNV;
    PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC glProgramLocalParametersI4ivNV;
    PFNGLPROGRAMLOCALPARAMETERI4UINVPROC glProgramLocalParameterI4uiNV;
    PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC glProgramLocalParameterI4uivNV;
    PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC glProgramLocalParametersI4uivNV;
    PFNGLPROGRAMENVPARAMETERI4INVPROC glProgramEnvParameterI4iNV;
    PFNGLPROGRAMENVPARAMETERI4IVNVPROC glProgramEnvParameterI4ivNV;
    PFNGLPROGRAMENVPARAMETERSI4IVNVPROC glProgramEnvParametersI4ivNV;
    PFNGLPROGRAMENVPARAMETERI4UINVPROC glProgramEnvParameterI4uiNV;
    PFNGLPROGRAMENVPARAMETERI4UIVNVPROC glProgramEnvParameterI4uivNV;
    PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC glProgramEnvParametersI4uivNV;
    PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC glGetProgramLocalParameterIivNV;
    PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC glGetProgramLocalParameterIuivNV;
    PFNGLGETPROGRAMENVPARAMETERIIVNVPROC glGetProgramEnvParameterIivNV;
    PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC glGetProgramEnvParameterIuivNV;
    PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC glProgramSubroutineParametersuivNV;
    PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC glGetProgramSubroutineParameteruivNV;
    PFNGLVERTEX2HNVPROC glVertex2hNV;
    PFNGLVERTEX2HVNVPROC glVertex2hvNV;
    PFNGLVERTEX3HNVPROC glVertex3hNV;
    PFNGLVERTEX3HVNVPROC glVertex3hvNV;
    PFNGLVERTEX4HNVPROC glVertex4hNV;
    PFNGLVERTEX4HVNVPROC glVertex4hvNV;
    PFNGLNORMAL3HNVPROC glNormal3hNV;
    PFNGLNORMAL3HVNVPROC glNormal3hvNV;
    PFNGLCOLOR3HNVPROC glColor3hNV;
    PFNGLCOLOR3HVNVPROC glColor3hvNV;
    PFNGLCOLOR4HNVPROC glColor4hNV;
    PFNGLCOLOR4HVNVPROC glColor4hvNV;
    PFNGLTEXCOORD1HNVPROC glTexCoord1hNV;
    PFNGLTEXCOORD1HVNVPROC glTexCoord1hvNV;
    PFNGLTEXCOORD2HNVPROC glTexCoord2hNV;
    PFNGLTEXCOORD2HVNVPROC glTexCoord2hvNV;
    PFNGLTEXCOORD3HNVPROC glTexCoord3hNV;
    PFNGLTEXCOORD3HVNVPROC glTexCoord3hvNV;
    PFNGLTEXCOORD4HNVPROC glTexCoord4hNV;
    PFNGLTEXCOORD4HVNVPROC glTexCoord4hvNV;
    PFNGLMULTITEXCOORD1HNVPROC glMultiTexCoord1hNV;
    PFNGLMULTITEXCOORD1HVNVPROC glMultiTexCoord1hvNV;
    PFNGLMULTITEXCOORD2HNVPROC glMultiTexCoord2hNV;
    PFNGLMULTITEXCOORD2HVNVPROC glMultiTexCoord2hvNV;
    PFNGLMULTITEXCOORD3HNVPROC glMultiTexCoord3hNV;
    PFNGLMULTITEXCOORD3HVNVPROC glMultiTexCoord3hvNV;
    PFNGLMULTITEXCOORD4HNVPROC glMultiTexCoord4hNV;
    PFNGLMULTITEXCOORD4HVNVPROC glMultiTexCoord4hvNV;
    PFNGLFOGCOORDHNVPROC glFogCoordhNV;
    PFNGLFOGCOORDHVNVPROC glFogCoordhvNV;
    PFNGLSECONDARYCOLOR3HNVPROC glSecondaryColor3hNV;
    PFNGLSECONDARYCOLOR3HVNVPROC glSecondaryColor3hvNV;
    PFNGLVERTEXWEIGHTHNVPROC glVertexWeighthNV;
    PFNGLVERTEXWEIGHTHVNVPROC glVertexWeighthvNV;
    PFNGLVERTEXATTRIB1HNVPROC glVertexAttrib1hNV;
    PFNGLVERTEXATTRIB1HVNVPROC glVertexAttrib1hvNV;
    PFNGLVERTEXATTRIB2HNVPROC glVertexAttrib2hNV;
    PFNGLVERTEXATTRIB2HVNVPROC glVertexAttrib2hvNV;
    PFNGLVERTEXATTRIB3HNVPROC glVertexAttrib3hNV;
    PFNGLVERTEXATTRIB3HVNVPROC glVertexAttrib3hvNV;
    PFNGLVERTEXATTRIB4HNVPROC glVertexAttrib4hNV;
    PFNGLVERTEXATTRIB4HVNVPROC glVertexAttrib4hvNV;
    PFNGLVERTEXATTRIBS1HVNVPROC glVertexAttribs1hvNV;
    PFNGLVERTEXATTRIBS2HVNVPROC glVertexAttribs2hvNV;
    PFNGLVERTEXATTRIBS3HVNVPROC glVertexAttribs3hvNV;
    PFNGLVERTEXATTRIBS4HVNVPROC glVertexAttribs4hvNV;
    PFNGLGETINTERNALFORMATSAMPLEIVNVPROC glGetInternalformatSampleivNV;
    PFNGLRENDERGPUMASKNVPROC glRenderGpuMaskNV;
    PFNGLMULTICASTBUFFERSUBDATANVPROC glMulticastBufferSubDataNV;
    PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC glMulticastCopyBufferSubDataNV;
    PFNGLMULTICASTCOPYIMAGESUBDATANVPROC glMulticastCopyImageSubDataNV;
    PFNGLMULTICASTBLITFRAMEBUFFERNVPROC glMulticastBlitFramebufferNV;
    PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glMulticastFramebufferSampleLocationsfvNV;
    PFNGLMULTICASTBARRIERNVPROC glMulticastBarrierNV;
    PFNGLMULTICASTWAITSYNCNVPROC glMulticastWaitSyncNV;
    PFNGLMULTICASTGETQUERYOBJECTIVNVPROC glMulticastGetQueryObjectivNV;
    PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC glMulticastGetQueryObjectuivNV;
    PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC glMulticastGetQueryObjecti64vNV;
    PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC glMulticastGetQueryObjectui64vNV;
    PFNGLUPLOADGPUMASKNVXPROC glUploadGpuMaskNVX;
    PFNGLMULTICASTVIEWPORTARRAYVNVXPROC glMulticastViewportArrayvNVX;
    PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC glMulticastViewportPositionWScaleNVX;
    PFNGLMULTICASTSCISSORARRAYVNVXPROC glMulticastScissorArrayvNVX;
    PFNGLASYNCCOPYBUFFERSUBDATANVXPROC glAsyncCopyBufferSubDataNVX;
    PFNGLASYNCCOPYIMAGESUBDATANVXPROC glAsyncCopyImageSubDataNVX;
    PFNGLCREATEPROGRESSFENCENVXPROC glCreateProgressFenceNVX;
    PFNGLSIGNALSEMAPHOREUI64NVXPROC glSignalSemaphoreui64NVX;
    PFNGLWAITSEMAPHOREUI64NVXPROC glWaitSemaphoreui64NVX;
    PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC glClientWaitSemaphoreui64NVX;
    PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC glGetMemoryObjectDetachedResourcesuivNV;
    PFNGLRESETMEMORYOBJECTPARAMETERNVPROC glResetMemoryObjectParameterNV;
    PFNGLTEXATTACHMEMORYNVPROC glTexAttachMemoryNV;
    PFNGLBUFFERATTACHMEMORYNVPROC glBufferAttachMemoryNV;
    PFNGLTEXTUREATTACHMEMORYNVPROC glTextureAttachMemoryNV;
    PFNGLNAMEDBUFFERATTACHMEMORYNVPROC glNamedBufferAttachMemoryNV;
    PFNGLBUFFERPAGECOMMITMENTMEMNVPROC glBufferPageCommitmentMemNV;
    PFNGLTEXPAGECOMMITMENTMEMNVPROC glTexPageCommitmentMemNV;
    PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC glNamedBufferPageCommitmentMemNV;
    PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC glTexturePageCommitmentMemNV;
    PFNGLDRAWMESHTASKSNVPROC glDrawMeshTasksNV;
    PFNGLDRAWMESHTASKSINDIRECTNVPROC glDrawMeshTasksIndirectNV;
    PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC glMultiDrawMeshTasksIndirectNV;
    PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC glMultiDrawMeshTasksIndirectCountNV;
    PFNGLGENOCCLUSIONQUERIESNVPROC glGenOcclusionQueriesNV;
    PFNGLDELETEOCCLUSIONQUERIESNVPROC glDeleteOcclusionQueriesNV;
    PFNGLISOCCLUSIONQUERYNVPROC glIsOcclusionQueryNV;
    PFNGLBEGINOCCLUSIONQUERYNVPROC glBeginOcclusionQueryNV;
    PFNGLENDOCCLUSIONQUERYNVPROC glEndOcclusionQueryNV;
    PFNGLGETOCCLUSIONQUERYIVNVPROC glGetOcclusionQueryivNV;
    PFNGLGETOCCLUSIONQUERYUIVNVPROC glGetOcclusionQueryuivNV;
    PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC glProgramBufferParametersfvNV;
    PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC glProgramBufferParametersIivNV;
    PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC glProgramBufferParametersIuivNV;
    PFNGLGENPATHSNVPROC glGenPathsNV;
    PFNGLDELETEPATHSNVPROC glDeletePathsNV;
    PFNGLISPATHNVPROC glIsPathNV;
    PFNGLPATHCOMMANDSNVPROC glPathCommandsNV;
    PFNGLPATHCOORDSNVPROC glPathCoordsNV;
    PFNGLPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
    PFNGLPATHSUBCOORDSNVPROC glPathSubCoordsNV;
    PFNGLPATHSTRINGNVPROC glPathStringNV;
    PFNGLPATHGLYPHSNVPROC glPathGlyphsNV;
    PFNGLPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
    PFNGLWEIGHTPATHSNVPROC glWeightPathsNV;
    PFNGLCOPYPATHNVPROC glCopyPathNV;
    PFNGLINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
    PFNGLTRANSFORMPATHNVPROC glTransformPathNV;
    PFNGLPATHPARAMETERIVNVPROC glPathParameterivNV;
    PFNGLPATHPARAMETERINVPROC glPathParameteriNV;
    PFNGLPATHPARAMETERFVNVPROC glPathParameterfvNV;
    PFNGLPATHPARAMETERFNVPROC glPathParameterfNV;
    PFNGLPATHDASHARRAYNVPROC glPathDashArrayNV;
    PFNGLPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
    PFNGLPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
    PFNGLSTENCILFILLPATHNVPROC glStencilFillPathNV;
    PFNGLSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
    PFNGLSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
    PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
    PFNGLPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
    PFNGLCOVERFILLPATHNVPROC glCoverFillPathNV;
    PFNGLCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
    PFNGLCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
    PFNGLCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
    PFNGLGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
    PFNGLGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
    PFNGLGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
    PFNGLGETPATHCOORDSNVPROC glGetPathCoordsNV;
    PFNGLGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
    PFNGLGETPATHMETRICSNVPROC glGetPathMetricsNV;
    PFNGLGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
    PFNGLGETPATHSPACINGNVPROC glGetPathSpacingNV;
    PFNGLISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
    PFNGLISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
    PFNGLGETPATHLENGTHNVPROC glGetPathLengthNV;
    PFNGLPOINTALONGPATHNVPROC glPointAlongPathNV;
    PFNGLMATRIXLOAD3X2FNVPROC glMatrixLoad3x2fNV;
    PFNGLMATRIXLOAD3X3FNVPROC glMatrixLoad3x3fNV;
    PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC glMatrixLoadTranspose3x3fNV;
    PFNGLMATRIXMULT3X2FNVPROC glMatrixMult3x2fNV;
    PFNGLMATRIXMULT3X3FNVPROC glMatrixMult3x3fNV;
    PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC glMatrixMultTranspose3x3fNV;
    PFNGLSTENCILTHENCOVERFILLPATHNVPROC glStencilThenCoverFillPathNV;
    PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC glStencilThenCoverStrokePathNV;
    PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC glStencilThenCoverFillPathInstancedNV;
    PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC glStencilThenCoverStrokePathInstancedNV;
    PFNGLPATHGLYPHINDEXRANGENVPROC glPathGlyphIndexRangeNV;
    PFNGLPATHGLYPHINDEXARRAYNVPROC glPathGlyphIndexArrayNV;
    PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC glPathMemoryGlyphIndexArrayNV;
    PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC glProgramPathFragmentInputGenNV;
    PFNGLGETPROGRAMRESOURCEFVNVPROC glGetProgramResourcefvNV;
    PFNGLPATHCOLORGENNVPROC glPathColorGenNV;
    PFNGLPATHTEXGENNVPROC glPathTexGenNV;
    PFNGLPATHFOGGENNVPROC glPathFogGenNV;
    PFNGLGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
    PFNGLGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
    PFNGLGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
    PFNGLGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
    PFNGLPIXELDATARANGENVPROC glPixelDataRangeNV;
    PFNGLFLUSHPIXELDATARANGENVPROC glFlushPixelDataRangeNV;
    PFNGLPOINTPARAMETERINVPROC glPointParameteriNV;
    PFNGLPOINTPARAMETERIVNVPROC glPointParameterivNV;
    PFNGLPRESENTFRAMEKEYEDNVPROC glPresentFrameKeyedNV;
    PFNGLPRESENTFRAMEDUALFILLNVPROC glPresentFrameDualFillNV;
    PFNGLGETVIDEOIVNVPROC glGetVideoivNV;
    PFNGLGETVIDEOUIVNVPROC glGetVideouivNV;
    PFNGLGETVIDEOI64VNVPROC glGetVideoi64vNV;
    PFNGLGETVIDEOUI64VNVPROC glGetVideoui64vNV;
    PFNGLPRIMITIVERESTARTNVPROC glPrimitiveRestartNV;
    PFNGLPRIMITIVERESTARTINDEXNVPROC glPrimitiveRestartIndexNV;
    PFNGLQUERYRESOURCENVPROC glQueryResourceNV;
    PFNGLGENQUERYRESOURCETAGNVPROC glGenQueryResourceTagNV;
    PFNGLDELETEQUERYRESOURCETAGNVPROC glDeleteQueryResourceTagNV;
    PFNGLQUERYRESOURCETAGNVPROC glQueryResourceTagNV;
    PFNGLCOMBINERPARAMETERFVNVPROC glCombinerParameterfvNV;
    PFNGLCOMBINERPARAMETERFNVPROC glCombinerParameterfNV;
    PFNGLCOMBINERPARAMETERIVNVPROC glCombinerParameterivNV;
    PFNGLCOMBINERPARAMETERINVPROC glCombinerParameteriNV;
    PFNGLCOMBINERINPUTNVPROC glCombinerInputNV;
    PFNGLCOMBINEROUTPUTNVPROC glCombinerOutputNV;
    PFNGLFINALCOMBINERINPUTNVPROC glFinalCombinerInputNV;
    PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glGetCombinerInputParameterfvNV;
    PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glGetCombinerInputParameterivNV;
    PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glGetCombinerOutputParameterfvNV;
    PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glGetCombinerOutputParameterivNV;
    PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glGetFinalCombinerInputParameterfvNV;
    PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glGetFinalCombinerInputParameterivNV;
    PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glCombinerStageParameterfvNV;
    PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glGetCombinerStageParameterfvNV;
    PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glFramebufferSampleLocationsfvNV;
    PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glNamedFramebufferSampleLocationsfvNV;
    PFNGLRESOLVEDEPTHVALUESNVPROC glResolveDepthValuesNV;
    PFNGLSCISSOREXCLUSIVENVPROC glScissorExclusiveNV;
    PFNGLSCISSOREXCLUSIVEARRAYVNVPROC glScissorExclusiveArrayvNV;
    PFNGLMAKEBUFFERRESIDENTNVPROC glMakeBufferResidentNV;
    PFNGLMAKEBUFFERNONRESIDENTNVPROC glMakeBufferNonResidentNV;
    PFNGLISBUFFERRESIDENTNVPROC glIsBufferResidentNV;
    PFNGLMAKENAMEDBUFFERRESIDENTNVPROC glMakeNamedBufferResidentNV;
    PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC glMakeNamedBufferNonResidentNV;
    PFNGLISNAMEDBUFFERRESIDENTNVPROC glIsNamedBufferResidentNV;
    PFNGLGETBUFFERPARAMETERUI64VNVPROC glGetBufferParameterui64vNV;
    PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC glGetNamedBufferParameterui64vNV;
    PFNGLGETINTEGERUI64VNVPROC glGetIntegerui64vNV;
    PFNGLUNIFORMUI64NVPROC glUniformui64NV;
    PFNGLUNIFORMUI64VNVPROC glUniformui64vNV;
    PFNGLPROGRAMUNIFORMUI64NVPROC glProgramUniformui64NV;
    PFNGLPROGRAMUNIFORMUI64VNVPROC glProgramUniformui64vNV;
    PFNGLBINDSHADINGRATEIMAGENVPROC glBindShadingRateImageNV;
    PFNGLGETSHADINGRATEIMAGEPALETTENVPROC glGetShadingRateImagePaletteNV;
    PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC glGetShadingRateSampleLocationivNV;
    PFNGLSHADINGRATEIMAGEBARRIERNVPROC glShadingRateImageBarrierNV;
    PFNGLSHADINGRATEIMAGEPALETTENVPROC glShadingRateImagePaletteNV;
    PFNGLSHADINGRATESAMPLEORDERNVPROC glShadingRateSampleOrderNV;
    PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC glShadingRateSampleOrderCustomNV;
    PFNGLTEXTUREBARRIERNVPROC glTextureBarrierNV;
    PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC glTexImage2DMultisampleCoverageNV;
    PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC glTexImage3DMultisampleCoverageNV;
    PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC glTextureImage2DMultisampleNV;
    PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC glTextureImage3DMultisampleNV;
    PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC glTextureImage2DMultisampleCoverageNV;
    PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC glTextureImage3DMultisampleCoverageNV;
    PFNGLBEGINTRANSFORMFEEDBACKNVPROC glBeginTransformFeedbackNV;
    PFNGLENDTRANSFORMFEEDBACKNVPROC glEndTransformFeedbackNV;
    PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glTransformFeedbackAttribsNV;
    PFNGLBINDBUFFERRANGENVPROC glBindBufferRangeNV;
    PFNGLBINDBUFFEROFFSETNVPROC glBindBufferOffsetNV;
    PFNGLBINDBUFFERBASENVPROC glBindBufferBaseNV;
    PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glTransformFeedbackVaryingsNV;
    PFNGLACTIVEVARYINGNVPROC glActiveVaryingNV;
    PFNGLGETVARYINGLOCATIONNVPROC glGetVaryingLocationNV;
    PFNGLGETACTIVEVARYINGNVPROC glGetActiveVaryingNV;
    PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glGetTransformFeedbackVaryingNV;
    PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC glTransformFeedbackStreamAttribsNV;
    PFNGLBINDTRANSFORMFEEDBACKNVPROC glBindTransformFeedbackNV;
    PFNGLDELETETRANSFORMFEEDBACKSNVPROC glDeleteTransformFeedbacksNV;
    PFNGLGENTRANSFORMFEEDBACKSNVPROC glGenTransformFeedbacksNV;
    PFNGLISTRANSFORMFEEDBACKNVPROC glIsTransformFeedbackNV;
    PFNGLPAUSETRANSFORMFEEDBACKNVPROC glPauseTransformFeedbackNV;
    PFNGLRESUMETRANSFORMFEEDBACKNVPROC glResumeTransformFeedbackNV;
    PFNGLDRAWTRANSFORMFEEDBACKNVPROC glDrawTransformFeedbackNV;
    PFNGLVDPAUINITNVPROC glVDPAUInitNV;
    PFNGLVDPAUFININVPROC glVDPAUFiniNV;
    PFNGLVDPAUREGISTERVIDEOSURFACENVPROC glVDPAURegisterVideoSurfaceNV;
    PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC glVDPAURegisterOutputSurfaceNV;
    PFNGLVDPAUISSURFACENVPROC glVDPAUIsSurfaceNV;
    PFNGLVDPAUUNREGISTERSURFACENVPROC glVDPAUUnregisterSurfaceNV;
    PFNGLVDPAUGETSURFACEIVNVPROC glVDPAUGetSurfaceivNV;
    PFNGLVDPAUSURFACEACCESSNVPROC glVDPAUSurfaceAccessNV;
    PFNGLVDPAUMAPSURFACESNVPROC glVDPAUMapSurfacesNV;
    PFNGLVDPAUUNMAPSURFACESNVPROC glVDPAUUnmapSurfacesNV;
    PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC glVDPAURegisterVideoSurfaceWithPictureStructureNV;
    PFNGLFLUSHVERTEXARRAYRANGENVPROC glFlushVertexArrayRangeNV;
    PFNGLVERTEXARRAYRANGENVPROC glVertexArrayRangeNV;
    PFNGLVERTEXATTRIBL1I64NVPROC glVertexAttribL1i64NV;
    PFNGLVERTEXATTRIBL2I64NVPROC glVertexAttribL2i64NV;
    PFNGLVERTEXATTRIBL3I64NVPROC glVertexAttribL3i64NV;
    PFNGLVERTEXATTRIBL4I64NVPROC glVertexAttribL4i64NV;
    PFNGLVERTEXATTRIBL1I64VNVPROC glVertexAttribL1i64vNV;
    PFNGLVERTEXATTRIBL2I64VNVPROC glVertexAttribL2i64vNV;
    PFNGLVERTEXATTRIBL3I64VNVPROC glVertexAttribL3i64vNV;
    PFNGLVERTEXATTRIBL4I64VNVPROC glVertexAttribL4i64vNV;
    PFNGLVERTEXATTRIBL1UI64NVPROC glVertexAttribL1ui64NV;
    PFNGLVERTEXATTRIBL2UI64NVPROC glVertexAttribL2ui64NV;
    PFNGLVERTEXATTRIBL3UI64NVPROC glVertexAttribL3ui64NV;
    PFNGLVERTEXATTRIBL4UI64NVPROC glVertexAttribL4ui64NV;
    PFNGLVERTEXATTRIBL1UI64VNVPROC glVertexAttribL1ui64vNV;
    PFNGLVERTEXATTRIBL2UI64VNVPROC glVertexAttribL2ui64vNV;
    PFNGLVERTEXATTRIBL3UI64VNVPROC glVertexAttribL3ui64vNV;
    PFNGLVERTEXATTRIBL4UI64VNVPROC glVertexAttribL4ui64vNV;
    PFNGLGETVERTEXATTRIBLI64VNVPROC glGetVertexAttribLi64vNV;
    PFNGLGETVERTEXATTRIBLUI64VNVPROC glGetVertexAttribLui64vNV;
    PFNGLVERTEXATTRIBLFORMATNVPROC glVertexAttribLFormatNV;
    PFNGLBUFFERADDRESSRANGENVPROC glBufferAddressRangeNV;
    PFNGLVERTEXFORMATNVPROC glVertexFormatNV;
    PFNGLNORMALFORMATNVPROC glNormalFormatNV;
    PFNGLCOLORFORMATNVPROC glColorFormatNV;
    PFNGLINDEXFORMATNVPROC glIndexFormatNV;
    PFNGLTEXCOORDFORMATNVPROC glTexCoordFormatNV;
    PFNGLEDGEFLAGFORMATNVPROC glEdgeFlagFormatNV;
    PFNGLSECONDARYCOLORFORMATNVPROC glSecondaryColorFormatNV;
    PFNGLFOGCOORDFORMATNVPROC glFogCoordFormatNV;
    PFNGLVERTEXATTRIBFORMATNVPROC glVertexAttribFormatNV;
    PFNGLVERTEXATTRIBIFORMATNVPROC glVertexAttribIFormatNV;
    PFNGLGETINTEGERUI64I_VNVPROC glGetIntegerui64i_vNV;
    PFNGLAREPROGRAMSRESIDENTNVPROC glAreProgramsResidentNV;
    PFNGLBINDPROGRAMNVPROC glBindProgramNV;
    PFNGLDELETEPROGRAMSNVPROC glDeleteProgramsNV;
    PFNGLEXECUTEPROGRAMNVPROC glExecuteProgramNV;
    PFNGLGENPROGRAMSNVPROC glGenProgramsNV;
    PFNGLGETPROGRAMPARAMETERDVNVPROC glGetProgramParameterdvNV;
    PFNGLGETPROGRAMPARAMETERFVNVPROC glGetProgramParameterfvNV;
    PFNGLGETPROGRAMIVNVPROC glGetProgramivNV;
    PFNGLGETPROGRAMSTRINGNVPROC glGetProgramStringNV;
    PFNGLGETTRACKMATRIXIVNVPROC glGetTrackMatrixivNV;
    PFNGLGETVERTEXATTRIBDVNVPROC glGetVertexAttribdvNV;
    PFNGLGETVERTEXATTRIBFVNVPROC glGetVertexAttribfvNV;
    PFNGLGETVERTEXATTRIBIVNVPROC glGetVertexAttribivNV;
    PFNGLGETVERTEXATTRIBPOINTERVNVPROC glGetVertexAttribPointervNV;
    PFNGLISPROGRAMNVPROC glIsProgramNV;
    PFNGLLOADPROGRAMNVPROC glLoadProgramNV;
    PFNGLPROGRAMPARAMETER4DNVPROC glProgramParameter4dNV;
    PFNGLPROGRAMPARAMETER4DVNVPROC glProgramParameter4dvNV;
    PFNGLPROGRAMPARAMETER4FNVPROC glProgramParameter4fNV;
    PFNGLPROGRAMPARAMETER4FVNVPROC glProgramParameter4fvNV;
    PFNGLPROGRAMPARAMETERS4DVNVPROC glProgramParameters4dvNV;
    PFNGLPROGRAMPARAMETERS4FVNVPROC glProgramParameters4fvNV;
    PFNGLREQUESTRESIDENTPROGRAMSNVPROC glRequestResidentProgramsNV;
    PFNGLTRACKMATRIXNVPROC glTrackMatrixNV;
    PFNGLVERTEXATTRIBPOINTERNVPROC glVertexAttribPointerNV;
    PFNGLVERTEXATTRIB1DNVPROC glVertexAttrib1dNV;
    PFNGLVERTEXATTRIB1DVNVPROC glVertexAttrib1dvNV;
    PFNGLVERTEXATTRIB1FNVPROC glVertexAttrib1fNV;
    PFNGLVERTEXATTRIB1FVNVPROC glVertexAttrib1fvNV;
    PFNGLVERTEXATTRIB1SNVPROC glVertexAttrib1sNV;
    PFNGLVERTEXATTRIB1SVNVPROC glVertexAttrib1svNV;
    PFNGLVERTEXATTRIB2DNVPROC glVertexAttrib2dNV;
    PFNGLVERTEXATTRIB2DVNVPROC glVertexAttrib2dvNV;
    PFNGLVERTEXATTRIB2FNVPROC glVertexAttrib2fNV;
    PFNGLVERTEXATTRIB2FVNVPROC glVertexAttrib2fvNV;
    PFNGLVERTEXATTRIB2SNVPROC glVertexAttrib2sNV;
    PFNGLVERTEXATTRIB2SVNVPROC glVertexAttrib2svNV;
    PFNGLVERTEXATTRIB3DNVPROC glVertexAttrib3dNV;
    PFNGLVERTEXATTRIB3DVNVPROC glVertexAttrib3dvNV;
    PFNGLVERTEXATTRIB3FNVPROC glVertexAttrib3fNV;
    PFNGLVERTEXATTRIB3FVNVPROC glVertexAttrib3fvNV;
    PFNGLVERTEXATTRIB3SNVPROC glVertexAttrib3sNV;
    PFNGLVERTEXATTRIB3SVNVPROC glVertexAttrib3svNV;
    PFNGLVERTEXATTRIB4DNVPROC glVertexAttrib4dNV;
    PFNGLVERTEXATTRIB4DVNVPROC glVertexAttrib4dvNV;
    PFNGLVERTEXATTRIB4FNVPROC glVertexAttrib4fNV;
    PFNGLVERTEXATTRIB4FVNVPROC glVertexAttrib4fvNV;
    PFNGLVERTEXATTRIB4SNVPROC glVertexAttrib4sNV;
    PFNGLVERTEXATTRIB4SVNVPROC glVertexAttrib4svNV;
    PFNGLVERTEXATTRIB4UBNVPROC glVertexAttrib4ubNV;
    PFNGLVERTEXATTRIB4UBVNVPROC glVertexAttrib4ubvNV;
    PFNGLVERTEXATTRIBS1DVNVPROC glVertexAttribs1dvNV;
    PFNGLVERTEXATTRIBS1FVNVPROC glVertexAttribs1fvNV;
    PFNGLVERTEXATTRIBS1SVNVPROC glVertexAttribs1svNV;
    PFNGLVERTEXATTRIBS2DVNVPROC glVertexAttribs2dvNV;
    PFNGLVERTEXATTRIBS2FVNVPROC glVertexAttribs2fvNV;
    PFNGLVERTEXATTRIBS2SVNVPROC glVertexAttribs2svNV;
    PFNGLVERTEXATTRIBS3DVNVPROC glVertexAttribs3dvNV;
    PFNGLVERTEXATTRIBS3FVNVPROC glVertexAttribs3fvNV;
    PFNGLVERTEXATTRIBS3SVNVPROC glVertexAttribs3svNV;
    PFNGLVERTEXATTRIBS4DVNVPROC glVertexAttribs4dvNV;
    PFNGLVERTEXATTRIBS4FVNVPROC glVertexAttribs4fvNV;
    PFNGLVERTEXATTRIBS4SVNVPROC glVertexAttribs4svNV;
    PFNGLVERTEXATTRIBS4UBVNVPROC glVertexAttribs4ubvNV;
    PFNGLVERTEXATTRIBI1IEXTPROC glVertexAttribI1iEXT;
    PFNGLVERTEXATTRIBI2IEXTPROC glVertexAttribI2iEXT;
    PFNGLVERTEXATTRIBI3IEXTPROC glVertexAttribI3iEXT;
    PFNGLVERTEXATTRIBI4IEXTPROC glVertexAttribI4iEXT;
    PFNGLVERTEXATTRIBI1UIEXTPROC glVertexAttribI1uiEXT;
    PFNGLVERTEXATTRIBI2UIEXTPROC glVertexAttribI2uiEXT;
    PFNGLVERTEXATTRIBI3UIEXTPROC glVertexAttribI3uiEXT;
    PFNGLVERTEXATTRIBI4UIEXTPROC glVertexAttribI4uiEXT;
    PFNGLVERTEXATTRIBI1IVEXTPROC glVertexAttribI1ivEXT;
    PFNGLVERTEXATTRIBI2IVEXTPROC glVertexAttribI2ivEXT;
    PFNGLVERTEXATTRIBI3IVEXTPROC glVertexAttribI3ivEXT;
    PFNGLVERTEXATTRIBI4IVEXTPROC glVertexAttribI4ivEXT;
    PFNGLVERTEXATTRIBI1UIVEXTPROC glVertexAttribI1uivEXT;
    PFNGLVERTEXATTRIBI2UIVEXTPROC glVertexAttribI2uivEXT;
    PFNGLVERTEXATTRIBI3UIVEXTPROC glVertexAttribI3uivEXT;
    PFNGLVERTEXATTRIBI4UIVEXTPROC glVertexAttribI4uivEXT;
    PFNGLVERTEXATTRIBI4BVEXTPROC glVertexAttribI4bvEXT;
    PFNGLVERTEXATTRIBI4SVEXTPROC glVertexAttribI4svEXT;
    PFNGLVERTEXATTRIBI4UBVEXTPROC glVertexAttribI4ubvEXT;
    PFNGLVERTEXATTRIBI4USVEXTPROC glVertexAttribI4usvEXT;
    PFNGLVERTEXATTRIBIPOINTEREXTPROC glVertexAttribIPointerEXT;
    PFNGLGETVERTEXATTRIBIIVEXTPROC glGetVertexAttribIivEXT;
    PFNGLGETVERTEXATTRIBIUIVEXTPROC glGetVertexAttribIuivEXT;
    PFNGLBEGINVIDEOCAPTURENVPROC glBeginVideoCaptureNV;
    PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC glBindVideoCaptureStreamBufferNV;
    PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC glBindVideoCaptureStreamTextureNV;
    PFNGLENDVIDEOCAPTURENVPROC glEndVideoCaptureNV;
    PFNGLGETVIDEOCAPTUREIVNVPROC glGetVideoCaptureivNV;
    PFNGLGETVIDEOCAPTURESTREAMIVNVPROC glGetVideoCaptureStreamivNV;
    PFNGLGETVIDEOCAPTURESTREAMFVNVPROC glGetVideoCaptureStreamfvNV;
    PFNGLGETVIDEOCAPTURESTREAMDVNVPROC glGetVideoCaptureStreamdvNV;
    PFNGLVIDEOCAPTURENVPROC glVideoCaptureNV;
    PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC glVideoCaptureStreamParameterivNV;
    PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC glVideoCaptureStreamParameterfvNV;
    PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC glVideoCaptureStreamParameterdvNV;
    PFNGLVIEWPORTSWIZZLENVPROC glViewportSwizzleNV;
    PFNGLMULTITEXCOORD1BOESPROC glMultiTexCoord1bOES;
    PFNGLMULTITEXCOORD1BVOESPROC glMultiTexCoord1bvOES;
    PFNGLMULTITEXCOORD2BOESPROC glMultiTexCoord2bOES;
    PFNGLMULTITEXCOORD2BVOESPROC glMultiTexCoord2bvOES;
    PFNGLMULTITEXCOORD3BOESPROC glMultiTexCoord3bOES;
    PFNGLMULTITEXCOORD3BVOESPROC glMultiTexCoord3bvOES;
    PFNGLMULTITEXCOORD4BOESPROC glMultiTexCoord4bOES;
    PFNGLMULTITEXCOORD4BVOESPROC glMultiTexCoord4bvOES;
    PFNGLTEXCOORD1BOESPROC glTexCoord1bOES;
    PFNGLTEXCOORD1BVOESPROC glTexCoord1bvOES;
    PFNGLTEXCOORD2BOESPROC glTexCoord2bOES;
    PFNGLTEXCOORD2BVOESPROC glTexCoord2bvOES;
    PFNGLTEXCOORD3BOESPROC glTexCoord3bOES;
    PFNGLTEXCOORD3BVOESPROC glTexCoord3bvOES;
    PFNGLTEXCOORD4BOESPROC glTexCoord4bOES;
    PFNGLTEXCOORD4BVOESPROC glTexCoord4bvOES;
    PFNGLVERTEX2BOESPROC glVertex2bOES;
    PFNGLVERTEX2BVOESPROC glVertex2bvOES;
    PFNGLVERTEX3BOESPROC glVertex3bOES;
    PFNGLVERTEX3BVOESPROC glVertex3bvOES;
    PFNGLVERTEX4BOESPROC glVertex4bOES;
    PFNGLVERTEX4BVOESPROC glVertex4bvOES;
    PFNGLALPHAFUNCXOESPROC glAlphaFuncxOES;
    PFNGLCLEARCOLORXOESPROC glClearColorxOES;
    PFNGLCLEARDEPTHXOESPROC glClearDepthxOES;
    PFNGLCLIPPLANEXOESPROC glClipPlanexOES;
    PFNGLCOLOR4XOESPROC glColor4xOES;
    PFNGLDEPTHRANGEXOESPROC glDepthRangexOES;
    PFNGLFOGXOESPROC glFogxOES;
    PFNGLFOGXVOESPROC glFogxvOES;
    PFNGLFRUSTUMXOESPROC glFrustumxOES;
    PFNGLGETCLIPPLANEXOESPROC glGetClipPlanexOES;
    PFNGLGETFIXEDVOESPROC glGetFixedvOES;
    PFNGLGETTEXENVXVOESPROC glGetTexEnvxvOES;
    PFNGLGETTEXPARAMETERXVOESPROC glGetTexParameterxvOES;
    PFNGLLIGHTMODELXOESPROC glLightModelxOES;
    PFNGLLIGHTMODELXVOESPROC glLightModelxvOES;
    PFNGLLIGHTXOESPROC glLightxOES;
    PFNGLLIGHTXVOESPROC glLightxvOES;
    PFNGLLINEWIDTHXOESPROC glLineWidthxOES;
    PFNGLLOADMATRIXXOESPROC glLoadMatrixxOES;
    PFNGLMATERIALXOESPROC glMaterialxOES;
    PFNGLMATERIALXVOESPROC glMaterialxvOES;
    PFNGLMULTMATRIXXOESPROC glMultMatrixxOES;
    PFNGLMULTITEXCOORD4XOESPROC glMultiTexCoord4xOES;
    PFNGLNORMAL3XOESPROC glNormal3xOES;
    PFNGLORTHOXOESPROC glOrthoxOES;
    PFNGLPOINTPARAMETERXVOESPROC glPointParameterxvOES;
    PFNGLPOINTSIZEXOESPROC glPointSizexOES;
    PFNGLPOLYGONOFFSETXOESPROC glPolygonOffsetxOES;
    PFNGLROTATEXOESPROC glRotatexOES;
    PFNGLSCALEXOESPROC glScalexOES;
    PFNGLTEXENVXOESPROC glTexEnvxOES;
    PFNGLTEXENVXVOESPROC glTexEnvxvOES;
    PFNGLTEXPARAMETERXOESPROC glTexParameterxOES;
    PFNGLTEXPARAMETERXVOESPROC glTexParameterxvOES;
    PFNGLTRANSLATEXOESPROC glTranslatexOES;
    PFNGLGETLIGHTXVOESPROC glGetLightxvOES;
    PFNGLGETMATERIALXVOESPROC glGetMaterialxvOES;
    PFNGLPOINTPARAMETERXOESPROC glPointParameterxOES;
    PFNGLSAMPLECOVERAGEXOESPROC glSampleCoveragexOES;
    PFNGLACCUMXOESPROC glAccumxOES;
    PFNGLBITMAPXOESPROC glBitmapxOES;
    PFNGLBLENDCOLORXOESPROC glBlendColorxOES;
    PFNGLCLEARACCUMXOESPROC glClearAccumxOES;
    PFNGLCOLOR3XOESPROC glColor3xOES;
    PFNGLCOLOR3XVOESPROC glColor3xvOES;
    PFNGLCOLOR4XVOESPROC glColor4xvOES;
    PFNGLCONVOLUTIONPARAMETERXOESPROC glConvolutionParameterxOES;
    PFNGLCONVOLUTIONPARAMETERXVOESPROC glConvolutionParameterxvOES;
    PFNGLEVALCOORD1XOESPROC glEvalCoord1xOES;
    PFNGLEVALCOORD1XVOESPROC glEvalCoord1xvOES;
    PFNGLEVALCOORD2XOESPROC glEvalCoord2xOES;
    PFNGLEVALCOORD2XVOESPROC glEvalCoord2xvOES;
    PFNGLFEEDBACKBUFFERXOESPROC glFeedbackBufferxOES;
    PFNGLGETCONVOLUTIONPARAMETERXVOESPROC glGetConvolutionParameterxvOES;
    PFNGLGETHISTOGRAMPARAMETERXVOESPROC glGetHistogramParameterxvOES;
    PFNGLGETLIGHTXOESPROC glGetLightxOES;
    PFNGLGETMAPXVOESPROC glGetMapxvOES;
    PFNGLGETMATERIALXOESPROC glGetMaterialxOES;
    PFNGLGETPIXELMAPXVPROC glGetPixelMapxv;
    PFNGLGETTEXGENXVOESPROC glGetTexGenxvOES;
    PFNGLGETTEXLEVELPARAMETERXVOESPROC glGetTexLevelParameterxvOES;
    PFNGLINDEXXOESPROC glIndexxOES;
    PFNGLINDEXXVOESPROC glIndexxvOES;
    PFNGLLOADTRANSPOSEMATRIXXOESPROC glLoadTransposeMatrixxOES;
    PFNGLMAP1XOESPROC glMap1xOES;
    PFNGLMAP2XOESPROC glMap2xOES;
    PFNGLMAPGRID1XOESPROC glMapGrid1xOES;
    PFNGLMAPGRID2XOESPROC glMapGrid2xOES;
    PFNGLMULTTRANSPOSEMATRIXXOESPROC glMultTransposeMatrixxOES;
    PFNGLMULTITEXCOORD1XOESPROC glMultiTexCoord1xOES;
    PFNGLMULTITEXCOORD1XVOESPROC glMultiTexCoord1xvOES;
    PFNGLMULTITEXCOORD2XOESPROC glMultiTexCoord2xOES;
    PFNGLMULTITEXCOORD2XVOESPROC glMultiTexCoord2xvOES;
    PFNGLMULTITEXCOORD3XOESPROC glMultiTexCoord3xOES;
    PFNGLMULTITEXCOORD3XVOESPROC glMultiTexCoord3xvOES;
    PFNGLMULTITEXCOORD4XVOESPROC glMultiTexCoord4xvOES;
    PFNGLNORMAL3XVOESPROC glNormal3xvOES;
    PFNGLPASSTHROUGHXOESPROC glPassThroughxOES;
    PFNGLPIXELMAPXPROC glPixelMapx;
    PFNGLPIXELSTOREXPROC glPixelStorex;
    PFNGLPIXELTRANSFERXOESPROC glPixelTransferxOES;
    PFNGLPIXELZOOMXOESPROC glPixelZoomxOES;
    PFNGLPRIORITIZETEXTURESXOESPROC glPrioritizeTexturesxOES;
    PFNGLRASTERPOS2XOESPROC glRasterPos2xOES;
    PFNGLRASTERPOS2XVOESPROC glRasterPos2xvOES;
    PFNGLRASTERPOS3XOESPROC glRasterPos3xOES;
    PFNGLRASTERPOS3XVOESPROC glRasterPos3xvOES;
    PFNGLRASTERPOS4XOESPROC glRasterPos4xOES;
    PFNGLRASTERPOS4XVOESPROC glRasterPos4xvOES;
    PFNGLRECTXOESPROC glRectxOES;
    PFNGLRECTXVOESPROC glRectxvOES;
    PFNGLTEXCOORD1XOESPROC glTexCoord1xOES;
    PFNGLTEXCOORD1XVOESPROC glTexCoord1xvOES;
    PFNGLTEXCOORD2XOESPROC glTexCoord2xOES;
    PFNGLTEXCOORD2XVOESPROC glTexCoord2xvOES;
    PFNGLTEXCOORD3XOESPROC glTexCoord3xOES;
    PFNGLTEXCOORD3XVOESPROC glTexCoord3xvOES;
    PFNGLTEXCOORD4XOESPROC glTexCoord4xOES;
    PFNGLTEXCOORD4XVOESPROC glTexCoord4xvOES;
    PFNGLTEXGENXOESPROC glTexGenxOES;
    PFNGLTEXGENXVOESPROC glTexGenxvOES;
    PFNGLVERTEX2XOESPROC glVertex2xOES;
    PFNGLVERTEX2XVOESPROC glVertex2xvOES;
    PFNGLVERTEX3XOESPROC glVertex3xOES;
    PFNGLVERTEX3XVOESPROC glVertex3xvOES;
    PFNGLVERTEX4XOESPROC glVertex4xOES;
    PFNGLVERTEX4XVOESPROC glVertex4xvOES;
    PFNGLQUERYMATRIXXOESPROC glQueryMatrixxOES;
    PFNGLCLEARDEPTHFOESPROC glClearDepthfOES;
    PFNGLCLIPPLANEFOESPROC glClipPlanefOES;
    PFNGLDEPTHRANGEFOESPROC glDepthRangefOES;
    PFNGLFRUSTUMFOESPROC glFrustumfOES;
    PFNGLGETCLIPPLANEFOESPROC glGetClipPlanefOES;
    PFNGLORTHOFOESPROC glOrthofOES;
    PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC glFramebufferTextureMultiviewOVR;
    PFNGLHINTPGIPROC glHintPGI;
    PFNGLDETAILTEXFUNCSGISPROC glDetailTexFuncSGIS;
    PFNGLGETDETAILTEXFUNCSGISPROC glGetDetailTexFuncSGIS;
    PFNGLFOGFUNCSGISPROC glFogFuncSGIS;
    PFNGLGETFOGFUNCSGISPROC glGetFogFuncSGIS;
    PFNGLSAMPLEMASKSGISPROC glSampleMaskSGIS;
    PFNGLSAMPLEPATTERNSGISPROC glSamplePatternSGIS;
    PFNGLPIXELTEXGENPARAMETERISGISPROC glPixelTexGenParameteriSGIS;
    PFNGLPIXELTEXGENPARAMETERIVSGISPROC glPixelTexGenParameterivSGIS;
    PFNGLPIXELTEXGENPARAMETERFSGISPROC glPixelTexGenParameterfSGIS;
    PFNGLPIXELTEXGENPARAMETERFVSGISPROC glPixelTexGenParameterfvSGIS;
    PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC glGetPixelTexGenParameterivSGIS;
    PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC glGetPixelTexGenParameterfvSGIS;
    PFNGLPOINTPARAMETERFSGISPROC glPointParameterfSGIS;
    PFNGLPOINTPARAMETERFVSGISPROC glPointParameterfvSGIS;
    PFNGLSHARPENTEXFUNCSGISPROC glSharpenTexFuncSGIS;
    PFNGLGETSHARPENTEXFUNCSGISPROC glGetSharpenTexFuncSGIS;
    PFNGLTEXIMAGE4DSGISPROC glTexImage4DSGIS;
    PFNGLTEXSUBIMAGE4DSGISPROC glTexSubImage4DSGIS;
    PFNGLTEXTURECOLORMASKSGISPROC glTextureColorMaskSGIS;
    PFNGLGETTEXFILTERFUNCSGISPROC glGetTexFilterFuncSGIS;
    PFNGLTEXFILTERFUNCSGISPROC glTexFilterFuncSGIS;
    PFNGLASYNCMARKERSGIXPROC glAsyncMarkerSGIX;
    PFNGLFINISHASYNCSGIXPROC glFinishAsyncSGIX;
    PFNGLPOLLASYNCSGIXPROC glPollAsyncSGIX;
    PFNGLGENASYNCMARKERSSGIXPROC glGenAsyncMarkersSGIX;
    PFNGLDELETEASYNCMARKERSSGIXPROC glDeleteAsyncMarkersSGIX;
    PFNGLISASYNCMARKERSGIXPROC glIsAsyncMarkerSGIX;
    PFNGLFLUSHRASTERSGIXPROC glFlushRasterSGIX;
    PFNGLFRAGMENTCOLORMATERIALSGIXPROC glFragmentColorMaterialSGIX;
    PFNGLFRAGMENTLIGHTFSGIXPROC glFragmentLightfSGIX;
    PFNGLFRAGMENTLIGHTFVSGIXPROC glFragmentLightfvSGIX;
    PFNGLFRAGMENTLIGHTISGIXPROC glFragmentLightiSGIX;
    PFNGLFRAGMENTLIGHTIVSGIXPROC glFragmentLightivSGIX;
    PFNGLFRAGMENTLIGHTMODELFSGIXPROC glFragmentLightModelfSGIX;
    PFNGLFRAGMENTLIGHTMODELFVSGIXPROC glFragmentLightModelfvSGIX;
    PFNGLFRAGMENTLIGHTMODELISGIXPROC glFragmentLightModeliSGIX;
    PFNGLFRAGMENTLIGHTMODELIVSGIXPROC glFragmentLightModelivSGIX;
    PFNGLFRAGMENTMATERIALFSGIXPROC glFragmentMaterialfSGIX;
    PFNGLFRAGMENTMATERIALFVSGIXPROC glFragmentMaterialfvSGIX;
    PFNGLFRAGMENTMATERIALISGIXPROC glFragmentMaterialiSGIX;
    PFNGLFRAGMENTMATERIALIVSGIXPROC glFragmentMaterialivSGIX;
    PFNGLGETFRAGMENTLIGHTFVSGIXPROC glGetFragmentLightfvSGIX;
    PFNGLGETFRAGMENTLIGHTIVSGIXPROC glGetFragmentLightivSGIX;
    PFNGLGETFRAGMENTMATERIALFVSGIXPROC glGetFragmentMaterialfvSGIX;
    PFNGLGETFRAGMENTMATERIALIVSGIXPROC glGetFragmentMaterialivSGIX;
    PFNGLLIGHTENVISGIXPROC glLightEnviSGIX;
    PFNGLFRAMEZOOMSGIXPROC glFrameZoomSGIX;
    PFNGLIGLOOINTERFACESGIXPROC glIglooInterfaceSGIX;
    PFNGLGETINSTRUMENTSSGIXPROC glGetInstrumentsSGIX;
    PFNGLINSTRUMENTSBUFFERSGIXPROC glInstrumentsBufferSGIX;
    PFNGLPOLLINSTRUMENTSSGIXPROC glPollInstrumentsSGIX;
    PFNGLREADINSTRUMENTSSGIXPROC glReadInstrumentsSGIX;
    PFNGLSTARTINSTRUMENTSSGIXPROC glStartInstrumentsSGIX;
    PFNGLSTOPINSTRUMENTSSGIXPROC glStopInstrumentsSGIX;
    PFNGLGETLISTPARAMETERFVSGIXPROC glGetListParameterfvSGIX;
    PFNGLGETLISTPARAMETERIVSGIXPROC glGetListParameterivSGIX;
    PFNGLLISTPARAMETERFSGIXPROC glListParameterfSGIX;
    PFNGLLISTPARAMETERFVSGIXPROC glListParameterfvSGIX;
    PFNGLLISTPARAMETERISGIXPROC glListParameteriSGIX;
    PFNGLLISTPARAMETERIVSGIXPROC glListParameterivSGIX;
    PFNGLPIXELTEXGENSGIXPROC glPixelTexGenSGIX;
    PFNGLDEFORMATIONMAP3DSGIXPROC glDeformationMap3dSGIX;
    PFNGLDEFORMATIONMAP3FSGIXPROC glDeformationMap3fSGIX;
    PFNGLDEFORMSGIXPROC glDeformSGIX;
    PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC glLoadIdentityDeformationMapSGIX;
    PFNGLREFERENCEPLANESGIXPROC glReferencePlaneSGIX;
    PFNGLSPRITEPARAMETERFSGIXPROC glSpriteParameterfSGIX;
    PFNGLSPRITEPARAMETERFVSGIXPROC glSpriteParameterfvSGIX;
    PFNGLSPRITEPARAMETERISGIXPROC glSpriteParameteriSGIX;
    PFNGLSPRITEPARAMETERIVSGIXPROC glSpriteParameterivSGIX;
    PFNGLTAGSAMPLEBUFFERSGIXPROC glTagSampleBufferSGIX;
    PFNGLCOLORTABLESGIPROC glColorTableSGI;
    PFNGLCOLORTABLEPARAMETERFVSGIPROC glColorTableParameterfvSGI;
    PFNGLCOLORTABLEPARAMETERIVSGIPROC glColorTableParameterivSGI;
    PFNGLCOPYCOLORTABLESGIPROC glCopyColorTableSGI;
    PFNGLGETCOLORTABLESGIPROC glGetColorTableSGI;
    PFNGLGETCOLORTABLEPARAMETERFVSGIPROC glGetColorTableParameterfvSGI;
    PFNGLGETCOLORTABLEPARAMETERIVSGIPROC glGetColorTableParameterivSGI;
    PFNGLFINISHTEXTURESUNXPROC glFinishTextureSUNX;
    PFNGLGLOBALALPHAFACTORBSUNPROC glGlobalAlphaFactorbSUN;
    PFNGLGLOBALALPHAFACTORSSUNPROC glGlobalAlphaFactorsSUN;
    PFNGLGLOBALALPHAFACTORISUNPROC glGlobalAlphaFactoriSUN;
    PFNGLGLOBALALPHAFACTORFSUNPROC glGlobalAlphaFactorfSUN;
    PFNGLGLOBALALPHAFACTORDSUNPROC glGlobalAlphaFactordSUN;
    PFNGLGLOBALALPHAFACTORUBSUNPROC glGlobalAlphaFactorubSUN;
    PFNGLGLOBALALPHAFACTORUSSUNPROC glGlobalAlphaFactorusSUN;
    PFNGLGLOBALALPHAFACTORUISUNPROC glGlobalAlphaFactoruiSUN;
    PFNGLDRAWMESHARRAYSSUNPROC glDrawMeshArraysSUN;
    PFNGLREPLACEMENTCODEUISUNPROC glReplacementCodeuiSUN;
    PFNGLREPLACEMENTCODEUSSUNPROC glReplacementCodeusSUN;
    PFNGLREPLACEMENTCODEUBSUNPROC glReplacementCodeubSUN;
    PFNGLREPLACEMENTCODEUIVSUNPROC glReplacementCodeuivSUN;
    PFNGLREPLACEMENTCODEUSVSUNPROC glReplacementCodeusvSUN;
    PFNGLREPLACEMENTCODEUBVSUNPROC glReplacementCodeubvSUN;
    PFNGLREPLACEMENTCODEPOINTERSUNPROC glReplacementCodePointerSUN;
    PFNGLCOLOR4UBVERTEX2FSUNPROC glColor4ubVertex2fSUN;
    PFNGLCOLOR4UBVERTEX2FVSUNPROC glColor4ubVertex2fvSUN;
    PFNGLCOLOR4UBVERTEX3FSUNPROC glColor4ubVertex3fSUN;
    PFNGLCOLOR4UBVERTEX3FVSUNPROC glColor4ubVertex3fvSUN;
    PFNGLCOLOR3FVERTEX3FSUNPROC glColor3fVertex3fSUN;
    PFNGLCOLOR3FVERTEX3FVSUNPROC glColor3fVertex3fvSUN;
    PFNGLNORMAL3FVERTEX3FSUNPROC glNormal3fVertex3fSUN;
    PFNGLNORMAL3FVERTEX3FVSUNPROC glNormal3fVertex3fvSUN;
    PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC glColor4fNormal3fVertex3fSUN;
    PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC glColor4fNormal3fVertex3fvSUN;
    PFNGLTEXCOORD2FVERTEX3FSUNPROC glTexCoord2fVertex3fSUN;
    PFNGLTEXCOORD2FVERTEX3FVSUNPROC glTexCoord2fVertex3fvSUN;
    PFNGLTEXCOORD4FVERTEX4FSUNPROC glTexCoord4fVertex4fSUN;
    PFNGLTEXCOORD4FVERTEX4FVSUNPROC glTexCoord4fVertex4fvSUN;
    PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC glTexCoord2fColor4ubVertex3fSUN;
    PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC glTexCoord2fColor4ubVertex3fvSUN;
    PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC glTexCoord2fColor3fVertex3fSUN;
    PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC glTexCoord2fColor3fVertex3fvSUN;
    PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC glTexCoord2fNormal3fVertex3fSUN;
    PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fNormal3fVertex3fvSUN;
    PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glTexCoord2fColor4fNormal3fVertex3fSUN;
    PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fColor4fNormal3fVertex3fvSUN;
    PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC glTexCoord4fColor4fNormal3fVertex4fSUN;
    PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC glTexCoord4fColor4fNormal3fVertex4fvSUN;
    PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC glReplacementCodeuiVertex3fSUN;
    PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC glReplacementCodeuiVertex3fvSUN;
    PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC glReplacementCodeuiColor4ubVertex3fSUN;
    PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC glReplacementCodeuiColor4ubVertex3fvSUN;
    PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC glReplacementCodeuiColor3fVertex3fSUN;
    PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC glReplacementCodeuiColor3fVertex3fvSUN;
    PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC glReplacementCodeuiNormal3fVertex3fSUN;
    PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiNormal3fVertex3fvSUN;
    PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fSUN;
    PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
    PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fVertex3fSUN;
    PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fVertex3fvSUN;
    PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
    PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
    PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
    PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
#if defined(GLBIND_WGL)
    PFNWGLSETSTEREOEMITTERSTATE3DLPROC wglSetStereoEmitterState3DL;
    PFNWGLGETGPUIDSAMDPROC wglGetGPUIDsAMD;
    PFNWGLGETGPUINFOAMDPROC wglGetGPUInfoAMD;
    PFNWGLGETCONTEXTGPUIDAMDPROC wglGetContextGPUIDAMD;
    PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC wglCreateAssociatedContextAMD;
    PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC wglCreateAssociatedContextAttribsAMD;
    PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC wglDeleteAssociatedContextAMD;
    PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC wglMakeAssociatedContextCurrentAMD;
    PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC wglGetCurrentAssociatedContextAMD;
    PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC wglBlitContextFramebufferAMD;
    PFNWGLCREATEBUFFERREGIONARBPROC wglCreateBufferRegionARB;
    PFNWGLDELETEBUFFERREGIONARBPROC wglDeleteBufferRegionARB;
    PFNWGLSAVEBUFFERREGIONARBPROC wglSaveBufferRegionARB;
    PFNWGLRESTOREBUFFERREGIONARBPROC wglRestoreBufferRegionARB;
    PFNWGLCREATECONTEXTATTRIBSARBPROC wglCreateContextAttribsARB;
    PFNWGLGETEXTENSIONSSTRINGARBPROC wglGetExtensionsStringARB;
    PFNWGLMAKECONTEXTCURRENTARBPROC wglMakeContextCurrentARB;
    PFNWGLGETCURRENTREADDCARBPROC wglGetCurrentReadDCARB;
    PFNWGLCREATEPBUFFERARBPROC wglCreatePbufferARB;
    PFNWGLGETPBUFFERDCARBPROC wglGetPbufferDCARB;
    PFNWGLRELEASEPBUFFERDCARBPROC wglReleasePbufferDCARB;
    PFNWGLDESTROYPBUFFERARBPROC wglDestroyPbufferARB;
    PFNWGLQUERYPBUFFERARBPROC wglQueryPbufferARB;
    PFNWGLGETPIXELFORMATATTRIBIVARBPROC wglGetPixelFormatAttribivARB;
    PFNWGLGETPIXELFORMATATTRIBFVARBPROC wglGetPixelFormatAttribfvARB;
    PFNWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormatARB;
    PFNWGLBINDTEXIMAGEARBPROC wglBindTexImageARB;
    PFNWGLRELEASETEXIMAGEARBPROC wglReleaseTexImageARB;
    PFNWGLSETPBUFFERATTRIBARBPROC wglSetPbufferAttribARB;
    PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC wglCreateDisplayColorTableEXT;
    PFNWGLLOADDISPLAYCOLORTABLEEXTPROC wglLoadDisplayColorTableEXT;
    PFNWGLBINDDISPLAYCOLORTABLEEXTPROC wglBindDisplayColorTableEXT;
    PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC wglDestroyDisplayColorTableEXT;
    PFNWGLGETEXTENSIONSSTRINGEXTPROC wglGetExtensionsStringEXT;
    PFNWGLMAKECONTEXTCURRENTEXTPROC wglMakeContextCurrentEXT;
    PFNWGLGETCURRENTREADDCEXTPROC wglGetCurrentReadDCEXT;
    PFNWGLCREATEPBUFFEREXTPROC wglCreatePbufferEXT;
    PFNWGLGETPBUFFERDCEXTPROC wglGetPbufferDCEXT;
    PFNWGLRELEASEPBUFFERDCEXTPROC wglReleasePbufferDCEXT;
    PFNWGLDESTROYPBUFFEREXTPROC wglDestroyPbufferEXT;
    PFNWGLQUERYPBUFFEREXTPROC wglQueryPbufferEXT;
    PFNWGLGETPIXELFORMATATTRIBIVEXTPROC wglGetPixelFormatAttribivEXT;
    PFNWGLGETPIXELFORMATATTRIBFVEXTPROC wglGetPixelFormatAttribfvEXT;
    PFNWGLCHOOSEPIXELFORMATEXTPROC wglChoosePixelFormatEXT;
    PFNWGLSWAPINTERVALEXTPROC wglSwapIntervalEXT;
    PFNWGLGETSWAPINTERVALEXTPROC wglGetSwapIntervalEXT;
    PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC wglGetDigitalVideoParametersI3D;
    PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC wglSetDigitalVideoParametersI3D;
    PFNWGLGETGAMMATABLEPARAMETERSI3DPROC wglGetGammaTableParametersI3D;
    PFNWGLSETGAMMATABLEPARAMETERSI3DPROC wglSetGammaTableParametersI3D;
    PFNWGLGETGAMMATABLEI3DPROC wglGetGammaTableI3D;
    PFNWGLSETGAMMATABLEI3DPROC wglSetGammaTableI3D;
    PFNWGLENABLEGENLOCKI3DPROC wglEnableGenlockI3D;
    PFNWGLDISABLEGENLOCKI3DPROC wglDisableGenlockI3D;
    PFNWGLISENABLEDGENLOCKI3DPROC wglIsEnabledGenlockI3D;
    PFNWGLGENLOCKSOURCEI3DPROC wglGenlockSourceI3D;
    PFNWGLGETGENLOCKSOURCEI3DPROC wglGetGenlockSourceI3D;
    PFNWGLGENLOCKSOURCEEDGEI3DPROC wglGenlockSourceEdgeI3D;
    PFNWGLGETGENLOCKSOURCEEDGEI3DPROC wglGetGenlockSourceEdgeI3D;
    PFNWGLGENLOCKSAMPLERATEI3DPROC wglGenlockSampleRateI3D;
    PFNWGLGETGENLOCKSAMPLERATEI3DPROC wglGetGenlockSampleRateI3D;
    PFNWGLGENLOCKSOURCEDELAYI3DPROC wglGenlockSourceDelayI3D;
    PFNWGLGETGENLOCKSOURCEDELAYI3DPROC wglGetGenlockSourceDelayI3D;
    PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC wglQueryGenlockMaxSourceDelayI3D;
    PFNWGLCREATEIMAGEBUFFERI3DPROC wglCreateImageBufferI3D;
    PFNWGLDESTROYIMAGEBUFFERI3DPROC wglDestroyImageBufferI3D;
    PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC wglAssociateImageBufferEventsI3D;
    PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC wglReleaseImageBufferEventsI3D;
    PFNWGLENABLEFRAMELOCKI3DPROC wglEnableFrameLockI3D;
    PFNWGLDISABLEFRAMELOCKI3DPROC wglDisableFrameLockI3D;
    PFNWGLISENABLEDFRAMELOCKI3DPROC wglIsEnabledFrameLockI3D;
    PFNWGLQUERYFRAMELOCKMASTERI3DPROC wglQueryFrameLockMasterI3D;
    PFNWGLGETFRAMEUSAGEI3DPROC wglGetFrameUsageI3D;
    PFNWGLBEGINFRAMETRACKINGI3DPROC wglBeginFrameTrackingI3D;
    PFNWGLENDFRAMETRACKINGI3DPROC wglEndFrameTrackingI3D;
    PFNWGLQUERYFRAMETRACKINGI3DPROC wglQueryFrameTrackingI3D;
    PFNWGLCOPYIMAGESUBDATANVPROC wglCopyImageSubDataNV;
    PFNWGLDELAYBEFORESWAPNVPROC wglDelayBeforeSwapNV;
    PFNWGLDXSETRESOURCESHAREHANDLENVPROC wglDXSetResourceShareHandleNV;
    PFNWGLDXOPENDEVICENVPROC wglDXOpenDeviceNV;
    PFNWGLDXCLOSEDEVICENVPROC wglDXCloseDeviceNV;
    PFNWGLDXREGISTEROBJECTNVPROC wglDXRegisterObjectNV;
    PFNWGLDXUNREGISTEROBJECTNVPROC wglDXUnregisterObjectNV;
    PFNWGLDXOBJECTACCESSNVPROC wglDXObjectAccessNV;
    PFNWGLDXLOCKOBJECTSNVPROC wglDXLockObjectsNV;
    PFNWGLDXUNLOCKOBJECTSNVPROC wglDXUnlockObjectsNV;
    PFNWGLENUMGPUSNVPROC wglEnumGpusNV;
    PFNWGLENUMGPUDEVICESNVPROC wglEnumGpuDevicesNV;
    PFNWGLCREATEAFFINITYDCNVPROC wglCreateAffinityDCNV;
    PFNWGLENUMGPUSFROMAFFINITYDCNVPROC wglEnumGpusFromAffinityDCNV;
    PFNWGLDELETEDCNVPROC wglDeleteDCNV;
    PFNWGLENUMERATEVIDEODEVICESNVPROC wglEnumerateVideoDevicesNV;
    PFNWGLBINDVIDEODEVICENVPROC wglBindVideoDeviceNV;
    PFNWGLQUERYCURRENTCONTEXTNVPROC wglQueryCurrentContextNV;
    PFNWGLJOINSWAPGROUPNVPROC wglJoinSwapGroupNV;
    PFNWGLBINDSWAPBARRIERNVPROC wglBindSwapBarrierNV;
    PFNWGLQUERYSWAPGROUPNVPROC wglQuerySwapGroupNV;
    PFNWGLQUERYMAXSWAPGROUPSNVPROC wglQueryMaxSwapGroupsNV;
    PFNWGLQUERYFRAMECOUNTNVPROC wglQueryFrameCountNV;
    PFNWGLRESETFRAMECOUNTNVPROC wglResetFrameCountNV;
    PFNWGLBINDVIDEOCAPTUREDEVICENVPROC wglBindVideoCaptureDeviceNV;
    PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC wglEnumerateVideoCaptureDevicesNV;
    PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC wglLockVideoCaptureDeviceNV;
    PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC wglQueryVideoCaptureDeviceNV;
    PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC wglReleaseVideoCaptureDeviceNV;
    PFNWGLGETVIDEODEVICENVPROC wglGetVideoDeviceNV;
    PFNWGLRELEASEVIDEODEVICENVPROC wglReleaseVideoDeviceNV;
    PFNWGLBINDVIDEOIMAGENVPROC wglBindVideoImageNV;
    PFNWGLRELEASEVIDEOIMAGENVPROC wglReleaseVideoImageNV;
    PFNWGLSENDPBUFFERTOVIDEONVPROC wglSendPbufferToVideoNV;
    PFNWGLGETVIDEOINFONVPROC wglGetVideoInfoNV;
    PFNWGLALLOCATEMEMORYNVPROC wglAllocateMemoryNV;
    PFNWGLFREEMEMORYNVPROC wglFreeMemoryNV;
    PFNWGLGETSYNCVALUESOMLPROC wglGetSyncValuesOML;
    PFNWGLGETMSCRATEOMLPROC wglGetMscRateOML;
    PFNWGLSWAPBUFFERSMSCOMLPROC wglSwapBuffersMscOML;
    PFNWGLSWAPLAYERBUFFERSMSCOMLPROC wglSwapLayerBuffersMscOML;
    PFNWGLWAITFORMSCOMLPROC wglWaitForMscOML;
    PFNWGLWAITFORSBCOMLPROC wglWaitForSbcOML;
#endif /* GLBIND_WGL */
#if defined(GLBIND_GLX)
    PFNGLXGETGPUIDSAMDPROC glXGetGPUIDsAMD;
    PFNGLXGETGPUINFOAMDPROC glXGetGPUInfoAMD;
    PFNGLXGETCONTEXTGPUIDAMDPROC glXGetContextGPUIDAMD;
    PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC glXCreateAssociatedContextAMD;
    PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC glXCreateAssociatedContextAttribsAMD;
    PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC glXDeleteAssociatedContextAMD;
    PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC glXMakeAssociatedContextCurrentAMD;
    PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC glXGetCurrentAssociatedContextAMD;
    PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC glXBlitContextFramebufferAMD;
    PFNGLXCREATECONTEXTATTRIBSARBPROC glXCreateContextAttribsARB;
    PFNGLXGETPROCADDRESSARBPROC glXGetProcAddressARB;
    PFNGLXGETCURRENTDISPLAYEXTPROC glXGetCurrentDisplayEXT;
    PFNGLXQUERYCONTEXTINFOEXTPROC glXQueryContextInfoEXT;
    PFNGLXGETCONTEXTIDEXTPROC glXGetContextIDEXT;
    PFNGLXIMPORTCONTEXTEXTPROC glXImportContextEXT;
    PFNGLXFREECONTEXTEXTPROC glXFreeContextEXT;
    PFNGLXSWAPINTERVALEXTPROC glXSwapIntervalEXT;
    PFNGLXBINDTEXIMAGEEXTPROC glXBindTexImageEXT;
    PFNGLXRELEASETEXIMAGEEXTPROC glXReleaseTexImageEXT;
    PFNGLXGETAGPOFFSETMESAPROC glXGetAGPOffsetMESA;
    PFNGLXCOPYSUBBUFFERMESAPROC glXCopySubBufferMESA;
    PFNGLXCREATEGLXPIXMAPMESAPROC glXCreateGLXPixmapMESA;
    PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC glXQueryCurrentRendererIntegerMESA;
    PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC glXQueryCurrentRendererStringMESA;
    PFNGLXQUERYRENDERERINTEGERMESAPROC glXQueryRendererIntegerMESA;
    PFNGLXQUERYRENDERERSTRINGMESAPROC glXQueryRendererStringMESA;
    PFNGLXRELEASEBUFFERSMESAPROC glXReleaseBuffersMESA;
    PFNGLXSET3DFXMODEMESAPROC glXSet3DfxModeMESA;
    PFNGLXGETSWAPINTERVALMESAPROC glXGetSwapIntervalMESA;
    PFNGLXSWAPINTERVALMESAPROC glXSwapIntervalMESA;
    PFNGLXCOPYBUFFERSUBDATANVPROC glXCopyBufferSubDataNV;
    PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC glXNamedCopyBufferSubDataNV;
    PFNGLXCOPYIMAGESUBDATANVPROC glXCopyImageSubDataNV;
    PFNGLXDELAYBEFORESWAPNVPROC glXDelayBeforeSwapNV;
    PFNGLXENUMERATEVIDEODEVICESNVPROC glXEnumerateVideoDevicesNV;
    PFNGLXBINDVIDEODEVICENVPROC glXBindVideoDeviceNV;
    PFNGLXJOINSWAPGROUPNVPROC glXJoinSwapGroupNV;
    PFNGLXBINDSWAPBARRIERNVPROC glXBindSwapBarrierNV;
    PFNGLXQUERYSWAPGROUPNVPROC glXQuerySwapGroupNV;
    PFNGLXQUERYMAXSWAPGROUPSNVPROC glXQueryMaxSwapGroupsNV;
    PFNGLXQUERYFRAMECOUNTNVPROC glXQueryFrameCountNV;
    PFNGLXRESETFRAMECOUNTNVPROC glXResetFrameCountNV;
    PFNGLXBINDVIDEOCAPTUREDEVICENVPROC glXBindVideoCaptureDeviceNV;
    PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC glXEnumerateVideoCaptureDevicesNV;
    PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC glXLockVideoCaptureDeviceNV;
    PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC glXQueryVideoCaptureDeviceNV;
    PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC glXReleaseVideoCaptureDeviceNV;
    PFNGLXGETVIDEODEVICENVPROC glXGetVideoDeviceNV;
    PFNGLXRELEASEVIDEODEVICENVPROC glXReleaseVideoDeviceNV;
    PFNGLXBINDVIDEOIMAGENVPROC glXBindVideoImageNV;
    PFNGLXRELEASEVIDEOIMAGENVPROC glXReleaseVideoImageNV;
    PFNGLXSENDPBUFFERTOVIDEONVPROC glXSendPbufferToVideoNV;
    PFNGLXGETVIDEOINFONVPROC glXGetVideoInfoNV;
    PFNGLXGETSYNCVALUESOMLPROC glXGetSyncValuesOML;
    PFNGLXGETMSCRATEOMLPROC glXGetMscRateOML;
    PFNGLXSWAPBUFFERSMSCOMLPROC glXSwapBuffersMscOML;
    PFNGLXWAITFORMSCOMLPROC glXWaitForMscOML;
    PFNGLXWAITFORSBCOMLPROC glXWaitForSbcOML;
    PFNGLXCUSHIONSGIPROC glXCushionSGI;
    PFNGLXMAKECURRENTREADSGIPROC glXMakeCurrentReadSGI;
    PFNGLXGETCURRENTREADDRAWABLESGIPROC glXGetCurrentReadDrawableSGI;
    PFNGLXSWAPINTERVALSGIPROC glXSwapIntervalSGI;
    PFNGLXGETVIDEOSYNCSGIPROC glXGetVideoSyncSGI;
    PFNGLXWAITVIDEOSYNCSGIPROC glXWaitVideoSyncSGI;
    PFNGLXGETFBCONFIGATTRIBSGIXPROC glXGetFBConfigAttribSGIX;
    PFNGLXCHOOSEFBCONFIGSGIXPROC glXChooseFBConfigSGIX;
    PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC glXCreateGLXPixmapWithConfigSGIX;
    PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC glXCreateContextWithConfigSGIX;
    PFNGLXGETVISUALFROMFBCONFIGSGIXPROC glXGetVisualFromFBConfigSGIX;
    PFNGLXGETFBCONFIGFROMVISUALSGIXPROC glXGetFBConfigFromVisualSGIX;
    PFNGLXQUERYHYPERPIPENETWORKSGIXPROC glXQueryHyperpipeNetworkSGIX;
    PFNGLXHYPERPIPECONFIGSGIXPROC glXHyperpipeConfigSGIX;
    PFNGLXQUERYHYPERPIPECONFIGSGIXPROC glXQueryHyperpipeConfigSGIX;
    PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC glXDestroyHyperpipeConfigSGIX;
    PFNGLXBINDHYPERPIPESGIXPROC glXBindHyperpipeSGIX;
    PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC glXQueryHyperpipeBestAttribSGIX;
    PFNGLXHYPERPIPEATTRIBSGIXPROC glXHyperpipeAttribSGIX;
    PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC glXQueryHyperpipeAttribSGIX;
    PFNGLXCREATEGLXPBUFFERSGIXPROC glXCreateGLXPbufferSGIX;
    PFNGLXDESTROYGLXPBUFFERSGIXPROC glXDestroyGLXPbufferSGIX;
    PFNGLXQUERYGLXPBUFFERSGIXPROC glXQueryGLXPbufferSGIX;
    PFNGLXSELECTEVENTSGIXPROC glXSelectEventSGIX;
    PFNGLXGETSELECTEDEVENTSGIXPROC glXGetSelectedEventSGIX;
    PFNGLXBINDSWAPBARRIERSGIXPROC glXBindSwapBarrierSGIX;
    PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC glXQueryMaxSwapBarriersSGIX;
    PFNGLXJOINSWAPGROUPSGIXPROC glXJoinSwapGroupSGIX;
    PFNGLXBINDCHANNELTOWINDOWSGIXPROC glXBindChannelToWindowSGIX;
    PFNGLXCHANNELRECTSGIXPROC glXChannelRectSGIX;
    PFNGLXQUERYCHANNELRECTSGIXPROC glXQueryChannelRectSGIX;
    PFNGLXQUERYCHANNELDELTASSGIXPROC glXQueryChannelDeltasSGIX;
    PFNGLXCHANNELRECTSYNCSGIXPROC glXChannelRectSyncSGIX;
    PFNGLXGETTRANSPARENTINDEXSUNPROC glXGetTransparentIndexSUN;
#endif /* GLBIND_GLX */

    typedef struct
    {
        PFNGLCULLFACEPROC glCullFace;
        PFNGLFRONTFACEPROC glFrontFace;
        PFNGLHINTPROC glHint;
        PFNGLLINEWIDTHPROC glLineWidth;
        PFNGLPOINTSIZEPROC glPointSize;
        PFNGLPOLYGONMODEPROC glPolygonMode;
        PFNGLSCISSORPROC glScissor;
        PFNGLTEXPARAMETERFPROC glTexParameterf;
        PFNGLTEXPARAMETERFVPROC glTexParameterfv;
        PFNGLTEXPARAMETERIPROC glTexParameteri;
        PFNGLTEXPARAMETERIVPROC glTexParameteriv;
        PFNGLTEXIMAGE1DPROC glTexImage1D;
        PFNGLTEXIMAGE2DPROC glTexImage2D;
        PFNGLDRAWBUFFERPROC glDrawBuffer;
        PFNGLCLEARPROC glClear;
        PFNGLCLEARCOLORPROC glClearColor;
        PFNGLCLEARSTENCILPROC glClearStencil;
        PFNGLCLEARDEPTHPROC glClearDepth;
        PFNGLSTENCILMASKPROC glStencilMask;
        PFNGLCOLORMASKPROC glColorMask;
        PFNGLDEPTHMASKPROC glDepthMask;
        PFNGLDISABLEPROC glDisable;
        PFNGLENABLEPROC glEnable;
        PFNGLFINISHPROC glFinish;
        PFNGLFLUSHPROC glFlush;
        PFNGLBLENDFUNCPROC glBlendFunc;
        PFNGLLOGICOPPROC glLogicOp;
        PFNGLSTENCILFUNCPROC glStencilFunc;
        PFNGLSTENCILOPPROC glStencilOp;
        PFNGLDEPTHFUNCPROC glDepthFunc;
        PFNGLPIXELSTOREFPROC glPixelStoref;
        PFNGLPIXELSTOREIPROC glPixelStorei;
        PFNGLREADBUFFERPROC glReadBuffer;
        PFNGLREADPIXELSPROC glReadPixels;
        PFNGLGETBOOLEANVPROC glGetBooleanv;
        PFNGLGETDOUBLEVPROC glGetDoublev;
        PFNGLGETERRORPROC glGetError;
        PFNGLGETFLOATVPROC glGetFloatv;
        PFNGLGETINTEGERVPROC glGetIntegerv;
        PFNGLGETSTRINGPROC glGetString;
        PFNGLGETTEXIMAGEPROC glGetTexImage;
        PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv;
        PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv;
        PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv;
        PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv;
        PFNGLISENABLEDPROC glIsEnabled;
        PFNGLDEPTHRANGEPROC glDepthRange;
        PFNGLVIEWPORTPROC glViewport;
        PFNGLNEWLISTPROC glNewList;
        PFNGLENDLISTPROC glEndList;
        PFNGLCALLLISTPROC glCallList;
        PFNGLCALLLISTSPROC glCallLists;
        PFNGLDELETELISTSPROC glDeleteLists;
        PFNGLGENLISTSPROC glGenLists;
        PFNGLLISTBASEPROC glListBase;
        PFNGLBEGINPROC glBegin;
        PFNGLBITMAPPROC glBitmap;
        PFNGLCOLOR3BPROC glColor3b;
        PFNGLCOLOR3BVPROC glColor3bv;
        PFNGLCOLOR3DPROC glColor3d;
        PFNGLCOLOR3DVPROC glColor3dv;
        PFNGLCOLOR3FPROC glColor3f;
        PFNGLCOLOR3FVPROC glColor3fv;
        PFNGLCOLOR3IPROC glColor3i;
        PFNGLCOLOR3IVPROC glColor3iv;
        PFNGLCOLOR3SPROC glColor3s;
        PFNGLCOLOR3SVPROC glColor3sv;
        PFNGLCOLOR3UBPROC glColor3ub;
        PFNGLCOLOR3UBVPROC glColor3ubv;
        PFNGLCOLOR3UIPROC glColor3ui;
        PFNGLCOLOR3UIVPROC glColor3uiv;
        PFNGLCOLOR3USPROC glColor3us;
        PFNGLCOLOR3USVPROC glColor3usv;
        PFNGLCOLOR4BPROC glColor4b;
        PFNGLCOLOR4BVPROC glColor4bv;
        PFNGLCOLOR4DPROC glColor4d;
        PFNGLCOLOR4DVPROC glColor4dv;
        PFNGLCOLOR4FPROC glColor4f;
        PFNGLCOLOR4FVPROC glColor4fv;
        PFNGLCOLOR4IPROC glColor4i;
        PFNGLCOLOR4IVPROC glColor4iv;
        PFNGLCOLOR4SPROC glColor4s;
        PFNGLCOLOR4SVPROC glColor4sv;
        PFNGLCOLOR4UBPROC glColor4ub;
        PFNGLCOLOR4UBVPROC glColor4ubv;
        PFNGLCOLOR4UIPROC glColor4ui;
        PFNGLCOLOR4UIVPROC glColor4uiv;
        PFNGLCOLOR4USPROC glColor4us;
        PFNGLCOLOR4USVPROC glColor4usv;
        PFNGLEDGEFLAGPROC glEdgeFlag;
        PFNGLEDGEFLAGVPROC glEdgeFlagv;
        PFNGLENDPROC glEnd;
        PFNGLINDEXDPROC glIndexd;
        PFNGLINDEXDVPROC glIndexdv;
        PFNGLINDEXFPROC glIndexf;
        PFNGLINDEXFVPROC glIndexfv;
        PFNGLINDEXIPROC glIndexi;
        PFNGLINDEXIVPROC glIndexiv;
        PFNGLINDEXSPROC glIndexs;
        PFNGLINDEXSVPROC glIndexsv;
        PFNGLNORMAL3BPROC glNormal3b;
        PFNGLNORMAL3BVPROC glNormal3bv;
        PFNGLNORMAL3DPROC glNormal3d;
        PFNGLNORMAL3DVPROC glNormal3dv;
        PFNGLNORMAL3FPROC glNormal3f;
        PFNGLNORMAL3FVPROC glNormal3fv;
        PFNGLNORMAL3IPROC glNormal3i;
        PFNGLNORMAL3IVPROC glNormal3iv;
        PFNGLNORMAL3SPROC glNormal3s;
        PFNGLNORMAL3SVPROC glNormal3sv;
        PFNGLRASTERPOS2DPROC glRasterPos2d;
        PFNGLRASTERPOS2DVPROC glRasterPos2dv;
        PFNGLRASTERPOS2FPROC glRasterPos2f;
        PFNGLRASTERPOS2FVPROC glRasterPos2fv;
        PFNGLRASTERPOS2IPROC glRasterPos2i;
        PFNGLRASTERPOS2IVPROC glRasterPos2iv;
        PFNGLRASTERPOS2SPROC glRasterPos2s;
        PFNGLRASTERPOS2SVPROC glRasterPos2sv;
        PFNGLRASTERPOS3DPROC glRasterPos3d;
        PFNGLRASTERPOS3DVPROC glRasterPos3dv;
        PFNGLRASTERPOS3FPROC glRasterPos3f;
        PFNGLRASTERPOS3FVPROC glRasterPos3fv;
        PFNGLRASTERPOS3IPROC glRasterPos3i;
        PFNGLRASTERPOS3IVPROC glRasterPos3iv;
        PFNGLRASTERPOS3SPROC glRasterPos3s;
        PFNGLRASTERPOS3SVPROC glRasterPos3sv;
        PFNGLRASTERPOS4DPROC glRasterPos4d;
        PFNGLRASTERPOS4DVPROC glRasterPos4dv;
        PFNGLRASTERPOS4FPROC glRasterPos4f;
        PFNGLRASTERPOS4FVPROC glRasterPos4fv;
        PFNGLRASTERPOS4IPROC glRasterPos4i;
        PFNGLRASTERPOS4IVPROC glRasterPos4iv;
        PFNGLRASTERPOS4SPROC glRasterPos4s;
        PFNGLRASTERPOS4SVPROC glRasterPos4sv;
        PFNGLRECTDPROC glRectd;
        PFNGLRECTDVPROC glRectdv;
        PFNGLRECTFPROC glRectf;
        PFNGLRECTFVPROC glRectfv;
        PFNGLRECTIPROC glRecti;
        PFNGLRECTIVPROC glRectiv;
        PFNGLRECTSPROC glRects;
        PFNGLRECTSVPROC glRectsv;
        PFNGLTEXCOORD1DPROC glTexCoord1d;
        PFNGLTEXCOORD1DVPROC glTexCoord1dv;
        PFNGLTEXCOORD1FPROC glTexCoord1f;
        PFNGLTEXCOORD1FVPROC glTexCoord1fv;
        PFNGLTEXCOORD1IPROC glTexCoord1i;
        PFNGLTEXCOORD1IVPROC glTexCoord1iv;
        PFNGLTEXCOORD1SPROC glTexCoord1s;
        PFNGLTEXCOORD1SVPROC glTexCoord1sv;
        PFNGLTEXCOORD2DPROC glTexCoord2d;
        PFNGLTEXCOORD2DVPROC glTexCoord2dv;
        PFNGLTEXCOORD2FPROC glTexCoord2f;
        PFNGLTEXCOORD2FVPROC glTexCoord2fv;
        PFNGLTEXCOORD2IPROC glTexCoord2i;
        PFNGLTEXCOORD2IVPROC glTexCoord2iv;
        PFNGLTEXCOORD2SPROC glTexCoord2s;
        PFNGLTEXCOORD2SVPROC glTexCoord2sv;
        PFNGLTEXCOORD3DPROC glTexCoord3d;
        PFNGLTEXCOORD3DVPROC glTexCoord3dv;
        PFNGLTEXCOORD3FPROC glTexCoord3f;
        PFNGLTEXCOORD3FVPROC glTexCoord3fv;
        PFNGLTEXCOORD3IPROC glTexCoord3i;
        PFNGLTEXCOORD3IVPROC glTexCoord3iv;
        PFNGLTEXCOORD3SPROC glTexCoord3s;
        PFNGLTEXCOORD3SVPROC glTexCoord3sv;
        PFNGLTEXCOORD4DPROC glTexCoord4d;
        PFNGLTEXCOORD4DVPROC glTexCoord4dv;
        PFNGLTEXCOORD4FPROC glTexCoord4f;
        PFNGLTEXCOORD4FVPROC glTexCoord4fv;
        PFNGLTEXCOORD4IPROC glTexCoord4i;
        PFNGLTEXCOORD4IVPROC glTexCoord4iv;
        PFNGLTEXCOORD4SPROC glTexCoord4s;
        PFNGLTEXCOORD4SVPROC glTexCoord4sv;
        PFNGLVERTEX2DPROC glVertex2d;
        PFNGLVERTEX2DVPROC glVertex2dv;
        PFNGLVERTEX2FPROC glVertex2f;
        PFNGLVERTEX2FVPROC glVertex2fv;
        PFNGLVERTEX2IPROC glVertex2i;
        PFNGLVERTEX2IVPROC glVertex2iv;
        PFNGLVERTEX2SPROC glVertex2s;
        PFNGLVERTEX2SVPROC glVertex2sv;
        PFNGLVERTEX3DPROC glVertex3d;
        PFNGLVERTEX3DVPROC glVertex3dv;
        PFNGLVERTEX3FPROC glVertex3f;
        PFNGLVERTEX3FVPROC glVertex3fv;
        PFNGLVERTEX3IPROC glVertex3i;
        PFNGLVERTEX3IVPROC glVertex3iv;
        PFNGLVERTEX3SPROC glVertex3s;
        PFNGLVERTEX3SVPROC glVertex3sv;
        PFNGLVERTEX4DPROC glVertex4d;
        PFNGLVERTEX4DVPROC glVertex4dv;
        PFNGLVERTEX4FPROC glVertex4f;
        PFNGLVERTEX4FVPROC glVertex4fv;
        PFNGLVERTEX4IPROC glVertex4i;
        PFNGLVERTEX4IVPROC glVertex4iv;
        PFNGLVERTEX4SPROC glVertex4s;
        PFNGLVERTEX4SVPROC glVertex4sv;
        PFNGLCLIPPLANEPROC glClipPlane;
        PFNGLCOLORMATERIALPROC glColorMaterial;
        PFNGLFOGFPROC glFogf;
        PFNGLFOGFVPROC glFogfv;
        PFNGLFOGIPROC glFogi;
        PFNGLFOGIVPROC glFogiv;
        PFNGLLIGHTFPROC glLightf;
        PFNGLLIGHTFVPROC glLightfv;
        PFNGLLIGHTIPROC glLighti;
        PFNGLLIGHTIVPROC glLightiv;
        PFNGLLIGHTMODELFPROC glLightModelf;
        PFNGLLIGHTMODELFVPROC glLightModelfv;
        PFNGLLIGHTMODELIPROC glLightModeli;
        PFNGLLIGHTMODELIVPROC glLightModeliv;
        PFNGLLINESTIPPLEPROC glLineStipple;
        PFNGLMATERIALFPROC glMaterialf;
        PFNGLMATERIALFVPROC glMaterialfv;
        PFNGLMATERIALIPROC glMateriali;
        PFNGLMATERIALIVPROC glMaterialiv;
        PFNGLPOLYGONSTIPPLEPROC glPolygonStipple;
        PFNGLSHADEMODELPROC glShadeModel;
        PFNGLTEXENVFPROC glTexEnvf;
        PFNGLTEXENVFVPROC glTexEnvfv;
        PFNGLTEXENVIPROC glTexEnvi;
        PFNGLTEXENVIVPROC glTexEnviv;
        PFNGLTEXGENDPROC glTexGend;
        PFNGLTEXGENDVPROC glTexGendv;
        PFNGLTEXGENFPROC glTexGenf;
        PFNGLTEXGENFVPROC glTexGenfv;
        PFNGLTEXGENIPROC glTexGeni;
        PFNGLTEXGENIVPROC glTexGeniv;
        PFNGLFEEDBACKBUFFERPROC glFeedbackBuffer;
        PFNGLSELECTBUFFERPROC glSelectBuffer;
        PFNGLRENDERMODEPROC glRenderMode;
        PFNGLINITNAMESPROC glInitNames;
        PFNGLLOADNAMEPROC glLoadName;
        PFNGLPASSTHROUGHPROC glPassThrough;
        PFNGLPOPNAMEPROC glPopName;
        PFNGLPUSHNAMEPROC glPushName;
        PFNGLCLEARACCUMPROC glClearAccum;
        PFNGLCLEARINDEXPROC glClearIndex;
        PFNGLINDEXMASKPROC glIndexMask;
        PFNGLACCUMPROC glAccum;
        PFNGLPOPATTRIBPROC glPopAttrib;
        PFNGLPUSHATTRIBPROC glPushAttrib;
        PFNGLMAP1DPROC glMap1d;
        PFNGLMAP1FPROC glMap1f;
        PFNGLMAP2DPROC glMap2d;
        PFNGLMAP2FPROC glMap2f;
        PFNGLMAPGRID1DPROC glMapGrid1d;
        PFNGLMAPGRID1FPROC glMapGrid1f;
        PFNGLMAPGRID2DPROC glMapGrid2d;
        PFNGLMAPGRID2FPROC glMapGrid2f;
        PFNGLEVALCOORD1DPROC glEvalCoord1d;
        PFNGLEVALCOORD1DVPROC glEvalCoord1dv;
        PFNGLEVALCOORD1FPROC glEvalCoord1f;
        PFNGLEVALCOORD1FVPROC glEvalCoord1fv;
        PFNGLEVALCOORD2DPROC glEvalCoord2d;
        PFNGLEVALCOORD2DVPROC glEvalCoord2dv;
        PFNGLEVALCOORD2FPROC glEvalCoord2f;
        PFNGLEVALCOORD2FVPROC glEvalCoord2fv;
        PFNGLEVALMESH1PROC glEvalMesh1;
        PFNGLEVALPOINT1PROC glEvalPoint1;
        PFNGLEVALMESH2PROC glEvalMesh2;
        PFNGLEVALPOINT2PROC glEvalPoint2;
        PFNGLALPHAFUNCPROC glAlphaFunc;
        PFNGLPIXELZOOMPROC glPixelZoom;
        PFNGLPIXELTRANSFERFPROC glPixelTransferf;
        PFNGLPIXELTRANSFERIPROC glPixelTransferi;
        PFNGLPIXELMAPFVPROC glPixelMapfv;
        PFNGLPIXELMAPUIVPROC glPixelMapuiv;
        PFNGLPIXELMAPUSVPROC glPixelMapusv;
        PFNGLCOPYPIXELSPROC glCopyPixels;
        PFNGLDRAWPIXELSPROC glDrawPixels;
        PFNGLGETCLIPPLANEPROC glGetClipPlane;
        PFNGLGETLIGHTFVPROC glGetLightfv;
        PFNGLGETLIGHTIVPROC glGetLightiv;
        PFNGLGETMAPDVPROC glGetMapdv;
        PFNGLGETMAPFVPROC glGetMapfv;
        PFNGLGETMAPIVPROC glGetMapiv;
        PFNGLGETMATERIALFVPROC glGetMaterialfv;
        PFNGLGETMATERIALIVPROC glGetMaterialiv;
        PFNGLGETPIXELMAPFVPROC glGetPixelMapfv;
        PFNGLGETPIXELMAPUIVPROC glGetPixelMapuiv;
        PFNGLGETPIXELMAPUSVPROC glGetPixelMapusv;
        PFNGLGETPOLYGONSTIPPLEPROC glGetPolygonStipple;
        PFNGLGETTEXENVFVPROC glGetTexEnvfv;
        PFNGLGETTEXENVIVPROC glGetTexEnviv;
        PFNGLGETTEXGENDVPROC glGetTexGendv;
        PFNGLGETTEXGENFVPROC glGetTexGenfv;
        PFNGLGETTEXGENIVPROC glGetTexGeniv;
        PFNGLISLISTPROC glIsList;
        PFNGLFRUSTUMPROC glFrustum;
        PFNGLLOADIDENTITYPROC glLoadIdentity;
        PFNGLLOADMATRIXFPROC glLoadMatrixf;
        PFNGLLOADMATRIXDPROC glLoadMatrixd;
        PFNGLMATRIXMODEPROC glMatrixMode;
        PFNGLMULTMATRIXFPROC glMultMatrixf;
        PFNGLMULTMATRIXDPROC glMultMatrixd;
        PFNGLORTHOPROC glOrtho;
        PFNGLPOPMATRIXPROC glPopMatrix;
        PFNGLPUSHMATRIXPROC glPushMatrix;
        PFNGLROTATEDPROC glRotated;
        PFNGLROTATEFPROC glRotatef;
        PFNGLSCALEDPROC glScaled;
        PFNGLSCALEFPROC glScalef;
        PFNGLTRANSLATEDPROC glTranslated;
        PFNGLTRANSLATEFPROC glTranslatef;
        PFNGLDRAWARRAYSPROC glDrawArrays;
        PFNGLDRAWELEMENTSPROC glDrawElements;
        PFNGLGETPOINTERVPROC glGetPointerv;
        PFNGLPOLYGONOFFSETPROC glPolygonOffset;
        PFNGLCOPYTEXIMAGE1DPROC glCopyTexImage1D;
        PFNGLCOPYTEXIMAGE2DPROC glCopyTexImage2D;
        PFNGLCOPYTEXSUBIMAGE1DPROC glCopyTexSubImage1D;
        PFNGLCOPYTEXSUBIMAGE2DPROC glCopyTexSubImage2D;
        PFNGLTEXSUBIMAGE1DPROC glTexSubImage1D;
        PFNGLTEXSUBIMAGE2DPROC glTexSubImage2D;
        PFNGLBINDTEXTUREPROC glBindTexture;
        PFNGLDELETETEXTURESPROC glDeleteTextures;
        PFNGLGENTEXTURESPROC glGenTextures;
        PFNGLISTEXTUREPROC glIsTexture;
        PFNGLARRAYELEMENTPROC glArrayElement;
        PFNGLCOLORPOINTERPROC glColorPointer;
        PFNGLDISABLECLIENTSTATEPROC glDisableClientState;
        PFNGLEDGEFLAGPOINTERPROC glEdgeFlagPointer;
        PFNGLENABLECLIENTSTATEPROC glEnableClientState;
        PFNGLINDEXPOINTERPROC glIndexPointer;
        PFNGLINTERLEAVEDARRAYSPROC glInterleavedArrays;
        PFNGLNORMALPOINTERPROC glNormalPointer;
        PFNGLTEXCOORDPOINTERPROC glTexCoordPointer;
        PFNGLVERTEXPOINTERPROC glVertexPointer;
        PFNGLARETEXTURESRESIDENTPROC glAreTexturesResident;
        PFNGLPRIORITIZETEXTURESPROC glPrioritizeTextures;
        PFNGLINDEXUBPROC glIndexub;
        PFNGLINDEXUBVPROC glIndexubv;
        PFNGLPOPCLIENTATTRIBPROC glPopClientAttrib;
        PFNGLPUSHCLIENTATTRIBPROC glPushClientAttrib;
        PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
        PFNGLTEXIMAGE3DPROC glTexImage3D;
        PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
        PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;
        PFNGLACTIVETEXTUREPROC glActiveTexture;
        PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
        PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
        PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
        PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
        PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
        PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
        PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
        PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;
        PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture;
        PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d;
        PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv;
        PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f;
        PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv;
        PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i;
        PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv;
        PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s;
        PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv;
        PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d;
        PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv;
        PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f;
        PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv;
        PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i;
        PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv;
        PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s;
        PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv;
        PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d;
        PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv;
        PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f;
        PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv;
        PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i;
        PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv;
        PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s;
        PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv;
        PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d;
        PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv;
        PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f;
        PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv;
        PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i;
        PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv;
        PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s;
        PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv;
        PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf;
        PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd;
        PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf;
        PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd;
        PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
        PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
        PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
        PFNGLPOINTPARAMETERFPROC glPointParameterf;
        PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
        PFNGLPOINTPARAMETERIPROC glPointParameteri;
        PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
        PFNGLFOGCOORDFPROC glFogCoordf;
        PFNGLFOGCOORDFVPROC glFogCoordfv;
        PFNGLFOGCOORDDPROC glFogCoordd;
        PFNGLFOGCOORDDVPROC glFogCoorddv;
        PFNGLFOGCOORDPOINTERPROC glFogCoordPointer;
        PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b;
        PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv;
        PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d;
        PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv;
        PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f;
        PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv;
        PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i;
        PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv;
        PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s;
        PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv;
        PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub;
        PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv;
        PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui;
        PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv;
        PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us;
        PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv;
        PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer;
        PFNGLWINDOWPOS2DPROC glWindowPos2d;
        PFNGLWINDOWPOS2DVPROC glWindowPos2dv;
        PFNGLWINDOWPOS2FPROC glWindowPos2f;
        PFNGLWINDOWPOS2FVPROC glWindowPos2fv;
        PFNGLWINDOWPOS2IPROC glWindowPos2i;
        PFNGLWINDOWPOS2IVPROC glWindowPos2iv;
        PFNGLWINDOWPOS2SPROC glWindowPos2s;
        PFNGLWINDOWPOS2SVPROC glWindowPos2sv;
        PFNGLWINDOWPOS3DPROC glWindowPos3d;
        PFNGLWINDOWPOS3DVPROC glWindowPos3dv;
        PFNGLWINDOWPOS3FPROC glWindowPos3f;
        PFNGLWINDOWPOS3FVPROC glWindowPos3fv;
        PFNGLWINDOWPOS3IPROC glWindowPos3i;
        PFNGLWINDOWPOS3IVPROC glWindowPos3iv;
        PFNGLWINDOWPOS3SPROC glWindowPos3s;
        PFNGLWINDOWPOS3SVPROC glWindowPos3sv;
        PFNGLBLENDCOLORPROC glBlendColor;
        PFNGLBLENDEQUATIONPROC glBlendEquation;
        PFNGLGENQUERIESPROC glGenQueries;
        PFNGLDELETEQUERIESPROC glDeleteQueries;
        PFNGLISQUERYPROC glIsQuery;
        PFNGLBEGINQUERYPROC glBeginQuery;
        PFNGLENDQUERYPROC glEndQuery;
        PFNGLGETQUERYIVPROC glGetQueryiv;
        PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
        PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
        PFNGLBINDBUFFERPROC glBindBuffer;
        PFNGLDELETEBUFFERSPROC glDeleteBuffers;
        PFNGLGENBUFFERSPROC glGenBuffers;
        PFNGLISBUFFERPROC glIsBuffer;
        PFNGLBUFFERDATAPROC glBufferData;
        PFNGLBUFFERSUBDATAPROC glBufferSubData;
        PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
        PFNGLMAPBUFFERPROC glMapBuffer;
        PFNGLUNMAPBUFFERPROC glUnmapBuffer;
        PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
        PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;
        PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
        PFNGLDRAWBUFFERSPROC glDrawBuffers;
        PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
        PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
        PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
        PFNGLATTACHSHADERPROC glAttachShader;
        PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
        PFNGLCOMPILESHADERPROC glCompileShader;
        PFNGLCREATEPROGRAMPROC glCreateProgram;
        PFNGLCREATESHADERPROC glCreateShader;
        PFNGLDELETEPROGRAMPROC glDeleteProgram;
        PFNGLDELETESHADERPROC glDeleteShader;
        PFNGLDETACHSHADERPROC glDetachShader;
        PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
        PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
        PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
        PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
        PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
        PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
        PFNGLGETPROGRAMIVPROC glGetProgramiv;
        PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
        PFNGLGETSHADERIVPROC glGetShaderiv;
        PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
        PFNGLGETSHADERSOURCEPROC glGetShaderSource;
        PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
        PFNGLGETUNIFORMFVPROC glGetUniformfv;
        PFNGLGETUNIFORMIVPROC glGetUniformiv;
        PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
        PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
        PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
        PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
        PFNGLISPROGRAMPROC glIsProgram;
        PFNGLISSHADERPROC glIsShader;
        PFNGLLINKPROGRAMPROC glLinkProgram;
        PFNGLSHADERSOURCEPROC glShaderSource;
        PFNGLUSEPROGRAMPROC glUseProgram;
        PFNGLUNIFORM1FPROC glUniform1f;
        PFNGLUNIFORM2FPROC glUniform2f;
        PFNGLUNIFORM3FPROC glUniform3f;
        PFNGLUNIFORM4FPROC glUniform4f;
        PFNGLUNIFORM1IPROC glUniform1i;
        PFNGLUNIFORM2IPROC glUniform2i;
        PFNGLUNIFORM3IPROC glUniform3i;
        PFNGLUNIFORM4IPROC glUniform4i;
        PFNGLUNIFORM1FVPROC glUniform1fv;
        PFNGLUNIFORM2FVPROC glUniform2fv;
        PFNGLUNIFORM3FVPROC glUniform3fv;
        PFNGLUNIFORM4FVPROC glUniform4fv;
        PFNGLUNIFORM1IVPROC glUniform1iv;
        PFNGLUNIFORM2IVPROC glUniform2iv;
        PFNGLUNIFORM3IVPROC glUniform3iv;
        PFNGLUNIFORM4IVPROC glUniform4iv;
        PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
        PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
        PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
        PFNGLVALIDATEPROGRAMPROC glValidateProgram;
        PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
        PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
        PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
        PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
        PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
        PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
        PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
        PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
        PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
        PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
        PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
        PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
        PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
        PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
        PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
        PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
        PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
        PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
        PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
        PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
        PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
        PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
        PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
        PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
        PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
        PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
        PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
        PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
        PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
        PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
        PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
        PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
        PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
        PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
        PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
        PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
        PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;
        PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
        PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
        PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
        PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
        PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
        PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;
        PFNGLCOLORMASKIPROC glColorMaski;
        PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
        PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
        PFNGLENABLEIPROC glEnablei;
        PFNGLDISABLEIPROC glDisablei;
        PFNGLISENABLEDIPROC glIsEnabledi;
        PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
        PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
        PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
        PFNGLBINDBUFFERBASEPROC glBindBufferBase;
        PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
        PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
        PFNGLCLAMPCOLORPROC glClampColor;
        PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
        PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
        PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
        PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
        PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
        PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
        PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
        PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
        PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
        PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
        PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
        PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
        PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
        PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
        PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
        PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
        PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
        PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
        PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
        PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
        PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
        PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
        PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
        PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
        PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
        PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
        PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
        PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
        PFNGLUNIFORM1UIPROC glUniform1ui;
        PFNGLUNIFORM2UIPROC glUniform2ui;
        PFNGLUNIFORM3UIPROC glUniform3ui;
        PFNGLUNIFORM4UIPROC glUniform4ui;
        PFNGLUNIFORM1UIVPROC glUniform1uiv;
        PFNGLUNIFORM2UIVPROC glUniform2uiv;
        PFNGLUNIFORM3UIVPROC glUniform3uiv;
        PFNGLUNIFORM4UIVPROC glUniform4uiv;
        PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
        PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
        PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
        PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
        PFNGLCLEARBUFFERIVPROC glClearBufferiv;
        PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
        PFNGLCLEARBUFFERFVPROC glClearBufferfv;
        PFNGLCLEARBUFFERFIPROC glClearBufferfi;
        PFNGLGETSTRINGIPROC glGetStringi;
        PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
        PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
        PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
        PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
        PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
        PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
        PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
        PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
        PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
        PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
        PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
        PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
        PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
        PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
        PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
        PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
        PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
        PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
        PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
        PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
        PFNGLMAPBUFFERRANGEPROC glMapBufferRange;
        PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
        PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
        PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
        PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
        PFNGLISVERTEXARRAYPROC glIsVertexArray;
        PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
        PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
        PFNGLTEXBUFFERPROC glTexBuffer;
        PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
        PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
        PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
        PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
        PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
        PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
        PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
        PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
        PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
        PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
        PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
        PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
        PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
        PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
        PFNGLFENCESYNCPROC glFenceSync;
        PFNGLISSYNCPROC glIsSync;
        PFNGLDELETESYNCPROC glDeleteSync;
        PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
        PFNGLWAITSYNCPROC glWaitSync;
        PFNGLGETINTEGER64VPROC glGetInteger64v;
        PFNGLGETSYNCIVPROC glGetSynciv;
        PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
        PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
        PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
        PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
        PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
        PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
        PFNGLSAMPLEMASKIPROC glSampleMaski;
        PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
        PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
        PFNGLGENSAMPLERSPROC glGenSamplers;
        PFNGLDELETESAMPLERSPROC glDeleteSamplers;
        PFNGLISSAMPLERPROC glIsSampler;
        PFNGLBINDSAMPLERPROC glBindSampler;
        PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
        PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
        PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
        PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
        PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
        PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
        PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
        PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
        PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
        PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
        PFNGLQUERYCOUNTERPROC glQueryCounter;
        PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
        PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
        PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
        PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
        PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
        PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
        PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
        PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
        PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
        PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
        PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;
        PFNGLVERTEXP2UIPROC glVertexP2ui;
        PFNGLVERTEXP2UIVPROC glVertexP2uiv;
        PFNGLVERTEXP3UIPROC glVertexP3ui;
        PFNGLVERTEXP3UIVPROC glVertexP3uiv;
        PFNGLVERTEXP4UIPROC glVertexP4ui;
        PFNGLVERTEXP4UIVPROC glVertexP4uiv;
        PFNGLTEXCOORDP1UIPROC glTexCoordP1ui;
        PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv;
        PFNGLTEXCOORDP2UIPROC glTexCoordP2ui;
        PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv;
        PFNGLTEXCOORDP3UIPROC glTexCoordP3ui;
        PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv;
        PFNGLTEXCOORDP4UIPROC glTexCoordP4ui;
        PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv;
        PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui;
        PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv;
        PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui;
        PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv;
        PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui;
        PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv;
        PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui;
        PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv;
        PFNGLNORMALP3UIPROC glNormalP3ui;
        PFNGLNORMALP3UIVPROC glNormalP3uiv;
        PFNGLCOLORP3UIPROC glColorP3ui;
        PFNGLCOLORP3UIVPROC glColorP3uiv;
        PFNGLCOLORP4UIPROC glColorP4ui;
        PFNGLCOLORP4UIVPROC glColorP4uiv;
        PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui;
        PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv;
        PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
        PFNGLBLENDEQUATIONIPROC glBlendEquationi;
        PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
        PFNGLBLENDFUNCIPROC glBlendFunci;
        PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
        PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
        PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
        PFNGLUNIFORM1DPROC glUniform1d;
        PFNGLUNIFORM2DPROC glUniform2d;
        PFNGLUNIFORM3DPROC glUniform3d;
        PFNGLUNIFORM4DPROC glUniform4d;
        PFNGLUNIFORM1DVPROC glUniform1dv;
        PFNGLUNIFORM2DVPROC glUniform2dv;
        PFNGLUNIFORM3DVPROC glUniform3dv;
        PFNGLUNIFORM4DVPROC glUniform4dv;
        PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
        PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
        PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
        PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
        PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
        PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
        PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
        PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
        PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
        PFNGLGETUNIFORMDVPROC glGetUniformdv;
        PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
        PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
        PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
        PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
        PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
        PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
        PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
        PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
        PFNGLPATCHPARAMETERIPROC glPatchParameteri;
        PFNGLPATCHPARAMETERFVPROC glPatchParameterfv;
        PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
        PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
        PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
        PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
        PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
        PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
        PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
        PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
        PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
        PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed;
        PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv;
        PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler;
        PFNGLSHADERBINARYPROC glShaderBinary;
        PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat;
        PFNGLDEPTHRANGEFPROC glDepthRangef;
        PFNGLCLEARDEPTHFPROC glClearDepthf;
        PFNGLGETPROGRAMBINARYPROC glGetProgramBinary;
        PFNGLPROGRAMBINARYPROC glProgramBinary;
        PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
        PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages;
        PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram;
        PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv;
        PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline;
        PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines;
        PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines;
        PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline;
        PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv;
        PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i;
        PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv;
        PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f;
        PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv;
        PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d;
        PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv;
        PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui;
        PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv;
        PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i;
        PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv;
        PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f;
        PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv;
        PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d;
        PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv;
        PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui;
        PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv;
        PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i;
        PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv;
        PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f;
        PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv;
        PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d;
        PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv;
        PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui;
        PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv;
        PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i;
        PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv;
        PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f;
        PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv;
        PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d;
        PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv;
        PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui;
        PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv;
        PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv;
        PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv;
        PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv;
        PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv;
        PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv;
        PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv;
        PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv;
        PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv;
        PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv;
        PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv;
        PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv;
        PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv;
        PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv;
        PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv;
        PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv;
        PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv;
        PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv;
        PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv;
        PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline;
        PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog;
        PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d;
        PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d;
        PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d;
        PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d;
        PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv;
        PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv;
        PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv;
        PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv;
        PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer;
        PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv;
        PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
        PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
        PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
        PFNGLSCISSORARRAYVPROC glScissorArrayv;
        PFNGLSCISSORINDEXEDPROC glScissorIndexed;
        PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
        PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
        PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
        PFNGLGETFLOATI_VPROC glGetFloati_v;
        PFNGLGETDOUBLEI_VPROC glGetDoublei_v;
        PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance;
        PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance;
        PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance;
        PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ;
        PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
        PFNGLBINDIMAGETEXTUREPROC glBindImageTexture;
        PFNGLMEMORYBARRIERPROC glMemoryBarrier;
        PFNGLTEXSTORAGE1DPROC glTexStorage1D;
        PFNGLTEXSTORAGE2DPROC glTexStorage2D;
        PFNGLTEXSTORAGE3DPROC glTexStorage3D;
        PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced;
        PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced;
        PFNGLCLEARBUFFERDATAPROC glClearBufferData;
        PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData;
        PFNGLDISPATCHCOMPUTEPROC glDispatchCompute;
        PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect;
        PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData;
        PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri;
        PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv;
        PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v;
        PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage;
        PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage;
        PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData;
        PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData;
        PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer;
        PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer;
        PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect;
        PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect;
        PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv;
        PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex;
        PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName;
        PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv;
        PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation;
        PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex;
        PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding;
        PFNGLTEXBUFFERRANGEPROC glTexBufferRange;
        PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample;
        PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample;
        PFNGLTEXTUREVIEWPROC glTextureView;
        PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer;
        PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat;
        PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat;
        PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat;
        PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding;
        PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor;
        PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl;
        PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
        PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
        PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
        PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup;
        PFNGLPOPDEBUGGROUPPROC glPopDebugGroup;
        PFNGLOBJECTLABELPROC glObjectLabel;
        PFNGLGETOBJECTLABELPROC glGetObjectLabel;
        PFNGLOBJECTPTRLABELPROC glObjectPtrLabel;
        PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
        PFNGLBUFFERSTORAGEPROC glBufferStorage;
        PFNGLCLEARTEXIMAGEPROC glClearTexImage;
        PFNGLCLEARTEXSUBIMAGEPROC glClearTexSubImage;
        PFNGLBINDBUFFERSBASEPROC glBindBuffersBase;
        PFNGLBINDBUFFERSRANGEPROC glBindBuffersRange;
        PFNGLBINDTEXTURESPROC glBindTextures;
        PFNGLBINDSAMPLERSPROC glBindSamplers;
        PFNGLBINDIMAGETEXTURESPROC glBindImageTextures;
        PFNGLBINDVERTEXBUFFERSPROC glBindVertexBuffers;
        PFNGLCLIPCONTROLPROC glClipControl;
        PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks;
        PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase;
        PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange;
        PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv;
        PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v;
        PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v;
        PFNGLCREATEBUFFERSPROC glCreateBuffers;
        PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage;
        PFNGLNAMEDBUFFERDATAPROC glNamedBufferData;
        PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData;
        PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData;
        PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData;
        PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData;
        PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer;
        PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange;
        PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer;
        PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange;
        PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv;
        PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v;
        PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv;
        PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData;
        PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers;
        PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer;
        PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri;
        PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture;
        PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer;
        PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer;
        PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers;
        PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer;
        PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData;
        PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData;
        PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv;
        PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv;
        PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv;
        PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi;
        PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer;
        PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus;
        PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv;
        PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv;
        PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers;
        PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage;
        PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample;
        PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv;
        PFNGLCREATETEXTURESPROC glCreateTextures;
        PFNGLTEXTUREBUFFERPROC glTextureBuffer;
        PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange;
        PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D;
        PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D;
        PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D;
        PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample;
        PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample;
        PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D;
        PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D;
        PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D;
        PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D;
        PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D;
        PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D;
        PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D;
        PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D;
        PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D;
        PFNGLTEXTUREPARAMETERFPROC glTextureParameterf;
        PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv;
        PFNGLTEXTUREPARAMETERIPROC glTextureParameteri;
        PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv;
        PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv;
        PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv;
        PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap;
        PFNGLBINDTEXTUREUNITPROC glBindTextureUnit;
        PFNGLGETTEXTUREIMAGEPROC glGetTextureImage;
        PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage;
        PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv;
        PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv;
        PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv;
        PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv;
        PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv;
        PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv;
        PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays;
        PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib;
        PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib;
        PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer;
        PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer;
        PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers;
        PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding;
        PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat;
        PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat;
        PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat;
        PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor;
        PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv;
        PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv;
        PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv;
        PFNGLCREATESAMPLERSPROC glCreateSamplers;
        PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines;
        PFNGLCREATEQUERIESPROC glCreateQueries;
        PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v;
        PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv;
        PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v;
        PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv;
        PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion;
        PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage;
        PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage;
        PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus;
        PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage;
        PFNGLGETNTEXIMAGEPROC glGetnTexImage;
        PFNGLGETNUNIFORMDVPROC glGetnUniformdv;
        PFNGLGETNUNIFORMFVPROC glGetnUniformfv;
        PFNGLGETNUNIFORMIVPROC glGetnUniformiv;
        PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv;
        PFNGLREADNPIXELSPROC glReadnPixels;
        PFNGLGETNMAPDVPROC glGetnMapdv;
        PFNGLGETNMAPFVPROC glGetnMapfv;
        PFNGLGETNMAPIVPROC glGetnMapiv;
        PFNGLGETNPIXELMAPFVPROC glGetnPixelMapfv;
        PFNGLGETNPIXELMAPUIVPROC glGetnPixelMapuiv;
        PFNGLGETNPIXELMAPUSVPROC glGetnPixelMapusv;
        PFNGLGETNPOLYGONSTIPPLEPROC glGetnPolygonStipple;
        PFNGLGETNCOLORTABLEPROC glGetnColorTable;
        PFNGLGETNCONVOLUTIONFILTERPROC glGetnConvolutionFilter;
        PFNGLGETNSEPARABLEFILTERPROC glGetnSeparableFilter;
        PFNGLGETNHISTOGRAMPROC glGetnHistogram;
        PFNGLGETNMINMAXPROC glGetnMinmax;
        PFNGLTEXTUREBARRIERPROC glTextureBarrier;
        PFNGLSPECIALIZESHADERPROC glSpecializeShader;
        PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glMultiDrawArraysIndirectCount;
        PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glMultiDrawElementsIndirectCount;
        PFNGLPOLYGONOFFSETCLAMPPROC glPolygonOffsetClamp;
#if defined(GLBIND_WGL)
        PFNWGLCOPYCONTEXTPROC wglCopyContext;
        PFNWGLCREATECONTEXTPROC wglCreateContext;
        PFNWGLCREATELAYERCONTEXTPROC wglCreateLayerContext;
        PFNWGLDELETECONTEXTPROC wglDeleteContext;
        PFNWGLDESCRIBELAYERPLANEPROC wglDescribeLayerPlane;
        PFNWGLGETCURRENTCONTEXTPROC wglGetCurrentContext;
        PFNWGLGETCURRENTDCPROC wglGetCurrentDC;
        PFNWGLGETLAYERPALETTEENTRIESPROC wglGetLayerPaletteEntries;
        PFNWGLGETPROCADDRESSPROC wglGetProcAddress;
        PFNWGLMAKECURRENTPROC wglMakeCurrent;
        PFNWGLREALIZELAYERPALETTEPROC wglRealizeLayerPalette;
        PFNWGLSETLAYERPALETTEENTRIESPROC wglSetLayerPaletteEntries;
        PFNWGLSHARELISTSPROC wglShareLists;
        PFNWGLSWAPLAYERBUFFERSPROC wglSwapLayerBuffers;
        PFNWGLUSEFONTBITMAPSAPROC wglUseFontBitmapsA;
        PFNWGLUSEFONTBITMAPSWPROC wglUseFontBitmapsW;
        PFNWGLUSEFONTOUTLINESAPROC wglUseFontOutlinesA;
        PFNWGLUSEFONTOUTLINESWPROC wglUseFontOutlinesW;
#endif /* GLBIND_WGL */
#if defined(GLBIND_GLX)
        PFNGLXCHOOSEVISUALPROC glXChooseVisual;
        PFNGLXCREATECONTEXTPROC glXCreateContext;
        PFNGLXDESTROYCONTEXTPROC glXDestroyContext;
        PFNGLXMAKECURRENTPROC glXMakeCurrent;
        PFNGLXCOPYCONTEXTPROC glXCopyContext;
        PFNGLXSWAPBUFFERSPROC glXSwapBuffers;
        PFNGLXCREATEGLXPIXMAPPROC glXCreateGLXPixmap;
        PFNGLXDESTROYGLXPIXMAPPROC glXDestroyGLXPixmap;
        PFNGLXQUERYEXTENSIONPROC glXQueryExtension;
        PFNGLXQUERYVERSIONPROC glXQueryVersion;
        PFNGLXISDIRECTPROC glXIsDirect;
        PFNGLXGETCONFIGPROC glXGetConfig;
        PFNGLXGETCURRENTCONTEXTPROC glXGetCurrentContext;
        PFNGLXGETCURRENTDRAWABLEPROC glXGetCurrentDrawable;
        PFNGLXWAITGLPROC glXWaitGL;
        PFNGLXWAITXPROC glXWaitX;
        PFNGLXUSEXFONTPROC glXUseXFont;
        PFNGLXQUERYEXTENSIONSSTRINGPROC glXQueryExtensionsString;
        PFNGLXQUERYSERVERSTRINGPROC glXQueryServerString;
        PFNGLXGETCLIENTSTRINGPROC glXGetClientString;
        PFNGLXGETCURRENTDISPLAYPROC glXGetCurrentDisplay;
        PFNGLXGETFBCONFIGSPROC glXGetFBConfigs;
        PFNGLXCHOOSEFBCONFIGPROC glXChooseFBConfig;
        PFNGLXGETFBCONFIGATTRIBPROC glXGetFBConfigAttrib;
        PFNGLXGETVISUALFROMFBCONFIGPROC glXGetVisualFromFBConfig;
        PFNGLXCREATEWINDOWPROC glXCreateWindow;
        PFNGLXDESTROYWINDOWPROC glXDestroyWindow;
        PFNGLXCREATEPIXMAPPROC glXCreatePixmap;
        PFNGLXDESTROYPIXMAPPROC glXDestroyPixmap;
        PFNGLXCREATEPBUFFERPROC glXCreatePbuffer;
        PFNGLXDESTROYPBUFFERPROC glXDestroyPbuffer;
        PFNGLXQUERYDRAWABLEPROC glXQueryDrawable;
        PFNGLXCREATENEWCONTEXTPROC glXCreateNewContext;
        PFNGLXMAKECONTEXTCURRENTPROC glXMakeContextCurrent;
        PFNGLXGETCURRENTREADDRAWABLEPROC glXGetCurrentReadDrawable;
        PFNGLXQUERYCONTEXTPROC glXQueryContext;
        PFNGLXSELECTEVENTPROC glXSelectEvent;
        PFNGLXGETSELECTEDEVENTPROC glXGetSelectedEvent;
        PFNGLXGETPROCADDRESSPROC glXGetProcAddress;
#endif /* GLBIND_GLX */
        PFNGLTBUFFERMASK3DFXPROC glTbufferMask3DFX;
        PFNGLDEBUGMESSAGEENABLEAMDPROC glDebugMessageEnableAMD;
        PFNGLDEBUGMESSAGEINSERTAMDPROC glDebugMessageInsertAMD;
        PFNGLDEBUGMESSAGECALLBACKAMDPROC glDebugMessageCallbackAMD;
        PFNGLGETDEBUGMESSAGELOGAMDPROC glGetDebugMessageLogAMD;
        PFNGLBLENDFUNCINDEXEDAMDPROC glBlendFuncIndexedAMD;
        PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glBlendFuncSeparateIndexedAMD;
        PFNGLBLENDEQUATIONINDEXEDAMDPROC glBlendEquationIndexedAMD;
        PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glBlendEquationSeparateIndexedAMD;
        PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC glRenderbufferStorageMultisampleAdvancedAMD;
        PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC glNamedRenderbufferStorageMultisampleAdvancedAMD;
        PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC glFramebufferSamplePositionsfvAMD;
        PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC glNamedFramebufferSamplePositionsfvAMD;
        PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC glGetFramebufferParameterfvAMD;
        PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC glGetNamedFramebufferParameterfvAMD;
        PFNGLUNIFORM1I64NVPROC glUniform1i64NV;
        PFNGLUNIFORM2I64NVPROC glUniform2i64NV;
        PFNGLUNIFORM3I64NVPROC glUniform3i64NV;
        PFNGLUNIFORM4I64NVPROC glUniform4i64NV;
        PFNGLUNIFORM1I64VNVPROC glUniform1i64vNV;
        PFNGLUNIFORM2I64VNVPROC glUniform2i64vNV;
        PFNGLUNIFORM3I64VNVPROC glUniform3i64vNV;
        PFNGLUNIFORM4I64VNVPROC glUniform4i64vNV;
        PFNGLUNIFORM1UI64NVPROC glUniform1ui64NV;
        PFNGLUNIFORM2UI64NVPROC glUniform2ui64NV;
        PFNGLUNIFORM3UI64NVPROC glUniform3ui64NV;
        PFNGLUNIFORM4UI64NVPROC glUniform4ui64NV;
        PFNGLUNIFORM1UI64VNVPROC glUniform1ui64vNV;
        PFNGLUNIFORM2UI64VNVPROC glUniform2ui64vNV;
        PFNGLUNIFORM3UI64VNVPROC glUniform3ui64vNV;
        PFNGLUNIFORM4UI64VNVPROC glUniform4ui64vNV;
        PFNGLGETUNIFORMI64VNVPROC glGetUniformi64vNV;
        PFNGLGETUNIFORMUI64VNVPROC glGetUniformui64vNV;
        PFNGLPROGRAMUNIFORM1I64NVPROC glProgramUniform1i64NV;
        PFNGLPROGRAMUNIFORM2I64NVPROC glProgramUniform2i64NV;
        PFNGLPROGRAMUNIFORM3I64NVPROC glProgramUniform3i64NV;
        PFNGLPROGRAMUNIFORM4I64NVPROC glProgramUniform4i64NV;
        PFNGLPROGRAMUNIFORM1I64VNVPROC glProgramUniform1i64vNV;
        PFNGLPROGRAMUNIFORM2I64VNVPROC glProgramUniform2i64vNV;
        PFNGLPROGRAMUNIFORM3I64VNVPROC glProgramUniform3i64vNV;
        PFNGLPROGRAMUNIFORM4I64VNVPROC glProgramUniform4i64vNV;
        PFNGLPROGRAMUNIFORM1UI64NVPROC glProgramUniform1ui64NV;
        PFNGLPROGRAMUNIFORM2UI64NVPROC glProgramUniform2ui64NV;
        PFNGLPROGRAMUNIFORM3UI64NVPROC glProgramUniform3ui64NV;
        PFNGLPROGRAMUNIFORM4UI64NVPROC glProgramUniform4ui64NV;
        PFNGLPROGRAMUNIFORM1UI64VNVPROC glProgramUniform1ui64vNV;
        PFNGLPROGRAMUNIFORM2UI64VNVPROC glProgramUniform2ui64vNV;
        PFNGLPROGRAMUNIFORM3UI64VNVPROC glProgramUniform3ui64vNV;
        PFNGLPROGRAMUNIFORM4UI64VNVPROC glProgramUniform4ui64vNV;
        PFNGLVERTEXATTRIBPARAMETERIAMDPROC glVertexAttribParameteriAMD;
        PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glMultiDrawArraysIndirectAMD;
        PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glMultiDrawElementsIndirectAMD;
        PFNGLGENNAMESAMDPROC glGenNamesAMD;
        PFNGLDELETENAMESAMDPROC glDeleteNamesAMD;
        PFNGLISNAMEAMDPROC glIsNameAMD;
        PFNGLQUERYOBJECTPARAMETERUIAMDPROC glQueryObjectParameteruiAMD;
        PFNGLGETPERFMONITORGROUPSAMDPROC glGetPerfMonitorGroupsAMD;
        PFNGLGETPERFMONITORCOUNTERSAMDPROC glGetPerfMonitorCountersAMD;
        PFNGLGETPERFMONITORGROUPSTRINGAMDPROC glGetPerfMonitorGroupStringAMD;
        PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC glGetPerfMonitorCounterStringAMD;
        PFNGLGETPERFMONITORCOUNTERINFOAMDPROC glGetPerfMonitorCounterInfoAMD;
        PFNGLGENPERFMONITORSAMDPROC glGenPerfMonitorsAMD;
        PFNGLDELETEPERFMONITORSAMDPROC glDeletePerfMonitorsAMD;
        PFNGLSELECTPERFMONITORCOUNTERSAMDPROC glSelectPerfMonitorCountersAMD;
        PFNGLBEGINPERFMONITORAMDPROC glBeginPerfMonitorAMD;
        PFNGLENDPERFMONITORAMDPROC glEndPerfMonitorAMD;
        PFNGLGETPERFMONITORCOUNTERDATAAMDPROC glGetPerfMonitorCounterDataAMD;
        PFNGLSETMULTISAMPLEFVAMDPROC glSetMultisamplefvAMD;
        PFNGLTEXSTORAGESPARSEAMDPROC glTexStorageSparseAMD;
        PFNGLTEXTURESTORAGESPARSEAMDPROC glTextureStorageSparseAMD;
        PFNGLSTENCILOPVALUEAMDPROC glStencilOpValueAMD;
        PFNGLTESSELLATIONFACTORAMDPROC glTessellationFactorAMD;
        PFNGLTESSELLATIONMODEAMDPROC glTessellationModeAMD;
        PFNGLELEMENTPOINTERAPPLEPROC glElementPointerAPPLE;
        PFNGLDRAWELEMENTARRAYAPPLEPROC glDrawElementArrayAPPLE;
        PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC glDrawRangeElementArrayAPPLE;
        PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC glMultiDrawElementArrayAPPLE;
        PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC glMultiDrawRangeElementArrayAPPLE;
        PFNGLGENFENCESAPPLEPROC glGenFencesAPPLE;
        PFNGLDELETEFENCESAPPLEPROC glDeleteFencesAPPLE;
        PFNGLSETFENCEAPPLEPROC glSetFenceAPPLE;
        PFNGLISFENCEAPPLEPROC glIsFenceAPPLE;
        PFNGLTESTFENCEAPPLEPROC glTestFenceAPPLE;
        PFNGLFINISHFENCEAPPLEPROC glFinishFenceAPPLE;
        PFNGLTESTOBJECTAPPLEPROC glTestObjectAPPLE;
        PFNGLFINISHOBJECTAPPLEPROC glFinishObjectAPPLE;
        PFNGLBUFFERPARAMETERIAPPLEPROC glBufferParameteriAPPLE;
        PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glFlushMappedBufferRangeAPPLE;
        PFNGLOBJECTPURGEABLEAPPLEPROC glObjectPurgeableAPPLE;
        PFNGLOBJECTUNPURGEABLEAPPLEPROC glObjectUnpurgeableAPPLE;
        PFNGLGETOBJECTPARAMETERIVAPPLEPROC glGetObjectParameterivAPPLE;
        PFNGLTEXTURERANGEAPPLEPROC glTextureRangeAPPLE;
        PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC glGetTexParameterPointervAPPLE;
        PFNGLBINDVERTEXARRAYAPPLEPROC glBindVertexArrayAPPLE;
        PFNGLDELETEVERTEXARRAYSAPPLEPROC glDeleteVertexArraysAPPLE;
        PFNGLGENVERTEXARRAYSAPPLEPROC glGenVertexArraysAPPLE;
        PFNGLISVERTEXARRAYAPPLEPROC glIsVertexArrayAPPLE;
        PFNGLVERTEXARRAYRANGEAPPLEPROC glVertexArrayRangeAPPLE;
        PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC glFlushVertexArrayRangeAPPLE;
        PFNGLVERTEXARRAYPARAMETERIAPPLEPROC glVertexArrayParameteriAPPLE;
        PFNGLENABLEVERTEXATTRIBAPPLEPROC glEnableVertexAttribAPPLE;
        PFNGLDISABLEVERTEXATTRIBAPPLEPROC glDisableVertexAttribAPPLE;
        PFNGLISVERTEXATTRIBENABLEDAPPLEPROC glIsVertexAttribEnabledAPPLE;
        PFNGLMAPVERTEXATTRIB1DAPPLEPROC glMapVertexAttrib1dAPPLE;
        PFNGLMAPVERTEXATTRIB1FAPPLEPROC glMapVertexAttrib1fAPPLE;
        PFNGLMAPVERTEXATTRIB2DAPPLEPROC glMapVertexAttrib2dAPPLE;
        PFNGLMAPVERTEXATTRIB2FAPPLEPROC glMapVertexAttrib2fAPPLE;
        PFNGLPRIMITIVEBOUNDINGBOXARBPROC glPrimitiveBoundingBoxARB;
        PFNGLGETTEXTUREHANDLEARBPROC glGetTextureHandleARB;
        PFNGLGETTEXTURESAMPLERHANDLEARBPROC glGetTextureSamplerHandleARB;
        PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glMakeTextureHandleResidentARB;
        PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glMakeTextureHandleNonResidentARB;
        PFNGLGETIMAGEHANDLEARBPROC glGetImageHandleARB;
        PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glMakeImageHandleResidentARB;
        PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glMakeImageHandleNonResidentARB;
        PFNGLUNIFORMHANDLEUI64ARBPROC glUniformHandleui64ARB;
        PFNGLUNIFORMHANDLEUI64VARBPROC glUniformHandleui64vARB;
        PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC glProgramUniformHandleui64ARB;
        PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC glProgramUniformHandleui64vARB;
        PFNGLISTEXTUREHANDLERESIDENTARBPROC glIsTextureHandleResidentARB;
        PFNGLISIMAGEHANDLERESIDENTARBPROC glIsImageHandleResidentARB;
        PFNGLVERTEXATTRIBL1UI64ARBPROC glVertexAttribL1ui64ARB;
        PFNGLVERTEXATTRIBL1UI64VARBPROC glVertexAttribL1ui64vARB;
        PFNGLGETVERTEXATTRIBLUI64VARBPROC glGetVertexAttribLui64vARB;
        PFNGLCREATESYNCFROMCLEVENTARBPROC glCreateSyncFromCLeventARB;
        PFNGLCLAMPCOLORARBPROC glClampColorARB;
        PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC glDispatchComputeGroupSizeARB;
        PFNGLDEBUGMESSAGECONTROLARBPROC glDebugMessageControlARB;
        PFNGLDEBUGMESSAGEINSERTARBPROC glDebugMessageInsertARB;
        PFNGLDEBUGMESSAGECALLBACKARBPROC glDebugMessageCallbackARB;
        PFNGLGETDEBUGMESSAGELOGARBPROC glGetDebugMessageLogARB;
        PFNGLDRAWBUFFERSARBPROC glDrawBuffersARB;
        PFNGLBLENDEQUATIONIARBPROC glBlendEquationiARB;
        PFNGLBLENDEQUATIONSEPARATEIARBPROC glBlendEquationSeparateiARB;
        PFNGLBLENDFUNCIARBPROC glBlendFunciARB;
        PFNGLBLENDFUNCSEPARATEIARBPROC glBlendFuncSeparateiARB;
        PFNGLDRAWARRAYSINSTANCEDARBPROC glDrawArraysInstancedARB;
        PFNGLDRAWELEMENTSINSTANCEDARBPROC glDrawElementsInstancedARB;
        PFNGLPROGRAMSTRINGARBPROC glProgramStringARB;
        PFNGLBINDPROGRAMARBPROC glBindProgramARB;
        PFNGLDELETEPROGRAMSARBPROC glDeleteProgramsARB;
        PFNGLGENPROGRAMSARBPROC glGenProgramsARB;
        PFNGLPROGRAMENVPARAMETER4DARBPROC glProgramEnvParameter4dARB;
        PFNGLPROGRAMENVPARAMETER4DVARBPROC glProgramEnvParameter4dvARB;
        PFNGLPROGRAMENVPARAMETER4FARBPROC glProgramEnvParameter4fARB;
        PFNGLPROGRAMENVPARAMETER4FVARBPROC glProgramEnvParameter4fvARB;
        PFNGLPROGRAMLOCALPARAMETER4DARBPROC glProgramLocalParameter4dARB;
        PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glProgramLocalParameter4dvARB;
        PFNGLPROGRAMLOCALPARAMETER4FARBPROC glProgramLocalParameter4fARB;
        PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glProgramLocalParameter4fvARB;
        PFNGLGETPROGRAMENVPARAMETERDVARBPROC glGetProgramEnvParameterdvARB;
        PFNGLGETPROGRAMENVPARAMETERFVARBPROC glGetProgramEnvParameterfvARB;
        PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glGetProgramLocalParameterdvARB;
        PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glGetProgramLocalParameterfvARB;
        PFNGLGETPROGRAMIVARBPROC glGetProgramivARB;
        PFNGLGETPROGRAMSTRINGARBPROC glGetProgramStringARB;
        PFNGLISPROGRAMARBPROC glIsProgramARB;
        PFNGLPROGRAMPARAMETERIARBPROC glProgramParameteriARB;
        PFNGLFRAMEBUFFERTEXTUREARBPROC glFramebufferTextureARB;
        PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glFramebufferTextureLayerARB;
        PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glFramebufferTextureFaceARB;
        PFNGLSPECIALIZESHADERARBPROC glSpecializeShaderARB;
        PFNGLUNIFORM1I64ARBPROC glUniform1i64ARB;
        PFNGLUNIFORM2I64ARBPROC glUniform2i64ARB;
        PFNGLUNIFORM3I64ARBPROC glUniform3i64ARB;
        PFNGLUNIFORM4I64ARBPROC glUniform4i64ARB;
        PFNGLUNIFORM1I64VARBPROC glUniform1i64vARB;
        PFNGLUNIFORM2I64VARBPROC glUniform2i64vARB;
        PFNGLUNIFORM3I64VARBPROC glUniform3i64vARB;
        PFNGLUNIFORM4I64VARBPROC glUniform4i64vARB;
        PFNGLUNIFORM1UI64ARBPROC glUniform1ui64ARB;
        PFNGLUNIFORM2UI64ARBPROC glUniform2ui64ARB;
        PFNGLUNIFORM3UI64ARBPROC glUniform3ui64ARB;
        PFNGLUNIFORM4UI64ARBPROC glUniform4ui64ARB;
        PFNGLUNIFORM1UI64VARBPROC glUniform1ui64vARB;
        PFNGLUNIFORM2UI64VARBPROC glUniform2ui64vARB;
        PFNGLUNIFORM3UI64VARBPROC glUniform3ui64vARB;
        PFNGLUNIFORM4UI64VARBPROC glUniform4ui64vARB;
        PFNGLGETUNIFORMI64VARBPROC glGetUniformi64vARB;
        PFNGLGETUNIFORMUI64VARBPROC glGetUniformui64vARB;
        PFNGLGETNUNIFORMI64VARBPROC glGetnUniformi64vARB;
        PFNGLGETNUNIFORMUI64VARBPROC glGetnUniformui64vARB;
        PFNGLPROGRAMUNIFORM1I64ARBPROC glProgramUniform1i64ARB;
        PFNGLPROGRAMUNIFORM2I64ARBPROC glProgramUniform2i64ARB;
        PFNGLPROGRAMUNIFORM3I64ARBPROC glProgramUniform3i64ARB;
        PFNGLPROGRAMUNIFORM4I64ARBPROC glProgramUniform4i64ARB;
        PFNGLPROGRAMUNIFORM1I64VARBPROC glProgramUniform1i64vARB;
        PFNGLPROGRAMUNIFORM2I64VARBPROC glProgramUniform2i64vARB;
        PFNGLPROGRAMUNIFORM3I64VARBPROC glProgramUniform3i64vARB;
        PFNGLPROGRAMUNIFORM4I64VARBPROC glProgramUniform4i64vARB;
        PFNGLPROGRAMUNIFORM1UI64ARBPROC glProgramUniform1ui64ARB;
        PFNGLPROGRAMUNIFORM2UI64ARBPROC glProgramUniform2ui64ARB;
        PFNGLPROGRAMUNIFORM3UI64ARBPROC glProgramUniform3ui64ARB;
        PFNGLPROGRAMUNIFORM4UI64ARBPROC glProgramUniform4ui64ARB;
        PFNGLPROGRAMUNIFORM1UI64VARBPROC glProgramUniform1ui64vARB;
        PFNGLPROGRAMUNIFORM2UI64VARBPROC glProgramUniform2ui64vARB;
        PFNGLPROGRAMUNIFORM3UI64VARBPROC glProgramUniform3ui64vARB;
        PFNGLPROGRAMUNIFORM4UI64VARBPROC glProgramUniform4ui64vARB;
        PFNGLCOLORTABLEPROC glColorTable;
        PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv;
        PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv;
        PFNGLCOPYCOLORTABLEPROC glCopyColorTable;
        PFNGLGETCOLORTABLEPROC glGetColorTable;
        PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv;
        PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv;
        PFNGLCOLORSUBTABLEPROC glColorSubTable;
        PFNGLCOPYCOLORSUBTABLEPROC glCopyColorSubTable;
        PFNGLCONVOLUTIONFILTER1DPROC glConvolutionFilter1D;
        PFNGLCONVOLUTIONFILTER2DPROC glConvolutionFilter2D;
        PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf;
        PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv;
        PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri;
        PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv;
        PFNGLCOPYCONVOLUTIONFILTER1DPROC glCopyConvolutionFilter1D;
        PFNGLCOPYCONVOLUTIONFILTER2DPROC glCopyConvolutionFilter2D;
        PFNGLGETCONVOLUTIONFILTERPROC glGetConvolutionFilter;
        PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv;
        PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv;
        PFNGLGETSEPARABLEFILTERPROC glGetSeparableFilter;
        PFNGLSEPARABLEFILTER2DPROC glSeparableFilter2D;
        PFNGLGETHISTOGRAMPROC glGetHistogram;
        PFNGLGETHISTOGRAMPARAMETERFVPROC glGetHistogramParameterfv;
        PFNGLGETHISTOGRAMPARAMETERIVPROC glGetHistogramParameteriv;
        PFNGLGETMINMAXPROC glGetMinmax;
        PFNGLGETMINMAXPARAMETERFVPROC glGetMinmaxParameterfv;
        PFNGLGETMINMAXPARAMETERIVPROC glGetMinmaxParameteriv;
        PFNGLHISTOGRAMPROC glHistogram;
        PFNGLMINMAXPROC glMinmax;
        PFNGLRESETHISTOGRAMPROC glResetHistogram;
        PFNGLRESETMINMAXPROC glResetMinmax;
        PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glMultiDrawArraysIndirectCountARB;
        PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glMultiDrawElementsIndirectCountARB;
        PFNGLVERTEXATTRIBDIVISORARBPROC glVertexAttribDivisorARB;
        PFNGLCURRENTPALETTEMATRIXARBPROC glCurrentPaletteMatrixARB;
        PFNGLMATRIXINDEXUBVARBPROC glMatrixIndexubvARB;
        PFNGLMATRIXINDEXUSVARBPROC glMatrixIndexusvARB;
        PFNGLMATRIXINDEXUIVARBPROC glMatrixIndexuivARB;
        PFNGLMATRIXINDEXPOINTERARBPROC glMatrixIndexPointerARB;
        PFNGLSAMPLECOVERAGEARBPROC glSampleCoverageARB;
        PFNGLACTIVETEXTUREARBPROC glActiveTextureARB;
        PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTextureARB;
        PFNGLMULTITEXCOORD1DARBPROC glMultiTexCoord1dARB;
        PFNGLMULTITEXCOORD1DVARBPROC glMultiTexCoord1dvARB;
        PFNGLMULTITEXCOORD1FARBPROC glMultiTexCoord1fARB;
        PFNGLMULTITEXCOORD1FVARBPROC glMultiTexCoord1fvARB;
        PFNGLMULTITEXCOORD1IARBPROC glMultiTexCoord1iARB;
        PFNGLMULTITEXCOORD1IVARBPROC glMultiTexCoord1ivARB;
        PFNGLMULTITEXCOORD1SARBPROC glMultiTexCoord1sARB;
        PFNGLMULTITEXCOORD1SVARBPROC glMultiTexCoord1svARB;
        PFNGLMULTITEXCOORD2DARBPROC glMultiTexCoord2dARB;
        PFNGLMULTITEXCOORD2DVARBPROC glMultiTexCoord2dvARB;
        PFNGLMULTITEXCOORD2FARBPROC glMultiTexCoord2fARB;
        PFNGLMULTITEXCOORD2FVARBPROC glMultiTexCoord2fvARB;
        PFNGLMULTITEXCOORD2IARBPROC glMultiTexCoord2iARB;
        PFNGLMULTITEXCOORD2IVARBPROC glMultiTexCoord2ivARB;
        PFNGLMULTITEXCOORD2SARBPROC glMultiTexCoord2sARB;
        PFNGLMULTITEXCOORD2SVARBPROC glMultiTexCoord2svARB;
        PFNGLMULTITEXCOORD3DARBPROC glMultiTexCoord3dARB;
        PFNGLMULTITEXCOORD3DVARBPROC glMultiTexCoord3dvARB;
        PFNGLMULTITEXCOORD3FARBPROC glMultiTexCoord3fARB;
        PFNGLMULTITEXCOORD3FVARBPROC glMultiTexCoord3fvARB;
        PFNGLMULTITEXCOORD3IARBPROC glMultiTexCoord3iARB;
        PFNGLMULTITEXCOORD3IVARBPROC glMultiTexCoord3ivARB;
        PFNGLMULTITEXCOORD3SARBPROC glMultiTexCoord3sARB;
        PFNGLMULTITEXCOORD3SVARBPROC glMultiTexCoord3svARB;
        PFNGLMULTITEXCOORD4DARBPROC glMultiTexCoord4dARB;
        PFNGLMULTITEXCOORD4DVARBPROC glMultiTexCoord4dvARB;
        PFNGLMULTITEXCOORD4FARBPROC glMultiTexCoord4fARB;
        PFNGLMULTITEXCOORD4FVARBPROC glMultiTexCoord4fvARB;
        PFNGLMULTITEXCOORD4IARBPROC glMultiTexCoord4iARB;
        PFNGLMULTITEXCOORD4IVARBPROC glMultiTexCoord4ivARB;
        PFNGLMULTITEXCOORD4SARBPROC glMultiTexCoord4sARB;
        PFNGLMULTITEXCOORD4SVARBPROC glMultiTexCoord4svARB;
        PFNGLGENQUERIESARBPROC glGenQueriesARB;
        PFNGLDELETEQUERIESARBPROC glDeleteQueriesARB;
        PFNGLISQUERYARBPROC glIsQueryARB;
        PFNGLBEGINQUERYARBPROC glBeginQueryARB;
        PFNGLENDQUERYARBPROC glEndQueryARB;
        PFNGLGETQUERYIVARBPROC glGetQueryivARB;
        PFNGLGETQUERYOBJECTIVARBPROC glGetQueryObjectivARB;
        PFNGLGETQUERYOBJECTUIVARBPROC glGetQueryObjectuivARB;
        PFNGLMAXSHADERCOMPILERTHREADSARBPROC glMaxShaderCompilerThreadsARB;
        PFNGLPOINTPARAMETERFARBPROC glPointParameterfARB;
        PFNGLPOINTPARAMETERFVARBPROC glPointParameterfvARB;
        PFNGLGETGRAPHICSRESETSTATUSARBPROC glGetGraphicsResetStatusARB;
        PFNGLGETNTEXIMAGEARBPROC glGetnTexImageARB;
        PFNGLREADNPIXELSARBPROC glReadnPixelsARB;
        PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glGetnCompressedTexImageARB;
        PFNGLGETNUNIFORMFVARBPROC glGetnUniformfvARB;
        PFNGLGETNUNIFORMIVARBPROC glGetnUniformivARB;
        PFNGLGETNUNIFORMUIVARBPROC glGetnUniformuivARB;
        PFNGLGETNUNIFORMDVARBPROC glGetnUniformdvARB;
        PFNGLGETNMAPDVARBPROC glGetnMapdvARB;
        PFNGLGETNMAPFVARBPROC glGetnMapfvARB;
        PFNGLGETNMAPIVARBPROC glGetnMapivARB;
        PFNGLGETNPIXELMAPFVARBPROC glGetnPixelMapfvARB;
        PFNGLGETNPIXELMAPUIVARBPROC glGetnPixelMapuivARB;
        PFNGLGETNPIXELMAPUSVARBPROC glGetnPixelMapusvARB;
        PFNGLGETNPOLYGONSTIPPLEARBPROC glGetnPolygonStippleARB;
        PFNGLGETNCOLORTABLEARBPROC glGetnColorTableARB;
        PFNGLGETNCONVOLUTIONFILTERARBPROC glGetnConvolutionFilterARB;
        PFNGLGETNSEPARABLEFILTERARBPROC glGetnSeparableFilterARB;
        PFNGLGETNHISTOGRAMARBPROC glGetnHistogramARB;
        PFNGLGETNMINMAXARBPROC glGetnMinmaxARB;
        PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glFramebufferSampleLocationsfvARB;
        PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glNamedFramebufferSampleLocationsfvARB;
        PFNGLEVALUATEDEPTHVALUESARBPROC glEvaluateDepthValuesARB;
        PFNGLMINSAMPLESHADINGARBPROC glMinSampleShadingARB;
        PFNGLDELETEOBJECTARBPROC glDeleteObjectARB;
        PFNGLGETHANDLEARBPROC glGetHandleARB;
        PFNGLDETACHOBJECTARBPROC glDetachObjectARB;
        PFNGLCREATESHADEROBJECTARBPROC glCreateShaderObjectARB;
        PFNGLSHADERSOURCEARBPROC glShaderSourceARB;
        PFNGLCOMPILESHADERARBPROC glCompileShaderARB;
        PFNGLCREATEPROGRAMOBJECTARBPROC glCreateProgramObjectARB;
        PFNGLATTACHOBJECTARBPROC glAttachObjectARB;
        PFNGLLINKPROGRAMARBPROC glLinkProgramARB;
        PFNGLUSEPROGRAMOBJECTARBPROC glUseProgramObjectARB;
        PFNGLVALIDATEPROGRAMARBPROC glValidateProgramARB;
        PFNGLUNIFORM1FARBPROC glUniform1fARB;
        PFNGLUNIFORM2FARBPROC glUniform2fARB;
        PFNGLUNIFORM3FARBPROC glUniform3fARB;
        PFNGLUNIFORM4FARBPROC glUniform4fARB;
        PFNGLUNIFORM1IARBPROC glUniform1iARB;
        PFNGLUNIFORM2IARBPROC glUniform2iARB;
        PFNGLUNIFORM3IARBPROC glUniform3iARB;
        PFNGLUNIFORM4IARBPROC glUniform4iARB;
        PFNGLUNIFORM1FVARBPROC glUniform1fvARB;
        PFNGLUNIFORM2FVARBPROC glUniform2fvARB;
        PFNGLUNIFORM3FVARBPROC glUniform3fvARB;
        PFNGLUNIFORM4FVARBPROC glUniform4fvARB;
        PFNGLUNIFORM1IVARBPROC glUniform1ivARB;
        PFNGLUNIFORM2IVARBPROC glUniform2ivARB;
        PFNGLUNIFORM3IVARBPROC glUniform3ivARB;
        PFNGLUNIFORM4IVARBPROC glUniform4ivARB;
        PFNGLUNIFORMMATRIX2FVARBPROC glUniformMatrix2fvARB;
        PFNGLUNIFORMMATRIX3FVARBPROC glUniformMatrix3fvARB;
        PFNGLUNIFORMMATRIX4FVARBPROC glUniformMatrix4fvARB;
        PFNGLGETOBJECTPARAMETERFVARBPROC glGetObjectParameterfvARB;
        PFNGLGETOBJECTPARAMETERIVARBPROC glGetObjectParameterivARB;
        PFNGLGETINFOLOGARBPROC glGetInfoLogARB;
        PFNGLGETATTACHEDOBJECTSARBPROC glGetAttachedObjectsARB;
        PFNGLGETUNIFORMLOCATIONARBPROC glGetUniformLocationARB;
        PFNGLGETACTIVEUNIFORMARBPROC glGetActiveUniformARB;
        PFNGLGETUNIFORMFVARBPROC glGetUniformfvARB;
        PFNGLGETUNIFORMIVARBPROC glGetUniformivARB;
        PFNGLGETSHADERSOURCEARBPROC glGetShaderSourceARB;
        PFNGLNAMEDSTRINGARBPROC glNamedStringARB;
        PFNGLDELETENAMEDSTRINGARBPROC glDeleteNamedStringARB;
        PFNGLCOMPILESHADERINCLUDEARBPROC glCompileShaderIncludeARB;
        PFNGLISNAMEDSTRINGARBPROC glIsNamedStringARB;
        PFNGLGETNAMEDSTRINGARBPROC glGetNamedStringARB;
        PFNGLGETNAMEDSTRINGIVARBPROC glGetNamedStringivARB;
        PFNGLBUFFERPAGECOMMITMENTARBPROC glBufferPageCommitmentARB;
        PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC glNamedBufferPageCommitmentEXT;
        PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC glNamedBufferPageCommitmentARB;
        PFNGLTEXPAGECOMMITMENTARBPROC glTexPageCommitmentARB;
        PFNGLTEXBUFFERARBPROC glTexBufferARB;
        PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glCompressedTexImage3DARB;
        PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glCompressedTexImage2DARB;
        PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glCompressedTexImage1DARB;
        PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glCompressedTexSubImage3DARB;
        PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glCompressedTexSubImage2DARB;
        PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glCompressedTexSubImage1DARB;
        PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glGetCompressedTexImageARB;
        PFNGLLOADTRANSPOSEMATRIXFARBPROC glLoadTransposeMatrixfARB;
        PFNGLLOADTRANSPOSEMATRIXDARBPROC glLoadTransposeMatrixdARB;
        PFNGLMULTTRANSPOSEMATRIXFARBPROC glMultTransposeMatrixfARB;
        PFNGLMULTTRANSPOSEMATRIXDARBPROC glMultTransposeMatrixdARB;
        PFNGLWEIGHTBVARBPROC glWeightbvARB;
        PFNGLWEIGHTSVARBPROC glWeightsvARB;
        PFNGLWEIGHTIVARBPROC glWeightivARB;
        PFNGLWEIGHTFVARBPROC glWeightfvARB;
        PFNGLWEIGHTDVARBPROC glWeightdvARB;
        PFNGLWEIGHTUBVARBPROC glWeightubvARB;
        PFNGLWEIGHTUSVARBPROC glWeightusvARB;
        PFNGLWEIGHTUIVARBPROC glWeightuivARB;
        PFNGLWEIGHTPOINTERARBPROC glWeightPointerARB;
        PFNGLVERTEXBLENDARBPROC glVertexBlendARB;
        PFNGLBINDBUFFERARBPROC glBindBufferARB;
        PFNGLDELETEBUFFERSARBPROC glDeleteBuffersARB;
        PFNGLGENBUFFERSARBPROC glGenBuffersARB;
        PFNGLISBUFFERARBPROC glIsBufferARB;
        PFNGLBUFFERDATAARBPROC glBufferDataARB;
        PFNGLBUFFERSUBDATAARBPROC glBufferSubDataARB;
        PFNGLGETBUFFERSUBDATAARBPROC glGetBufferSubDataARB;
        PFNGLMAPBUFFERARBPROC glMapBufferARB;
        PFNGLUNMAPBUFFERARBPROC glUnmapBufferARB;
        PFNGLGETBUFFERPARAMETERIVARBPROC glGetBufferParameterivARB;
        PFNGLGETBUFFERPOINTERVARBPROC glGetBufferPointervARB;
        PFNGLVERTEXATTRIB1DARBPROC glVertexAttrib1dARB;
        PFNGLVERTEXATTRIB1DVARBPROC glVertexAttrib1dvARB;
        PFNGLVERTEXATTRIB1FARBPROC glVertexAttrib1fARB;
        PFNGLVERTEXATTRIB1FVARBPROC glVertexAttrib1fvARB;
        PFNGLVERTEXATTRIB1SARBPROC glVertexAttrib1sARB;
        PFNGLVERTEXATTRIB1SVARBPROC glVertexAttrib1svARB;
        PFNGLVERTEXATTRIB2DARBPROC glVertexAttrib2dARB;
        PFNGLVERTEXATTRIB2DVARBPROC glVertexAttrib2dvARB;
        PFNGLVERTEXATTRIB2FARBPROC glVertexAttrib2fARB;
        PFNGLVERTEXATTRIB2FVARBPROC glVertexAttrib2fvARB;
        PFNGLVERTEXATTRIB2SARBPROC glVertexAttrib2sARB;
        PFNGLVERTEXATTRIB2SVARBPROC glVertexAttrib2svARB;
        PFNGLVERTEXATTRIB3DARBPROC glVertexAttrib3dARB;
        PFNGLVERTEXATTRIB3DVARBPROC glVertexAttrib3dvARB;
        PFNGLVERTEXATTRIB3FARBPROC glVertexAttrib3fARB;
        PFNGLVERTEXATTRIB3FVARBPROC glVertexAttrib3fvARB;
        PFNGLVERTEXATTRIB3SARBPROC glVertexAttrib3sARB;
        PFNGLVERTEXATTRIB3SVARBPROC glVertexAttrib3svARB;
        PFNGLVERTEXATTRIB4NBVARBPROC glVertexAttrib4NbvARB;
        PFNGLVERTEXATTRIB4NIVARBPROC glVertexAttrib4NivARB;
        PFNGLVERTEXATTRIB4NSVARBPROC glVertexAttrib4NsvARB;
        PFNGLVERTEXATTRIB4NUBARBPROC glVertexAttrib4NubARB;
        PFNGLVERTEXATTRIB4NUBVARBPROC glVertexAttrib4NubvARB;
        PFNGLVERTEXATTRIB4NUIVARBPROC glVertexAttrib4NuivARB;
        PFNGLVERTEXATTRIB4NUSVARBPROC glVertexAttrib4NusvARB;
        PFNGLVERTEXATTRIB4BVARBPROC glVertexAttrib4bvARB;
        PFNGLVERTEXATTRIB4DARBPROC glVertexAttrib4dARB;
        PFNGLVERTEXATTRIB4DVARBPROC glVertexAttrib4dvARB;
        PFNGLVERTEXATTRIB4FARBPROC glVertexAttrib4fARB;
        PFNGLVERTEXATTRIB4FVARBPROC glVertexAttrib4fvARB;
        PFNGLVERTEXATTRIB4IVARBPROC glVertexAttrib4ivARB;
        PFNGLVERTEXATTRIB4SARBPROC glVertexAttrib4sARB;
        PFNGLVERTEXATTRIB4SVARBPROC glVertexAttrib4svARB;
        PFNGLVERTEXATTRIB4UBVARBPROC glVertexAttrib4ubvARB;
        PFNGLVERTEXATTRIB4UIVARBPROC glVertexAttrib4uivARB;
        PFNGLVERTEXATTRIB4USVARBPROC glVertexAttrib4usvARB;
        PFNGLVERTEXATTRIBPOINTERARBPROC glVertexAttribPointerARB;
        PFNGLENABLEVERTEXATTRIBARRAYARBPROC glEnableVertexAttribArrayARB;
        PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glDisableVertexAttribArrayARB;
        PFNGLGETVERTEXATTRIBDVARBPROC glGetVertexAttribdvARB;
        PFNGLGETVERTEXATTRIBFVARBPROC glGetVertexAttribfvARB;
        PFNGLGETVERTEXATTRIBIVARBPROC glGetVertexAttribivARB;
        PFNGLGETVERTEXATTRIBPOINTERVARBPROC glGetVertexAttribPointervARB;
        PFNGLBINDATTRIBLOCATIONARBPROC glBindAttribLocationARB;
        PFNGLGETACTIVEATTRIBARBPROC glGetActiveAttribARB;
        PFNGLGETATTRIBLOCATIONARBPROC glGetAttribLocationARB;
        PFNGLDEPTHRANGEARRAYDVNVPROC glDepthRangeArraydvNV;
        PFNGLDEPTHRANGEINDEXEDDNVPROC glDepthRangeIndexeddNV;
        PFNGLWINDOWPOS2DARBPROC glWindowPos2dARB;
        PFNGLWINDOWPOS2DVARBPROC glWindowPos2dvARB;
        PFNGLWINDOWPOS2FARBPROC glWindowPos2fARB;
        PFNGLWINDOWPOS2FVARBPROC glWindowPos2fvARB;
        PFNGLWINDOWPOS2IARBPROC glWindowPos2iARB;
        PFNGLWINDOWPOS2IVARBPROC glWindowPos2ivARB;
        PFNGLWINDOWPOS2SARBPROC glWindowPos2sARB;
        PFNGLWINDOWPOS2SVARBPROC glWindowPos2svARB;
        PFNGLWINDOWPOS3DARBPROC glWindowPos3dARB;
        PFNGLWINDOWPOS3DVARBPROC glWindowPos3dvARB;
        PFNGLWINDOWPOS3FARBPROC glWindowPos3fARB;
        PFNGLWINDOWPOS3FVARBPROC glWindowPos3fvARB;
        PFNGLWINDOWPOS3IARBPROC glWindowPos3iARB;
        PFNGLWINDOWPOS3IVARBPROC glWindowPos3ivARB;
        PFNGLWINDOWPOS3SARBPROC glWindowPos3sARB;
        PFNGLWINDOWPOS3SVARBPROC glWindowPos3svARB;
        PFNGLDRAWBUFFERSATIPROC glDrawBuffersATI;
        PFNGLELEMENTPOINTERATIPROC glElementPointerATI;
        PFNGLDRAWELEMENTARRAYATIPROC glDrawElementArrayATI;
        PFNGLDRAWRANGEELEMENTARRAYATIPROC glDrawRangeElementArrayATI;
        PFNGLTEXBUMPPARAMETERIVATIPROC glTexBumpParameterivATI;
        PFNGLTEXBUMPPARAMETERFVATIPROC glTexBumpParameterfvATI;
        PFNGLGETTEXBUMPPARAMETERIVATIPROC glGetTexBumpParameterivATI;
        PFNGLGETTEXBUMPPARAMETERFVATIPROC glGetTexBumpParameterfvATI;
        PFNGLGENFRAGMENTSHADERSATIPROC glGenFragmentShadersATI;
        PFNGLBINDFRAGMENTSHADERATIPROC glBindFragmentShaderATI;
        PFNGLDELETEFRAGMENTSHADERATIPROC glDeleteFragmentShaderATI;
        PFNGLBEGINFRAGMENTSHADERATIPROC glBeginFragmentShaderATI;
        PFNGLENDFRAGMENTSHADERATIPROC glEndFragmentShaderATI;
        PFNGLPASSTEXCOORDATIPROC glPassTexCoordATI;
        PFNGLSAMPLEMAPATIPROC glSampleMapATI;
        PFNGLCOLORFRAGMENTOP1ATIPROC glColorFragmentOp1ATI;
        PFNGLCOLORFRAGMENTOP2ATIPROC glColorFragmentOp2ATI;
        PFNGLCOLORFRAGMENTOP3ATIPROC glColorFragmentOp3ATI;
        PFNGLALPHAFRAGMENTOP1ATIPROC glAlphaFragmentOp1ATI;
        PFNGLALPHAFRAGMENTOP2ATIPROC glAlphaFragmentOp2ATI;
        PFNGLALPHAFRAGMENTOP3ATIPROC glAlphaFragmentOp3ATI;
        PFNGLSETFRAGMENTSHADERCONSTANTATIPROC glSetFragmentShaderConstantATI;
        PFNGLMAPOBJECTBUFFERATIPROC glMapObjectBufferATI;
        PFNGLUNMAPOBJECTBUFFERATIPROC glUnmapObjectBufferATI;
        PFNGLPNTRIANGLESIATIPROC glPNTrianglesiATI;
        PFNGLPNTRIANGLESFATIPROC glPNTrianglesfATI;
        PFNGLSTENCILOPSEPARATEATIPROC glStencilOpSeparateATI;
        PFNGLSTENCILFUNCSEPARATEATIPROC glStencilFuncSeparateATI;
        PFNGLNEWOBJECTBUFFERATIPROC glNewObjectBufferATI;
        PFNGLISOBJECTBUFFERATIPROC glIsObjectBufferATI;
        PFNGLUPDATEOBJECTBUFFERATIPROC glUpdateObjectBufferATI;
        PFNGLGETOBJECTBUFFERFVATIPROC glGetObjectBufferfvATI;
        PFNGLGETOBJECTBUFFERIVATIPROC glGetObjectBufferivATI;
        PFNGLFREEOBJECTBUFFERATIPROC glFreeObjectBufferATI;
        PFNGLARRAYOBJECTATIPROC glArrayObjectATI;
        PFNGLGETARRAYOBJECTFVATIPROC glGetArrayObjectfvATI;
        PFNGLGETARRAYOBJECTIVATIPROC glGetArrayObjectivATI;
        PFNGLVARIANTARRAYOBJECTATIPROC glVariantArrayObjectATI;
        PFNGLGETVARIANTARRAYOBJECTFVATIPROC glGetVariantArrayObjectfvATI;
        PFNGLGETVARIANTARRAYOBJECTIVATIPROC glGetVariantArrayObjectivATI;
        PFNGLVERTEXATTRIBARRAYOBJECTATIPROC glVertexAttribArrayObjectATI;
        PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC glGetVertexAttribArrayObjectfvATI;
        PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC glGetVertexAttribArrayObjectivATI;
        PFNGLVERTEXSTREAM1SATIPROC glVertexStream1sATI;
        PFNGLVERTEXSTREAM1SVATIPROC glVertexStream1svATI;
        PFNGLVERTEXSTREAM1IATIPROC glVertexStream1iATI;
        PFNGLVERTEXSTREAM1IVATIPROC glVertexStream1ivATI;
        PFNGLVERTEXSTREAM1FATIPROC glVertexStream1fATI;
        PFNGLVERTEXSTREAM1FVATIPROC glVertexStream1fvATI;
        PFNGLVERTEXSTREAM1DATIPROC glVertexStream1dATI;
        PFNGLVERTEXSTREAM1DVATIPROC glVertexStream1dvATI;
        PFNGLVERTEXSTREAM2SATIPROC glVertexStream2sATI;
        PFNGLVERTEXSTREAM2SVATIPROC glVertexStream2svATI;
        PFNGLVERTEXSTREAM2IATIPROC glVertexStream2iATI;
        PFNGLVERTEXSTREAM2IVATIPROC glVertexStream2ivATI;
        PFNGLVERTEXSTREAM2FATIPROC glVertexStream2fATI;
        PFNGLVERTEXSTREAM2FVATIPROC glVertexStream2fvATI;
        PFNGLVERTEXSTREAM2DATIPROC glVertexStream2dATI;
        PFNGLVERTEXSTREAM2DVATIPROC glVertexStream2dvATI;
        PFNGLVERTEXSTREAM3SATIPROC glVertexStream3sATI;
        PFNGLVERTEXSTREAM3SVATIPROC glVertexStream3svATI;
        PFNGLVERTEXSTREAM3IATIPROC glVertexStream3iATI;
        PFNGLVERTEXSTREAM3IVATIPROC glVertexStream3ivATI;
        PFNGLVERTEXSTREAM3FATIPROC glVertexStream3fATI;
        PFNGLVERTEXSTREAM3FVATIPROC glVertexStream3fvATI;
        PFNGLVERTEXSTREAM3DATIPROC glVertexStream3dATI;
        PFNGLVERTEXSTREAM3DVATIPROC glVertexStream3dvATI;
        PFNGLVERTEXSTREAM4SATIPROC glVertexStream4sATI;
        PFNGLVERTEXSTREAM4SVATIPROC glVertexStream4svATI;
        PFNGLVERTEXSTREAM4IATIPROC glVertexStream4iATI;
        PFNGLVERTEXSTREAM4IVATIPROC glVertexStream4ivATI;
        PFNGLVERTEXSTREAM4FATIPROC glVertexStream4fATI;
        PFNGLVERTEXSTREAM4FVATIPROC glVertexStream4fvATI;
        PFNGLVERTEXSTREAM4DATIPROC glVertexStream4dATI;
        PFNGLVERTEXSTREAM4DVATIPROC glVertexStream4dvATI;
        PFNGLNORMALSTREAM3BATIPROC glNormalStream3bATI;
        PFNGLNORMALSTREAM3BVATIPROC glNormalStream3bvATI;
        PFNGLNORMALSTREAM3SATIPROC glNormalStream3sATI;
        PFNGLNORMALSTREAM3SVATIPROC glNormalStream3svATI;
        PFNGLNORMALSTREAM3IATIPROC glNormalStream3iATI;
        PFNGLNORMALSTREAM3IVATIPROC glNormalStream3ivATI;
        PFNGLNORMALSTREAM3FATIPROC glNormalStream3fATI;
        PFNGLNORMALSTREAM3FVATIPROC glNormalStream3fvATI;
        PFNGLNORMALSTREAM3DATIPROC glNormalStream3dATI;
        PFNGLNORMALSTREAM3DVATIPROC glNormalStream3dvATI;
        PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC glClientActiveVertexStreamATI;
        PFNGLVERTEXBLENDENVIATIPROC glVertexBlendEnviATI;
        PFNGLVERTEXBLENDENVFATIPROC glVertexBlendEnvfATI;
        PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC glEGLImageTargetTexStorageEXT;
        PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC glEGLImageTargetTextureStorageEXT;
        PFNGLUNIFORMBUFFEREXTPROC glUniformBufferEXT;
        PFNGLGETUNIFORMBUFFERSIZEEXTPROC glGetUniformBufferSizeEXT;
        PFNGLGETUNIFORMOFFSETEXTPROC glGetUniformOffsetEXT;
        PFNGLBLENDCOLOREXTPROC glBlendColorEXT;
        PFNGLBLENDEQUATIONSEPARATEEXTPROC glBlendEquationSeparateEXT;
        PFNGLBLENDFUNCSEPARATEEXTPROC glBlendFuncSeparateEXT;
        PFNGLBLENDEQUATIONEXTPROC glBlendEquationEXT;
        PFNGLCOLORSUBTABLEEXTPROC glColorSubTableEXT;
        PFNGLCOPYCOLORSUBTABLEEXTPROC glCopyColorSubTableEXT;
        PFNGLLOCKARRAYSEXTPROC glLockArraysEXT;
        PFNGLUNLOCKARRAYSEXTPROC glUnlockArraysEXT;
        PFNGLCONVOLUTIONFILTER1DEXTPROC glConvolutionFilter1DEXT;
        PFNGLCONVOLUTIONFILTER2DEXTPROC glConvolutionFilter2DEXT;
        PFNGLCONVOLUTIONPARAMETERFEXTPROC glConvolutionParameterfEXT;
        PFNGLCONVOLUTIONPARAMETERFVEXTPROC glConvolutionParameterfvEXT;
        PFNGLCONVOLUTIONPARAMETERIEXTPROC glConvolutionParameteriEXT;
        PFNGLCONVOLUTIONPARAMETERIVEXTPROC glConvolutionParameterivEXT;
        PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC glCopyConvolutionFilter1DEXT;
        PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC glCopyConvolutionFilter2DEXT;
        PFNGLGETCONVOLUTIONFILTEREXTPROC glGetConvolutionFilterEXT;
        PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC glGetConvolutionParameterfvEXT;
        PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC glGetConvolutionParameterivEXT;
        PFNGLGETSEPARABLEFILTEREXTPROC glGetSeparableFilterEXT;
        PFNGLSEPARABLEFILTER2DEXTPROC glSeparableFilter2DEXT;
        PFNGLTANGENT3BEXTPROC glTangent3bEXT;
        PFNGLTANGENT3BVEXTPROC glTangent3bvEXT;
        PFNGLTANGENT3DEXTPROC glTangent3dEXT;
        PFNGLTANGENT3DVEXTPROC glTangent3dvEXT;
        PFNGLTANGENT3FEXTPROC glTangent3fEXT;
        PFNGLTANGENT3FVEXTPROC glTangent3fvEXT;
        PFNGLTANGENT3IEXTPROC glTangent3iEXT;
        PFNGLTANGENT3IVEXTPROC glTangent3ivEXT;
        PFNGLTANGENT3SEXTPROC glTangent3sEXT;
        PFNGLTANGENT3SVEXTPROC glTangent3svEXT;
        PFNGLBINORMAL3BEXTPROC glBinormal3bEXT;
        PFNGLBINORMAL3BVEXTPROC glBinormal3bvEXT;
        PFNGLBINORMAL3DEXTPROC glBinormal3dEXT;
        PFNGLBINORMAL3DVEXTPROC glBinormal3dvEXT;
        PFNGLBINORMAL3FEXTPROC glBinormal3fEXT;
        PFNGLBINORMAL3FVEXTPROC glBinormal3fvEXT;
        PFNGLBINORMAL3IEXTPROC glBinormal3iEXT;
        PFNGLBINORMAL3IVEXTPROC glBinormal3ivEXT;
        PFNGLBINORMAL3SEXTPROC glBinormal3sEXT;
        PFNGLBINORMAL3SVEXTPROC glBinormal3svEXT;
        PFNGLTANGENTPOINTEREXTPROC glTangentPointerEXT;
        PFNGLBINORMALPOINTEREXTPROC glBinormalPointerEXT;
        PFNGLCOPYTEXIMAGE1DEXTPROC glCopyTexImage1DEXT;
        PFNGLCOPYTEXIMAGE2DEXTPROC glCopyTexImage2DEXT;
        PFNGLCOPYTEXSUBIMAGE1DEXTPROC glCopyTexSubImage1DEXT;
        PFNGLCOPYTEXSUBIMAGE2DEXTPROC glCopyTexSubImage2DEXT;
        PFNGLCOPYTEXSUBIMAGE3DEXTPROC glCopyTexSubImage3DEXT;
        PFNGLCULLPARAMETERDVEXTPROC glCullParameterdvEXT;
        PFNGLCULLPARAMETERFVEXTPROC glCullParameterfvEXT;
        PFNGLLABELOBJECTEXTPROC glLabelObjectEXT;
        PFNGLGETOBJECTLABELEXTPROC glGetObjectLabelEXT;
        PFNGLINSERTEVENTMARKEREXTPROC glInsertEventMarkerEXT;
        PFNGLPUSHGROUPMARKEREXTPROC glPushGroupMarkerEXT;
        PFNGLPOPGROUPMARKEREXTPROC glPopGroupMarkerEXT;
        PFNGLDEPTHBOUNDSEXTPROC glDepthBoundsEXT;
        PFNGLMATRIXLOADFEXTPROC glMatrixLoadfEXT;
        PFNGLMATRIXLOADDEXTPROC glMatrixLoaddEXT;
        PFNGLMATRIXMULTFEXTPROC glMatrixMultfEXT;
        PFNGLMATRIXMULTDEXTPROC glMatrixMultdEXT;
        PFNGLMATRIXLOADIDENTITYEXTPROC glMatrixLoadIdentityEXT;
        PFNGLMATRIXROTATEFEXTPROC glMatrixRotatefEXT;
        PFNGLMATRIXROTATEDEXTPROC glMatrixRotatedEXT;
        PFNGLMATRIXSCALEFEXTPROC glMatrixScalefEXT;
        PFNGLMATRIXSCALEDEXTPROC glMatrixScaledEXT;
        PFNGLMATRIXTRANSLATEFEXTPROC glMatrixTranslatefEXT;
        PFNGLMATRIXTRANSLATEDEXTPROC glMatrixTranslatedEXT;
        PFNGLMATRIXFRUSTUMEXTPROC glMatrixFrustumEXT;
        PFNGLMATRIXORTHOEXTPROC glMatrixOrthoEXT;
        PFNGLMATRIXPOPEXTPROC glMatrixPopEXT;
        PFNGLMATRIXPUSHEXTPROC glMatrixPushEXT;
        PFNGLCLIENTATTRIBDEFAULTEXTPROC glClientAttribDefaultEXT;
        PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glPushClientAttribDefaultEXT;
        PFNGLTEXTUREPARAMETERFEXTPROC glTextureParameterfEXT;
        PFNGLTEXTUREPARAMETERFVEXTPROC glTextureParameterfvEXT;
        PFNGLTEXTUREPARAMETERIEXTPROC glTextureParameteriEXT;
        PFNGLTEXTUREPARAMETERIVEXTPROC glTextureParameterivEXT;
        PFNGLTEXTUREIMAGE1DEXTPROC glTextureImage1DEXT;
        PFNGLTEXTUREIMAGE2DEXTPROC glTextureImage2DEXT;
        PFNGLTEXTURESUBIMAGE1DEXTPROC glTextureSubImage1DEXT;
        PFNGLTEXTURESUBIMAGE2DEXTPROC glTextureSubImage2DEXT;
        PFNGLCOPYTEXTUREIMAGE1DEXTPROC glCopyTextureImage1DEXT;
        PFNGLCOPYTEXTUREIMAGE2DEXTPROC glCopyTextureImage2DEXT;
        PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glCopyTextureSubImage1DEXT;
        PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glCopyTextureSubImage2DEXT;
        PFNGLGETTEXTUREIMAGEEXTPROC glGetTextureImageEXT;
        PFNGLGETTEXTUREPARAMETERFVEXTPROC glGetTextureParameterfvEXT;
        PFNGLGETTEXTUREPARAMETERIVEXTPROC glGetTextureParameterivEXT;
        PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glGetTextureLevelParameterfvEXT;
        PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glGetTextureLevelParameterivEXT;
        PFNGLTEXTUREIMAGE3DEXTPROC glTextureImage3DEXT;
        PFNGLTEXTURESUBIMAGE3DEXTPROC glTextureSubImage3DEXT;
        PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glCopyTextureSubImage3DEXT;
        PFNGLBINDMULTITEXTUREEXTPROC glBindMultiTextureEXT;
        PFNGLMULTITEXCOORDPOINTEREXTPROC glMultiTexCoordPointerEXT;
        PFNGLMULTITEXENVFEXTPROC glMultiTexEnvfEXT;
        PFNGLMULTITEXENVFVEXTPROC glMultiTexEnvfvEXT;
        PFNGLMULTITEXENVIEXTPROC glMultiTexEnviEXT;
        PFNGLMULTITEXENVIVEXTPROC glMultiTexEnvivEXT;
        PFNGLMULTITEXGENDEXTPROC glMultiTexGendEXT;
        PFNGLMULTITEXGENDVEXTPROC glMultiTexGendvEXT;
        PFNGLMULTITEXGENFEXTPROC glMultiTexGenfEXT;
        PFNGLMULTITEXGENFVEXTPROC glMultiTexGenfvEXT;
        PFNGLMULTITEXGENIEXTPROC glMultiTexGeniEXT;
        PFNGLMULTITEXGENIVEXTPROC glMultiTexGenivEXT;
        PFNGLGETMULTITEXENVFVEXTPROC glGetMultiTexEnvfvEXT;
        PFNGLGETMULTITEXENVIVEXTPROC glGetMultiTexEnvivEXT;
        PFNGLGETMULTITEXGENDVEXTPROC glGetMultiTexGendvEXT;
        PFNGLGETMULTITEXGENFVEXTPROC glGetMultiTexGenfvEXT;
        PFNGLGETMULTITEXGENIVEXTPROC glGetMultiTexGenivEXT;
        PFNGLMULTITEXPARAMETERIEXTPROC glMultiTexParameteriEXT;
        PFNGLMULTITEXPARAMETERIVEXTPROC glMultiTexParameterivEXT;
        PFNGLMULTITEXPARAMETERFEXTPROC glMultiTexParameterfEXT;
        PFNGLMULTITEXPARAMETERFVEXTPROC glMultiTexParameterfvEXT;
        PFNGLMULTITEXIMAGE1DEXTPROC glMultiTexImage1DEXT;
        PFNGLMULTITEXIMAGE2DEXTPROC glMultiTexImage2DEXT;
        PFNGLMULTITEXSUBIMAGE1DEXTPROC glMultiTexSubImage1DEXT;
        PFNGLMULTITEXSUBIMAGE2DEXTPROC glMultiTexSubImage2DEXT;
        PFNGLCOPYMULTITEXIMAGE1DEXTPROC glCopyMultiTexImage1DEXT;
        PFNGLCOPYMULTITEXIMAGE2DEXTPROC glCopyMultiTexImage2DEXT;
        PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glCopyMultiTexSubImage1DEXT;
        PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glCopyMultiTexSubImage2DEXT;
        PFNGLGETMULTITEXIMAGEEXTPROC glGetMultiTexImageEXT;
        PFNGLGETMULTITEXPARAMETERFVEXTPROC glGetMultiTexParameterfvEXT;
        PFNGLGETMULTITEXPARAMETERIVEXTPROC glGetMultiTexParameterivEXT;
        PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glGetMultiTexLevelParameterfvEXT;
        PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glGetMultiTexLevelParameterivEXT;
        PFNGLMULTITEXIMAGE3DEXTPROC glMultiTexImage3DEXT;
        PFNGLMULTITEXSUBIMAGE3DEXTPROC glMultiTexSubImage3DEXT;
        PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glCopyMultiTexSubImage3DEXT;
        PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glEnableClientStateIndexedEXT;
        PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glDisableClientStateIndexedEXT;
        PFNGLGETFLOATINDEXEDVEXTPROC glGetFloatIndexedvEXT;
        PFNGLGETDOUBLEINDEXEDVEXTPROC glGetDoubleIndexedvEXT;
        PFNGLGETPOINTERINDEXEDVEXTPROC glGetPointerIndexedvEXT;
        PFNGLENABLEINDEXEDEXTPROC glEnableIndexedEXT;
        PFNGLDISABLEINDEXEDEXTPROC glDisableIndexedEXT;
        PFNGLISENABLEDINDEXEDEXTPROC glIsEnabledIndexedEXT;
        PFNGLGETINTEGERINDEXEDVEXTPROC glGetIntegerIndexedvEXT;
        PFNGLGETBOOLEANINDEXEDVEXTPROC glGetBooleanIndexedvEXT;
        PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glCompressedTextureImage3DEXT;
        PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glCompressedTextureImage2DEXT;
        PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glCompressedTextureImage1DEXT;
        PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glCompressedTextureSubImage3DEXT;
        PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glCompressedTextureSubImage2DEXT;
        PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glCompressedTextureSubImage1DEXT;
        PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glGetCompressedTextureImageEXT;
        PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glCompressedMultiTexImage3DEXT;
        PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glCompressedMultiTexImage2DEXT;
        PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glCompressedMultiTexImage1DEXT;
        PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glCompressedMultiTexSubImage3DEXT;
        PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glCompressedMultiTexSubImage2DEXT;
        PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glCompressedMultiTexSubImage1DEXT;
        PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glGetCompressedMultiTexImageEXT;
        PFNGLMATRIXLOADTRANSPOSEFEXTPROC glMatrixLoadTransposefEXT;
        PFNGLMATRIXLOADTRANSPOSEDEXTPROC glMatrixLoadTransposedEXT;
        PFNGLMATRIXMULTTRANSPOSEFEXTPROC glMatrixMultTransposefEXT;
        PFNGLMATRIXMULTTRANSPOSEDEXTPROC glMatrixMultTransposedEXT;
        PFNGLNAMEDBUFFERDATAEXTPROC glNamedBufferDataEXT;
        PFNGLNAMEDBUFFERSUBDATAEXTPROC glNamedBufferSubDataEXT;
        PFNGLMAPNAMEDBUFFEREXTPROC glMapNamedBufferEXT;
        PFNGLUNMAPNAMEDBUFFEREXTPROC glUnmapNamedBufferEXT;
        PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glGetNamedBufferParameterivEXT;
        PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glGetNamedBufferPointervEXT;
        PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glGetNamedBufferSubDataEXT;
        PFNGLPROGRAMUNIFORM1FEXTPROC glProgramUniform1fEXT;
        PFNGLPROGRAMUNIFORM2FEXTPROC glProgramUniform2fEXT;
        PFNGLPROGRAMUNIFORM3FEXTPROC glProgramUniform3fEXT;
        PFNGLPROGRAMUNIFORM4FEXTPROC glProgramUniform4fEXT;
        PFNGLPROGRAMUNIFORM1IEXTPROC glProgramUniform1iEXT;
        PFNGLPROGRAMUNIFORM2IEXTPROC glProgramUniform2iEXT;
        PFNGLPROGRAMUNIFORM3IEXTPROC glProgramUniform3iEXT;
        PFNGLPROGRAMUNIFORM4IEXTPROC glProgramUniform4iEXT;
        PFNGLPROGRAMUNIFORM1FVEXTPROC glProgramUniform1fvEXT;
        PFNGLPROGRAMUNIFORM2FVEXTPROC glProgramUniform2fvEXT;
        PFNGLPROGRAMUNIFORM3FVEXTPROC glProgramUniform3fvEXT;
        PFNGLPROGRAMUNIFORM4FVEXTPROC glProgramUniform4fvEXT;
        PFNGLPROGRAMUNIFORM1IVEXTPROC glProgramUniform1ivEXT;
        PFNGLPROGRAMUNIFORM2IVEXTPROC glProgramUniform2ivEXT;
        PFNGLPROGRAMUNIFORM3IVEXTPROC glProgramUniform3ivEXT;
        PFNGLPROGRAMUNIFORM4IVEXTPROC glProgramUniform4ivEXT;
        PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glProgramUniformMatrix2fvEXT;
        PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glProgramUniformMatrix3fvEXT;
        PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glProgramUniformMatrix4fvEXT;
        PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glProgramUniformMatrix2x3fvEXT;
        PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glProgramUniformMatrix3x2fvEXT;
        PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glProgramUniformMatrix2x4fvEXT;
        PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glProgramUniformMatrix4x2fvEXT;
        PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glProgramUniformMatrix3x4fvEXT;
        PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glProgramUniformMatrix4x3fvEXT;
        PFNGLTEXTUREBUFFEREXTPROC glTextureBufferEXT;
        PFNGLMULTITEXBUFFEREXTPROC glMultiTexBufferEXT;
        PFNGLTEXTUREPARAMETERIIVEXTPROC glTextureParameterIivEXT;
        PFNGLTEXTUREPARAMETERIUIVEXTPROC glTextureParameterIuivEXT;
        PFNGLGETTEXTUREPARAMETERIIVEXTPROC glGetTextureParameterIivEXT;
        PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glGetTextureParameterIuivEXT;
        PFNGLMULTITEXPARAMETERIIVEXTPROC glMultiTexParameterIivEXT;
        PFNGLMULTITEXPARAMETERIUIVEXTPROC glMultiTexParameterIuivEXT;
        PFNGLGETMULTITEXPARAMETERIIVEXTPROC glGetMultiTexParameterIivEXT;
        PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glGetMultiTexParameterIuivEXT;
        PFNGLPROGRAMUNIFORM1UIEXTPROC glProgramUniform1uiEXT;
        PFNGLPROGRAMUNIFORM2UIEXTPROC glProgramUniform2uiEXT;
        PFNGLPROGRAMUNIFORM3UIEXTPROC glProgramUniform3uiEXT;
        PFNGLPROGRAMUNIFORM4UIEXTPROC glProgramUniform4uiEXT;
        PFNGLPROGRAMUNIFORM1UIVEXTPROC glProgramUniform1uivEXT;
        PFNGLPROGRAMUNIFORM2UIVEXTPROC glProgramUniform2uivEXT;
        PFNGLPROGRAMUNIFORM3UIVEXTPROC glProgramUniform3uivEXT;
        PFNGLPROGRAMUNIFORM4UIVEXTPROC glProgramUniform4uivEXT;
        PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glNamedProgramLocalParameters4fvEXT;
        PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glNamedProgramLocalParameterI4iEXT;
        PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glNamedProgramLocalParameterI4ivEXT;
        PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glNamedProgramLocalParametersI4ivEXT;
        PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glNamedProgramLocalParameterI4uiEXT;
        PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glNamedProgramLocalParameterI4uivEXT;
        PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glNamedProgramLocalParametersI4uivEXT;
        PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glGetNamedProgramLocalParameterIivEXT;
        PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glGetNamedProgramLocalParameterIuivEXT;
        PFNGLENABLECLIENTSTATEIEXTPROC glEnableClientStateiEXT;
        PFNGLDISABLECLIENTSTATEIEXTPROC glDisableClientStateiEXT;
        PFNGLGETFLOATI_VEXTPROC glGetFloati_vEXT;
        PFNGLGETDOUBLEI_VEXTPROC glGetDoublei_vEXT;
        PFNGLGETPOINTERI_VEXTPROC glGetPointeri_vEXT;
        PFNGLNAMEDPROGRAMSTRINGEXTPROC glNamedProgramStringEXT;
        PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glNamedProgramLocalParameter4dEXT;
        PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glNamedProgramLocalParameter4dvEXT;
        PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glNamedProgramLocalParameter4fEXT;
        PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glNamedProgramLocalParameter4fvEXT;
        PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glGetNamedProgramLocalParameterdvEXT;
        PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glGetNamedProgramLocalParameterfvEXT;
        PFNGLGETNAMEDPROGRAMIVEXTPROC glGetNamedProgramivEXT;
        PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glGetNamedProgramStringEXT;
        PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glNamedRenderbufferStorageEXT;
        PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glGetNamedRenderbufferParameterivEXT;
        PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glNamedRenderbufferStorageMultisampleEXT;
        PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glNamedRenderbufferStorageMultisampleCoverageEXT;
        PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glCheckNamedFramebufferStatusEXT;
        PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glNamedFramebufferTexture1DEXT;
        PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glNamedFramebufferTexture2DEXT;
        PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glNamedFramebufferTexture3DEXT;
        PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glNamedFramebufferRenderbufferEXT;
        PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetNamedFramebufferAttachmentParameterivEXT;
        PFNGLGENERATETEXTUREMIPMAPEXTPROC glGenerateTextureMipmapEXT;
        PFNGLGENERATEMULTITEXMIPMAPEXTPROC glGenerateMultiTexMipmapEXT;
        PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glFramebufferDrawBufferEXT;
        PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glFramebufferDrawBuffersEXT;
        PFNGLFRAMEBUFFERREADBUFFEREXTPROC glFramebufferReadBufferEXT;
        PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glGetFramebufferParameterivEXT;
        PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glNamedCopyBufferSubDataEXT;
        PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glNamedFramebufferTextureEXT;
        PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glNamedFramebufferTextureLayerEXT;
        PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glNamedFramebufferTextureFaceEXT;
        PFNGLTEXTURERENDERBUFFEREXTPROC glTextureRenderbufferEXT;
        PFNGLMULTITEXRENDERBUFFEREXTPROC glMultiTexRenderbufferEXT;
        PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC glVertexArrayVertexOffsetEXT;
        PFNGLVERTEXARRAYCOLOROFFSETEXTPROC glVertexArrayColorOffsetEXT;
        PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC glVertexArrayEdgeFlagOffsetEXT;
        PFNGLVERTEXARRAYINDEXOFFSETEXTPROC glVertexArrayIndexOffsetEXT;
        PFNGLVERTEXARRAYNORMALOFFSETEXTPROC glVertexArrayNormalOffsetEXT;
        PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC glVertexArrayTexCoordOffsetEXT;
        PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC glVertexArrayMultiTexCoordOffsetEXT;
        PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC glVertexArrayFogCoordOffsetEXT;
        PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC glVertexArraySecondaryColorOffsetEXT;
        PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC glVertexArrayVertexAttribOffsetEXT;
        PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC glVertexArrayVertexAttribIOffsetEXT;
        PFNGLENABLEVERTEXARRAYEXTPROC glEnableVertexArrayEXT;
        PFNGLDISABLEVERTEXARRAYEXTPROC glDisableVertexArrayEXT;
        PFNGLENABLEVERTEXARRAYATTRIBEXTPROC glEnableVertexArrayAttribEXT;
        PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC glDisableVertexArrayAttribEXT;
        PFNGLGETVERTEXARRAYINTEGERVEXTPROC glGetVertexArrayIntegervEXT;
        PFNGLGETVERTEXARRAYPOINTERVEXTPROC glGetVertexArrayPointervEXT;
        PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC glGetVertexArrayIntegeri_vEXT;
        PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC glGetVertexArrayPointeri_vEXT;
        PFNGLMAPNAMEDBUFFERRANGEEXTPROC glMapNamedBufferRangeEXT;
        PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glFlushMappedNamedBufferRangeEXT;
        PFNGLNAMEDBUFFERSTORAGEEXTPROC glNamedBufferStorageEXT;
        PFNGLCLEARNAMEDBUFFERDATAEXTPROC glClearNamedBufferDataEXT;
        PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glClearNamedBufferSubDataEXT;
        PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glNamedFramebufferParameteriEXT;
        PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glGetNamedFramebufferParameterivEXT;
        PFNGLPROGRAMUNIFORM1DEXTPROC glProgramUniform1dEXT;
        PFNGLPROGRAMUNIFORM2DEXTPROC glProgramUniform2dEXT;
        PFNGLPROGRAMUNIFORM3DEXTPROC glProgramUniform3dEXT;
        PFNGLPROGRAMUNIFORM4DEXTPROC glProgramUniform4dEXT;
        PFNGLPROGRAMUNIFORM1DVEXTPROC glProgramUniform1dvEXT;
        PFNGLPROGRAMUNIFORM2DVEXTPROC glProgramUniform2dvEXT;
        PFNGLPROGRAMUNIFORM3DVEXTPROC glProgramUniform3dvEXT;
        PFNGLPROGRAMUNIFORM4DVEXTPROC glProgramUniform4dvEXT;
        PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glProgramUniformMatrix2dvEXT;
        PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glProgramUniformMatrix3dvEXT;
        PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glProgramUniformMatrix4dvEXT;
        PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glProgramUniformMatrix2x3dvEXT;
        PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glProgramUniformMatrix2x4dvEXT;
        PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glProgramUniformMatrix3x2dvEXT;
        PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glProgramUniformMatrix3x4dvEXT;
        PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glProgramUniformMatrix4x2dvEXT;
        PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glProgramUniformMatrix4x3dvEXT;
        PFNGLTEXTUREBUFFERRANGEEXTPROC glTextureBufferRangeEXT;
        PFNGLTEXTURESTORAGE1DEXTPROC glTextureStorage1DEXT;
        PFNGLTEXTURESTORAGE2DEXTPROC glTextureStorage2DEXT;
        PFNGLTEXTURESTORAGE3DEXTPROC glTextureStorage3DEXT;
        PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glTextureStorage2DMultisampleEXT;
        PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glTextureStorage3DMultisampleEXT;
        PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glVertexArrayBindVertexBufferEXT;
        PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glVertexArrayVertexAttribFormatEXT;
        PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glVertexArrayVertexAttribIFormatEXT;
        PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glVertexArrayVertexAttribLFormatEXT;
        PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glVertexArrayVertexAttribBindingEXT;
        PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glVertexArrayVertexBindingDivisorEXT;
        PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glVertexArrayVertexAttribLOffsetEXT;
        PFNGLTEXTUREPAGECOMMITMENTEXTPROC glTexturePageCommitmentEXT;
        PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC glVertexArrayVertexAttribDivisorEXT;
        PFNGLCOLORMASKINDEXEDEXTPROC glColorMaskIndexedEXT;
        PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstancedEXT;
        PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstancedEXT;
        PFNGLDRAWRANGEELEMENTSEXTPROC glDrawRangeElementsEXT;
        PFNGLBUFFERSTORAGEEXTERNALEXTPROC glBufferStorageExternalEXT;
        PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC glNamedBufferStorageExternalEXT;
        PFNGLFOGCOORDFEXTPROC glFogCoordfEXT;
        PFNGLFOGCOORDFVEXTPROC glFogCoordfvEXT;
        PFNGLFOGCOORDDEXTPROC glFogCoorddEXT;
        PFNGLFOGCOORDDVEXTPROC glFogCoorddvEXT;
        PFNGLFOGCOORDPOINTEREXTPROC glFogCoordPointerEXT;
        PFNGLBLITFRAMEBUFFEREXTPROC glBlitFramebufferEXT;
        PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glRenderbufferStorageMultisampleEXT;
        PFNGLISRENDERBUFFEREXTPROC glIsRenderbufferEXT;
        PFNGLBINDRENDERBUFFEREXTPROC glBindRenderbufferEXT;
        PFNGLDELETERENDERBUFFERSEXTPROC glDeleteRenderbuffersEXT;
        PFNGLGENRENDERBUFFERSEXTPROC glGenRenderbuffersEXT;
        PFNGLRENDERBUFFERSTORAGEEXTPROC glRenderbufferStorageEXT;
        PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glGetRenderbufferParameterivEXT;
        PFNGLISFRAMEBUFFEREXTPROC glIsFramebufferEXT;
        PFNGLBINDFRAMEBUFFEREXTPROC glBindFramebufferEXT;
        PFNGLDELETEFRAMEBUFFERSEXTPROC glDeleteFramebuffersEXT;
        PFNGLGENFRAMEBUFFERSEXTPROC glGenFramebuffersEXT;
        PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glCheckFramebufferStatusEXT;
        PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glFramebufferTexture1DEXT;
        PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glFramebufferTexture2DEXT;
        PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glFramebufferTexture3DEXT;
        PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glFramebufferRenderbufferEXT;
        PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetFramebufferAttachmentParameterivEXT;
        PFNGLGENERATEMIPMAPEXTPROC glGenerateMipmapEXT;
        PFNGLPROGRAMPARAMETERIEXTPROC glProgramParameteriEXT;
        PFNGLPROGRAMENVPARAMETERS4FVEXTPROC glProgramEnvParameters4fvEXT;
        PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC glProgramLocalParameters4fvEXT;
        PFNGLGETUNIFORMUIVEXTPROC glGetUniformuivEXT;
        PFNGLBINDFRAGDATALOCATIONEXTPROC glBindFragDataLocationEXT;
        PFNGLGETFRAGDATALOCATIONEXTPROC glGetFragDataLocationEXT;
        PFNGLUNIFORM1UIEXTPROC glUniform1uiEXT;
        PFNGLUNIFORM2UIEXTPROC glUniform2uiEXT;
        PFNGLUNIFORM3UIEXTPROC glUniform3uiEXT;
        PFNGLUNIFORM4UIEXTPROC glUniform4uiEXT;
        PFNGLUNIFORM1UIVEXTPROC glUniform1uivEXT;
        PFNGLUNIFORM2UIVEXTPROC glUniform2uivEXT;
        PFNGLUNIFORM3UIVEXTPROC glUniform3uivEXT;
        PFNGLUNIFORM4UIVEXTPROC glUniform4uivEXT;
        PFNGLGETHISTOGRAMEXTPROC glGetHistogramEXT;
        PFNGLGETHISTOGRAMPARAMETERFVEXTPROC glGetHistogramParameterfvEXT;
        PFNGLGETHISTOGRAMPARAMETERIVEXTPROC glGetHistogramParameterivEXT;
        PFNGLGETMINMAXEXTPROC glGetMinmaxEXT;
        PFNGLGETMINMAXPARAMETERFVEXTPROC glGetMinmaxParameterfvEXT;
        PFNGLGETMINMAXPARAMETERIVEXTPROC glGetMinmaxParameterivEXT;
        PFNGLHISTOGRAMEXTPROC glHistogramEXT;
        PFNGLMINMAXEXTPROC glMinmaxEXT;
        PFNGLRESETHISTOGRAMEXTPROC glResetHistogramEXT;
        PFNGLRESETMINMAXEXTPROC glResetMinmaxEXT;
        PFNGLINDEXFUNCEXTPROC glIndexFuncEXT;
        PFNGLINDEXMATERIALEXTPROC glIndexMaterialEXT;
        PFNGLAPPLYTEXTUREEXTPROC glApplyTextureEXT;
        PFNGLTEXTURELIGHTEXTPROC glTextureLightEXT;
        PFNGLTEXTUREMATERIALEXTPROC glTextureMaterialEXT;
        PFNGLGETUNSIGNEDBYTEVEXTPROC glGetUnsignedBytevEXT;
        PFNGLGETUNSIGNEDBYTEI_VEXTPROC glGetUnsignedBytei_vEXT;
        PFNGLDELETEMEMORYOBJECTSEXTPROC glDeleteMemoryObjectsEXT;
        PFNGLISMEMORYOBJECTEXTPROC glIsMemoryObjectEXT;
        PFNGLCREATEMEMORYOBJECTSEXTPROC glCreateMemoryObjectsEXT;
        PFNGLMEMORYOBJECTPARAMETERIVEXTPROC glMemoryObjectParameterivEXT;
        PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC glGetMemoryObjectParameterivEXT;
        PFNGLTEXSTORAGEMEM2DEXTPROC glTexStorageMem2DEXT;
        PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC glTexStorageMem2DMultisampleEXT;
        PFNGLTEXSTORAGEMEM3DEXTPROC glTexStorageMem3DEXT;
        PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC glTexStorageMem3DMultisampleEXT;
        PFNGLBUFFERSTORAGEMEMEXTPROC glBufferStorageMemEXT;
        PFNGLTEXTURESTORAGEMEM2DEXTPROC glTextureStorageMem2DEXT;
        PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC glTextureStorageMem2DMultisampleEXT;
        PFNGLTEXTURESTORAGEMEM3DEXTPROC glTextureStorageMem3DEXT;
        PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC glTextureStorageMem3DMultisampleEXT;
        PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC glNamedBufferStorageMemEXT;
        PFNGLTEXSTORAGEMEM1DEXTPROC glTexStorageMem1DEXT;
        PFNGLTEXTURESTORAGEMEM1DEXTPROC glTextureStorageMem1DEXT;
        PFNGLIMPORTMEMORYFDEXTPROC glImportMemoryFdEXT;
        PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC glImportMemoryWin32HandleEXT;
        PFNGLIMPORTMEMORYWIN32NAMEEXTPROC glImportMemoryWin32NameEXT;
        PFNGLMULTIDRAWARRAYSEXTPROC glMultiDrawArraysEXT;
        PFNGLMULTIDRAWELEMENTSEXTPROC glMultiDrawElementsEXT;
        PFNGLSAMPLEMASKEXTPROC glSampleMaskEXT;
        PFNGLSAMPLEPATTERNEXTPROC glSamplePatternEXT;
        PFNGLCOLORTABLEEXTPROC glColorTableEXT;
        PFNGLGETCOLORTABLEEXTPROC glGetColorTableEXT;
        PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glGetColorTableParameterivEXT;
        PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glGetColorTableParameterfvEXT;
        PFNGLPIXELTRANSFORMPARAMETERIEXTPROC glPixelTransformParameteriEXT;
        PFNGLPIXELTRANSFORMPARAMETERFEXTPROC glPixelTransformParameterfEXT;
        PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC glPixelTransformParameterivEXT;
        PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC glPixelTransformParameterfvEXT;
        PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC glGetPixelTransformParameterivEXT;
        PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC glGetPixelTransformParameterfvEXT;
        PFNGLPOINTPARAMETERFEXTPROC glPointParameterfEXT;
        PFNGLPOINTPARAMETERFVEXTPROC glPointParameterfvEXT;
        PFNGLPOLYGONOFFSETEXTPROC glPolygonOffsetEXT;
        PFNGLPOLYGONOFFSETCLAMPEXTPROC glPolygonOffsetClampEXT;
        PFNGLPROVOKINGVERTEXEXTPROC glProvokingVertexEXT;
        PFNGLRASTERSAMPLESEXTPROC glRasterSamplesEXT;
        PFNGLGENSEMAPHORESEXTPROC glGenSemaphoresEXT;
        PFNGLDELETESEMAPHORESEXTPROC glDeleteSemaphoresEXT;
        PFNGLISSEMAPHOREEXTPROC glIsSemaphoreEXT;
        PFNGLSEMAPHOREPARAMETERUI64VEXTPROC glSemaphoreParameterui64vEXT;
        PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC glGetSemaphoreParameterui64vEXT;
        PFNGLWAITSEMAPHOREEXTPROC glWaitSemaphoreEXT;
        PFNGLSIGNALSEMAPHOREEXTPROC glSignalSemaphoreEXT;
        PFNGLIMPORTSEMAPHOREFDEXTPROC glImportSemaphoreFdEXT;
        PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC glImportSemaphoreWin32HandleEXT;
        PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC glImportSemaphoreWin32NameEXT;
        PFNGLSECONDARYCOLOR3BEXTPROC glSecondaryColor3bEXT;
        PFNGLSECONDARYCOLOR3BVEXTPROC glSecondaryColor3bvEXT;
        PFNGLSECONDARYCOLOR3DEXTPROC glSecondaryColor3dEXT;
        PFNGLSECONDARYCOLOR3DVEXTPROC glSecondaryColor3dvEXT;
        PFNGLSECONDARYCOLOR3FEXTPROC glSecondaryColor3fEXT;
        PFNGLSECONDARYCOLOR3FVEXTPROC glSecondaryColor3fvEXT;
        PFNGLSECONDARYCOLOR3IEXTPROC glSecondaryColor3iEXT;
        PFNGLSECONDARYCOLOR3IVEXTPROC glSecondaryColor3ivEXT;
        PFNGLSECONDARYCOLOR3SEXTPROC glSecondaryColor3sEXT;
        PFNGLSECONDARYCOLOR3SVEXTPROC glSecondaryColor3svEXT;
        PFNGLSECONDARYCOLOR3UBEXTPROC glSecondaryColor3ubEXT;
        PFNGLSECONDARYCOLOR3UBVEXTPROC glSecondaryColor3ubvEXT;
        PFNGLSECONDARYCOLOR3UIEXTPROC glSecondaryColor3uiEXT;
        PFNGLSECONDARYCOLOR3UIVEXTPROC glSecondaryColor3uivEXT;
        PFNGLSECONDARYCOLOR3USEXTPROC glSecondaryColor3usEXT;
        PFNGLSECONDARYCOLOR3USVEXTPROC glSecondaryColor3usvEXT;
        PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointerEXT;
        PFNGLUSESHADERPROGRAMEXTPROC glUseShaderProgramEXT;
        PFNGLACTIVEPROGRAMEXTPROC glActiveProgramEXT;
        PFNGLCREATESHADERPROGRAMEXTPROC glCreateShaderProgramEXT;
        PFNGLACTIVESHADERPROGRAMEXTPROC glActiveShaderProgramEXT;
        PFNGLBINDPROGRAMPIPELINEEXTPROC glBindProgramPipelineEXT;
        PFNGLCREATESHADERPROGRAMVEXTPROC glCreateShaderProgramvEXT;
        PFNGLDELETEPROGRAMPIPELINESEXTPROC glDeleteProgramPipelinesEXT;
        PFNGLGENPROGRAMPIPELINESEXTPROC glGenProgramPipelinesEXT;
        PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC glGetProgramPipelineInfoLogEXT;
        PFNGLGETPROGRAMPIPELINEIVEXTPROC glGetProgramPipelineivEXT;
        PFNGLISPROGRAMPIPELINEEXTPROC glIsProgramPipelineEXT;
        PFNGLUSEPROGRAMSTAGESEXTPROC glUseProgramStagesEXT;
        PFNGLVALIDATEPROGRAMPIPELINEEXTPROC glValidateProgramPipelineEXT;
        PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC glFramebufferFetchBarrierEXT;
        PFNGLBINDIMAGETEXTUREEXTPROC glBindImageTextureEXT;
        PFNGLMEMORYBARRIEREXTPROC glMemoryBarrierEXT;
        PFNGLSTENCILCLEARTAGEXTPROC glStencilClearTagEXT;
        PFNGLACTIVESTENCILFACEEXTPROC glActiveStencilFaceEXT;
        PFNGLTEXSUBIMAGE1DEXTPROC glTexSubImage1DEXT;
        PFNGLTEXSUBIMAGE2DEXTPROC glTexSubImage2DEXT;
        PFNGLTEXIMAGE3DEXTPROC glTexImage3DEXT;
        PFNGLTEXSUBIMAGE3DEXTPROC glTexSubImage3DEXT;
        PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glFramebufferTextureLayerEXT;
        PFNGLTEXBUFFEREXTPROC glTexBufferEXT;
        PFNGLTEXPARAMETERIIVEXTPROC glTexParameterIivEXT;
        PFNGLTEXPARAMETERIUIVEXTPROC glTexParameterIuivEXT;
        PFNGLGETTEXPARAMETERIIVEXTPROC glGetTexParameterIivEXT;
        PFNGLGETTEXPARAMETERIUIVEXTPROC glGetTexParameterIuivEXT;
        PFNGLCLEARCOLORIIEXTPROC glClearColorIiEXT;
        PFNGLCLEARCOLORIUIEXTPROC glClearColorIuiEXT;
        PFNGLARETEXTURESRESIDENTEXTPROC glAreTexturesResidentEXT;
        PFNGLBINDTEXTUREEXTPROC glBindTextureEXT;
        PFNGLDELETETEXTURESEXTPROC glDeleteTexturesEXT;
        PFNGLGENTEXTURESEXTPROC glGenTexturesEXT;
        PFNGLISTEXTUREEXTPROC glIsTextureEXT;
        PFNGLPRIORITIZETEXTURESEXTPROC glPrioritizeTexturesEXT;
        PFNGLTEXTURENORMALEXTPROC glTextureNormalEXT;
        PFNGLCREATESEMAPHORESNVPROC glCreateSemaphoresNV;
        PFNGLSEMAPHOREPARAMETERIVNVPROC glSemaphoreParameterivNV;
        PFNGLGETSEMAPHOREPARAMETERIVNVPROC glGetSemaphoreParameterivNV;
        PFNGLGETQUERYOBJECTI64VEXTPROC glGetQueryObjecti64vEXT;
        PFNGLGETQUERYOBJECTUI64VEXTPROC glGetQueryObjectui64vEXT;
        PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glBeginTransformFeedbackEXT;
        PFNGLENDTRANSFORMFEEDBACKEXTPROC glEndTransformFeedbackEXT;
        PFNGLBINDBUFFERRANGEEXTPROC glBindBufferRangeEXT;
        PFNGLBINDBUFFEROFFSETEXTPROC glBindBufferOffsetEXT;
        PFNGLBINDBUFFERBASEEXTPROC glBindBufferBaseEXT;
        PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glTransformFeedbackVaryingsEXT;
        PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glGetTransformFeedbackVaryingEXT;
        PFNGLARRAYELEMENTEXTPROC glArrayElementEXT;
        PFNGLCOLORPOINTEREXTPROC glColorPointerEXT;
        PFNGLDRAWARRAYSEXTPROC glDrawArraysEXT;
        PFNGLEDGEFLAGPOINTEREXTPROC glEdgeFlagPointerEXT;
        PFNGLGETPOINTERVEXTPROC glGetPointervEXT;
        PFNGLINDEXPOINTEREXTPROC glIndexPointerEXT;
        PFNGLNORMALPOINTEREXTPROC glNormalPointerEXT;
        PFNGLTEXCOORDPOINTEREXTPROC glTexCoordPointerEXT;
        PFNGLVERTEXPOINTEREXTPROC glVertexPointerEXT;
        PFNGLVERTEXATTRIBL1DEXTPROC glVertexAttribL1dEXT;
        PFNGLVERTEXATTRIBL2DEXTPROC glVertexAttribL2dEXT;
        PFNGLVERTEXATTRIBL3DEXTPROC glVertexAttribL3dEXT;
        PFNGLVERTEXATTRIBL4DEXTPROC glVertexAttribL4dEXT;
        PFNGLVERTEXATTRIBL1DVEXTPROC glVertexAttribL1dvEXT;
        PFNGLVERTEXATTRIBL2DVEXTPROC glVertexAttribL2dvEXT;
        PFNGLVERTEXATTRIBL3DVEXTPROC glVertexAttribL3dvEXT;
        PFNGLVERTEXATTRIBL4DVEXTPROC glVertexAttribL4dvEXT;
        PFNGLVERTEXATTRIBLPOINTEREXTPROC glVertexAttribLPointerEXT;
        PFNGLGETVERTEXATTRIBLDVEXTPROC glGetVertexAttribLdvEXT;
        PFNGLBEGINVERTEXSHADEREXTPROC glBeginVertexShaderEXT;
        PFNGLENDVERTEXSHADEREXTPROC glEndVertexShaderEXT;
        PFNGLBINDVERTEXSHADEREXTPROC glBindVertexShaderEXT;
        PFNGLGENVERTEXSHADERSEXTPROC glGenVertexShadersEXT;
        PFNGLDELETEVERTEXSHADEREXTPROC glDeleteVertexShaderEXT;
        PFNGLSHADEROP1EXTPROC glShaderOp1EXT;
        PFNGLSHADEROP2EXTPROC glShaderOp2EXT;
        PFNGLSHADEROP3EXTPROC glShaderOp3EXT;
        PFNGLSWIZZLEEXTPROC glSwizzleEXT;
        PFNGLWRITEMASKEXTPROC glWriteMaskEXT;
        PFNGLINSERTCOMPONENTEXTPROC glInsertComponentEXT;
        PFNGLEXTRACTCOMPONENTEXTPROC glExtractComponentEXT;
        PFNGLGENSYMBOLSEXTPROC glGenSymbolsEXT;
        PFNGLSETINVARIANTEXTPROC glSetInvariantEXT;
        PFNGLSETLOCALCONSTANTEXTPROC glSetLocalConstantEXT;
        PFNGLVARIANTBVEXTPROC glVariantbvEXT;
        PFNGLVARIANTSVEXTPROC glVariantsvEXT;
        PFNGLVARIANTIVEXTPROC glVariantivEXT;
        PFNGLVARIANTFVEXTPROC glVariantfvEXT;
        PFNGLVARIANTDVEXTPROC glVariantdvEXT;
        PFNGLVARIANTUBVEXTPROC glVariantubvEXT;
        PFNGLVARIANTUSVEXTPROC glVariantusvEXT;
        PFNGLVARIANTUIVEXTPROC glVariantuivEXT;
        PFNGLVARIANTPOINTEREXTPROC glVariantPointerEXT;
        PFNGLENABLEVARIANTCLIENTSTATEEXTPROC glEnableVariantClientStateEXT;
        PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC glDisableVariantClientStateEXT;
        PFNGLBINDLIGHTPARAMETEREXTPROC glBindLightParameterEXT;
        PFNGLBINDMATERIALPARAMETEREXTPROC glBindMaterialParameterEXT;
        PFNGLBINDTEXGENPARAMETEREXTPROC glBindTexGenParameterEXT;
        PFNGLBINDTEXTUREUNITPARAMETEREXTPROC glBindTextureUnitParameterEXT;
        PFNGLBINDPARAMETEREXTPROC glBindParameterEXT;
        PFNGLISVARIANTENABLEDEXTPROC glIsVariantEnabledEXT;
        PFNGLGETVARIANTBOOLEANVEXTPROC glGetVariantBooleanvEXT;
        PFNGLGETVARIANTINTEGERVEXTPROC glGetVariantIntegervEXT;
        PFNGLGETVARIANTFLOATVEXTPROC glGetVariantFloatvEXT;
        PFNGLGETVARIANTPOINTERVEXTPROC glGetVariantPointervEXT;
        PFNGLGETINVARIANTBOOLEANVEXTPROC glGetInvariantBooleanvEXT;
        PFNGLGETINVARIANTINTEGERVEXTPROC glGetInvariantIntegervEXT;
        PFNGLGETINVARIANTFLOATVEXTPROC glGetInvariantFloatvEXT;
        PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC glGetLocalConstantBooleanvEXT;
        PFNGLGETLOCALCONSTANTINTEGERVEXTPROC glGetLocalConstantIntegervEXT;
        PFNGLGETLOCALCONSTANTFLOATVEXTPROC glGetLocalConstantFloatvEXT;
        PFNGLVERTEXWEIGHTFEXTPROC glVertexWeightfEXT;
        PFNGLVERTEXWEIGHTFVEXTPROC glVertexWeightfvEXT;
        PFNGLVERTEXWEIGHTPOINTEREXTPROC glVertexWeightPointerEXT;
        PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC glAcquireKeyedMutexWin32EXT;
        PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC glReleaseKeyedMutexWin32EXT;
        PFNGLWINDOWRECTANGLESEXTPROC glWindowRectanglesEXT;
        PFNGLIMPORTSYNCEXTPROC glImportSyncEXT;
        PFNGLFRAMETERMINATORGREMEDYPROC glFrameTerminatorGREMEDY;
        PFNGLSTRINGMARKERGREMEDYPROC glStringMarkerGREMEDY;
        PFNGLIMAGETRANSFORMPARAMETERIHPPROC glImageTransformParameteriHP;
        PFNGLIMAGETRANSFORMPARAMETERFHPPROC glImageTransformParameterfHP;
        PFNGLIMAGETRANSFORMPARAMETERIVHPPROC glImageTransformParameterivHP;
        PFNGLIMAGETRANSFORMPARAMETERFVHPPROC glImageTransformParameterfvHP;
        PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC glGetImageTransformParameterivHP;
        PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC glGetImageTransformParameterfvHP;
        PFNGLMULTIMODEDRAWARRAYSIBMPROC glMultiModeDrawArraysIBM;
        PFNGLMULTIMODEDRAWELEMENTSIBMPROC glMultiModeDrawElementsIBM;
        PFNGLFLUSHSTATICDATAIBMPROC glFlushStaticDataIBM;
        PFNGLCOLORPOINTERLISTIBMPROC glColorPointerListIBM;
        PFNGLSECONDARYCOLORPOINTERLISTIBMPROC glSecondaryColorPointerListIBM;
        PFNGLEDGEFLAGPOINTERLISTIBMPROC glEdgeFlagPointerListIBM;
        PFNGLFOGCOORDPOINTERLISTIBMPROC glFogCoordPointerListIBM;
        PFNGLINDEXPOINTERLISTIBMPROC glIndexPointerListIBM;
        PFNGLNORMALPOINTERLISTIBMPROC glNormalPointerListIBM;
        PFNGLTEXCOORDPOINTERLISTIBMPROC glTexCoordPointerListIBM;
        PFNGLVERTEXPOINTERLISTIBMPROC glVertexPointerListIBM;
        PFNGLBLENDFUNCSEPARATEINGRPROC glBlendFuncSeparateINGR;
        PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC glApplyFramebufferAttachmentCMAAINTEL;
        PFNGLSYNCTEXTUREINTELPROC glSyncTextureINTEL;
        PFNGLUNMAPTEXTURE2DINTELPROC glUnmapTexture2DINTEL;
        PFNGLMAPTEXTURE2DINTELPROC glMapTexture2DINTEL;
        PFNGLVERTEXPOINTERVINTELPROC glVertexPointervINTEL;
        PFNGLNORMALPOINTERVINTELPROC glNormalPointervINTEL;
        PFNGLCOLORPOINTERVINTELPROC glColorPointervINTEL;
        PFNGLTEXCOORDPOINTERVINTELPROC glTexCoordPointervINTEL;
        PFNGLBEGINPERFQUERYINTELPROC glBeginPerfQueryINTEL;
        PFNGLCREATEPERFQUERYINTELPROC glCreatePerfQueryINTEL;
        PFNGLDELETEPERFQUERYINTELPROC glDeletePerfQueryINTEL;
        PFNGLENDPERFQUERYINTELPROC glEndPerfQueryINTEL;
        PFNGLGETFIRSTPERFQUERYIDINTELPROC glGetFirstPerfQueryIdINTEL;
        PFNGLGETNEXTPERFQUERYIDINTELPROC glGetNextPerfQueryIdINTEL;
        PFNGLGETPERFCOUNTERINFOINTELPROC glGetPerfCounterInfoINTEL;
        PFNGLGETPERFQUERYDATAINTELPROC glGetPerfQueryDataINTEL;
        PFNGLGETPERFQUERYIDBYNAMEINTELPROC glGetPerfQueryIdByNameINTEL;
        PFNGLGETPERFQUERYINFOINTELPROC glGetPerfQueryInfoINTEL;
        PFNGLBLENDBARRIERKHRPROC glBlendBarrierKHR;
        PFNGLDEBUGMESSAGECONTROLKHRPROC glDebugMessageControlKHR;
        PFNGLDEBUGMESSAGEINSERTKHRPROC glDebugMessageInsertKHR;
        PFNGLDEBUGMESSAGECALLBACKKHRPROC glDebugMessageCallbackKHR;
        PFNGLGETDEBUGMESSAGELOGKHRPROC glGetDebugMessageLogKHR;
        PFNGLPUSHDEBUGGROUPKHRPROC glPushDebugGroupKHR;
        PFNGLPOPDEBUGGROUPKHRPROC glPopDebugGroupKHR;
        PFNGLOBJECTLABELKHRPROC glObjectLabelKHR;
        PFNGLGETOBJECTLABELKHRPROC glGetObjectLabelKHR;
        PFNGLOBJECTPTRLABELKHRPROC glObjectPtrLabelKHR;
        PFNGLGETOBJECTPTRLABELKHRPROC glGetObjectPtrLabelKHR;
        PFNGLGETPOINTERVKHRPROC glGetPointervKHR;
        PFNGLGETGRAPHICSRESETSTATUSKHRPROC glGetGraphicsResetStatusKHR;
        PFNGLREADNPIXELSKHRPROC glReadnPixelsKHR;
        PFNGLGETNUNIFORMFVKHRPROC glGetnUniformfvKHR;
        PFNGLGETNUNIFORMIVKHRPROC glGetnUniformivKHR;
        PFNGLGETNUNIFORMUIVKHRPROC glGetnUniformuivKHR;
        PFNGLMAXSHADERCOMPILERTHREADSKHRPROC glMaxShaderCompilerThreadsKHR;
        PFNGLFRAMEBUFFERPARAMETERIMESAPROC glFramebufferParameteriMESA;
        PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC glGetFramebufferParameterivMESA;
        PFNGLRESIZEBUFFERSMESAPROC glResizeBuffersMESA;
        PFNGLWINDOWPOS2DMESAPROC glWindowPos2dMESA;
        PFNGLWINDOWPOS2DVMESAPROC glWindowPos2dvMESA;
        PFNGLWINDOWPOS2FMESAPROC glWindowPos2fMESA;
        PFNGLWINDOWPOS2FVMESAPROC glWindowPos2fvMESA;
        PFNGLWINDOWPOS2IMESAPROC glWindowPos2iMESA;
        PFNGLWINDOWPOS2IVMESAPROC glWindowPos2ivMESA;
        PFNGLWINDOWPOS2SMESAPROC glWindowPos2sMESA;
        PFNGLWINDOWPOS2SVMESAPROC glWindowPos2svMESA;
        PFNGLWINDOWPOS3DMESAPROC glWindowPos3dMESA;
        PFNGLWINDOWPOS3DVMESAPROC glWindowPos3dvMESA;
        PFNGLWINDOWPOS3FMESAPROC glWindowPos3fMESA;
        PFNGLWINDOWPOS3FVMESAPROC glWindowPos3fvMESA;
        PFNGLWINDOWPOS3IMESAPROC glWindowPos3iMESA;
        PFNGLWINDOWPOS3IVMESAPROC glWindowPos3ivMESA;
        PFNGLWINDOWPOS3SMESAPROC glWindowPos3sMESA;
        PFNGLWINDOWPOS3SVMESAPROC glWindowPos3svMESA;
        PFNGLWINDOWPOS4DMESAPROC glWindowPos4dMESA;
        PFNGLWINDOWPOS4DVMESAPROC glWindowPos4dvMESA;
        PFNGLWINDOWPOS4FMESAPROC glWindowPos4fMESA;
        PFNGLWINDOWPOS4FVMESAPROC glWindowPos4fvMESA;
        PFNGLWINDOWPOS4IMESAPROC glWindowPos4iMESA;
        PFNGLWINDOWPOS4IVMESAPROC glWindowPos4ivMESA;
        PFNGLWINDOWPOS4SMESAPROC glWindowPos4sMESA;
        PFNGLWINDOWPOS4SVMESAPROC glWindowPos4svMESA;
        PFNGLBEGINCONDITIONALRENDERNVXPROC glBeginConditionalRenderNVX;
        PFNGLENDCONDITIONALRENDERNVXPROC glEndConditionalRenderNVX;
        PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC glLGPUNamedBufferSubDataNVX;
        PFNGLLGPUCOPYIMAGESUBDATANVXPROC glLGPUCopyImageSubDataNVX;
        PFNGLLGPUINTERLOCKNVXPROC glLGPUInterlockNVX;
        PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC glAlphaToCoverageDitherControlNV;
        PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC glMultiDrawArraysIndirectBindlessNV;
        PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC glMultiDrawElementsIndirectBindlessNV;
        PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC glMultiDrawArraysIndirectBindlessCountNV;
        PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC glMultiDrawElementsIndirectBindlessCountNV;
        PFNGLGETTEXTUREHANDLENVPROC glGetTextureHandleNV;
        PFNGLGETTEXTURESAMPLERHANDLENVPROC glGetTextureSamplerHandleNV;
        PFNGLMAKETEXTUREHANDLERESIDENTNVPROC glMakeTextureHandleResidentNV;
        PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC glMakeTextureHandleNonResidentNV;
        PFNGLGETIMAGEHANDLENVPROC glGetImageHandleNV;
        PFNGLMAKEIMAGEHANDLERESIDENTNVPROC glMakeImageHandleResidentNV;
        PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC glMakeImageHandleNonResidentNV;
        PFNGLUNIFORMHANDLEUI64NVPROC glUniformHandleui64NV;
        PFNGLUNIFORMHANDLEUI64VNVPROC glUniformHandleui64vNV;
        PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC glProgramUniformHandleui64NV;
        PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC glProgramUniformHandleui64vNV;
        PFNGLISTEXTUREHANDLERESIDENTNVPROC glIsTextureHandleResidentNV;
        PFNGLISIMAGEHANDLERESIDENTNVPROC glIsImageHandleResidentNV;
        PFNGLBLENDPARAMETERINVPROC glBlendParameteriNV;
        PFNGLBLENDBARRIERNVPROC glBlendBarrierNV;
        PFNGLVIEWPORTPOSITIONWSCALENVPROC glViewportPositionWScaleNV;
        PFNGLCREATESTATESNVPROC glCreateStatesNV;
        PFNGLDELETESTATESNVPROC glDeleteStatesNV;
        PFNGLISSTATENVPROC glIsStateNV;
        PFNGLSTATECAPTURENVPROC glStateCaptureNV;
        PFNGLGETCOMMANDHEADERNVPROC glGetCommandHeaderNV;
        PFNGLGETSTAGEINDEXNVPROC glGetStageIndexNV;
        PFNGLDRAWCOMMANDSNVPROC glDrawCommandsNV;
        PFNGLDRAWCOMMANDSADDRESSNVPROC glDrawCommandsAddressNV;
        PFNGLDRAWCOMMANDSSTATESNVPROC glDrawCommandsStatesNV;
        PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC glDrawCommandsStatesAddressNV;
        PFNGLCREATECOMMANDLISTSNVPROC glCreateCommandListsNV;
        PFNGLDELETECOMMANDLISTSNVPROC glDeleteCommandListsNV;
        PFNGLISCOMMANDLISTNVPROC glIsCommandListNV;
        PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC glListDrawCommandsStatesClientNV;
        PFNGLCOMMANDLISTSEGMENTSNVPROC glCommandListSegmentsNV;
        PFNGLCOMPILECOMMANDLISTNVPROC glCompileCommandListNV;
        PFNGLCALLCOMMANDLISTNVPROC glCallCommandListNV;
        PFNGLBEGINCONDITIONALRENDERNVPROC glBeginConditionalRenderNV;
        PFNGLENDCONDITIONALRENDERNVPROC glEndConditionalRenderNV;
        PFNGLSUBPIXELPRECISIONBIASNVPROC glSubpixelPrecisionBiasNV;
        PFNGLCONSERVATIVERASTERPARAMETERFNVPROC glConservativeRasterParameterfNV;
        PFNGLCONSERVATIVERASTERPARAMETERINVPROC glConservativeRasterParameteriNV;
        PFNGLCOPYIMAGESUBDATANVPROC glCopyImageSubDataNV;
        PFNGLDEPTHRANGEDNVPROC glDepthRangedNV;
        PFNGLCLEARDEPTHDNVPROC glClearDepthdNV;
        PFNGLDEPTHBOUNDSDNVPROC glDepthBoundsdNV;
        PFNGLDRAWTEXTURENVPROC glDrawTextureNV;
        PFNGLDRAWVKIMAGENVPROC glDrawVkImageNV;
        PFNGLGETVKPROCADDRNVPROC glGetVkProcAddrNV;
        PFNGLWAITVKSEMAPHORENVPROC glWaitVkSemaphoreNV;
        PFNGLSIGNALVKSEMAPHORENVPROC glSignalVkSemaphoreNV;
        PFNGLSIGNALVKFENCENVPROC glSignalVkFenceNV;
        PFNGLMAPCONTROLPOINTSNVPROC glMapControlPointsNV;
        PFNGLMAPPARAMETERIVNVPROC glMapParameterivNV;
        PFNGLMAPPARAMETERFVNVPROC glMapParameterfvNV;
        PFNGLGETMAPCONTROLPOINTSNVPROC glGetMapControlPointsNV;
        PFNGLGETMAPPARAMETERIVNVPROC glGetMapParameterivNV;
        PFNGLGETMAPPARAMETERFVNVPROC glGetMapParameterfvNV;
        PFNGLGETMAPATTRIBPARAMETERIVNVPROC glGetMapAttribParameterivNV;
        PFNGLGETMAPATTRIBPARAMETERFVNVPROC glGetMapAttribParameterfvNV;
        PFNGLEVALMAPSNVPROC glEvalMapsNV;
        PFNGLGETMULTISAMPLEFVNVPROC glGetMultisamplefvNV;
        PFNGLSAMPLEMASKINDEXEDNVPROC glSampleMaskIndexedNV;
        PFNGLTEXRENDERBUFFERNVPROC glTexRenderbufferNV;
        PFNGLDELETEFENCESNVPROC glDeleteFencesNV;
        PFNGLGENFENCESNVPROC glGenFencesNV;
        PFNGLISFENCENVPROC glIsFenceNV;
        PFNGLTESTFENCENVPROC glTestFenceNV;
        PFNGLGETFENCEIVNVPROC glGetFenceivNV;
        PFNGLFINISHFENCENVPROC glFinishFenceNV;
        PFNGLSETFENCENVPROC glSetFenceNV;
        PFNGLFRAGMENTCOVERAGECOLORNVPROC glFragmentCoverageColorNV;
        PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glProgramNamedParameter4fNV;
        PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glProgramNamedParameter4fvNV;
        PFNGLPROGRAMNAMEDPARAMETER4DNVPROC glProgramNamedParameter4dNV;
        PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC glProgramNamedParameter4dvNV;
        PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC glGetProgramNamedParameterfvNV;
        PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC glGetProgramNamedParameterdvNV;
        PFNGLCOVERAGEMODULATIONTABLENVPROC glCoverageModulationTableNV;
        PFNGLGETCOVERAGEMODULATIONTABLENVPROC glGetCoverageModulationTableNV;
        PFNGLCOVERAGEMODULATIONNVPROC glCoverageModulationNV;
        PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC glRenderbufferStorageMultisampleCoverageNV;
        PFNGLPROGRAMVERTEXLIMITNVPROC glProgramVertexLimitNV;
        PFNGLFRAMEBUFFERTEXTUREEXTPROC glFramebufferTextureEXT;
        PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glFramebufferTextureFaceEXT;
        PFNGLPROGRAMLOCALPARAMETERI4INVPROC glProgramLocalParameterI4iNV;
        PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC glProgramLocalParameterI4ivNV;
        PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC glProgramLocalParametersI4ivNV;
        PFNGLPROGRAMLOCALPARAMETERI4UINVPROC glProgramLocalParameterI4uiNV;
        PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC glProgramLocalParameterI4uivNV;
        PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC glProgramLocalParametersI4uivNV;
        PFNGLPROGRAMENVPARAMETERI4INVPROC glProgramEnvParameterI4iNV;
        PFNGLPROGRAMENVPARAMETERI4IVNVPROC glProgramEnvParameterI4ivNV;
        PFNGLPROGRAMENVPARAMETERSI4IVNVPROC glProgramEnvParametersI4ivNV;
        PFNGLPROGRAMENVPARAMETERI4UINVPROC glProgramEnvParameterI4uiNV;
        PFNGLPROGRAMENVPARAMETERI4UIVNVPROC glProgramEnvParameterI4uivNV;
        PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC glProgramEnvParametersI4uivNV;
        PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC glGetProgramLocalParameterIivNV;
        PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC glGetProgramLocalParameterIuivNV;
        PFNGLGETPROGRAMENVPARAMETERIIVNVPROC glGetProgramEnvParameterIivNV;
        PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC glGetProgramEnvParameterIuivNV;
        PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC glProgramSubroutineParametersuivNV;
        PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC glGetProgramSubroutineParameteruivNV;
        PFNGLVERTEX2HNVPROC glVertex2hNV;
        PFNGLVERTEX2HVNVPROC glVertex2hvNV;
        PFNGLVERTEX3HNVPROC glVertex3hNV;
        PFNGLVERTEX3HVNVPROC glVertex3hvNV;
        PFNGLVERTEX4HNVPROC glVertex4hNV;
        PFNGLVERTEX4HVNVPROC glVertex4hvNV;
        PFNGLNORMAL3HNVPROC glNormal3hNV;
        PFNGLNORMAL3HVNVPROC glNormal3hvNV;
        PFNGLCOLOR3HNVPROC glColor3hNV;
        PFNGLCOLOR3HVNVPROC glColor3hvNV;
        PFNGLCOLOR4HNVPROC glColor4hNV;
        PFNGLCOLOR4HVNVPROC glColor4hvNV;
        PFNGLTEXCOORD1HNVPROC glTexCoord1hNV;
        PFNGLTEXCOORD1HVNVPROC glTexCoord1hvNV;
        PFNGLTEXCOORD2HNVPROC glTexCoord2hNV;
        PFNGLTEXCOORD2HVNVPROC glTexCoord2hvNV;
        PFNGLTEXCOORD3HNVPROC glTexCoord3hNV;
        PFNGLTEXCOORD3HVNVPROC glTexCoord3hvNV;
        PFNGLTEXCOORD4HNVPROC glTexCoord4hNV;
        PFNGLTEXCOORD4HVNVPROC glTexCoord4hvNV;
        PFNGLMULTITEXCOORD1HNVPROC glMultiTexCoord1hNV;
        PFNGLMULTITEXCOORD1HVNVPROC glMultiTexCoord1hvNV;
        PFNGLMULTITEXCOORD2HNVPROC glMultiTexCoord2hNV;
        PFNGLMULTITEXCOORD2HVNVPROC glMultiTexCoord2hvNV;
        PFNGLMULTITEXCOORD3HNVPROC glMultiTexCoord3hNV;
        PFNGLMULTITEXCOORD3HVNVPROC glMultiTexCoord3hvNV;
        PFNGLMULTITEXCOORD4HNVPROC glMultiTexCoord4hNV;
        PFNGLMULTITEXCOORD4HVNVPROC glMultiTexCoord4hvNV;
        PFNGLFOGCOORDHNVPROC glFogCoordhNV;
        PFNGLFOGCOORDHVNVPROC glFogCoordhvNV;
        PFNGLSECONDARYCOLOR3HNVPROC glSecondaryColor3hNV;
        PFNGLSECONDARYCOLOR3HVNVPROC glSecondaryColor3hvNV;
        PFNGLVERTEXWEIGHTHNVPROC glVertexWeighthNV;
        PFNGLVERTEXWEIGHTHVNVPROC glVertexWeighthvNV;
        PFNGLVERTEXATTRIB1HNVPROC glVertexAttrib1hNV;
        PFNGLVERTEXATTRIB1HVNVPROC glVertexAttrib1hvNV;
        PFNGLVERTEXATTRIB2HNVPROC glVertexAttrib2hNV;
        PFNGLVERTEXATTRIB2HVNVPROC glVertexAttrib2hvNV;
        PFNGLVERTEXATTRIB3HNVPROC glVertexAttrib3hNV;
        PFNGLVERTEXATTRIB3HVNVPROC glVertexAttrib3hvNV;
        PFNGLVERTEXATTRIB4HNVPROC glVertexAttrib4hNV;
        PFNGLVERTEXATTRIB4HVNVPROC glVertexAttrib4hvNV;
        PFNGLVERTEXATTRIBS1HVNVPROC glVertexAttribs1hvNV;
        PFNGLVERTEXATTRIBS2HVNVPROC glVertexAttribs2hvNV;
        PFNGLVERTEXATTRIBS3HVNVPROC glVertexAttribs3hvNV;
        PFNGLVERTEXATTRIBS4HVNVPROC glVertexAttribs4hvNV;
        PFNGLGETINTERNALFORMATSAMPLEIVNVPROC glGetInternalformatSampleivNV;
        PFNGLRENDERGPUMASKNVPROC glRenderGpuMaskNV;
        PFNGLMULTICASTBUFFERSUBDATANVPROC glMulticastBufferSubDataNV;
        PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC glMulticastCopyBufferSubDataNV;
        PFNGLMULTICASTCOPYIMAGESUBDATANVPROC glMulticastCopyImageSubDataNV;
        PFNGLMULTICASTBLITFRAMEBUFFERNVPROC glMulticastBlitFramebufferNV;
        PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glMulticastFramebufferSampleLocationsfvNV;
        PFNGLMULTICASTBARRIERNVPROC glMulticastBarrierNV;
        PFNGLMULTICASTWAITSYNCNVPROC glMulticastWaitSyncNV;
        PFNGLMULTICASTGETQUERYOBJECTIVNVPROC glMulticastGetQueryObjectivNV;
        PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC glMulticastGetQueryObjectuivNV;
        PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC glMulticastGetQueryObjecti64vNV;
        PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC glMulticastGetQueryObjectui64vNV;
        PFNGLUPLOADGPUMASKNVXPROC glUploadGpuMaskNVX;
        PFNGLMULTICASTVIEWPORTARRAYVNVXPROC glMulticastViewportArrayvNVX;
        PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC glMulticastViewportPositionWScaleNVX;
        PFNGLMULTICASTSCISSORARRAYVNVXPROC glMulticastScissorArrayvNVX;
        PFNGLASYNCCOPYBUFFERSUBDATANVXPROC glAsyncCopyBufferSubDataNVX;
        PFNGLASYNCCOPYIMAGESUBDATANVXPROC glAsyncCopyImageSubDataNVX;
        PFNGLCREATEPROGRESSFENCENVXPROC glCreateProgressFenceNVX;
        PFNGLSIGNALSEMAPHOREUI64NVXPROC glSignalSemaphoreui64NVX;
        PFNGLWAITSEMAPHOREUI64NVXPROC glWaitSemaphoreui64NVX;
        PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC glClientWaitSemaphoreui64NVX;
        PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC glGetMemoryObjectDetachedResourcesuivNV;
        PFNGLRESETMEMORYOBJECTPARAMETERNVPROC glResetMemoryObjectParameterNV;
        PFNGLTEXATTACHMEMORYNVPROC glTexAttachMemoryNV;
        PFNGLBUFFERATTACHMEMORYNVPROC glBufferAttachMemoryNV;
        PFNGLTEXTUREATTACHMEMORYNVPROC glTextureAttachMemoryNV;
        PFNGLNAMEDBUFFERATTACHMEMORYNVPROC glNamedBufferAttachMemoryNV;
        PFNGLBUFFERPAGECOMMITMENTMEMNVPROC glBufferPageCommitmentMemNV;
        PFNGLTEXPAGECOMMITMENTMEMNVPROC glTexPageCommitmentMemNV;
        PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC glNamedBufferPageCommitmentMemNV;
        PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC glTexturePageCommitmentMemNV;
        PFNGLDRAWMESHTASKSNVPROC glDrawMeshTasksNV;
        PFNGLDRAWMESHTASKSINDIRECTNVPROC glDrawMeshTasksIndirectNV;
        PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC glMultiDrawMeshTasksIndirectNV;
        PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC glMultiDrawMeshTasksIndirectCountNV;
        PFNGLGENOCCLUSIONQUERIESNVPROC glGenOcclusionQueriesNV;
        PFNGLDELETEOCCLUSIONQUERIESNVPROC glDeleteOcclusionQueriesNV;
        PFNGLISOCCLUSIONQUERYNVPROC glIsOcclusionQueryNV;
        PFNGLBEGINOCCLUSIONQUERYNVPROC glBeginOcclusionQueryNV;
        PFNGLENDOCCLUSIONQUERYNVPROC glEndOcclusionQueryNV;
        PFNGLGETOCCLUSIONQUERYIVNVPROC glGetOcclusionQueryivNV;
        PFNGLGETOCCLUSIONQUERYUIVNVPROC glGetOcclusionQueryuivNV;
        PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC glProgramBufferParametersfvNV;
        PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC glProgramBufferParametersIivNV;
        PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC glProgramBufferParametersIuivNV;
        PFNGLGENPATHSNVPROC glGenPathsNV;
        PFNGLDELETEPATHSNVPROC glDeletePathsNV;
        PFNGLISPATHNVPROC glIsPathNV;
        PFNGLPATHCOMMANDSNVPROC glPathCommandsNV;
        PFNGLPATHCOORDSNVPROC glPathCoordsNV;
        PFNGLPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
        PFNGLPATHSUBCOORDSNVPROC glPathSubCoordsNV;
        PFNGLPATHSTRINGNVPROC glPathStringNV;
        PFNGLPATHGLYPHSNVPROC glPathGlyphsNV;
        PFNGLPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
        PFNGLWEIGHTPATHSNVPROC glWeightPathsNV;
        PFNGLCOPYPATHNVPROC glCopyPathNV;
        PFNGLINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
        PFNGLTRANSFORMPATHNVPROC glTransformPathNV;
        PFNGLPATHPARAMETERIVNVPROC glPathParameterivNV;
        PFNGLPATHPARAMETERINVPROC glPathParameteriNV;
        PFNGLPATHPARAMETERFVNVPROC glPathParameterfvNV;
        PFNGLPATHPARAMETERFNVPROC glPathParameterfNV;
        PFNGLPATHDASHARRAYNVPROC glPathDashArrayNV;
        PFNGLPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
        PFNGLPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
        PFNGLSTENCILFILLPATHNVPROC glStencilFillPathNV;
        PFNGLSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
        PFNGLSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
        PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
        PFNGLPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
        PFNGLCOVERFILLPATHNVPROC glCoverFillPathNV;
        PFNGLCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
        PFNGLCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
        PFNGLCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
        PFNGLGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
        PFNGLGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
        PFNGLGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
        PFNGLGETPATHCOORDSNVPROC glGetPathCoordsNV;
        PFNGLGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
        PFNGLGETPATHMETRICSNVPROC glGetPathMetricsNV;
        PFNGLGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
        PFNGLGETPATHSPACINGNVPROC glGetPathSpacingNV;
        PFNGLISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
        PFNGLISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
        PFNGLGETPATHLENGTHNVPROC glGetPathLengthNV;
        PFNGLPOINTALONGPATHNVPROC glPointAlongPathNV;
        PFNGLMATRIXLOAD3X2FNVPROC glMatrixLoad3x2fNV;
        PFNGLMATRIXLOAD3X3FNVPROC glMatrixLoad3x3fNV;
        PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC glMatrixLoadTranspose3x3fNV;
        PFNGLMATRIXMULT3X2FNVPROC glMatrixMult3x2fNV;
        PFNGLMATRIXMULT3X3FNVPROC glMatrixMult3x3fNV;
        PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC glMatrixMultTranspose3x3fNV;
        PFNGLSTENCILTHENCOVERFILLPATHNVPROC glStencilThenCoverFillPathNV;
        PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC glStencilThenCoverStrokePathNV;
        PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC glStencilThenCoverFillPathInstancedNV;
        PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC glStencilThenCoverStrokePathInstancedNV;
        PFNGLPATHGLYPHINDEXRANGENVPROC glPathGlyphIndexRangeNV;
        PFNGLPATHGLYPHINDEXARRAYNVPROC glPathGlyphIndexArrayNV;
        PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC glPathMemoryGlyphIndexArrayNV;
        PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC glProgramPathFragmentInputGenNV;
        PFNGLGETPROGRAMRESOURCEFVNVPROC glGetProgramResourcefvNV;
        PFNGLPATHCOLORGENNVPROC glPathColorGenNV;
        PFNGLPATHTEXGENNVPROC glPathTexGenNV;
        PFNGLPATHFOGGENNVPROC glPathFogGenNV;
        PFNGLGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
        PFNGLGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
        PFNGLGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
        PFNGLGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
        PFNGLPIXELDATARANGENVPROC glPixelDataRangeNV;
        PFNGLFLUSHPIXELDATARANGENVPROC glFlushPixelDataRangeNV;
        PFNGLPOINTPARAMETERINVPROC glPointParameteriNV;
        PFNGLPOINTPARAMETERIVNVPROC glPointParameterivNV;
        PFNGLPRESENTFRAMEKEYEDNVPROC glPresentFrameKeyedNV;
        PFNGLPRESENTFRAMEDUALFILLNVPROC glPresentFrameDualFillNV;
        PFNGLGETVIDEOIVNVPROC glGetVideoivNV;
        PFNGLGETVIDEOUIVNVPROC glGetVideouivNV;
        PFNGLGETVIDEOI64VNVPROC glGetVideoi64vNV;
        PFNGLGETVIDEOUI64VNVPROC glGetVideoui64vNV;
        PFNGLPRIMITIVERESTARTNVPROC glPrimitiveRestartNV;
        PFNGLPRIMITIVERESTARTINDEXNVPROC glPrimitiveRestartIndexNV;
        PFNGLQUERYRESOURCENVPROC glQueryResourceNV;
        PFNGLGENQUERYRESOURCETAGNVPROC glGenQueryResourceTagNV;
        PFNGLDELETEQUERYRESOURCETAGNVPROC glDeleteQueryResourceTagNV;
        PFNGLQUERYRESOURCETAGNVPROC glQueryResourceTagNV;
        PFNGLCOMBINERPARAMETERFVNVPROC glCombinerParameterfvNV;
        PFNGLCOMBINERPARAMETERFNVPROC glCombinerParameterfNV;
        PFNGLCOMBINERPARAMETERIVNVPROC glCombinerParameterivNV;
        PFNGLCOMBINERPARAMETERINVPROC glCombinerParameteriNV;
        PFNGLCOMBINERINPUTNVPROC glCombinerInputNV;
        PFNGLCOMBINEROUTPUTNVPROC glCombinerOutputNV;
        PFNGLFINALCOMBINERINPUTNVPROC glFinalCombinerInputNV;
        PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glGetCombinerInputParameterfvNV;
        PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glGetCombinerInputParameterivNV;
        PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glGetCombinerOutputParameterfvNV;
        PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glGetCombinerOutputParameterivNV;
        PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glGetFinalCombinerInputParameterfvNV;
        PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glGetFinalCombinerInputParameterivNV;
        PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glCombinerStageParameterfvNV;
        PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glGetCombinerStageParameterfvNV;
        PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glFramebufferSampleLocationsfvNV;
        PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glNamedFramebufferSampleLocationsfvNV;
        PFNGLRESOLVEDEPTHVALUESNVPROC glResolveDepthValuesNV;
        PFNGLSCISSOREXCLUSIVENVPROC glScissorExclusiveNV;
        PFNGLSCISSOREXCLUSIVEARRAYVNVPROC glScissorExclusiveArrayvNV;
        PFNGLMAKEBUFFERRESIDENTNVPROC glMakeBufferResidentNV;
        PFNGLMAKEBUFFERNONRESIDENTNVPROC glMakeBufferNonResidentNV;
        PFNGLISBUFFERRESIDENTNVPROC glIsBufferResidentNV;
        PFNGLMAKENAMEDBUFFERRESIDENTNVPROC glMakeNamedBufferResidentNV;
        PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC glMakeNamedBufferNonResidentNV;
        PFNGLISNAMEDBUFFERRESIDENTNVPROC glIsNamedBufferResidentNV;
        PFNGLGETBUFFERPARAMETERUI64VNVPROC glGetBufferParameterui64vNV;
        PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC glGetNamedBufferParameterui64vNV;
        PFNGLGETINTEGERUI64VNVPROC glGetIntegerui64vNV;
        PFNGLUNIFORMUI64NVPROC glUniformui64NV;
        PFNGLUNIFORMUI64VNVPROC glUniformui64vNV;
        PFNGLPROGRAMUNIFORMUI64NVPROC glProgramUniformui64NV;
        PFNGLPROGRAMUNIFORMUI64VNVPROC glProgramUniformui64vNV;
        PFNGLBINDSHADINGRATEIMAGENVPROC glBindShadingRateImageNV;
        PFNGLGETSHADINGRATEIMAGEPALETTENVPROC glGetShadingRateImagePaletteNV;
        PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC glGetShadingRateSampleLocationivNV;
        PFNGLSHADINGRATEIMAGEBARRIERNVPROC glShadingRateImageBarrierNV;
        PFNGLSHADINGRATEIMAGEPALETTENVPROC glShadingRateImagePaletteNV;
        PFNGLSHADINGRATESAMPLEORDERNVPROC glShadingRateSampleOrderNV;
        PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC glShadingRateSampleOrderCustomNV;
        PFNGLTEXTUREBARRIERNVPROC glTextureBarrierNV;
        PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC glTexImage2DMultisampleCoverageNV;
        PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC glTexImage3DMultisampleCoverageNV;
        PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC glTextureImage2DMultisampleNV;
        PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC glTextureImage3DMultisampleNV;
        PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC glTextureImage2DMultisampleCoverageNV;
        PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC glTextureImage3DMultisampleCoverageNV;
        PFNGLBEGINTRANSFORMFEEDBACKNVPROC glBeginTransformFeedbackNV;
        PFNGLENDTRANSFORMFEEDBACKNVPROC glEndTransformFeedbackNV;
        PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glTransformFeedbackAttribsNV;
        PFNGLBINDBUFFERRANGENVPROC glBindBufferRangeNV;
        PFNGLBINDBUFFEROFFSETNVPROC glBindBufferOffsetNV;
        PFNGLBINDBUFFERBASENVPROC glBindBufferBaseNV;
        PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glTransformFeedbackVaryingsNV;
        PFNGLACTIVEVARYINGNVPROC glActiveVaryingNV;
        PFNGLGETVARYINGLOCATIONNVPROC glGetVaryingLocationNV;
        PFNGLGETACTIVEVARYINGNVPROC glGetActiveVaryingNV;
        PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glGetTransformFeedbackVaryingNV;
        PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC glTransformFeedbackStreamAttribsNV;
        PFNGLBINDTRANSFORMFEEDBACKNVPROC glBindTransformFeedbackNV;
        PFNGLDELETETRANSFORMFEEDBACKSNVPROC glDeleteTransformFeedbacksNV;
        PFNGLGENTRANSFORMFEEDBACKSNVPROC glGenTransformFeedbacksNV;
        PFNGLISTRANSFORMFEEDBACKNVPROC glIsTransformFeedbackNV;
        PFNGLPAUSETRANSFORMFEEDBACKNVPROC glPauseTransformFeedbackNV;
        PFNGLRESUMETRANSFORMFEEDBACKNVPROC glResumeTransformFeedbackNV;
        PFNGLDRAWTRANSFORMFEEDBACKNVPROC glDrawTransformFeedbackNV;
        PFNGLVDPAUINITNVPROC glVDPAUInitNV;
        PFNGLVDPAUFININVPROC glVDPAUFiniNV;
        PFNGLVDPAUREGISTERVIDEOSURFACENVPROC glVDPAURegisterVideoSurfaceNV;
        PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC glVDPAURegisterOutputSurfaceNV;
        PFNGLVDPAUISSURFACENVPROC glVDPAUIsSurfaceNV;
        PFNGLVDPAUUNREGISTERSURFACENVPROC glVDPAUUnregisterSurfaceNV;
        PFNGLVDPAUGETSURFACEIVNVPROC glVDPAUGetSurfaceivNV;
        PFNGLVDPAUSURFACEACCESSNVPROC glVDPAUSurfaceAccessNV;
        PFNGLVDPAUMAPSURFACESNVPROC glVDPAUMapSurfacesNV;
        PFNGLVDPAUUNMAPSURFACESNVPROC glVDPAUUnmapSurfacesNV;
        PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC glVDPAURegisterVideoSurfaceWithPictureStructureNV;
        PFNGLFLUSHVERTEXARRAYRANGENVPROC glFlushVertexArrayRangeNV;
        PFNGLVERTEXARRAYRANGENVPROC glVertexArrayRangeNV;
        PFNGLVERTEXATTRIBL1I64NVPROC glVertexAttribL1i64NV;
        PFNGLVERTEXATTRIBL2I64NVPROC glVertexAttribL2i64NV;
        PFNGLVERTEXATTRIBL3I64NVPROC glVertexAttribL3i64NV;
        PFNGLVERTEXATTRIBL4I64NVPROC glVertexAttribL4i64NV;
        PFNGLVERTEXATTRIBL1I64VNVPROC glVertexAttribL1i64vNV;
        PFNGLVERTEXATTRIBL2I64VNVPROC glVertexAttribL2i64vNV;
        PFNGLVERTEXATTRIBL3I64VNVPROC glVertexAttribL3i64vNV;
        PFNGLVERTEXATTRIBL4I64VNVPROC glVertexAttribL4i64vNV;
        PFNGLVERTEXATTRIBL1UI64NVPROC glVertexAttribL1ui64NV;
        PFNGLVERTEXATTRIBL2UI64NVPROC glVertexAttribL2ui64NV;
        PFNGLVERTEXATTRIBL3UI64NVPROC glVertexAttribL3ui64NV;
        PFNGLVERTEXATTRIBL4UI64NVPROC glVertexAttribL4ui64NV;
        PFNGLVERTEXATTRIBL1UI64VNVPROC glVertexAttribL1ui64vNV;
        PFNGLVERTEXATTRIBL2UI64VNVPROC glVertexAttribL2ui64vNV;
        PFNGLVERTEXATTRIBL3UI64VNVPROC glVertexAttribL3ui64vNV;
        PFNGLVERTEXATTRIBL4UI64VNVPROC glVertexAttribL4ui64vNV;
        PFNGLGETVERTEXATTRIBLI64VNVPROC glGetVertexAttribLi64vNV;
        PFNGLGETVERTEXATTRIBLUI64VNVPROC glGetVertexAttribLui64vNV;
        PFNGLVERTEXATTRIBLFORMATNVPROC glVertexAttribLFormatNV;
        PFNGLBUFFERADDRESSRANGENVPROC glBufferAddressRangeNV;
        PFNGLVERTEXFORMATNVPROC glVertexFormatNV;
        PFNGLNORMALFORMATNVPROC glNormalFormatNV;
        PFNGLCOLORFORMATNVPROC glColorFormatNV;
        PFNGLINDEXFORMATNVPROC glIndexFormatNV;
        PFNGLTEXCOORDFORMATNVPROC glTexCoordFormatNV;
        PFNGLEDGEFLAGFORMATNVPROC glEdgeFlagFormatNV;
        PFNGLSECONDARYCOLORFORMATNVPROC glSecondaryColorFormatNV;
        PFNGLFOGCOORDFORMATNVPROC glFogCoordFormatNV;
        PFNGLVERTEXATTRIBFORMATNVPROC glVertexAttribFormatNV;
        PFNGLVERTEXATTRIBIFORMATNVPROC glVertexAttribIFormatNV;
        PFNGLGETINTEGERUI64I_VNVPROC glGetIntegerui64i_vNV;
        PFNGLAREPROGRAMSRESIDENTNVPROC glAreProgramsResidentNV;
        PFNGLBINDPROGRAMNVPROC glBindProgramNV;
        PFNGLDELETEPROGRAMSNVPROC glDeleteProgramsNV;
        PFNGLEXECUTEPROGRAMNVPROC glExecuteProgramNV;
        PFNGLGENPROGRAMSNVPROC glGenProgramsNV;
        PFNGLGETPROGRAMPARAMETERDVNVPROC glGetProgramParameterdvNV;
        PFNGLGETPROGRAMPARAMETERFVNVPROC glGetProgramParameterfvNV;
        PFNGLGETPROGRAMIVNVPROC glGetProgramivNV;
        PFNGLGETPROGRAMSTRINGNVPROC glGetProgramStringNV;
        PFNGLGETTRACKMATRIXIVNVPROC glGetTrackMatrixivNV;
        PFNGLGETVERTEXATTRIBDVNVPROC glGetVertexAttribdvNV;
        PFNGLGETVERTEXATTRIBFVNVPROC glGetVertexAttribfvNV;
        PFNGLGETVERTEXATTRIBIVNVPROC glGetVertexAttribivNV;
        PFNGLGETVERTEXATTRIBPOINTERVNVPROC glGetVertexAttribPointervNV;
        PFNGLISPROGRAMNVPROC glIsProgramNV;
        PFNGLLOADPROGRAMNVPROC glLoadProgramNV;
        PFNGLPROGRAMPARAMETER4DNVPROC glProgramParameter4dNV;
        PFNGLPROGRAMPARAMETER4DVNVPROC glProgramParameter4dvNV;
        PFNGLPROGRAMPARAMETER4FNVPROC glProgramParameter4fNV;
        PFNGLPROGRAMPARAMETER4FVNVPROC glProgramParameter4fvNV;
        PFNGLPROGRAMPARAMETERS4DVNVPROC glProgramParameters4dvNV;
        PFNGLPROGRAMPARAMETERS4FVNVPROC glProgramParameters4fvNV;
        PFNGLREQUESTRESIDENTPROGRAMSNVPROC glRequestResidentProgramsNV;
        PFNGLTRACKMATRIXNVPROC glTrackMatrixNV;
        PFNGLVERTEXATTRIBPOINTERNVPROC glVertexAttribPointerNV;
        PFNGLVERTEXATTRIB1DNVPROC glVertexAttrib1dNV;
        PFNGLVERTEXATTRIB1DVNVPROC glVertexAttrib1dvNV;
        PFNGLVERTEXATTRIB1FNVPROC glVertexAttrib1fNV;
        PFNGLVERTEXATTRIB1FVNVPROC glVertexAttrib1fvNV;
        PFNGLVERTEXATTRIB1SNVPROC glVertexAttrib1sNV;
        PFNGLVERTEXATTRIB1SVNVPROC glVertexAttrib1svNV;
        PFNGLVERTEXATTRIB2DNVPROC glVertexAttrib2dNV;
        PFNGLVERTEXATTRIB2DVNVPROC glVertexAttrib2dvNV;
        PFNGLVERTEXATTRIB2FNVPROC glVertexAttrib2fNV;
        PFNGLVERTEXATTRIB2FVNVPROC glVertexAttrib2fvNV;
        PFNGLVERTEXATTRIB2SNVPROC glVertexAttrib2sNV;
        PFNGLVERTEXATTRIB2SVNVPROC glVertexAttrib2svNV;
        PFNGLVERTEXATTRIB3DNVPROC glVertexAttrib3dNV;
        PFNGLVERTEXATTRIB3DVNVPROC glVertexAttrib3dvNV;
        PFNGLVERTEXATTRIB3FNVPROC glVertexAttrib3fNV;
        PFNGLVERTEXATTRIB3FVNVPROC glVertexAttrib3fvNV;
        PFNGLVERTEXATTRIB3SNVPROC glVertexAttrib3sNV;
        PFNGLVERTEXATTRIB3SVNVPROC glVertexAttrib3svNV;
        PFNGLVERTEXATTRIB4DNVPROC glVertexAttrib4dNV;
        PFNGLVERTEXATTRIB4DVNVPROC glVertexAttrib4dvNV;
        PFNGLVERTEXATTRIB4FNVPROC glVertexAttrib4fNV;
        PFNGLVERTEXATTRIB4FVNVPROC glVertexAttrib4fvNV;
        PFNGLVERTEXATTRIB4SNVPROC glVertexAttrib4sNV;
        PFNGLVERTEXATTRIB4SVNVPROC glVertexAttrib4svNV;
        PFNGLVERTEXATTRIB4UBNVPROC glVertexAttrib4ubNV;
        PFNGLVERTEXATTRIB4UBVNVPROC glVertexAttrib4ubvNV;
        PFNGLVERTEXATTRIBS1DVNVPROC glVertexAttribs1dvNV;
        PFNGLVERTEXATTRIBS1FVNVPROC glVertexAttribs1fvNV;
        PFNGLVERTEXATTRIBS1SVNVPROC glVertexAttribs1svNV;
        PFNGLVERTEXATTRIBS2DVNVPROC glVertexAttribs2dvNV;
        PFNGLVERTEXATTRIBS2FVNVPROC glVertexAttribs2fvNV;
        PFNGLVERTEXATTRIBS2SVNVPROC glVertexAttribs2svNV;
        PFNGLVERTEXATTRIBS3DVNVPROC glVertexAttribs3dvNV;
        PFNGLVERTEXATTRIBS3FVNVPROC glVertexAttribs3fvNV;
        PFNGLVERTEXATTRIBS3SVNVPROC glVertexAttribs3svNV;
        PFNGLVERTEXATTRIBS4DVNVPROC glVertexAttribs4dvNV;
        PFNGLVERTEXATTRIBS4FVNVPROC glVertexAttribs4fvNV;
        PFNGLVERTEXATTRIBS4SVNVPROC glVertexAttribs4svNV;
        PFNGLVERTEXATTRIBS4UBVNVPROC glVertexAttribs4ubvNV;
        PFNGLVERTEXATTRIBI1IEXTPROC glVertexAttribI1iEXT;
        PFNGLVERTEXATTRIBI2IEXTPROC glVertexAttribI2iEXT;
        PFNGLVERTEXATTRIBI3IEXTPROC glVertexAttribI3iEXT;
        PFNGLVERTEXATTRIBI4IEXTPROC glVertexAttribI4iEXT;
        PFNGLVERTEXATTRIBI1UIEXTPROC glVertexAttribI1uiEXT;
        PFNGLVERTEXATTRIBI2UIEXTPROC glVertexAttribI2uiEXT;
        PFNGLVERTEXATTRIBI3UIEXTPROC glVertexAttribI3uiEXT;
        PFNGLVERTEXATTRIBI4UIEXTPROC glVertexAttribI4uiEXT;
        PFNGLVERTEXATTRIBI1IVEXTPROC glVertexAttribI1ivEXT;
        PFNGLVERTEXATTRIBI2IVEXTPROC glVertexAttribI2ivEXT;
        PFNGLVERTEXATTRIBI3IVEXTPROC glVertexAttribI3ivEXT;
        PFNGLVERTEXATTRIBI4IVEXTPROC glVertexAttribI4ivEXT;
        PFNGLVERTEXATTRIBI1UIVEXTPROC glVertexAttribI1uivEXT;
        PFNGLVERTEXATTRIBI2UIVEXTPROC glVertexAttribI2uivEXT;
        PFNGLVERTEXATTRIBI3UIVEXTPROC glVertexAttribI3uivEXT;
        PFNGLVERTEXATTRIBI4UIVEXTPROC glVertexAttribI4uivEXT;
        PFNGLVERTEXATTRIBI4BVEXTPROC glVertexAttribI4bvEXT;
        PFNGLVERTEXATTRIBI4SVEXTPROC glVertexAttribI4svEXT;
        PFNGLVERTEXATTRIBI4UBVEXTPROC glVertexAttribI4ubvEXT;
        PFNGLVERTEXATTRIBI4USVEXTPROC glVertexAttribI4usvEXT;
        PFNGLVERTEXATTRIBIPOINTEREXTPROC glVertexAttribIPointerEXT;
        PFNGLGETVERTEXATTRIBIIVEXTPROC glGetVertexAttribIivEXT;
        PFNGLGETVERTEXATTRIBIUIVEXTPROC glGetVertexAttribIuivEXT;
        PFNGLBEGINVIDEOCAPTURENVPROC glBeginVideoCaptureNV;
        PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC glBindVideoCaptureStreamBufferNV;
        PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC glBindVideoCaptureStreamTextureNV;
        PFNGLENDVIDEOCAPTURENVPROC glEndVideoCaptureNV;
        PFNGLGETVIDEOCAPTUREIVNVPROC glGetVideoCaptureivNV;
        PFNGLGETVIDEOCAPTURESTREAMIVNVPROC glGetVideoCaptureStreamivNV;
        PFNGLGETVIDEOCAPTURESTREAMFVNVPROC glGetVideoCaptureStreamfvNV;
        PFNGLGETVIDEOCAPTURESTREAMDVNVPROC glGetVideoCaptureStreamdvNV;
        PFNGLVIDEOCAPTURENVPROC glVideoCaptureNV;
        PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC glVideoCaptureStreamParameterivNV;
        PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC glVideoCaptureStreamParameterfvNV;
        PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC glVideoCaptureStreamParameterdvNV;
        PFNGLVIEWPORTSWIZZLENVPROC glViewportSwizzleNV;
        PFNGLMULTITEXCOORD1BOESPROC glMultiTexCoord1bOES;
        PFNGLMULTITEXCOORD1BVOESPROC glMultiTexCoord1bvOES;
        PFNGLMULTITEXCOORD2BOESPROC glMultiTexCoord2bOES;
        PFNGLMULTITEXCOORD2BVOESPROC glMultiTexCoord2bvOES;
        PFNGLMULTITEXCOORD3BOESPROC glMultiTexCoord3bOES;
        PFNGLMULTITEXCOORD3BVOESPROC glMultiTexCoord3bvOES;
        PFNGLMULTITEXCOORD4BOESPROC glMultiTexCoord4bOES;
        PFNGLMULTITEXCOORD4BVOESPROC glMultiTexCoord4bvOES;
        PFNGLTEXCOORD1BOESPROC glTexCoord1bOES;
        PFNGLTEXCOORD1BVOESPROC glTexCoord1bvOES;
        PFNGLTEXCOORD2BOESPROC glTexCoord2bOES;
        PFNGLTEXCOORD2BVOESPROC glTexCoord2bvOES;
        PFNGLTEXCOORD3BOESPROC glTexCoord3bOES;
        PFNGLTEXCOORD3BVOESPROC glTexCoord3bvOES;
        PFNGLTEXCOORD4BOESPROC glTexCoord4bOES;
        PFNGLTEXCOORD4BVOESPROC glTexCoord4bvOES;
        PFNGLVERTEX2BOESPROC glVertex2bOES;
        PFNGLVERTEX2BVOESPROC glVertex2bvOES;
        PFNGLVERTEX3BOESPROC glVertex3bOES;
        PFNGLVERTEX3BVOESPROC glVertex3bvOES;
        PFNGLVERTEX4BOESPROC glVertex4bOES;
        PFNGLVERTEX4BVOESPROC glVertex4bvOES;
        PFNGLALPHAFUNCXOESPROC glAlphaFuncxOES;
        PFNGLCLEARCOLORXOESPROC glClearColorxOES;
        PFNGLCLEARDEPTHXOESPROC glClearDepthxOES;
        PFNGLCLIPPLANEXOESPROC glClipPlanexOES;
        PFNGLCOLOR4XOESPROC glColor4xOES;
        PFNGLDEPTHRANGEXOESPROC glDepthRangexOES;
        PFNGLFOGXOESPROC glFogxOES;
        PFNGLFOGXVOESPROC glFogxvOES;
        PFNGLFRUSTUMXOESPROC glFrustumxOES;
        PFNGLGETCLIPPLANEXOESPROC glGetClipPlanexOES;
        PFNGLGETFIXEDVOESPROC glGetFixedvOES;
        PFNGLGETTEXENVXVOESPROC glGetTexEnvxvOES;
        PFNGLGETTEXPARAMETERXVOESPROC glGetTexParameterxvOES;
        PFNGLLIGHTMODELXOESPROC glLightModelxOES;
        PFNGLLIGHTMODELXVOESPROC glLightModelxvOES;
        PFNGLLIGHTXOESPROC glLightxOES;
        PFNGLLIGHTXVOESPROC glLightxvOES;
        PFNGLLINEWIDTHXOESPROC glLineWidthxOES;
        PFNGLLOADMATRIXXOESPROC glLoadMatrixxOES;
        PFNGLMATERIALXOESPROC glMaterialxOES;
        PFNGLMATERIALXVOESPROC glMaterialxvOES;
        PFNGLMULTMATRIXXOESPROC glMultMatrixxOES;
        PFNGLMULTITEXCOORD4XOESPROC glMultiTexCoord4xOES;
        PFNGLNORMAL3XOESPROC glNormal3xOES;
        PFNGLORTHOXOESPROC glOrthoxOES;
        PFNGLPOINTPARAMETERXVOESPROC glPointParameterxvOES;
        PFNGLPOINTSIZEXOESPROC glPointSizexOES;
        PFNGLPOLYGONOFFSETXOESPROC glPolygonOffsetxOES;
        PFNGLROTATEXOESPROC glRotatexOES;
        PFNGLSCALEXOESPROC glScalexOES;
        PFNGLTEXENVXOESPROC glTexEnvxOES;
        PFNGLTEXENVXVOESPROC glTexEnvxvOES;
        PFNGLTEXPARAMETERXOESPROC glTexParameterxOES;
        PFNGLTEXPARAMETERXVOESPROC glTexParameterxvOES;
        PFNGLTRANSLATEXOESPROC glTranslatexOES;
        PFNGLGETLIGHTXVOESPROC glGetLightxvOES;
        PFNGLGETMATERIALXVOESPROC glGetMaterialxvOES;
        PFNGLPOINTPARAMETERXOESPROC glPointParameterxOES;
        PFNGLSAMPLECOVERAGEXOESPROC glSampleCoveragexOES;
        PFNGLACCUMXOESPROC glAccumxOES;
        PFNGLBITMAPXOESPROC glBitmapxOES;
        PFNGLBLENDCOLORXOESPROC glBlendColorxOES;
        PFNGLCLEARACCUMXOESPROC glClearAccumxOES;
        PFNGLCOLOR3XOESPROC glColor3xOES;
        PFNGLCOLOR3XVOESPROC glColor3xvOES;
        PFNGLCOLOR4XVOESPROC glColor4xvOES;
        PFNGLCONVOLUTIONPARAMETERXOESPROC glConvolutionParameterxOES;
        PFNGLCONVOLUTIONPARAMETERXVOESPROC glConvolutionParameterxvOES;
        PFNGLEVALCOORD1XOESPROC glEvalCoord1xOES;
        PFNGLEVALCOORD1XVOESPROC glEvalCoord1xvOES;
        PFNGLEVALCOORD2XOESPROC glEvalCoord2xOES;
        PFNGLEVALCOORD2XVOESPROC glEvalCoord2xvOES;
        PFNGLFEEDBACKBUFFERXOESPROC glFeedbackBufferxOES;
        PFNGLGETCONVOLUTIONPARAMETERXVOESPROC glGetConvolutionParameterxvOES;
        PFNGLGETHISTOGRAMPARAMETERXVOESPROC glGetHistogramParameterxvOES;
        PFNGLGETLIGHTXOESPROC glGetLightxOES;
        PFNGLGETMAPXVOESPROC glGetMapxvOES;
        PFNGLGETMATERIALXOESPROC glGetMaterialxOES;
        PFNGLGETPIXELMAPXVPROC glGetPixelMapxv;
        PFNGLGETTEXGENXVOESPROC glGetTexGenxvOES;
        PFNGLGETTEXLEVELPARAMETERXVOESPROC glGetTexLevelParameterxvOES;
        PFNGLINDEXXOESPROC glIndexxOES;
        PFNGLINDEXXVOESPROC glIndexxvOES;
        PFNGLLOADTRANSPOSEMATRIXXOESPROC glLoadTransposeMatrixxOES;
        PFNGLMAP1XOESPROC glMap1xOES;
        PFNGLMAP2XOESPROC glMap2xOES;
        PFNGLMAPGRID1XOESPROC glMapGrid1xOES;
        PFNGLMAPGRID2XOESPROC glMapGrid2xOES;
        PFNGLMULTTRANSPOSEMATRIXXOESPROC glMultTransposeMatrixxOES;
        PFNGLMULTITEXCOORD1XOESPROC glMultiTexCoord1xOES;
        PFNGLMULTITEXCOORD1XVOESPROC glMultiTexCoord1xvOES;
        PFNGLMULTITEXCOORD2XOESPROC glMultiTexCoord2xOES;
        PFNGLMULTITEXCOORD2XVOESPROC glMultiTexCoord2xvOES;
        PFNGLMULTITEXCOORD3XOESPROC glMultiTexCoord3xOES;
        PFNGLMULTITEXCOORD3XVOESPROC glMultiTexCoord3xvOES;
        PFNGLMULTITEXCOORD4XVOESPROC glMultiTexCoord4xvOES;
        PFNGLNORMAL3XVOESPROC glNormal3xvOES;
        PFNGLPASSTHROUGHXOESPROC glPassThroughxOES;
        PFNGLPIXELMAPXPROC glPixelMapx;
        PFNGLPIXELSTOREXPROC glPixelStorex;
        PFNGLPIXELTRANSFERXOESPROC glPixelTransferxOES;
        PFNGLPIXELZOOMXOESPROC glPixelZoomxOES;
        PFNGLPRIORITIZETEXTURESXOESPROC glPrioritizeTexturesxOES;
        PFNGLRASTERPOS2XOESPROC glRasterPos2xOES;
        PFNGLRASTERPOS2XVOESPROC glRasterPos2xvOES;
        PFNGLRASTERPOS3XOESPROC glRasterPos3xOES;
        PFNGLRASTERPOS3XVOESPROC glRasterPos3xvOES;
        PFNGLRASTERPOS4XOESPROC glRasterPos4xOES;
        PFNGLRASTERPOS4XVOESPROC glRasterPos4xvOES;
        PFNGLRECTXOESPROC glRectxOES;
        PFNGLRECTXVOESPROC glRectxvOES;
        PFNGLTEXCOORD1XOESPROC glTexCoord1xOES;
        PFNGLTEXCOORD1XVOESPROC glTexCoord1xvOES;
        PFNGLTEXCOORD2XOESPROC glTexCoord2xOES;
        PFNGLTEXCOORD2XVOESPROC glTexCoord2xvOES;
        PFNGLTEXCOORD3XOESPROC glTexCoord3xOES;
        PFNGLTEXCOORD3XVOESPROC glTexCoord3xvOES;
        PFNGLTEXCOORD4XOESPROC glTexCoord4xOES;
        PFNGLTEXCOORD4XVOESPROC glTexCoord4xvOES;
        PFNGLTEXGENXOESPROC glTexGenxOES;
        PFNGLTEXGENXVOESPROC glTexGenxvOES;
        PFNGLVERTEX2XOESPROC glVertex2xOES;
        PFNGLVERTEX2XVOESPROC glVertex2xvOES;
        PFNGLVERTEX3XOESPROC glVertex3xOES;
        PFNGLVERTEX3XVOESPROC glVertex3xvOES;
        PFNGLVERTEX4XOESPROC glVertex4xOES;
        PFNGLVERTEX4XVOESPROC glVertex4xvOES;
        PFNGLQUERYMATRIXXOESPROC glQueryMatrixxOES;
        PFNGLCLEARDEPTHFOESPROC glClearDepthfOES;
        PFNGLCLIPPLANEFOESPROC glClipPlanefOES;
        PFNGLDEPTHRANGEFOESPROC glDepthRangefOES;
        PFNGLFRUSTUMFOESPROC glFrustumfOES;
        PFNGLGETCLIPPLANEFOESPROC glGetClipPlanefOES;
        PFNGLORTHOFOESPROC glOrthofOES;
        PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC glFramebufferTextureMultiviewOVR;
        PFNGLHINTPGIPROC glHintPGI;
        PFNGLDETAILTEXFUNCSGISPROC glDetailTexFuncSGIS;
        PFNGLGETDETAILTEXFUNCSGISPROC glGetDetailTexFuncSGIS;
        PFNGLFOGFUNCSGISPROC glFogFuncSGIS;
        PFNGLGETFOGFUNCSGISPROC glGetFogFuncSGIS;
        PFNGLSAMPLEMASKSGISPROC glSampleMaskSGIS;
        PFNGLSAMPLEPATTERNSGISPROC glSamplePatternSGIS;
        PFNGLPIXELTEXGENPARAMETERISGISPROC glPixelTexGenParameteriSGIS;
        PFNGLPIXELTEXGENPARAMETERIVSGISPROC glPixelTexGenParameterivSGIS;
        PFNGLPIXELTEXGENPARAMETERFSGISPROC glPixelTexGenParameterfSGIS;
        PFNGLPIXELTEXGENPARAMETERFVSGISPROC glPixelTexGenParameterfvSGIS;
        PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC glGetPixelTexGenParameterivSGIS;
        PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC glGetPixelTexGenParameterfvSGIS;
        PFNGLPOINTPARAMETERFSGISPROC glPointParameterfSGIS;
        PFNGLPOINTPARAMETERFVSGISPROC glPointParameterfvSGIS;
        PFNGLSHARPENTEXFUNCSGISPROC glSharpenTexFuncSGIS;
        PFNGLGETSHARPENTEXFUNCSGISPROC glGetSharpenTexFuncSGIS;
        PFNGLTEXIMAGE4DSGISPROC glTexImage4DSGIS;
        PFNGLTEXSUBIMAGE4DSGISPROC glTexSubImage4DSGIS;
        PFNGLTEXTURECOLORMASKSGISPROC glTextureColorMaskSGIS;
        PFNGLGETTEXFILTERFUNCSGISPROC glGetTexFilterFuncSGIS;
        PFNGLTEXFILTERFUNCSGISPROC glTexFilterFuncSGIS;
        PFNGLASYNCMARKERSGIXPROC glAsyncMarkerSGIX;
        PFNGLFINISHASYNCSGIXPROC glFinishAsyncSGIX;
        PFNGLPOLLASYNCSGIXPROC glPollAsyncSGIX;
        PFNGLGENASYNCMARKERSSGIXPROC glGenAsyncMarkersSGIX;
        PFNGLDELETEASYNCMARKERSSGIXPROC glDeleteAsyncMarkersSGIX;
        PFNGLISASYNCMARKERSGIXPROC glIsAsyncMarkerSGIX;
        PFNGLFLUSHRASTERSGIXPROC glFlushRasterSGIX;
        PFNGLFRAGMENTCOLORMATERIALSGIXPROC glFragmentColorMaterialSGIX;
        PFNGLFRAGMENTLIGHTFSGIXPROC glFragmentLightfSGIX;
        PFNGLFRAGMENTLIGHTFVSGIXPROC glFragmentLightfvSGIX;
        PFNGLFRAGMENTLIGHTISGIXPROC glFragmentLightiSGIX;
        PFNGLFRAGMENTLIGHTIVSGIXPROC glFragmentLightivSGIX;
        PFNGLFRAGMENTLIGHTMODELFSGIXPROC glFragmentLightModelfSGIX;
        PFNGLFRAGMENTLIGHTMODELFVSGIXPROC glFragmentLightModelfvSGIX;
        PFNGLFRAGMENTLIGHTMODELISGIXPROC glFragmentLightModeliSGIX;
        PFNGLFRAGMENTLIGHTMODELIVSGIXPROC glFragmentLightModelivSGIX;
        PFNGLFRAGMENTMATERIALFSGIXPROC glFragmentMaterialfSGIX;
        PFNGLFRAGMENTMATERIALFVSGIXPROC glFragmentMaterialfvSGIX;
        PFNGLFRAGMENTMATERIALISGIXPROC glFragmentMaterialiSGIX;
        PFNGLFRAGMENTMATERIALIVSGIXPROC glFragmentMaterialivSGIX;
        PFNGLGETFRAGMENTLIGHTFVSGIXPROC glGetFragmentLightfvSGIX;
        PFNGLGETFRAGMENTLIGHTIVSGIXPROC glGetFragmentLightivSGIX;
        PFNGLGETFRAGMENTMATERIALFVSGIXPROC glGetFragmentMaterialfvSGIX;
        PFNGLGETFRAGMENTMATERIALIVSGIXPROC glGetFragmentMaterialivSGIX;
        PFNGLLIGHTENVISGIXPROC glLightEnviSGIX;
        PFNGLFRAMEZOOMSGIXPROC glFrameZoomSGIX;
        PFNGLIGLOOINTERFACESGIXPROC glIglooInterfaceSGIX;
        PFNGLGETINSTRUMENTSSGIXPROC glGetInstrumentsSGIX;
        PFNGLINSTRUMENTSBUFFERSGIXPROC glInstrumentsBufferSGIX;
        PFNGLPOLLINSTRUMENTSSGIXPROC glPollInstrumentsSGIX;
        PFNGLREADINSTRUMENTSSGIXPROC glReadInstrumentsSGIX;
        PFNGLSTARTINSTRUMENTSSGIXPROC glStartInstrumentsSGIX;
        PFNGLSTOPINSTRUMENTSSGIXPROC glStopInstrumentsSGIX;
        PFNGLGETLISTPARAMETERFVSGIXPROC glGetListParameterfvSGIX;
        PFNGLGETLISTPARAMETERIVSGIXPROC glGetListParameterivSGIX;
        PFNGLLISTPARAMETERFSGIXPROC glListParameterfSGIX;
        PFNGLLISTPARAMETERFVSGIXPROC glListParameterfvSGIX;
        PFNGLLISTPARAMETERISGIXPROC glListParameteriSGIX;
        PFNGLLISTPARAMETERIVSGIXPROC glListParameterivSGIX;
        PFNGLPIXELTEXGENSGIXPROC glPixelTexGenSGIX;
        PFNGLDEFORMATIONMAP3DSGIXPROC glDeformationMap3dSGIX;
        PFNGLDEFORMATIONMAP3FSGIXPROC glDeformationMap3fSGIX;
        PFNGLDEFORMSGIXPROC glDeformSGIX;
        PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC glLoadIdentityDeformationMapSGIX;
        PFNGLREFERENCEPLANESGIXPROC glReferencePlaneSGIX;
        PFNGLSPRITEPARAMETERFSGIXPROC glSpriteParameterfSGIX;
        PFNGLSPRITEPARAMETERFVSGIXPROC glSpriteParameterfvSGIX;
        PFNGLSPRITEPARAMETERISGIXPROC glSpriteParameteriSGIX;
        PFNGLSPRITEPARAMETERIVSGIXPROC glSpriteParameterivSGIX;
        PFNGLTAGSAMPLEBUFFERSGIXPROC glTagSampleBufferSGIX;
        PFNGLCOLORTABLESGIPROC glColorTableSGI;
        PFNGLCOLORTABLEPARAMETERFVSGIPROC glColorTableParameterfvSGI;
        PFNGLCOLORTABLEPARAMETERIVSGIPROC glColorTableParameterivSGI;
        PFNGLCOPYCOLORTABLESGIPROC glCopyColorTableSGI;
        PFNGLGETCOLORTABLESGIPROC glGetColorTableSGI;
        PFNGLGETCOLORTABLEPARAMETERFVSGIPROC glGetColorTableParameterfvSGI;
        PFNGLGETCOLORTABLEPARAMETERIVSGIPROC glGetColorTableParameterivSGI;
        PFNGLFINISHTEXTURESUNXPROC glFinishTextureSUNX;
        PFNGLGLOBALALPHAFACTORBSUNPROC glGlobalAlphaFactorbSUN;
        PFNGLGLOBALALPHAFACTORSSUNPROC glGlobalAlphaFactorsSUN;
        PFNGLGLOBALALPHAFACTORISUNPROC glGlobalAlphaFactoriSUN;
        PFNGLGLOBALALPHAFACTORFSUNPROC glGlobalAlphaFactorfSUN;
        PFNGLGLOBALALPHAFACTORDSUNPROC glGlobalAlphaFactordSUN;
        PFNGLGLOBALALPHAFACTORUBSUNPROC glGlobalAlphaFactorubSUN;
        PFNGLGLOBALALPHAFACTORUSSUNPROC glGlobalAlphaFactorusSUN;
        PFNGLGLOBALALPHAFACTORUISUNPROC glGlobalAlphaFactoruiSUN;
        PFNGLDRAWMESHARRAYSSUNPROC glDrawMeshArraysSUN;
        PFNGLREPLACEMENTCODEUISUNPROC glReplacementCodeuiSUN;
        PFNGLREPLACEMENTCODEUSSUNPROC glReplacementCodeusSUN;
        PFNGLREPLACEMENTCODEUBSUNPROC glReplacementCodeubSUN;
        PFNGLREPLACEMENTCODEUIVSUNPROC glReplacementCodeuivSUN;
        PFNGLREPLACEMENTCODEUSVSUNPROC glReplacementCodeusvSUN;
        PFNGLREPLACEMENTCODEUBVSUNPROC glReplacementCodeubvSUN;
        PFNGLREPLACEMENTCODEPOINTERSUNPROC glReplacementCodePointerSUN;
        PFNGLCOLOR4UBVERTEX2FSUNPROC glColor4ubVertex2fSUN;
        PFNGLCOLOR4UBVERTEX2FVSUNPROC glColor4ubVertex2fvSUN;
        PFNGLCOLOR4UBVERTEX3FSUNPROC glColor4ubVertex3fSUN;
        PFNGLCOLOR4UBVERTEX3FVSUNPROC glColor4ubVertex3fvSUN;
        PFNGLCOLOR3FVERTEX3FSUNPROC glColor3fVertex3fSUN;
        PFNGLCOLOR3FVERTEX3FVSUNPROC glColor3fVertex3fvSUN;
        PFNGLNORMAL3FVERTEX3FSUNPROC glNormal3fVertex3fSUN;
        PFNGLNORMAL3FVERTEX3FVSUNPROC glNormal3fVertex3fvSUN;
        PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC glColor4fNormal3fVertex3fSUN;
        PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC glColor4fNormal3fVertex3fvSUN;
        PFNGLTEXCOORD2FVERTEX3FSUNPROC glTexCoord2fVertex3fSUN;
        PFNGLTEXCOORD2FVERTEX3FVSUNPROC glTexCoord2fVertex3fvSUN;
        PFNGLTEXCOORD4FVERTEX4FSUNPROC glTexCoord4fVertex4fSUN;
        PFNGLTEXCOORD4FVERTEX4FVSUNPROC glTexCoord4fVertex4fvSUN;
        PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC glTexCoord2fColor4ubVertex3fSUN;
        PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC glTexCoord2fColor4ubVertex3fvSUN;
        PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC glTexCoord2fColor3fVertex3fSUN;
        PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC glTexCoord2fColor3fVertex3fvSUN;
        PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC glTexCoord2fNormal3fVertex3fSUN;
        PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fNormal3fVertex3fvSUN;
        PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glTexCoord2fColor4fNormal3fVertex3fSUN;
        PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fColor4fNormal3fVertex3fvSUN;
        PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC glTexCoord4fColor4fNormal3fVertex4fSUN;
        PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC glTexCoord4fColor4fNormal3fVertex4fvSUN;
        PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC glReplacementCodeuiVertex3fSUN;
        PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC glReplacementCodeuiVertex3fvSUN;
        PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC glReplacementCodeuiColor4ubVertex3fSUN;
        PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC glReplacementCodeuiColor4ubVertex3fvSUN;
        PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC glReplacementCodeuiColor3fVertex3fSUN;
        PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC glReplacementCodeuiColor3fVertex3fvSUN;
        PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC glReplacementCodeuiNormal3fVertex3fSUN;
        PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiNormal3fVertex3fvSUN;
        PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fSUN;
        PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
        PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fVertex3fSUN;
        PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fVertex3fvSUN;
        PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
        PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
        PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
        PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
#if defined(GLBIND_WGL)
        PFNWGLSETSTEREOEMITTERSTATE3DLPROC wglSetStereoEmitterState3DL;
        PFNWGLGETGPUIDSAMDPROC wglGetGPUIDsAMD;
        PFNWGLGETGPUINFOAMDPROC wglGetGPUInfoAMD;
        PFNWGLGETCONTEXTGPUIDAMDPROC wglGetContextGPUIDAMD;
        PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC wglCreateAssociatedContextAMD;
        PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC wglCreateAssociatedContextAttribsAMD;
        PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC wglDeleteAssociatedContextAMD;
        PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC wglMakeAssociatedContextCurrentAMD;
        PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC wglGetCurrentAssociatedContextAMD;
        PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC wglBlitContextFramebufferAMD;
        PFNWGLCREATEBUFFERREGIONARBPROC wglCreateBufferRegionARB;
        PFNWGLDELETEBUFFERREGIONARBPROC wglDeleteBufferRegionARB;
        PFNWGLSAVEBUFFERREGIONARBPROC wglSaveBufferRegionARB;
        PFNWGLRESTOREBUFFERREGIONARBPROC wglRestoreBufferRegionARB;
        PFNWGLCREATECONTEXTATTRIBSARBPROC wglCreateContextAttribsARB;
        PFNWGLGETEXTENSIONSSTRINGARBPROC wglGetExtensionsStringARB;
        PFNWGLMAKECONTEXTCURRENTARBPROC wglMakeContextCurrentARB;
        PFNWGLGETCURRENTREADDCARBPROC wglGetCurrentReadDCARB;
        PFNWGLCREATEPBUFFERARBPROC wglCreatePbufferARB;
        PFNWGLGETPBUFFERDCARBPROC wglGetPbufferDCARB;
        PFNWGLRELEASEPBUFFERDCARBPROC wglReleasePbufferDCARB;
        PFNWGLDESTROYPBUFFERARBPROC wglDestroyPbufferARB;
        PFNWGLQUERYPBUFFERARBPROC wglQueryPbufferARB;
        PFNWGLGETPIXELFORMATATTRIBIVARBPROC wglGetPixelFormatAttribivARB;
        PFNWGLGETPIXELFORMATATTRIBFVARBPROC wglGetPixelFormatAttribfvARB;
        PFNWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormatARB;
        PFNWGLBINDTEXIMAGEARBPROC wglBindTexImageARB;
        PFNWGLRELEASETEXIMAGEARBPROC wglReleaseTexImageARB;
        PFNWGLSETPBUFFERATTRIBARBPROC wglSetPbufferAttribARB;
        PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC wglCreateDisplayColorTableEXT;
        PFNWGLLOADDISPLAYCOLORTABLEEXTPROC wglLoadDisplayColorTableEXT;
        PFNWGLBINDDISPLAYCOLORTABLEEXTPROC wglBindDisplayColorTableEXT;
        PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC wglDestroyDisplayColorTableEXT;
        PFNWGLGETEXTENSIONSSTRINGEXTPROC wglGetExtensionsStringEXT;
        PFNWGLMAKECONTEXTCURRENTEXTPROC wglMakeContextCurrentEXT;
        PFNWGLGETCURRENTREADDCEXTPROC wglGetCurrentReadDCEXT;
        PFNWGLCREATEPBUFFEREXTPROC wglCreatePbufferEXT;
        PFNWGLGETPBUFFERDCEXTPROC wglGetPbufferDCEXT;
        PFNWGLRELEASEPBUFFERDCEXTPROC wglReleasePbufferDCEXT;
        PFNWGLDESTROYPBUFFEREXTPROC wglDestroyPbufferEXT;
        PFNWGLQUERYPBUFFEREXTPROC wglQueryPbufferEXT;
        PFNWGLGETPIXELFORMATATTRIBIVEXTPROC wglGetPixelFormatAttribivEXT;
        PFNWGLGETPIXELFORMATATTRIBFVEXTPROC wglGetPixelFormatAttribfvEXT;
        PFNWGLCHOOSEPIXELFORMATEXTPROC wglChoosePixelFormatEXT;
        PFNWGLSWAPINTERVALEXTPROC wglSwapIntervalEXT;
        PFNWGLGETSWAPINTERVALEXTPROC wglGetSwapIntervalEXT;
        PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC wglGetDigitalVideoParametersI3D;
        PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC wglSetDigitalVideoParametersI3D;
        PFNWGLGETGAMMATABLEPARAMETERSI3DPROC wglGetGammaTableParametersI3D;
        PFNWGLSETGAMMATABLEPARAMETERSI3DPROC wglSetGammaTableParametersI3D;
        PFNWGLGETGAMMATABLEI3DPROC wglGetGammaTableI3D;
        PFNWGLSETGAMMATABLEI3DPROC wglSetGammaTableI3D;
        PFNWGLENABLEGENLOCKI3DPROC wglEnableGenlockI3D;
        PFNWGLDISABLEGENLOCKI3DPROC wglDisableGenlockI3D;
        PFNWGLISENABLEDGENLOCKI3DPROC wglIsEnabledGenlockI3D;
        PFNWGLGENLOCKSOURCEI3DPROC wglGenlockSourceI3D;
        PFNWGLGETGENLOCKSOURCEI3DPROC wglGetGenlockSourceI3D;
        PFNWGLGENLOCKSOURCEEDGEI3DPROC wglGenlockSourceEdgeI3D;
        PFNWGLGETGENLOCKSOURCEEDGEI3DPROC wglGetGenlockSourceEdgeI3D;
        PFNWGLGENLOCKSAMPLERATEI3DPROC wglGenlockSampleRateI3D;
        PFNWGLGETGENLOCKSAMPLERATEI3DPROC wglGetGenlockSampleRateI3D;
        PFNWGLGENLOCKSOURCEDELAYI3DPROC wglGenlockSourceDelayI3D;
        PFNWGLGETGENLOCKSOURCEDELAYI3DPROC wglGetGenlockSourceDelayI3D;
        PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC wglQueryGenlockMaxSourceDelayI3D;
        PFNWGLCREATEIMAGEBUFFERI3DPROC wglCreateImageBufferI3D;
        PFNWGLDESTROYIMAGEBUFFERI3DPROC wglDestroyImageBufferI3D;
        PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC wglAssociateImageBufferEventsI3D;
        PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC wglReleaseImageBufferEventsI3D;
        PFNWGLENABLEFRAMELOCKI3DPROC wglEnableFrameLockI3D;
        PFNWGLDISABLEFRAMELOCKI3DPROC wglDisableFrameLockI3D;
        PFNWGLISENABLEDFRAMELOCKI3DPROC wglIsEnabledFrameLockI3D;
        PFNWGLQUERYFRAMELOCKMASTERI3DPROC wglQueryFrameLockMasterI3D;
        PFNWGLGETFRAMEUSAGEI3DPROC wglGetFrameUsageI3D;
        PFNWGLBEGINFRAMETRACKINGI3DPROC wglBeginFrameTrackingI3D;
        PFNWGLENDFRAMETRACKINGI3DPROC wglEndFrameTrackingI3D;
        PFNWGLQUERYFRAMETRACKINGI3DPROC wglQueryFrameTrackingI3D;
        PFNWGLCOPYIMAGESUBDATANVPROC wglCopyImageSubDataNV;
        PFNWGLDELAYBEFORESWAPNVPROC wglDelayBeforeSwapNV;
        PFNWGLDXSETRESOURCESHAREHANDLENVPROC wglDXSetResourceShareHandleNV;
        PFNWGLDXOPENDEVICENVPROC wglDXOpenDeviceNV;
        PFNWGLDXCLOSEDEVICENVPROC wglDXCloseDeviceNV;
        PFNWGLDXREGISTEROBJECTNVPROC wglDXRegisterObjectNV;
        PFNWGLDXUNREGISTEROBJECTNVPROC wglDXUnregisterObjectNV;
        PFNWGLDXOBJECTACCESSNVPROC wglDXObjectAccessNV;
        PFNWGLDXLOCKOBJECTSNVPROC wglDXLockObjectsNV;
        PFNWGLDXUNLOCKOBJECTSNVPROC wglDXUnlockObjectsNV;
        PFNWGLENUMGPUSNVPROC wglEnumGpusNV;
        PFNWGLENUMGPUDEVICESNVPROC wglEnumGpuDevicesNV;
        PFNWGLCREATEAFFINITYDCNVPROC wglCreateAffinityDCNV;
        PFNWGLENUMGPUSFROMAFFINITYDCNVPROC wglEnumGpusFromAffinityDCNV;
        PFNWGLDELETEDCNVPROC wglDeleteDCNV;
        PFNWGLENUMERATEVIDEODEVICESNVPROC wglEnumerateVideoDevicesNV;
        PFNWGLBINDVIDEODEVICENVPROC wglBindVideoDeviceNV;
        PFNWGLQUERYCURRENTCONTEXTNVPROC wglQueryCurrentContextNV;
        PFNWGLJOINSWAPGROUPNVPROC wglJoinSwapGroupNV;
        PFNWGLBINDSWAPBARRIERNVPROC wglBindSwapBarrierNV;
        PFNWGLQUERYSWAPGROUPNVPROC wglQuerySwapGroupNV;
        PFNWGLQUERYMAXSWAPGROUPSNVPROC wglQueryMaxSwapGroupsNV;
        PFNWGLQUERYFRAMECOUNTNVPROC wglQueryFrameCountNV;
        PFNWGLRESETFRAMECOUNTNVPROC wglResetFrameCountNV;
        PFNWGLBINDVIDEOCAPTUREDEVICENVPROC wglBindVideoCaptureDeviceNV;
        PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC wglEnumerateVideoCaptureDevicesNV;
        PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC wglLockVideoCaptureDeviceNV;
        PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC wglQueryVideoCaptureDeviceNV;
        PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC wglReleaseVideoCaptureDeviceNV;
        PFNWGLGETVIDEODEVICENVPROC wglGetVideoDeviceNV;
        PFNWGLRELEASEVIDEODEVICENVPROC wglReleaseVideoDeviceNV;
        PFNWGLBINDVIDEOIMAGENVPROC wglBindVideoImageNV;
        PFNWGLRELEASEVIDEOIMAGENVPROC wglReleaseVideoImageNV;
        PFNWGLSENDPBUFFERTOVIDEONVPROC wglSendPbufferToVideoNV;
        PFNWGLGETVIDEOINFONVPROC wglGetVideoInfoNV;
        PFNWGLALLOCATEMEMORYNVPROC wglAllocateMemoryNV;
        PFNWGLFREEMEMORYNVPROC wglFreeMemoryNV;
        PFNWGLGETSYNCVALUESOMLPROC wglGetSyncValuesOML;
        PFNWGLGETMSCRATEOMLPROC wglGetMscRateOML;
        PFNWGLSWAPBUFFERSMSCOMLPROC wglSwapBuffersMscOML;
        PFNWGLSWAPLAYERBUFFERSMSCOMLPROC wglSwapLayerBuffersMscOML;
        PFNWGLWAITFORMSCOMLPROC wglWaitForMscOML;
        PFNWGLWAITFORSBCOMLPROC wglWaitForSbcOML;
#endif /* GLBIND_WGL */
#if defined(GLBIND_GLX)
        PFNGLXGETGPUIDSAMDPROC glXGetGPUIDsAMD;
        PFNGLXGETGPUINFOAMDPROC glXGetGPUInfoAMD;
        PFNGLXGETCONTEXTGPUIDAMDPROC glXGetContextGPUIDAMD;
        PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC glXCreateAssociatedContextAMD;
        PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC glXCreateAssociatedContextAttribsAMD;
        PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC glXDeleteAssociatedContextAMD;
        PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC glXMakeAssociatedContextCurrentAMD;
        PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC glXGetCurrentAssociatedContextAMD;
        PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC glXBlitContextFramebufferAMD;
        PFNGLXCREATECONTEXTATTRIBSARBPROC glXCreateContextAttribsARB;
        PFNGLXGETPROCADDRESSARBPROC glXGetProcAddressARB;
        PFNGLXGETCURRENTDISPLAYEXTPROC glXGetCurrentDisplayEXT;
        PFNGLXQUERYCONTEXTINFOEXTPROC glXQueryContextInfoEXT;
        PFNGLXGETCONTEXTIDEXTPROC glXGetContextIDEXT;
        PFNGLXIMPORTCONTEXTEXTPROC glXImportContextEXT;
        PFNGLXFREECONTEXTEXTPROC glXFreeContextEXT;
        PFNGLXSWAPINTERVALEXTPROC glXSwapIntervalEXT;
        PFNGLXBINDTEXIMAGEEXTPROC glXBindTexImageEXT;
        PFNGLXRELEASETEXIMAGEEXTPROC glXReleaseTexImageEXT;
        PFNGLXGETAGPOFFSETMESAPROC glXGetAGPOffsetMESA;
        PFNGLXCOPYSUBBUFFERMESAPROC glXCopySubBufferMESA;
        PFNGLXCREATEGLXPIXMAPMESAPROC glXCreateGLXPixmapMESA;
        PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC glXQueryCurrentRendererIntegerMESA;
        PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC glXQueryCurrentRendererStringMESA;
        PFNGLXQUERYRENDERERINTEGERMESAPROC glXQueryRendererIntegerMESA;
        PFNGLXQUERYRENDERERSTRINGMESAPROC glXQueryRendererStringMESA;
        PFNGLXRELEASEBUFFERSMESAPROC glXReleaseBuffersMESA;
        PFNGLXSET3DFXMODEMESAPROC glXSet3DfxModeMESA;
        PFNGLXGETSWAPINTERVALMESAPROC glXGetSwapIntervalMESA;
        PFNGLXSWAPINTERVALMESAPROC glXSwapIntervalMESA;
        PFNGLXCOPYBUFFERSUBDATANVPROC glXCopyBufferSubDataNV;
        PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC glXNamedCopyBufferSubDataNV;
        PFNGLXCOPYIMAGESUBDATANVPROC glXCopyImageSubDataNV;
        PFNGLXDELAYBEFORESWAPNVPROC glXDelayBeforeSwapNV;
        PFNGLXENUMERATEVIDEODEVICESNVPROC glXEnumerateVideoDevicesNV;
        PFNGLXBINDVIDEODEVICENVPROC glXBindVideoDeviceNV;
        PFNGLXJOINSWAPGROUPNVPROC glXJoinSwapGroupNV;
        PFNGLXBINDSWAPBARRIERNVPROC glXBindSwapBarrierNV;
        PFNGLXQUERYSWAPGROUPNVPROC glXQuerySwapGroupNV;
        PFNGLXQUERYMAXSWAPGROUPSNVPROC glXQueryMaxSwapGroupsNV;
        PFNGLXQUERYFRAMECOUNTNVPROC glXQueryFrameCountNV;
        PFNGLXRESETFRAMECOUNTNVPROC glXResetFrameCountNV;
        PFNGLXBINDVIDEOCAPTUREDEVICENVPROC glXBindVideoCaptureDeviceNV;
        PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC glXEnumerateVideoCaptureDevicesNV;
        PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC glXLockVideoCaptureDeviceNV;
        PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC glXQueryVideoCaptureDeviceNV;
        PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC glXReleaseVideoCaptureDeviceNV;
        PFNGLXGETVIDEODEVICENVPROC glXGetVideoDeviceNV;
        PFNGLXRELEASEVIDEODEVICENVPROC glXReleaseVideoDeviceNV;
        PFNGLXBINDVIDEOIMAGENVPROC glXBindVideoImageNV;
        PFNGLXRELEASEVIDEOIMAGENVPROC glXReleaseVideoImageNV;
        PFNGLXSENDPBUFFERTOVIDEONVPROC glXSendPbufferToVideoNV;
        PFNGLXGETVIDEOINFONVPROC glXGetVideoInfoNV;
        PFNGLXGETSYNCVALUESOMLPROC glXGetSyncValuesOML;
        PFNGLXGETMSCRATEOMLPROC glXGetMscRateOML;
        PFNGLXSWAPBUFFERSMSCOMLPROC glXSwapBuffersMscOML;
        PFNGLXWAITFORMSCOMLPROC glXWaitForMscOML;
        PFNGLXWAITFORSBCOMLPROC glXWaitForSbcOML;
        PFNGLXCUSHIONSGIPROC glXCushionSGI;
        PFNGLXMAKECURRENTREADSGIPROC glXMakeCurrentReadSGI;
        PFNGLXGETCURRENTREADDRAWABLESGIPROC glXGetCurrentReadDrawableSGI;
        PFNGLXSWAPINTERVALSGIPROC glXSwapIntervalSGI;
        PFNGLXGETVIDEOSYNCSGIPROC glXGetVideoSyncSGI;
        PFNGLXWAITVIDEOSYNCSGIPROC glXWaitVideoSyncSGI;
        PFNGLXGETFBCONFIGATTRIBSGIXPROC glXGetFBConfigAttribSGIX;
        PFNGLXCHOOSEFBCONFIGSGIXPROC glXChooseFBConfigSGIX;
        PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC glXCreateGLXPixmapWithConfigSGIX;
        PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC glXCreateContextWithConfigSGIX;
        PFNGLXGETVISUALFROMFBCONFIGSGIXPROC glXGetVisualFromFBConfigSGIX;
        PFNGLXGETFBCONFIGFROMVISUALSGIXPROC glXGetFBConfigFromVisualSGIX;
        PFNGLXQUERYHYPERPIPENETWORKSGIXPROC glXQueryHyperpipeNetworkSGIX;
        PFNGLXHYPERPIPECONFIGSGIXPROC glXHyperpipeConfigSGIX;
        PFNGLXQUERYHYPERPIPECONFIGSGIXPROC glXQueryHyperpipeConfigSGIX;
        PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC glXDestroyHyperpipeConfigSGIX;
        PFNGLXBINDHYPERPIPESGIXPROC glXBindHyperpipeSGIX;
        PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC glXQueryHyperpipeBestAttribSGIX;
        PFNGLXHYPERPIPEATTRIBSGIXPROC glXHyperpipeAttribSGIX;
        PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC glXQueryHyperpipeAttribSGIX;
        PFNGLXCREATEGLXPBUFFERSGIXPROC glXCreateGLXPbufferSGIX;
        PFNGLXDESTROYGLXPBUFFERSGIXPROC glXDestroyGLXPbufferSGIX;
        PFNGLXQUERYGLXPBUFFERSGIXPROC glXQueryGLXPbufferSGIX;
        PFNGLXSELECTEVENTSGIXPROC glXSelectEventSGIX;
        PFNGLXGETSELECTEDEVENTSGIXPROC glXGetSelectedEventSGIX;
        PFNGLXBINDSWAPBARRIERSGIXPROC glXBindSwapBarrierSGIX;
        PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC glXQueryMaxSwapBarriersSGIX;
        PFNGLXJOINSWAPGROUPSGIXPROC glXJoinSwapGroupSGIX;
        PFNGLXBINDCHANNELTOWINDOWSGIXPROC glXBindChannelToWindowSGIX;
        PFNGLXCHANNELRECTSGIXPROC glXChannelRectSGIX;
        PFNGLXQUERYCHANNELRECTSGIXPROC glXQueryChannelRectSGIX;
        PFNGLXQUERYCHANNELDELTASSGIXPROC glXQueryChannelDeltasSGIX;
        PFNGLXCHANNELRECTSYNCSGIXPROC glXChannelRectSyncSGIX;
        PFNGLXGETTRANSPARENTINDEXSUNPROC glXGetTransparentIndexSUN;
#endif /* GLBIND_GLX */
    } GLBapi;

    typedef struct
    {
        GLboolean singleBuffered;
#if defined(GLBIND_WGL)
        HWND hWnd;
#endif
#if defined(GLBIND_GLX)
        Display* pDisplay;
#endif
    } GLBconfig;

    /*
    Initializes a config object which can later be passed to glbInit() to configure the rendering context that's created by glbInit().
    */
    GLBconfig glbConfigInit();

    /*
    Initializes glbind and attempts to load APIs statically.

    pAPI is optional. On output it will contain pointers to all OpenGL APIs found by the loader.

    This will initialize a dummy rendering context and make it current. It will also bind API's to global scope. If you want to load
    APIs based on a specific rendering context, use glbInitContextAPI(). Then you can, optionally, call glbBindAPI() to bind those
    APIs to global scope.

    This is not thread-safe. You can call this multiple times, but each call must be matched with a call to glbUninit(). The first
    time this is called it will bind the APIs to global scope.

    The internal rendering context can be used like normal. It will be created in double-buffered mode. You can also create your own
    context, but you may want to consider calling glbInitContextAPI() or glbInitCurrentContextAPI() after the fact to ensure function
    pointers are valid for that context.

    You can configure the internal rendering context by specifying a GLBconfig object. This can NULL in which case it will use
    defaults. Initialize the config object with glbConfigInit(). The default config creates a context with 32-bit color, 24-bit depth,
    8-bit stencil and double-buffered.
    */
    GLenum glbInit(GLBapi* pAPI, GLBconfig* pConfig);

    /*
    Loads context-specific APIs into the specified API object.

    This does not bind these APIs to global scope. Use glbBindAPI() for this.
    */
#if defined(GLBIND_WGL)
    GLenum glbInitContextAPI(HDC dc, HGLRC rc, GLBapi* pAPI);
#endif
#if defined(GLBIND_GLX)
    GLenum glbInitContextAPI(Display* dpy, GLXDrawable drawable, GLXContext rc, GLBapi* pAPI);
#endif

    /*
    Loads context-specific APIs from the current context into the specified API object.

    This does not bind these APIs to global scope. Use glbBindAPI() for this.
    */
    GLenum glbInitCurrentContextAPI(GLBapi* pAPI);

    /*
    Uninitializes glbind.

    Each call to glbInit() must be matched up with a call to glbUninit().
    */
    void glbUninit();

    /*
    Binds the function pointers in pAPI to global scope.
    */
    GLenum glbBindAPI(const GLBapi* pAPI);

    /* Platform-specific APIs. */
#if defined(GLBIND_WGL)
/*
Retrieves the rendering context that was created on the first call to glbInit().
*/
    HGLRC glbGetRC();

    /*
    Retrieves the pixel format that's being used by the rendering context that was created on the first call to glbInit().
    */
    int glbGetPixelFormat();

    /*
    Retrieves the pixel format descriptor being used by the rendering context that was created on the first call to glbInit().
    */
    PIXELFORMATDESCRIPTOR* glbGetPFD();
#endif

#if defined(GLBIND_GLX)
    /*
    Retrieves a reference to the global Display that was created with the first call to glbInit(). If the display was set
    in the config object, that Display will be returned.
    */
    Display* glbGetDisplay();

    /*
    Retrieves the rendering context that was created on the first call to glbInit().
    */
    GLXContext glbGetRC();

    /*
    Retrieves the color map that was created on the first call to glbInit().
    */
    Colormap glbGetColormap();

    /*
    Retrieves the framebuffer visual info that was created on the first call to glbInit().
    */
    XVisualInfo* glbGetFBVisualInfo();
#endif

#ifdef __cplusplus
}
#endif

/*
Helper API for checking if an extension is supported based on the current rendering context.

This checks cross-platform extensions, WGL extensions and GLX extensions (in that order).

pAPI is optional. If non-null, this relevant APIs from this object will be used. Otherwise, whatever is bound to global
scope will be used.
*/
GLboolean glbIsExtensionSupported(GLBapi* pAPI, const char* extensionName);

#endif  /* GLBIND_H */


/******************************************************************************
 ******************************************************************************

 IMPLEMENTATION

 ******************************************************************************
 ******************************************************************************/
#ifdef GLBIND_IMPLEMENTATION
#if defined(GLBIND_WGL)
#endif
#if defined(GLBIND_GLX)
#include <unistd.h>
#include <dlfcn.h>
#endif

typedef void* GLBhandle;
typedef void (*GLBproc)(void);

void glbZeroMemory(void* p, size_t sz)
{
    size_t i;
    for (i = 0; i < sz; ++i) {
        ((GLbyte*)p)[i] = 0;
    }
}

#define glbZeroObject(p) glbZeroMemory((p), sizeof(*(p)));

GLBhandle glb_dlopen(const char* filename)
{
#ifdef _WIN32
    return (GLBhandle)LoadLibraryA(filename);
#else
    return (GLBhandle)dlopen(filename, RTLD_NOW);
#endif
}

void glb_dlclose(GLBhandle handle)
{
#ifdef _WIN32
    FreeLibrary((HMODULE)handle);
#else
    dlclose((void*)handle);
#endif
}

GLBproc glb_dlsym(GLBhandle handle, const char* symbol)
{
#ifdef _WIN32
    return (GLBproc)GetProcAddress((HMODULE)handle, symbol);
#else
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#endif
    return (GLBproc)dlsym((void*)handle, symbol);
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#pragma GCC diagnostic pop
#endif
#endif
}


static unsigned int g_glbInitCount = 0;
static GLBhandle g_glbOpenGLSO = NULL;

#if defined(GLBIND_WGL)
HWND  glbind_DummyHWND = 0;
HDC   glbind_DC = 0;
HGLRC glbind_RC = 0;
PIXELFORMATDESCRIPTOR glbind_PFD;
int glbind_PixelFormat;

static LRESULT GLBIND_DummyWindowProcWin32(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    return DefWindowProc(hWnd, msg, wParam, lParam);
}
#endif
#if defined(GLBIND_GLX)
Display* glbind_pDisplay = 0;
Window       glbind_DummyWindow = 0;
GLXContext   glbind_RC = 0;
Colormap     glbind_Colormap = 0;
XVisualInfo* glbind_pFBVisualInfo = 0;
GLboolean    glbind_OwnsDisplay = GL_FALSE;
#endif

#if defined(GLBIND_WGL)
PFNWGLCREATECONTEXTPROC         glbind_wglCreateContext;
PFNWGLDELETECONTEXTPROC         glbind_wglDeleteContext;
PFNWGLGETCURRENTCONTEXTPROC     glbind_wglGetCurrentContext;
PFNWGLGETCURRENTDCPROC          glbind_wglGetCurrentDC;
PFNWGLGETPROCADDRESSPROC        glbind_wglGetProcAddress;
PFNWGLMAKECURRENTPROC           glbind_wglMakeCurrent;
#endif
#if defined(GLBIND_GLX)
PFNGLXCHOOSEVISUALPROC          glbind_glXChooseVisual;
PFNGLXCREATECONTEXTPROC         glbind_glXCreateContext;
PFNGLXDESTROYCONTEXTPROC        glbind_glXDestroyContext;
PFNGLXMAKECURRENTPROC           glbind_glXMakeCurrent;
PFNGLXSWAPBUFFERSPROC           glbind_glXSwapBuffers;
PFNGLXGETCURRENTCONTEXTPROC     glbind_glXGetCurrentContext;
PFNGLXQUERYEXTENSIONSSTRINGPROC glbind_glXQueryExtensionsString;
PFNGLXGETCURRENTDISPLAYPROC     glbind_glXGetCurrentDisplay;
PFNGLXGETCURRENTDRAWABLEPROC    glbind_glXGetCurrentDrawable;
PFNGLXCHOOSEFBCONFIGPROC        glbind_glXChooseFBConfig;
PFNGLXGETVISUALFROMFBCONFIGPROC glbind_glXGetVisualFromFBConfig;
PFNGLXGETPROCADDRESSPROC        glbind_glXGetProcAddress;

static GLBhandle g_glbX11SO = NULL;
typedef Display* (*GLB_PFNXOPENDISPLAYPROC)   (char* pDisplayName);
typedef int      (*GLB_PFNXCLOSEDISPLAYPROC)  (Display* pDisplay);
typedef Window(*GLB_PFNXCREATEWINDOWPROC)  (Display* pDisplay, Window parent, int x, int y, unsigned int width, unsigned int height, unsigned int borderWidth, int depth, unsigned int class, Visual* pVisual, unsigned long valueMask, XSetWindowAttributes* pAttributes);
typedef int      (*GLB_PFNXDESTROYWINDOWPROC) (Display* pDisplay, Window window);
typedef Colormap(*GLB_PFNXCREATECOLORMAPPROC)(Display* pDisplay, Window window, Visual* pVisual, int alloc);
typedef int      (*GLB_PFNXFREECOLORMAPPROC)  (Display* pDisplay, Colormap colormap);
typedef int      (*GLB_PFNXDEFAULTSCREENPROC) (Display* pDisplay);

GLB_PFNXOPENDISPLAYPROC    glbind_XOpenDisplay;
GLB_PFNXCLOSEDISPLAYPROC   glbind_XCloseDisplay;
GLB_PFNXCREATEWINDOWPROC   glbind_XCreateWindow;
GLB_PFNXDESTROYWINDOWPROC  glbind_XDestroyWindow;
GLB_PFNXCREATECOLORMAPPROC glbind_XCreateColormap;
GLB_PFNXFREECOLORMAPPROC   glbind_XFreeColormap;
GLB_PFNXDEFAULTSCREENPROC  glbind_XDefaultScreen;
#endif

GLBproc glbGetProcAddress(const char* name)
{
    GLBproc func = NULL;
#if defined(GLBIND_WGL)
    if (glbind_wglGetProcAddress) {
        func = (GLBproc)glbind_wglGetProcAddress(name);
    }
#endif
#if defined(GLBIND_GLX)
    if (glbind_glXGetProcAddress) {
        func = (GLBproc)glbind_glXGetProcAddress((const GLubyte*)name);
    }
#endif

    if (func == NULL) {
        func = glb_dlsym(g_glbOpenGLSO, name);
    }

    return func;
}

GLenum glbLoadOpenGLSO()
{
    GLenum result;
    size_t i;

    const char* openGLSONames[] = {
#if defined(_WIN32)
        "OpenGL32.dll"
#elif defined(__APPLE__)
#else
        "libGL.so.1",
        "libGL.so"
#endif
    };

    result = GL_INVALID_OPERATION;
    for (i = 0; i < sizeof(openGLSONames) / sizeof(openGLSONames[0]); ++i) {
        GLBhandle handle = glb_dlopen(openGLSONames[i]);
        if (handle != NULL) {
            g_glbOpenGLSO = handle;
            result = GL_NO_ERROR;
            break;
        }
    }

    if (result != GL_NO_ERROR) {
        return result;
    }

    /* Runtime linking for platform-specific libraries. */
    {
#if defined(_WIN32)
        /* Win32 */
#elif defined(__APPLE_)
        /* Apple */
#else
        /* X11 */
        const char* x11SONames[] = {
            "libX11.so",
            "libX11.so.6"
        };

        result = GL_INVALID_OPERATION;
        for (i = 0; i < sizeof(openGLSONames) / sizeof(openGLSONames[0]); ++i) {
            GLBhandle handle = glb_dlopen(x11SONames[i]);
            if (handle != NULL) {
                g_glbX11SO = handle;
                result = GL_NO_ERROR;
                break;
            }
        }
#endif
    }

    if (result != GL_NO_ERROR) {
        glb_dlclose(g_glbOpenGLSO);
        g_glbOpenGLSO = NULL;
    }

    return result;
}

GLBconfig glbConfigInit()
{
    GLBconfig config;
    glbZeroObject(&config);

    return config;
}

GLenum glbInit(GLBapi* pAPI, GLBconfig* pConfig)
{
    GLenum result;

    if (g_glbInitCount == 0) {
        result = glbLoadOpenGLSO();
        if (result != GL_NO_ERROR) {
            return result;
        }

        /* Here is where we need to initialize some core APIs. We need these to initialize dummy objects and whatnot. */
#if defined(GLBIND_WGL)
        glbind_wglCreateContext = (PFNWGLCREATECONTEXTPROC)glb_dlsym(g_glbOpenGLSO, "wglCreateContext");
        glbind_wglDeleteContext = (PFNWGLDELETECONTEXTPROC)glb_dlsym(g_glbOpenGLSO, "wglDeleteContext");
        glbind_wglGetCurrentContext = (PFNWGLGETCURRENTCONTEXTPROC)glb_dlsym(g_glbOpenGLSO, "wglGetCurrentContext");
        glbind_wglGetCurrentDC = (PFNWGLGETCURRENTDCPROC)glb_dlsym(g_glbOpenGLSO, "wglGetCurrentDC");
        glbind_wglGetProcAddress = (PFNWGLGETPROCADDRESSPROC)glb_dlsym(g_glbOpenGLSO, "wglGetProcAddress");
        glbind_wglMakeCurrent = (PFNWGLMAKECURRENTPROC)glb_dlsym(g_glbOpenGLSO, "wglMakeCurrent");

        if (glbind_wglCreateContext == NULL ||
            glbind_wglDeleteContext == NULL ||
            glbind_wglGetCurrentContext == NULL ||
            glbind_wglGetCurrentDC == NULL ||
            glbind_wglGetProcAddress == NULL ||
            glbind_wglMakeCurrent == NULL) {
            glb_dlclose(g_glbOpenGLSO);
            g_glbOpenGLSO = NULL;
            return GL_INVALID_OPERATION;
        }
#endif
#if defined(GLBIND_GLX)
        glbind_glXChooseVisual = (PFNGLXCHOOSEVISUALPROC)glb_dlsym(g_glbOpenGLSO, "glXChooseVisual");
        glbind_glXCreateContext = (PFNGLXCREATECONTEXTPROC)glb_dlsym(g_glbOpenGLSO, "glXCreateContext");
        glbind_glXDestroyContext = (PFNGLXDESTROYCONTEXTPROC)glb_dlsym(g_glbOpenGLSO, "glXDestroyContext");
        glbind_glXMakeCurrent = (PFNGLXMAKECURRENTPROC)glb_dlsym(g_glbOpenGLSO, "glXMakeCurrent");
        glbind_glXSwapBuffers = (PFNGLXSWAPBUFFERSPROC)glb_dlsym(g_glbOpenGLSO, "glXSwapBuffers");
        glbind_glXGetCurrentContext = (PFNGLXGETCURRENTCONTEXTPROC)glb_dlsym(g_glbOpenGLSO, "glXGetCurrentContext");
        glbind_glXQueryExtensionsString = (PFNGLXQUERYEXTENSIONSSTRINGPROC)glb_dlsym(g_glbOpenGLSO, "glXQueryExtensionsString");
        glbind_glXGetCurrentDisplay = (PFNGLXGETCURRENTDISPLAYPROC)glb_dlsym(g_glbOpenGLSO, "glXGetCurrentDisplay");
        glbind_glXGetCurrentDrawable = (PFNGLXGETCURRENTDRAWABLEPROC)glb_dlsym(g_glbOpenGLSO, "glXGetCurrentDrawable");
        glbind_glXChooseFBConfig = (PFNGLXCHOOSEFBCONFIGPROC)glb_dlsym(g_glbOpenGLSO, "glXChooseFBConfig");
        glbind_glXGetVisualFromFBConfig = (PFNGLXGETVISUALFROMFBCONFIGPROC)glb_dlsym(g_glbOpenGLSO, "glXGetVisualFromFBConfig");
        glbind_glXGetProcAddress = (PFNGLXGETPROCADDRESSPROC)glb_dlsym(g_glbOpenGLSO, "glXGetProcAddress");

        if (glbind_glXChooseVisual == NULL ||
            glbind_glXCreateContext == NULL ||
            glbind_glXDestroyContext == NULL ||
            glbind_glXMakeCurrent == NULL ||
            glbind_glXSwapBuffers == NULL ||
            glbind_glXGetCurrentContext == NULL ||
            glbind_glXQueryExtensionsString == NULL ||
            glbind_glXGetCurrentDisplay == NULL ||
            glbind_glXGetCurrentDrawable == NULL ||
            glbind_glXChooseFBConfig == NULL ||
            glbind_glXGetVisualFromFBConfig == NULL ||
            glbind_glXGetProcAddress == NULL) {
            glb_dlclose(g_glbOpenGLSO);
            g_glbOpenGLSO = NULL;
            return GL_INVALID_OPERATION;
        }

        glbind_XOpenDisplay = (GLB_PFNXOPENDISPLAYPROC)glb_dlsym(g_glbX11SO, "XOpenDisplay");
        glbind_XCloseDisplay = (GLB_PFNXCLOSEDISPLAYPROC)glb_dlsym(g_glbX11SO, "XCloseDisplay");
        glbind_XCreateWindow = (GLB_PFNXCREATEWINDOWPROC)glb_dlsym(g_glbX11SO, "XCreateWindow");
        glbind_XDestroyWindow = (GLB_PFNXDESTROYWINDOWPROC)glb_dlsym(g_glbX11SO, "XDestroyWindow");
        glbind_XCreateColormap = (GLB_PFNXCREATECOLORMAPPROC)glb_dlsym(g_glbX11SO, "XCreateColormap");
        glbind_XFreeColormap = (GLB_PFNXFREECOLORMAPPROC)glb_dlsym(g_glbX11SO, "XFreeColormap");
        glbind_XDefaultScreen = (GLB_PFNXDEFAULTSCREENPROC)glb_dlsym(g_glbX11SO, "XDefaultScreen");

        if (glbind_XOpenDisplay == NULL ||
            glbind_XCloseDisplay == NULL ||
            glbind_XCreateWindow == NULL ||
            glbind_XDestroyWindow == NULL ||
            glbind_XCreateColormap == NULL ||
            glbind_XFreeColormap == NULL ||
            glbind_XDefaultScreen == NULL) {
            glb_dlclose(g_glbX11SO);
            g_glbX11SO = NULL;
            glb_dlclose(g_glbOpenGLSO);
            g_glbOpenGLSO = NULL;
            return GL_INVALID_OPERATION;
        }
#endif

        /* Here is where we need to initialize our dummy objects so we can get a context and retrieve some API pointers. */
#if defined(GLBIND_WGL)
        {
            HWND hWnd = NULL;

            if (pConfig != NULL) {
                hWnd = pConfig->hWnd;
            }

            /* Create a dummy window if we haven't passed in an explicit window. */
            if (hWnd == NULL) {
                WNDCLASSEXW dummyWC;
                memset(&dummyWC, 0, sizeof(dummyWC));
                dummyWC.cbSize = sizeof(dummyWC);
                dummyWC.lpfnWndProc = (WNDPROC)GLBIND_DummyWindowProcWin32;
                dummyWC.lpszClassName = L"GLBIND_DummyHWND";
                dummyWC.style = CS_OWNDC;
                if (!RegisterClassExW(&dummyWC)) {
                    glb_dlclose(g_glbOpenGLSO);
                    g_glbOpenGLSO = NULL;
                    return GL_INVALID_OPERATION;
                }

                hWnd = CreateWindowExW(0, L"GLBIND_DummyHWND", L"", 0, 0, 0, 0, 0, NULL, NULL, GetModuleHandle(NULL), NULL);
                glbind_DummyHWND = hWnd;
            }

            glbind_DC = GetDC(hWnd);

            memset(&glbind_PFD, 0, sizeof(glbind_PFD));
            glbind_PFD.nSize = sizeof(glbind_PFD);
            glbind_PFD.nVersion = 1;
            glbind_PFD.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | ((pConfig == NULL || pConfig->singleBuffered == GL_FALSE) ? PFD_DOUBLEBUFFER : 0);
            glbind_PFD.iPixelType = PFD_TYPE_RGBA;
            glbind_PFD.cStencilBits = 8;
            glbind_PFD.cDepthBits = 24;
            glbind_PFD.cColorBits = 32;
            glbind_PixelFormat = ChoosePixelFormat(glbind_DC, &glbind_PFD);
            if (glbind_PixelFormat == 0) {
                DestroyWindow(hWnd);
                glb_dlclose(g_glbOpenGLSO);
                g_glbOpenGLSO = NULL;
                return GL_INVALID_OPERATION;
            }

            if (!SetPixelFormat(glbind_DC, glbind_PixelFormat, &glbind_PFD)) {
                DestroyWindow(hWnd);
                glb_dlclose(g_glbOpenGLSO);
                g_glbOpenGLSO = NULL;
                return GL_INVALID_OPERATION;
            }

            glbind_RC = glbind_wglCreateContext(glbind_DC);
            if (glbind_RC == NULL) {
                DestroyWindow(hWnd);
                glb_dlclose(g_glbOpenGLSO);
                g_glbOpenGLSO = NULL;
                return GL_INVALID_OPERATION;
            }

            glbind_wglMakeCurrent(glbind_DC, glbind_RC);
        }
#endif

#if defined(GLBIND_GLX)
        {
            static int attribs[] = {
                GLX_RGBA,
                GLX_RED_SIZE,      8,
                GLX_GREEN_SIZE,    8,
                GLX_BLUE_SIZE,     8,
                GLX_ALPHA_SIZE,    8,
                GLX_DEPTH_SIZE,    24,
                GLX_STENCIL_SIZE,  8,
                GLX_DOUBLEBUFFER,
                None, None
            };

            if (pConfig != NULL) {
                if (!pConfig->singleBuffered) {
                    attribs[13] = None;
                }
            }

            glbind_OwnsDisplay = GL_TRUE;
            glbind_pDisplay = glbind_XOpenDisplay(NULL);
            if (glbind_pDisplay == NULL) {
                glb_dlclose(g_glbOpenGLSO);
                g_glbOpenGLSO = NULL;
                return GL_INVALID_OPERATION;
            }

            glbind_pFBVisualInfo = glbind_glXChooseVisual(glbind_pDisplay, DefaultScreen(glbind_pDisplay), attribs);
            if (glbind_pFBVisualInfo == NULL) {
                glb_dlclose(g_glbOpenGLSO);
                g_glbOpenGLSO = NULL;
                return GL_INVALID_OPERATION;
            }

            glbind_Colormap = glbind_XCreateColormap(glbind_pDisplay, RootWindow(glbind_pDisplay, glbind_pFBVisualInfo->screen), glbind_pFBVisualInfo->visual, AllocNone);

            glbind_RC = glbind_glXCreateContext(glbind_pDisplay, glbind_pFBVisualInfo, NULL, GL_TRUE);
            if (glbind_RC == NULL) {
                glb_dlclose(g_glbOpenGLSO);
                g_glbOpenGLSO = NULL;
                return GL_INVALID_OPERATION;
            }

            /* We cannot call any OpenGL APIs until a context is made current. In order to make a context current we will need a window. We just use a dummy window for this. */
            XSetWindowAttributes wa;
            wa.colormap = glbind_Colormap;
            wa.border_pixel = 0;

            /* Window's can not have dimensions of 0 in X11. We stick with dimensions of 1. */
            glbind_DummyWindow = glbind_XCreateWindow(glbind_pDisplay, RootWindow(glbind_pDisplay, glbind_pFBVisualInfo->screen), 0, 0, 1, 1, 0, glbind_pFBVisualInfo->depth, InputOutput, glbind_pFBVisualInfo->visual, CWBorderPixel | CWColormap, &wa);
            if (glbind_DummyWindow == 0) {
                glb_dlclose(g_glbOpenGLSO);
                g_glbOpenGLSO = NULL;
                return GL_INVALID_OPERATION;
            }

            glbind_glXMakeCurrent(glbind_pDisplay, glbind_DummyWindow, glbind_RC);
        }
#endif
    }

    if (pAPI != NULL) {
#if defined(GLBIND_WGL)
        result = glbInitContextAPI(glbind_DC, glbind_RC, pAPI);
#endif
#if defined(GLBIND_GLX)
        result = glbInitContextAPI(glbind_pDisplay, glbind_DummyWindow, glbind_RC, pAPI);
#endif
        if (result == GL_NO_ERROR) {
            if (g_glbInitCount == 0) {
                result = glbBindAPI(pAPI);
            }
        }
    }
    else {
        GLBapi tempAPI;
#if defined(GLBIND_WGL)
        result = glbInitContextAPI(glbind_DC, glbind_RC, &tempAPI);
#endif
#if defined(GLBIND_GLX)
        result = glbInitContextAPI(glbind_pDisplay, glbind_DummyWindow, glbind_RC, &tempAPI);
#endif
        if (result == GL_NO_ERROR) {
            if (g_glbInitCount == 0) {
                result = glbBindAPI(pAPI);
            }
        }
    }

    /* If at this point we have an error we need to uninitialize the global objects (if this is the initial initialization) and return. */
    if (result != GL_NO_ERROR) {
        if (g_glbInitCount == 0) {
#if defined(GLBIND_WGL)
            if (glbind_RC) {
                glbind_wglDeleteContext(glbind_RC);
                glbind_RC = 0;
            }
            if (glbind_DummyHWND) {
                DestroyWindow(glbind_DummyHWND);
                glbind_DummyHWND = 0;
            }
            glbind_DC = 0;
#endif
#if defined(GLBIND_GLX)
            if (glbind_RC) {
                glbind_glXDestroyContext(glbind_pDisplay, glbind_RC);
                glbind_RC = 0;
            }
            if (glbind_DummyWindow) {
                glbind_XDestroyWindow(glbind_pDisplay, glbind_DummyWindow);
                glbind_DummyWindow = 0;
            }
            if (glbind_pDisplay && glbind_OwnsDisplay) {
                glbind_XCloseDisplay(glbind_pDisplay);
                glbind_pDisplay = 0;
                glbind_OwnsDisplay = GL_FALSE;
            }
#endif

            glb_dlclose(g_glbOpenGLSO);
            g_glbOpenGLSO = NULL;
        }

        return result;
    }

    g_glbInitCount += 1;    /* <-- Only increment the init counter on success. */
    return GL_NO_ERROR;
}

#if defined(GLBIND_WGL)
GLenum glbInitContextAPI(HDC dc, HGLRC rc, GLBapi* pAPI)
{
    GLenum result;
    HDC dcPrev;
    HGLRC rcPrev;

    dcPrev = glbind_wglGetCurrentDC();
    rcPrev = glbind_wglGetCurrentContext();

    if (dcPrev != dc && rcPrev != rc) {
        glbind_wglMakeCurrent(dc, rc);
    }

    result = glbInitCurrentContextAPI(pAPI);

    if (dcPrev != dc && rcPrev != rc) {
        glbind_wglMakeCurrent(dcPrev, rcPrev);
    }

    return result;
}
#endif
#if defined(GLBIND_GLX)
GLenum glbInitContextAPI(Display* dpy, GLXDrawable drawable, GLXContext rc, GLBapi* pAPI)
{
    GLenum result;
    GLXContext rcPrev = 0;
    GLXDrawable drawablePrev = 0;
    Display* dpyPrev = NULL;

    if (glbind_glXGetCurrentContext && glbind_glXGetCurrentDrawable && glbind_glXGetCurrentDisplay) {
        rcPrev = glbind_glXGetCurrentContext();
        drawablePrev = glbind_glXGetCurrentDrawable();
        dpyPrev = glbind_glXGetCurrentDisplay();
    }

    glbind_glXMakeCurrent(dpy, drawable, rc);
    result = glbInitCurrentContextAPI(pAPI);
    glbind_glXMakeCurrent(dpyPrev, drawablePrev, rcPrev);

    return result;
}
#endif

GLenum glbInitCurrentContextAPI(GLBapi* pAPI)
{
    if (pAPI == NULL) {
        return GL_INVALID_OPERATION;
    }

    glbZeroObject(pAPI);

    pAPI->glCullFace = (PFNGLCULLFACEPROC)glbGetProcAddress("glCullFace");
    pAPI->glFrontFace = (PFNGLFRONTFACEPROC)glbGetProcAddress("glFrontFace");
    pAPI->glHint = (PFNGLHINTPROC)glbGetProcAddress("glHint");
    pAPI->glLineWidth = (PFNGLLINEWIDTHPROC)glbGetProcAddress("glLineWidth");
    pAPI->glPointSize = (PFNGLPOINTSIZEPROC)glbGetProcAddress("glPointSize");
    pAPI->glPolygonMode = (PFNGLPOLYGONMODEPROC)glbGetProcAddress("glPolygonMode");
    pAPI->glScissor = (PFNGLSCISSORPROC)glbGetProcAddress("glScissor");
    pAPI->glTexParameterf = (PFNGLTEXPARAMETERFPROC)glbGetProcAddress("glTexParameterf");
    pAPI->glTexParameterfv = (PFNGLTEXPARAMETERFVPROC)glbGetProcAddress("glTexParameterfv");
    pAPI->glTexParameteri = (PFNGLTEXPARAMETERIPROC)glbGetProcAddress("glTexParameteri");
    pAPI->glTexParameteriv = (PFNGLTEXPARAMETERIVPROC)glbGetProcAddress("glTexParameteriv");
    pAPI->glTexImage1D = (PFNGLTEXIMAGE1DPROC)glbGetProcAddress("glTexImage1D");
    pAPI->glTexImage2D = (PFNGLTEXIMAGE2DPROC)glbGetProcAddress("glTexImage2D");
    pAPI->glDrawBuffer = (PFNGLDRAWBUFFERPROC)glbGetProcAddress("glDrawBuffer");
    pAPI->glClear = (PFNGLCLEARPROC)glbGetProcAddress("glClear");
    pAPI->glClearColor = (PFNGLCLEARCOLORPROC)glbGetProcAddress("glClearColor");
    pAPI->glClearStencil = (PFNGLCLEARSTENCILPROC)glbGetProcAddress("glClearStencil");
    pAPI->glClearDepth = (PFNGLCLEARDEPTHPROC)glbGetProcAddress("glClearDepth");
    pAPI->glStencilMask = (PFNGLSTENCILMASKPROC)glbGetProcAddress("glStencilMask");
    pAPI->glColorMask = (PFNGLCOLORMASKPROC)glbGetProcAddress("glColorMask");
    pAPI->glDepthMask = (PFNGLDEPTHMASKPROC)glbGetProcAddress("glDepthMask");
    pAPI->glDisable = (PFNGLDISABLEPROC)glbGetProcAddress("glDisable");
    pAPI->glEnable = (PFNGLENABLEPROC)glbGetProcAddress("glEnable");
    pAPI->glFinish = (PFNGLFINISHPROC)glbGetProcAddress("glFinish");
    pAPI->glFlush = (PFNGLFLUSHPROC)glbGetProcAddress("glFlush");
    pAPI->glBlendFunc = (PFNGLBLENDFUNCPROC)glbGetProcAddress("glBlendFunc");
    pAPI->glLogicOp = (PFNGLLOGICOPPROC)glbGetProcAddress("glLogicOp");
    pAPI->glStencilFunc = (PFNGLSTENCILFUNCPROC)glbGetProcAddress("glStencilFunc");
    pAPI->glStencilOp = (PFNGLSTENCILOPPROC)glbGetProcAddress("glStencilOp");
    pAPI->glDepthFunc = (PFNGLDEPTHFUNCPROC)glbGetProcAddress("glDepthFunc");
    pAPI->glPixelStoref = (PFNGLPIXELSTOREFPROC)glbGetProcAddress("glPixelStoref");
    pAPI->glPixelStorei = (PFNGLPIXELSTOREIPROC)glbGetProcAddress("glPixelStorei");
    pAPI->glReadBuffer = (PFNGLREADBUFFERPROC)glbGetProcAddress("glReadBuffer");
    pAPI->glReadPixels = (PFNGLREADPIXELSPROC)glbGetProcAddress("glReadPixels");
    pAPI->glGetBooleanv = (PFNGLGETBOOLEANVPROC)glbGetProcAddress("glGetBooleanv");
    pAPI->glGetDoublev = (PFNGLGETDOUBLEVPROC)glbGetProcAddress("glGetDoublev");
    pAPI->glGetError = (PFNGLGETERRORPROC)glbGetProcAddress("glGetError");
    pAPI->glGetFloatv = (PFNGLGETFLOATVPROC)glbGetProcAddress("glGetFloatv");
    pAPI->glGetIntegerv = (PFNGLGETINTEGERVPROC)glbGetProcAddress("glGetIntegerv");
    pAPI->glGetString = (PFNGLGETSTRINGPROC)glbGetProcAddress("glGetString");
    pAPI->glGetTexImage = (PFNGLGETTEXIMAGEPROC)glbGetProcAddress("glGetTexImage");
    pAPI->glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC)glbGetProcAddress("glGetTexParameterfv");
    pAPI->glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC)glbGetProcAddress("glGetTexParameteriv");
    pAPI->glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC)glbGetProcAddress("glGetTexLevelParameterfv");
    pAPI->glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC)glbGetProcAddress("glGetTexLevelParameteriv");
    pAPI->glIsEnabled = (PFNGLISENABLEDPROC)glbGetProcAddress("glIsEnabled");
    pAPI->glDepthRange = (PFNGLDEPTHRANGEPROC)glbGetProcAddress("glDepthRange");
    pAPI->glViewport = (PFNGLVIEWPORTPROC)glbGetProcAddress("glViewport");
    pAPI->glNewList = (PFNGLNEWLISTPROC)glbGetProcAddress("glNewList");
    pAPI->glEndList = (PFNGLENDLISTPROC)glbGetProcAddress("glEndList");
    pAPI->glCallList = (PFNGLCALLLISTPROC)glbGetProcAddress("glCallList");
    pAPI->glCallLists = (PFNGLCALLLISTSPROC)glbGetProcAddress("glCallLists");
    pAPI->glDeleteLists = (PFNGLDELETELISTSPROC)glbGetProcAddress("glDeleteLists");
    pAPI->glGenLists = (PFNGLGENLISTSPROC)glbGetProcAddress("glGenLists");
    pAPI->glListBase = (PFNGLLISTBASEPROC)glbGetProcAddress("glListBase");
    pAPI->glBegin = (PFNGLBEGINPROC)glbGetProcAddress("glBegin");
    pAPI->glBitmap = (PFNGLBITMAPPROC)glbGetProcAddress("glBitmap");
    pAPI->glColor3b = (PFNGLCOLOR3BPROC)glbGetProcAddress("glColor3b");
    pAPI->glColor3bv = (PFNGLCOLOR3BVPROC)glbGetProcAddress("glColor3bv");
    pAPI->glColor3d = (PFNGLCOLOR3DPROC)glbGetProcAddress("glColor3d");
    pAPI->glColor3dv = (PFNGLCOLOR3DVPROC)glbGetProcAddress("glColor3dv");
    pAPI->glColor3f = (PFNGLCOLOR3FPROC)glbGetProcAddress("glColor3f");
    pAPI->glColor3fv = (PFNGLCOLOR3FVPROC)glbGetProcAddress("glColor3fv");
    pAPI->glColor3i = (PFNGLCOLOR3IPROC)glbGetProcAddress("glColor3i");
    pAPI->glColor3iv = (PFNGLCOLOR3IVPROC)glbGetProcAddress("glColor3iv");
    pAPI->glColor3s = (PFNGLCOLOR3SPROC)glbGetProcAddress("glColor3s");
    pAPI->glColor3sv = (PFNGLCOLOR3SVPROC)glbGetProcAddress("glColor3sv");
    pAPI->glColor3ub = (PFNGLCOLOR3UBPROC)glbGetProcAddress("glColor3ub");
    pAPI->glColor3ubv = (PFNGLCOLOR3UBVPROC)glbGetProcAddress("glColor3ubv");
    pAPI->glColor3ui = (PFNGLCOLOR3UIPROC)glbGetProcAddress("glColor3ui");
    pAPI->glColor3uiv = (PFNGLCOLOR3UIVPROC)glbGetProcAddress("glColor3uiv");
    pAPI->glColor3us = (PFNGLCOLOR3USPROC)glbGetProcAddress("glColor3us");
    pAPI->glColor3usv = (PFNGLCOLOR3USVPROC)glbGetProcAddress("glColor3usv");
    pAPI->glColor4b = (PFNGLCOLOR4BPROC)glbGetProcAddress("glColor4b");
    pAPI->glColor4bv = (PFNGLCOLOR4BVPROC)glbGetProcAddress("glColor4bv");
    pAPI->glColor4d = (PFNGLCOLOR4DPROC)glbGetProcAddress("glColor4d");
    pAPI->glColor4dv = (PFNGLCOLOR4DVPROC)glbGetProcAddress("glColor4dv");
    pAPI->glColor4f = (PFNGLCOLOR4FPROC)glbGetProcAddress("glColor4f");
    pAPI->glColor4fv = (PFNGLCOLOR4FVPROC)glbGetProcAddress("glColor4fv");
    pAPI->glColor4i = (PFNGLCOLOR4IPROC)glbGetProcAddress("glColor4i");
    pAPI->glColor4iv = (PFNGLCOLOR4IVPROC)glbGetProcAddress("glColor4iv");
    pAPI->glColor4s = (PFNGLCOLOR4SPROC)glbGetProcAddress("glColor4s");
    pAPI->glColor4sv = (PFNGLCOLOR4SVPROC)glbGetProcAddress("glColor4sv");
    pAPI->glColor4ub = (PFNGLCOLOR4UBPROC)glbGetProcAddress("glColor4ub");
    pAPI->glColor4ubv = (PFNGLCOLOR4UBVPROC)glbGetProcAddress("glColor4ubv");
    pAPI->glColor4ui = (PFNGLCOLOR4UIPROC)glbGetProcAddress("glColor4ui");
    pAPI->glColor4uiv = (PFNGLCOLOR4UIVPROC)glbGetProcAddress("glColor4uiv");
    pAPI->glColor4us = (PFNGLCOLOR4USPROC)glbGetProcAddress("glColor4us");
    pAPI->glColor4usv = (PFNGLCOLOR4USVPROC)glbGetProcAddress("glColor4usv");
    pAPI->glEdgeFlag = (PFNGLEDGEFLAGPROC)glbGetProcAddress("glEdgeFlag");
    pAPI->glEdgeFlagv = (PFNGLEDGEFLAGVPROC)glbGetProcAddress("glEdgeFlagv");
    pAPI->glEnd = (PFNGLENDPROC)glbGetProcAddress("glEnd");
    pAPI->glIndexd = (PFNGLINDEXDPROC)glbGetProcAddress("glIndexd");
    pAPI->glIndexdv = (PFNGLINDEXDVPROC)glbGetProcAddress("glIndexdv");
    pAPI->glIndexf = (PFNGLINDEXFPROC)glbGetProcAddress("glIndexf");
    pAPI->glIndexfv = (PFNGLINDEXFVPROC)glbGetProcAddress("glIndexfv");
    pAPI->glIndexi = (PFNGLINDEXIPROC)glbGetProcAddress("glIndexi");
    pAPI->glIndexiv = (PFNGLINDEXIVPROC)glbGetProcAddress("glIndexiv");
    pAPI->glIndexs = (PFNGLINDEXSPROC)glbGetProcAddress("glIndexs");
    pAPI->glIndexsv = (PFNGLINDEXSVPROC)glbGetProcAddress("glIndexsv");
    pAPI->glNormal3b = (PFNGLNORMAL3BPROC)glbGetProcAddress("glNormal3b");
    pAPI->glNormal3bv = (PFNGLNORMAL3BVPROC)glbGetProcAddress("glNormal3bv");
    pAPI->glNormal3d = (PFNGLNORMAL3DPROC)glbGetProcAddress("glNormal3d");
    pAPI->glNormal3dv = (PFNGLNORMAL3DVPROC)glbGetProcAddress("glNormal3dv");
    pAPI->glNormal3f = (PFNGLNORMAL3FPROC)glbGetProcAddress("glNormal3f");
    pAPI->glNormal3fv = (PFNGLNORMAL3FVPROC)glbGetProcAddress("glNormal3fv");
    pAPI->glNormal3i = (PFNGLNORMAL3IPROC)glbGetProcAddress("glNormal3i");
    pAPI->glNormal3iv = (PFNGLNORMAL3IVPROC)glbGetProcAddress("glNormal3iv");
    pAPI->glNormal3s = (PFNGLNORMAL3SPROC)glbGetProcAddress("glNormal3s");
    pAPI->glNormal3sv = (PFNGLNORMAL3SVPROC)glbGetProcAddress("glNormal3sv");
    pAPI->glRasterPos2d = (PFNGLRASTERPOS2DPROC)glbGetProcAddress("glRasterPos2d");
    pAPI->glRasterPos2dv = (PFNGLRASTERPOS2DVPROC)glbGetProcAddress("glRasterPos2dv");
    pAPI->glRasterPos2f = (PFNGLRASTERPOS2FPROC)glbGetProcAddress("glRasterPos2f");
    pAPI->glRasterPos2fv = (PFNGLRASTERPOS2FVPROC)glbGetProcAddress("glRasterPos2fv");
    pAPI->glRasterPos2i = (PFNGLRASTERPOS2IPROC)glbGetProcAddress("glRasterPos2i");
    pAPI->glRasterPos2iv = (PFNGLRASTERPOS2IVPROC)glbGetProcAddress("glRasterPos2iv");
    pAPI->glRasterPos2s = (PFNGLRASTERPOS2SPROC)glbGetProcAddress("glRasterPos2s");
    pAPI->glRasterPos2sv = (PFNGLRASTERPOS2SVPROC)glbGetProcAddress("glRasterPos2sv");
    pAPI->glRasterPos3d = (PFNGLRASTERPOS3DPROC)glbGetProcAddress("glRasterPos3d");
    pAPI->glRasterPos3dv = (PFNGLRASTERPOS3DVPROC)glbGetProcAddress("glRasterPos3dv");
    pAPI->glRasterPos3f = (PFNGLRASTERPOS3FPROC)glbGetProcAddress("glRasterPos3f");
    pAPI->glRasterPos3fv = (PFNGLRASTERPOS3FVPROC)glbGetProcAddress("glRasterPos3fv");
    pAPI->glRasterPos3i = (PFNGLRASTERPOS3IPROC)glbGetProcAddress("glRasterPos3i");
    pAPI->glRasterPos3iv = (PFNGLRASTERPOS3IVPROC)glbGetProcAddress("glRasterPos3iv");
    pAPI->glRasterPos3s = (PFNGLRASTERPOS3SPROC)glbGetProcAddress("glRasterPos3s");
    pAPI->glRasterPos3sv = (PFNGLRASTERPOS3SVPROC)glbGetProcAddress("glRasterPos3sv");
    pAPI->glRasterPos4d = (PFNGLRASTERPOS4DPROC)glbGetProcAddress("glRasterPos4d");
    pAPI->glRasterPos4dv = (PFNGLRASTERPOS4DVPROC)glbGetProcAddress("glRasterPos4dv");
    pAPI->glRasterPos4f = (PFNGLRASTERPOS4FPROC)glbGetProcAddress("glRasterPos4f");
    pAPI->glRasterPos4fv = (PFNGLRASTERPOS4FVPROC)glbGetProcAddress("glRasterPos4fv");
    pAPI->glRasterPos4i = (PFNGLRASTERPOS4IPROC)glbGetProcAddress("glRasterPos4i");
    pAPI->glRasterPos4iv = (PFNGLRASTERPOS4IVPROC)glbGetProcAddress("glRasterPos4iv");
    pAPI->glRasterPos4s = (PFNGLRASTERPOS4SPROC)glbGetProcAddress("glRasterPos4s");
    pAPI->glRasterPos4sv = (PFNGLRASTERPOS4SVPROC)glbGetProcAddress("glRasterPos4sv");
    pAPI->glRectd = (PFNGLRECTDPROC)glbGetProcAddress("glRectd");
    pAPI->glRectdv = (PFNGLRECTDVPROC)glbGetProcAddress("glRectdv");
    pAPI->glRectf = (PFNGLRECTFPROC)glbGetProcAddress("glRectf");
    pAPI->glRectfv = (PFNGLRECTFVPROC)glbGetProcAddress("glRectfv");
    pAPI->glRecti = (PFNGLRECTIPROC)glbGetProcAddress("glRecti");
    pAPI->glRectiv = (PFNGLRECTIVPROC)glbGetProcAddress("glRectiv");
    pAPI->glRects = (PFNGLRECTSPROC)glbGetProcAddress("glRects");
    pAPI->glRectsv = (PFNGLRECTSVPROC)glbGetProcAddress("glRectsv");
    pAPI->glTexCoord1d = (PFNGLTEXCOORD1DPROC)glbGetProcAddress("glTexCoord1d");
    pAPI->glTexCoord1dv = (PFNGLTEXCOORD1DVPROC)glbGetProcAddress("glTexCoord1dv");
    pAPI->glTexCoord1f = (PFNGLTEXCOORD1FPROC)glbGetProcAddress("glTexCoord1f");
    pAPI->glTexCoord1fv = (PFNGLTEXCOORD1FVPROC)glbGetProcAddress("glTexCoord1fv");
    pAPI->glTexCoord1i = (PFNGLTEXCOORD1IPROC)glbGetProcAddress("glTexCoord1i");
    pAPI->glTexCoord1iv = (PFNGLTEXCOORD1IVPROC)glbGetProcAddress("glTexCoord1iv");
    pAPI->glTexCoord1s = (PFNGLTEXCOORD1SPROC)glbGetProcAddress("glTexCoord1s");
    pAPI->glTexCoord1sv = (PFNGLTEXCOORD1SVPROC)glbGetProcAddress("glTexCoord1sv");
    pAPI->glTexCoord2d = (PFNGLTEXCOORD2DPROC)glbGetProcAddress("glTexCoord2d");
    pAPI->glTexCoord2dv = (PFNGLTEXCOORD2DVPROC)glbGetProcAddress("glTexCoord2dv");
    pAPI->glTexCoord2f = (PFNGLTEXCOORD2FPROC)glbGetProcAddress("glTexCoord2f");
    pAPI->glTexCoord2fv = (PFNGLTEXCOORD2FVPROC)glbGetProcAddress("glTexCoord2fv");
    pAPI->glTexCoord2i = (PFNGLTEXCOORD2IPROC)glbGetProcAddress("glTexCoord2i");
    pAPI->glTexCoord2iv = (PFNGLTEXCOORD2IVPROC)glbGetProcAddress("glTexCoord2iv");
    pAPI->glTexCoord2s = (PFNGLTEXCOORD2SPROC)glbGetProcAddress("glTexCoord2s");
    pAPI->glTexCoord2sv = (PFNGLTEXCOORD2SVPROC)glbGetProcAddress("glTexCoord2sv");
    pAPI->glTexCoord3d = (PFNGLTEXCOORD3DPROC)glbGetProcAddress("glTexCoord3d");
    pAPI->glTexCoord3dv = (PFNGLTEXCOORD3DVPROC)glbGetProcAddress("glTexCoord3dv");
    pAPI->glTexCoord3f = (PFNGLTEXCOORD3FPROC)glbGetProcAddress("glTexCoord3f");
    pAPI->glTexCoord3fv = (PFNGLTEXCOORD3FVPROC)glbGetProcAddress("glTexCoord3fv");
    pAPI->glTexCoord3i = (PFNGLTEXCOORD3IPROC)glbGetProcAddress("glTexCoord3i");
    pAPI->glTexCoord3iv = (PFNGLTEXCOORD3IVPROC)glbGetProcAddress("glTexCoord3iv");
    pAPI->glTexCoord3s = (PFNGLTEXCOORD3SPROC)glbGetProcAddress("glTexCoord3s");
    pAPI->glTexCoord3sv = (PFNGLTEXCOORD3SVPROC)glbGetProcAddress("glTexCoord3sv");
    pAPI->glTexCoord4d = (PFNGLTEXCOORD4DPROC)glbGetProcAddress("glTexCoord4d");
    pAPI->glTexCoord4dv = (PFNGLTEXCOORD4DVPROC)glbGetProcAddress("glTexCoord4dv");
    pAPI->glTexCoord4f = (PFNGLTEXCOORD4FPROC)glbGetProcAddress("glTexCoord4f");
    pAPI->glTexCoord4fv = (PFNGLTEXCOORD4FVPROC)glbGetProcAddress("glTexCoord4fv");
    pAPI->glTexCoord4i = (PFNGLTEXCOORD4IPROC)glbGetProcAddress("glTexCoord4i");
    pAPI->glTexCoord4iv = (PFNGLTEXCOORD4IVPROC)glbGetProcAddress("glTexCoord4iv");
    pAPI->glTexCoord4s = (PFNGLTEXCOORD4SPROC)glbGetProcAddress("glTexCoord4s");
    pAPI->glTexCoord4sv = (PFNGLTEXCOORD4SVPROC)glbGetProcAddress("glTexCoord4sv");
    pAPI->glVertex2d = (PFNGLVERTEX2DPROC)glbGetProcAddress("glVertex2d");
    pAPI->glVertex2dv = (PFNGLVERTEX2DVPROC)glbGetProcAddress("glVertex2dv");
    pAPI->glVertex2f = (PFNGLVERTEX2FPROC)glbGetProcAddress("glVertex2f");
    pAPI->glVertex2fv = (PFNGLVERTEX2FVPROC)glbGetProcAddress("glVertex2fv");
    pAPI->glVertex2i = (PFNGLVERTEX2IPROC)glbGetProcAddress("glVertex2i");
    pAPI->glVertex2iv = (PFNGLVERTEX2IVPROC)glbGetProcAddress("glVertex2iv");
    pAPI->glVertex2s = (PFNGLVERTEX2SPROC)glbGetProcAddress("glVertex2s");
    pAPI->glVertex2sv = (PFNGLVERTEX2SVPROC)glbGetProcAddress("glVertex2sv");
    pAPI->glVertex3d = (PFNGLVERTEX3DPROC)glbGetProcAddress("glVertex3d");
    pAPI->glVertex3dv = (PFNGLVERTEX3DVPROC)glbGetProcAddress("glVertex3dv");
    pAPI->glVertex3f = (PFNGLVERTEX3FPROC)glbGetProcAddress("glVertex3f");
    pAPI->glVertex3fv = (PFNGLVERTEX3FVPROC)glbGetProcAddress("glVertex3fv");
    pAPI->glVertex3i = (PFNGLVERTEX3IPROC)glbGetProcAddress("glVertex3i");
    pAPI->glVertex3iv = (PFNGLVERTEX3IVPROC)glbGetProcAddress("glVertex3iv");
    pAPI->glVertex3s = (PFNGLVERTEX3SPROC)glbGetProcAddress("glVertex3s");
    pAPI->glVertex3sv = (PFNGLVERTEX3SVPROC)glbGetProcAddress("glVertex3sv");
    pAPI->glVertex4d = (PFNGLVERTEX4DPROC)glbGetProcAddress("glVertex4d");
    pAPI->glVertex4dv = (PFNGLVERTEX4DVPROC)glbGetProcAddress("glVertex4dv");
    pAPI->glVertex4f = (PFNGLVERTEX4FPROC)glbGetProcAddress("glVertex4f");
    pAPI->glVertex4fv = (PFNGLVERTEX4FVPROC)glbGetProcAddress("glVertex4fv");
    pAPI->glVertex4i = (PFNGLVERTEX4IPROC)glbGetProcAddress("glVertex4i");
    pAPI->glVertex4iv = (PFNGLVERTEX4IVPROC)glbGetProcAddress("glVertex4iv");
    pAPI->glVertex4s = (PFNGLVERTEX4SPROC)glbGetProcAddress("glVertex4s");
    pAPI->glVertex4sv = (PFNGLVERTEX4SVPROC)glbGetProcAddress("glVertex4sv");
    pAPI->glClipPlane = (PFNGLCLIPPLANEPROC)glbGetProcAddress("glClipPlane");
    pAPI->glColorMaterial = (PFNGLCOLORMATERIALPROC)glbGetProcAddress("glColorMaterial");
    pAPI->glFogf = (PFNGLFOGFPROC)glbGetProcAddress("glFogf");
    pAPI->glFogfv = (PFNGLFOGFVPROC)glbGetProcAddress("glFogfv");
    pAPI->glFogi = (PFNGLFOGIPROC)glbGetProcAddress("glFogi");
    pAPI->glFogiv = (PFNGLFOGIVPROC)glbGetProcAddress("glFogiv");
    pAPI->glLightf = (PFNGLLIGHTFPROC)glbGetProcAddress("glLightf");
    pAPI->glLightfv = (PFNGLLIGHTFVPROC)glbGetProcAddress("glLightfv");
    pAPI->glLighti = (PFNGLLIGHTIPROC)glbGetProcAddress("glLighti");
    pAPI->glLightiv = (PFNGLLIGHTIVPROC)glbGetProcAddress("glLightiv");
    pAPI->glLightModelf = (PFNGLLIGHTMODELFPROC)glbGetProcAddress("glLightModelf");
    pAPI->glLightModelfv = (PFNGLLIGHTMODELFVPROC)glbGetProcAddress("glLightModelfv");
    pAPI->glLightModeli = (PFNGLLIGHTMODELIPROC)glbGetProcAddress("glLightModeli");
    pAPI->glLightModeliv = (PFNGLLIGHTMODELIVPROC)glbGetProcAddress("glLightModeliv");
    pAPI->glLineStipple = (PFNGLLINESTIPPLEPROC)glbGetProcAddress("glLineStipple");
    pAPI->glMaterialf = (PFNGLMATERIALFPROC)glbGetProcAddress("glMaterialf");
    pAPI->glMaterialfv = (PFNGLMATERIALFVPROC)glbGetProcAddress("glMaterialfv");
    pAPI->glMateriali = (PFNGLMATERIALIPROC)glbGetProcAddress("glMateriali");
    pAPI->glMaterialiv = (PFNGLMATERIALIVPROC)glbGetProcAddress("glMaterialiv");
    pAPI->glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC)glbGetProcAddress("glPolygonStipple");
    pAPI->glShadeModel = (PFNGLSHADEMODELPROC)glbGetProcAddress("glShadeModel");
    pAPI->glTexEnvf = (PFNGLTEXENVFPROC)glbGetProcAddress("glTexEnvf");
    pAPI->glTexEnvfv = (PFNGLTEXENVFVPROC)glbGetProcAddress("glTexEnvfv");
    pAPI->glTexEnvi = (PFNGLTEXENVIPROC)glbGetProcAddress("glTexEnvi");
    pAPI->glTexEnviv = (PFNGLTEXENVIVPROC)glbGetProcAddress("glTexEnviv");
    pAPI->glTexGend = (PFNGLTEXGENDPROC)glbGetProcAddress("glTexGend");
    pAPI->glTexGendv = (PFNGLTEXGENDVPROC)glbGetProcAddress("glTexGendv");
    pAPI->glTexGenf = (PFNGLTEXGENFPROC)glbGetProcAddress("glTexGenf");
    pAPI->glTexGenfv = (PFNGLTEXGENFVPROC)glbGetProcAddress("glTexGenfv");
    pAPI->glTexGeni = (PFNGLTEXGENIPROC)glbGetProcAddress("glTexGeni");
    pAPI->glTexGeniv = (PFNGLTEXGENIVPROC)glbGetProcAddress("glTexGeniv");
    pAPI->glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC)glbGetProcAddress("glFeedbackBuffer");
    pAPI->glSelectBuffer = (PFNGLSELECTBUFFERPROC)glbGetProcAddress("glSelectBuffer");
    pAPI->glRenderMode = (PFNGLRENDERMODEPROC)glbGetProcAddress("glRenderMode");
    pAPI->glInitNames = (PFNGLINITNAMESPROC)glbGetProcAddress("glInitNames");
    pAPI->glLoadName = (PFNGLLOADNAMEPROC)glbGetProcAddress("glLoadName");
    pAPI->glPassThrough = (PFNGLPASSTHROUGHPROC)glbGetProcAddress("glPassThrough");
    pAPI->glPopName = (PFNGLPOPNAMEPROC)glbGetProcAddress("glPopName");
    pAPI->glPushName = (PFNGLPUSHNAMEPROC)glbGetProcAddress("glPushName");
    pAPI->glClearAccum = (PFNGLCLEARACCUMPROC)glbGetProcAddress("glClearAccum");
    pAPI->glClearIndex = (PFNGLCLEARINDEXPROC)glbGetProcAddress("glClearIndex");
    pAPI->glIndexMask = (PFNGLINDEXMASKPROC)glbGetProcAddress("glIndexMask");
    pAPI->glAccum = (PFNGLACCUMPROC)glbGetProcAddress("glAccum");
    pAPI->glPopAttrib = (PFNGLPOPATTRIBPROC)glbGetProcAddress("glPopAttrib");
    pAPI->glPushAttrib = (PFNGLPUSHATTRIBPROC)glbGetProcAddress("glPushAttrib");
    pAPI->glMap1d = (PFNGLMAP1DPROC)glbGetProcAddress("glMap1d");
    pAPI->glMap1f = (PFNGLMAP1FPROC)glbGetProcAddress("glMap1f");
    pAPI->glMap2d = (PFNGLMAP2DPROC)glbGetProcAddress("glMap2d");
    pAPI->glMap2f = (PFNGLMAP2FPROC)glbGetProcAddress("glMap2f");
    pAPI->glMapGrid1d = (PFNGLMAPGRID1DPROC)glbGetProcAddress("glMapGrid1d");
    pAPI->glMapGrid1f = (PFNGLMAPGRID1FPROC)glbGetProcAddress("glMapGrid1f");
    pAPI->glMapGrid2d = (PFNGLMAPGRID2DPROC)glbGetProcAddress("glMapGrid2d");
    pAPI->glMapGrid2f = (PFNGLMAPGRID2FPROC)glbGetProcAddress("glMapGrid2f");
    pAPI->glEvalCoord1d = (PFNGLEVALCOORD1DPROC)glbGetProcAddress("glEvalCoord1d");
    pAPI->glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC)glbGetProcAddress("glEvalCoord1dv");
    pAPI->glEvalCoord1f = (PFNGLEVALCOORD1FPROC)glbGetProcAddress("glEvalCoord1f");
    pAPI->glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC)glbGetProcAddress("glEvalCoord1fv");
    pAPI->glEvalCoord2d = (PFNGLEVALCOORD2DPROC)glbGetProcAddress("glEvalCoord2d");
    pAPI->glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC)glbGetProcAddress("glEvalCoord2dv");
    pAPI->glEvalCoord2f = (PFNGLEVALCOORD2FPROC)glbGetProcAddress("glEvalCoord2f");
    pAPI->glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC)glbGetProcAddress("glEvalCoord2fv");
    pAPI->glEvalMesh1 = (PFNGLEVALMESH1PROC)glbGetProcAddress("glEvalMesh1");
    pAPI->glEvalPoint1 = (PFNGLEVALPOINT1PROC)glbGetProcAddress("glEvalPoint1");
    pAPI->glEvalMesh2 = (PFNGLEVALMESH2PROC)glbGetProcAddress("glEvalMesh2");
    pAPI->glEvalPoint2 = (PFNGLEVALPOINT2PROC)glbGetProcAddress("glEvalPoint2");
    pAPI->glAlphaFunc = (PFNGLALPHAFUNCPROC)glbGetProcAddress("glAlphaFunc");
    pAPI->glPixelZoom = (PFNGLPIXELZOOMPROC)glbGetProcAddress("glPixelZoom");
    pAPI->glPixelTransferf = (PFNGLPIXELTRANSFERFPROC)glbGetProcAddress("glPixelTransferf");
    pAPI->glPixelTransferi = (PFNGLPIXELTRANSFERIPROC)glbGetProcAddress("glPixelTransferi");
    pAPI->glPixelMapfv = (PFNGLPIXELMAPFVPROC)glbGetProcAddress("glPixelMapfv");
    pAPI->glPixelMapuiv = (PFNGLPIXELMAPUIVPROC)glbGetProcAddress("glPixelMapuiv");
    pAPI->glPixelMapusv = (PFNGLPIXELMAPUSVPROC)glbGetProcAddress("glPixelMapusv");
    pAPI->glCopyPixels = (PFNGLCOPYPIXELSPROC)glbGetProcAddress("glCopyPixels");
    pAPI->glDrawPixels = (PFNGLDRAWPIXELSPROC)glbGetProcAddress("glDrawPixels");
    pAPI->glGetClipPlane = (PFNGLGETCLIPPLANEPROC)glbGetProcAddress("glGetClipPlane");
    pAPI->glGetLightfv = (PFNGLGETLIGHTFVPROC)glbGetProcAddress("glGetLightfv");
    pAPI->glGetLightiv = (PFNGLGETLIGHTIVPROC)glbGetProcAddress("glGetLightiv");
    pAPI->glGetMapdv = (PFNGLGETMAPDVPROC)glbGetProcAddress("glGetMapdv");
    pAPI->glGetMapfv = (PFNGLGETMAPFVPROC)glbGetProcAddress("glGetMapfv");
    pAPI->glGetMapiv = (PFNGLGETMAPIVPROC)glbGetProcAddress("glGetMapiv");
    pAPI->glGetMaterialfv = (PFNGLGETMATERIALFVPROC)glbGetProcAddress("glGetMaterialfv");
    pAPI->glGetMaterialiv = (PFNGLGETMATERIALIVPROC)glbGetProcAddress("glGetMaterialiv");
    pAPI->glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC)glbGetProcAddress("glGetPixelMapfv");
    pAPI->glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC)glbGetProcAddress("glGetPixelMapuiv");
    pAPI->glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC)glbGetProcAddress("glGetPixelMapusv");
    pAPI->glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC)glbGetProcAddress("glGetPolygonStipple");
    pAPI->glGetTexEnvfv = (PFNGLGETTEXENVFVPROC)glbGetProcAddress("glGetTexEnvfv");
    pAPI->glGetTexEnviv = (PFNGLGETTEXENVIVPROC)glbGetProcAddress("glGetTexEnviv");
    pAPI->glGetTexGendv = (PFNGLGETTEXGENDVPROC)glbGetProcAddress("glGetTexGendv");
    pAPI->glGetTexGenfv = (PFNGLGETTEXGENFVPROC)glbGetProcAddress("glGetTexGenfv");
    pAPI->glGetTexGeniv = (PFNGLGETTEXGENIVPROC)glbGetProcAddress("glGetTexGeniv");
    pAPI->glIsList = (PFNGLISLISTPROC)glbGetProcAddress("glIsList");
    pAPI->glFrustum = (PFNGLFRUSTUMPROC)glbGetProcAddress("glFrustum");
    pAPI->glLoadIdentity = (PFNGLLOADIDENTITYPROC)glbGetProcAddress("glLoadIdentity");
    pAPI->glLoadMatrixf = (PFNGLLOADMATRIXFPROC)glbGetProcAddress("glLoadMatrixf");
    pAPI->glLoadMatrixd = (PFNGLLOADMATRIXDPROC)glbGetProcAddress("glLoadMatrixd");
    pAPI->glMatrixMode = (PFNGLMATRIXMODEPROC)glbGetProcAddress("glMatrixMode");
    pAPI->glMultMatrixf = (PFNGLMULTMATRIXFPROC)glbGetProcAddress("glMultMatrixf");
    pAPI->glMultMatrixd = (PFNGLMULTMATRIXDPROC)glbGetProcAddress("glMultMatrixd");
    pAPI->glOrtho = (PFNGLORTHOPROC)glbGetProcAddress("glOrtho");
    pAPI->glPopMatrix = (PFNGLPOPMATRIXPROC)glbGetProcAddress("glPopMatrix");
    pAPI->glPushMatrix = (PFNGLPUSHMATRIXPROC)glbGetProcAddress("glPushMatrix");
    pAPI->glRotated = (PFNGLROTATEDPROC)glbGetProcAddress("glRotated");
    pAPI->glRotatef = (PFNGLROTATEFPROC)glbGetProcAddress("glRotatef");
    pAPI->glScaled = (PFNGLSCALEDPROC)glbGetProcAddress("glScaled");
    pAPI->glScalef = (PFNGLSCALEFPROC)glbGetProcAddress("glScalef");
    pAPI->glTranslated = (PFNGLTRANSLATEDPROC)glbGetProcAddress("glTranslated");
    pAPI->glTranslatef = (PFNGLTRANSLATEFPROC)glbGetProcAddress("glTranslatef");
    pAPI->glDrawArrays = (PFNGLDRAWARRAYSPROC)glbGetProcAddress("glDrawArrays");
    pAPI->glDrawElements = (PFNGLDRAWELEMENTSPROC)glbGetProcAddress("glDrawElements");
    pAPI->glGetPointerv = (PFNGLGETPOINTERVPROC)glbGetProcAddress("glGetPointerv");
    pAPI->glPolygonOffset = (PFNGLPOLYGONOFFSETPROC)glbGetProcAddress("glPolygonOffset");
    pAPI->glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)glbGetProcAddress("glCopyTexImage1D");
    pAPI->glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)glbGetProcAddress("glCopyTexImage2D");
    pAPI->glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)glbGetProcAddress("glCopyTexSubImage1D");
    pAPI->glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)glbGetProcAddress("glCopyTexSubImage2D");
    pAPI->glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)glbGetProcAddress("glTexSubImage1D");
    pAPI->glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)glbGetProcAddress("glTexSubImage2D");
    pAPI->glBindTexture = (PFNGLBINDTEXTUREPROC)glbGetProcAddress("glBindTexture");
    pAPI->glDeleteTextures = (PFNGLDELETETEXTURESPROC)glbGetProcAddress("glDeleteTextures");
    pAPI->glGenTextures = (PFNGLGENTEXTURESPROC)glbGetProcAddress("glGenTextures");
    pAPI->glIsTexture = (PFNGLISTEXTUREPROC)glbGetProcAddress("glIsTexture");
    pAPI->glArrayElement = (PFNGLARRAYELEMENTPROC)glbGetProcAddress("glArrayElement");
    pAPI->glColorPointer = (PFNGLCOLORPOINTERPROC)glbGetProcAddress("glColorPointer");
    pAPI->glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC)glbGetProcAddress("glDisableClientState");
    pAPI->glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC)glbGetProcAddress("glEdgeFlagPointer");
    pAPI->glEnableClientState = (PFNGLENABLECLIENTSTATEPROC)glbGetProcAddress("glEnableClientState");
    pAPI->glIndexPointer = (PFNGLINDEXPOINTERPROC)glbGetProcAddress("glIndexPointer");
    pAPI->glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC)glbGetProcAddress("glInterleavedArrays");
    pAPI->glNormalPointer = (PFNGLNORMALPOINTERPROC)glbGetProcAddress("glNormalPointer");
    pAPI->glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC)glbGetProcAddress("glTexCoordPointer");
    pAPI->glVertexPointer = (PFNGLVERTEXPOINTERPROC)glbGetProcAddress("glVertexPointer");
    pAPI->glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC)glbGetProcAddress("glAreTexturesResident");
    pAPI->glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC)glbGetProcAddress("glPrioritizeTextures");
    pAPI->glIndexub = (PFNGLINDEXUBPROC)glbGetProcAddress("glIndexub");
    pAPI->glIndexubv = (PFNGLINDEXUBVPROC)glbGetProcAddress("glIndexubv");
    pAPI->glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC)glbGetProcAddress("glPopClientAttrib");
    pAPI->glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC)glbGetProcAddress("glPushClientAttrib");
    pAPI->glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)glbGetProcAddress("glDrawRangeElements");
    pAPI->glTexImage3D = (PFNGLTEXIMAGE3DPROC)glbGetProcAddress("glTexImage3D");
    pAPI->glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)glbGetProcAddress("glTexSubImage3D");
    pAPI->glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)glbGetProcAddress("glCopyTexSubImage3D");
    pAPI->glActiveTexture = (PFNGLACTIVETEXTUREPROC)glbGetProcAddress("glActiveTexture");
    pAPI->glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)glbGetProcAddress("glSampleCoverage");
    pAPI->glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)glbGetProcAddress("glCompressedTexImage3D");
    pAPI->glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)glbGetProcAddress("glCompressedTexImage2D");
    pAPI->glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)glbGetProcAddress("glCompressedTexImage1D");
    pAPI->glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)glbGetProcAddress("glCompressedTexSubImage3D");
    pAPI->glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)glbGetProcAddress("glCompressedTexSubImage2D");
    pAPI->glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)glbGetProcAddress("glCompressedTexSubImage1D");
    pAPI->glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)glbGetProcAddress("glGetCompressedTexImage");
    pAPI->glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)glbGetProcAddress("glClientActiveTexture");
    pAPI->glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)glbGetProcAddress("glMultiTexCoord1d");
    pAPI->glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)glbGetProcAddress("glMultiTexCoord1dv");
    pAPI->glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)glbGetProcAddress("glMultiTexCoord1f");
    pAPI->glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)glbGetProcAddress("glMultiTexCoord1fv");
    pAPI->glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)glbGetProcAddress("glMultiTexCoord1i");
    pAPI->glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)glbGetProcAddress("glMultiTexCoord1iv");
    pAPI->glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)glbGetProcAddress("glMultiTexCoord1s");
    pAPI->glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)glbGetProcAddress("glMultiTexCoord1sv");
    pAPI->glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)glbGetProcAddress("glMultiTexCoord2d");
    pAPI->glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)glbGetProcAddress("glMultiTexCoord2dv");
    pAPI->glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)glbGetProcAddress("glMultiTexCoord2f");
    pAPI->glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)glbGetProcAddress("glMultiTexCoord2fv");
    pAPI->glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)glbGetProcAddress("glMultiTexCoord2i");
    pAPI->glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)glbGetProcAddress("glMultiTexCoord2iv");
    pAPI->glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)glbGetProcAddress("glMultiTexCoord2s");
    pAPI->glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)glbGetProcAddress("glMultiTexCoord2sv");
    pAPI->glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)glbGetProcAddress("glMultiTexCoord3d");
    pAPI->glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)glbGetProcAddress("glMultiTexCoord3dv");
    pAPI->glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)glbGetProcAddress("glMultiTexCoord3f");
    pAPI->glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)glbGetProcAddress("glMultiTexCoord3fv");
    pAPI->glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)glbGetProcAddress("glMultiTexCoord3i");
    pAPI->glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)glbGetProcAddress("glMultiTexCoord3iv");
    pAPI->glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)glbGetProcAddress("glMultiTexCoord3s");
    pAPI->glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)glbGetProcAddress("glMultiTexCoord3sv");
    pAPI->glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)glbGetProcAddress("glMultiTexCoord4d");
    pAPI->glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)glbGetProcAddress("glMultiTexCoord4dv");
    pAPI->glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)glbGetProcAddress("glMultiTexCoord4f");
    pAPI->glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)glbGetProcAddress("glMultiTexCoord4fv");
    pAPI->glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)glbGetProcAddress("glMultiTexCoord4i");
    pAPI->glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)glbGetProcAddress("glMultiTexCoord4iv");
    pAPI->glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)glbGetProcAddress("glMultiTexCoord4s");
    pAPI->glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)glbGetProcAddress("glMultiTexCoord4sv");
    pAPI->glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)glbGetProcAddress("glLoadTransposeMatrixf");
    pAPI->glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)glbGetProcAddress("glLoadTransposeMatrixd");
    pAPI->glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)glbGetProcAddress("glMultTransposeMatrixf");
    pAPI->glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)glbGetProcAddress("glMultTransposeMatrixd");
    pAPI->glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)glbGetProcAddress("glBlendFuncSeparate");
    pAPI->glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)glbGetProcAddress("glMultiDrawArrays");
    pAPI->glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)glbGetProcAddress("glMultiDrawElements");
    pAPI->glPointParameterf = (PFNGLPOINTPARAMETERFPROC)glbGetProcAddress("glPointParameterf");
    pAPI->glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)glbGetProcAddress("glPointParameterfv");
    pAPI->glPointParameteri = (PFNGLPOINTPARAMETERIPROC)glbGetProcAddress("glPointParameteri");
    pAPI->glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)glbGetProcAddress("glPointParameteriv");
    pAPI->glFogCoordf = (PFNGLFOGCOORDFPROC)glbGetProcAddress("glFogCoordf");
    pAPI->glFogCoordfv = (PFNGLFOGCOORDFVPROC)glbGetProcAddress("glFogCoordfv");
    pAPI->glFogCoordd = (PFNGLFOGCOORDDPROC)glbGetProcAddress("glFogCoordd");
    pAPI->glFogCoorddv = (PFNGLFOGCOORDDVPROC)glbGetProcAddress("glFogCoorddv");
    pAPI->glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)glbGetProcAddress("glFogCoordPointer");
    pAPI->glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)glbGetProcAddress("glSecondaryColor3b");
    pAPI->glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)glbGetProcAddress("glSecondaryColor3bv");
    pAPI->glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)glbGetProcAddress("glSecondaryColor3d");
    pAPI->glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)glbGetProcAddress("glSecondaryColor3dv");
    pAPI->glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)glbGetProcAddress("glSecondaryColor3f");
    pAPI->glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)glbGetProcAddress("glSecondaryColor3fv");
    pAPI->glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)glbGetProcAddress("glSecondaryColor3i");
    pAPI->glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)glbGetProcAddress("glSecondaryColor3iv");
    pAPI->glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)glbGetProcAddress("glSecondaryColor3s");
    pAPI->glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)glbGetProcAddress("glSecondaryColor3sv");
    pAPI->glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)glbGetProcAddress("glSecondaryColor3ub");
    pAPI->glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)glbGetProcAddress("glSecondaryColor3ubv");
    pAPI->glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)glbGetProcAddress("glSecondaryColor3ui");
    pAPI->glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)glbGetProcAddress("glSecondaryColor3uiv");
    pAPI->glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)glbGetProcAddress("glSecondaryColor3us");
    pAPI->glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)glbGetProcAddress("glSecondaryColor3usv");
    pAPI->glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)glbGetProcAddress("glSecondaryColorPointer");
    pAPI->glWindowPos2d = (PFNGLWINDOWPOS2DPROC)glbGetProcAddress("glWindowPos2d");
    pAPI->glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)glbGetProcAddress("glWindowPos2dv");
    pAPI->glWindowPos2f = (PFNGLWINDOWPOS2FPROC)glbGetProcAddress("glWindowPos2f");
    pAPI->glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)glbGetProcAddress("glWindowPos2fv");
    pAPI->glWindowPos2i = (PFNGLWINDOWPOS2IPROC)glbGetProcAddress("glWindowPos2i");
    pAPI->glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)glbGetProcAddress("glWindowPos2iv");
    pAPI->glWindowPos2s = (PFNGLWINDOWPOS2SPROC)glbGetProcAddress("glWindowPos2s");
    pAPI->glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)glbGetProcAddress("glWindowPos2sv");
    pAPI->glWindowPos3d = (PFNGLWINDOWPOS3DPROC)glbGetProcAddress("glWindowPos3d");
    pAPI->glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)glbGetProcAddress("glWindowPos3dv");
    pAPI->glWindowPos3f = (PFNGLWINDOWPOS3FPROC)glbGetProcAddress("glWindowPos3f");
    pAPI->glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)glbGetProcAddress("glWindowPos3fv");
    pAPI->glWindowPos3i = (PFNGLWINDOWPOS3IPROC)glbGetProcAddress("glWindowPos3i");
    pAPI->glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)glbGetProcAddress("glWindowPos3iv");
    pAPI->glWindowPos3s = (PFNGLWINDOWPOS3SPROC)glbGetProcAddress("glWindowPos3s");
    pAPI->glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)glbGetProcAddress("glWindowPos3sv");
    pAPI->glBlendColor = (PFNGLBLENDCOLORPROC)glbGetProcAddress("glBlendColor");
    pAPI->glBlendEquation = (PFNGLBLENDEQUATIONPROC)glbGetProcAddress("glBlendEquation");
    pAPI->glGenQueries = (PFNGLGENQUERIESPROC)glbGetProcAddress("glGenQueries");
    pAPI->glDeleteQueries = (PFNGLDELETEQUERIESPROC)glbGetProcAddress("glDeleteQueries");
    pAPI->glIsQuery = (PFNGLISQUERYPROC)glbGetProcAddress("glIsQuery");
    pAPI->glBeginQuery = (PFNGLBEGINQUERYPROC)glbGetProcAddress("glBeginQuery");
    pAPI->glEndQuery = (PFNGLENDQUERYPROC)glbGetProcAddress("glEndQuery");
    pAPI->glGetQueryiv = (PFNGLGETQUERYIVPROC)glbGetProcAddress("glGetQueryiv");
    pAPI->glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)glbGetProcAddress("glGetQueryObjectiv");
    pAPI->glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)glbGetProcAddress("glGetQueryObjectuiv");
    pAPI->glBindBuffer = (PFNGLBINDBUFFERPROC)glbGetProcAddress("glBindBuffer");
    pAPI->glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)glbGetProcAddress("glDeleteBuffers");
    pAPI->glGenBuffers = (PFNGLGENBUFFERSPROC)glbGetProcAddress("glGenBuffers");
    pAPI->glIsBuffer = (PFNGLISBUFFERPROC)glbGetProcAddress("glIsBuffer");
    pAPI->glBufferData = (PFNGLBUFFERDATAPROC)glbGetProcAddress("glBufferData");
    pAPI->glBufferSubData = (PFNGLBUFFERSUBDATAPROC)glbGetProcAddress("glBufferSubData");
    pAPI->glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)glbGetProcAddress("glGetBufferSubData");
    pAPI->glMapBuffer = (PFNGLMAPBUFFERPROC)glbGetProcAddress("glMapBuffer");
    pAPI->glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)glbGetProcAddress("glUnmapBuffer");
    pAPI->glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)glbGetProcAddress("glGetBufferParameteriv");
    pAPI->glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)glbGetProcAddress("glGetBufferPointerv");
    pAPI->glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)glbGetProcAddress("glBlendEquationSeparate");
    pAPI->glDrawBuffers = (PFNGLDRAWBUFFERSPROC)glbGetProcAddress("glDrawBuffers");
    pAPI->glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)glbGetProcAddress("glStencilOpSeparate");
    pAPI->glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)glbGetProcAddress("glStencilFuncSeparate");
    pAPI->glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)glbGetProcAddress("glStencilMaskSeparate");
    pAPI->glAttachShader = (PFNGLATTACHSHADERPROC)glbGetProcAddress("glAttachShader");
    pAPI->glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)glbGetProcAddress("glBindAttribLocation");
    pAPI->glCompileShader = (PFNGLCOMPILESHADERPROC)glbGetProcAddress("glCompileShader");
    pAPI->glCreateProgram = (PFNGLCREATEPROGRAMPROC)glbGetProcAddress("glCreateProgram");
    pAPI->glCreateShader = (PFNGLCREATESHADERPROC)glbGetProcAddress("glCreateShader");
    pAPI->glDeleteProgram = (PFNGLDELETEPROGRAMPROC)glbGetProcAddress("glDeleteProgram");
    pAPI->glDeleteShader = (PFNGLDELETESHADERPROC)glbGetProcAddress("glDeleteShader");
    pAPI->glDetachShader = (PFNGLDETACHSHADERPROC)glbGetProcAddress("glDetachShader");
    pAPI->glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)glbGetProcAddress("glDisableVertexAttribArray");
    pAPI->glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)glbGetProcAddress("glEnableVertexAttribArray");
    pAPI->glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)glbGetProcAddress("glGetActiveAttrib");
    pAPI->glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)glbGetProcAddress("glGetActiveUniform");
    pAPI->glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)glbGetProcAddress("glGetAttachedShaders");
    pAPI->glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)glbGetProcAddress("glGetAttribLocation");
    pAPI->glGetProgramiv = (PFNGLGETPROGRAMIVPROC)glbGetProcAddress("glGetProgramiv");
    pAPI->glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)glbGetProcAddress("glGetProgramInfoLog");
    pAPI->glGetShaderiv = (PFNGLGETSHADERIVPROC)glbGetProcAddress("glGetShaderiv");
    pAPI->glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)glbGetProcAddress("glGetShaderInfoLog");
    pAPI->glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)glbGetProcAddress("glGetShaderSource");
    pAPI->glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)glbGetProcAddress("glGetUniformLocation");
    pAPI->glGetUniformfv = (PFNGLGETUNIFORMFVPROC)glbGetProcAddress("glGetUniformfv");
    pAPI->glGetUniformiv = (PFNGLGETUNIFORMIVPROC)glbGetProcAddress("glGetUniformiv");
    pAPI->glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)glbGetProcAddress("glGetVertexAttribdv");
    pAPI->glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)glbGetProcAddress("glGetVertexAttribfv");
    pAPI->glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)glbGetProcAddress("glGetVertexAttribiv");
    pAPI->glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)glbGetProcAddress("glGetVertexAttribPointerv");
    pAPI->glIsProgram = (PFNGLISPROGRAMPROC)glbGetProcAddress("glIsProgram");
    pAPI->glIsShader = (PFNGLISSHADERPROC)glbGetProcAddress("glIsShader");
    pAPI->glLinkProgram = (PFNGLLINKPROGRAMPROC)glbGetProcAddress("glLinkProgram");
    pAPI->glShaderSource = (PFNGLSHADERSOURCEPROC)glbGetProcAddress("glShaderSource");
    pAPI->glUseProgram = (PFNGLUSEPROGRAMPROC)glbGetProcAddress("glUseProgram");
    pAPI->glUniform1f = (PFNGLUNIFORM1FPROC)glbGetProcAddress("glUniform1f");
    pAPI->glUniform2f = (PFNGLUNIFORM2FPROC)glbGetProcAddress("glUniform2f");
    pAPI->glUniform3f = (PFNGLUNIFORM3FPROC)glbGetProcAddress("glUniform3f");
    pAPI->glUniform4f = (PFNGLUNIFORM4FPROC)glbGetProcAddress("glUniform4f");
    pAPI->glUniform1i = (PFNGLUNIFORM1IPROC)glbGetProcAddress("glUniform1i");
    pAPI->glUniform2i = (PFNGLUNIFORM2IPROC)glbGetProcAddress("glUniform2i");
    pAPI->glUniform3i = (PFNGLUNIFORM3IPROC)glbGetProcAddress("glUniform3i");
    pAPI->glUniform4i = (PFNGLUNIFORM4IPROC)glbGetProcAddress("glUniform4i");
    pAPI->glUniform1fv = (PFNGLUNIFORM1FVPROC)glbGetProcAddress("glUniform1fv");
    pAPI->glUniform2fv = (PFNGLUNIFORM2FVPROC)glbGetProcAddress("glUniform2fv");
    pAPI->glUniform3fv = (PFNGLUNIFORM3FVPROC)glbGetProcAddress("glUniform3fv");
    pAPI->glUniform4fv = (PFNGLUNIFORM4FVPROC)glbGetProcAddress("glUniform4fv");
    pAPI->glUniform1iv = (PFNGLUNIFORM1IVPROC)glbGetProcAddress("glUniform1iv");
    pAPI->glUniform2iv = (PFNGLUNIFORM2IVPROC)glbGetProcAddress("glUniform2iv");
    pAPI->glUniform3iv = (PFNGLUNIFORM3IVPROC)glbGetProcAddress("glUniform3iv");
    pAPI->glUniform4iv = (PFNGLUNIFORM4IVPROC)glbGetProcAddress("glUniform4iv");
    pAPI->glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)glbGetProcAddress("glUniformMatrix2fv");
    pAPI->glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)glbGetProcAddress("glUniformMatrix3fv");
    pAPI->glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)glbGetProcAddress("glUniformMatrix4fv");
    pAPI->glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)glbGetProcAddress("glValidateProgram");
    pAPI->glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)glbGetProcAddress("glVertexAttrib1d");
    pAPI->glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)glbGetProcAddress("glVertexAttrib1dv");
    pAPI->glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)glbGetProcAddress("glVertexAttrib1f");
    pAPI->glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)glbGetProcAddress("glVertexAttrib1fv");
    pAPI->glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)glbGetProcAddress("glVertexAttrib1s");
    pAPI->glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)glbGetProcAddress("glVertexAttrib1sv");
    pAPI->glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)glbGetProcAddress("glVertexAttrib2d");
    pAPI->glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)glbGetProcAddress("glVertexAttrib2dv");
    pAPI->glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)glbGetProcAddress("glVertexAttrib2f");
    pAPI->glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)glbGetProcAddress("glVertexAttrib2fv");
    pAPI->glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)glbGetProcAddress("glVertexAttrib2s");
    pAPI->glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)glbGetProcAddress("glVertexAttrib2sv");
    pAPI->glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)glbGetProcAddress("glVertexAttrib3d");
    pAPI->glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)glbGetProcAddress("glVertexAttrib3dv");
    pAPI->glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)glbGetProcAddress("glVertexAttrib3f");
    pAPI->glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)glbGetProcAddress("glVertexAttrib3fv");
    pAPI->glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)glbGetProcAddress("glVertexAttrib3s");
    pAPI->glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)glbGetProcAddress("glVertexAttrib3sv");
    pAPI->glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)glbGetProcAddress("glVertexAttrib4Nbv");
    pAPI->glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)glbGetProcAddress("glVertexAttrib4Niv");
    pAPI->glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)glbGetProcAddress("glVertexAttrib4Nsv");
    pAPI->glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)glbGetProcAddress("glVertexAttrib4Nub");
    pAPI->glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)glbGetProcAddress("glVertexAttrib4Nubv");
    pAPI->glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)glbGetProcAddress("glVertexAttrib4Nuiv");
    pAPI->glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)glbGetProcAddress("glVertexAttrib4Nusv");
    pAPI->glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)glbGetProcAddress("glVertexAttrib4bv");
    pAPI->glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)glbGetProcAddress("glVertexAttrib4d");
    pAPI->glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)glbGetProcAddress("glVertexAttrib4dv");
    pAPI->glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)glbGetProcAddress("glVertexAttrib4f");
    pAPI->glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)glbGetProcAddress("glVertexAttrib4fv");
    pAPI->glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)glbGetProcAddress("glVertexAttrib4iv");
    pAPI->glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)glbGetProcAddress("glVertexAttrib4s");
    pAPI->glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)glbGetProcAddress("glVertexAttrib4sv");
    pAPI->glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)glbGetProcAddress("glVertexAttrib4ubv");
    pAPI->glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)glbGetProcAddress("glVertexAttrib4uiv");
    pAPI->glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)glbGetProcAddress("glVertexAttrib4usv");
    pAPI->glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)glbGetProcAddress("glVertexAttribPointer");
    pAPI->glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)glbGetProcAddress("glUniformMatrix2x3fv");
    pAPI->glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)glbGetProcAddress("glUniformMatrix3x2fv");
    pAPI->glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)glbGetProcAddress("glUniformMatrix2x4fv");
    pAPI->glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)glbGetProcAddress("glUniformMatrix4x2fv");
    pAPI->glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)glbGetProcAddress("glUniformMatrix3x4fv");
    pAPI->glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)glbGetProcAddress("glUniformMatrix4x3fv");
    pAPI->glColorMaski = (PFNGLCOLORMASKIPROC)glbGetProcAddress("glColorMaski");
    pAPI->glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)glbGetProcAddress("glGetBooleani_v");
    pAPI->glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)glbGetProcAddress("glGetIntegeri_v");
    pAPI->glEnablei = (PFNGLENABLEIPROC)glbGetProcAddress("glEnablei");
    pAPI->glDisablei = (PFNGLDISABLEIPROC)glbGetProcAddress("glDisablei");
    pAPI->glIsEnabledi = (PFNGLISENABLEDIPROC)glbGetProcAddress("glIsEnabledi");
    pAPI->glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)glbGetProcAddress("glBeginTransformFeedback");
    pAPI->glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)glbGetProcAddress("glEndTransformFeedback");
    pAPI->glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)glbGetProcAddress("glBindBufferRange");
    pAPI->glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)glbGetProcAddress("glBindBufferBase");
    pAPI->glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)glbGetProcAddress("glTransformFeedbackVaryings");
    pAPI->glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)glbGetProcAddress("glGetTransformFeedbackVarying");
    pAPI->glClampColor = (PFNGLCLAMPCOLORPROC)glbGetProcAddress("glClampColor");
    pAPI->glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)glbGetProcAddress("glBeginConditionalRender");
    pAPI->glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)glbGetProcAddress("glEndConditionalRender");
    pAPI->glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)glbGetProcAddress("glVertexAttribIPointer");
    pAPI->glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)glbGetProcAddress("glGetVertexAttribIiv");
    pAPI->glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)glbGetProcAddress("glGetVertexAttribIuiv");
    pAPI->glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)glbGetProcAddress("glVertexAttribI1i");
    pAPI->glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)glbGetProcAddress("glVertexAttribI2i");
    pAPI->glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)glbGetProcAddress("glVertexAttribI3i");
    pAPI->glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)glbGetProcAddress("glVertexAttribI4i");
    pAPI->glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)glbGetProcAddress("glVertexAttribI1ui");
    pAPI->glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)glbGetProcAddress("glVertexAttribI2ui");
    pAPI->glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)glbGetProcAddress("glVertexAttribI3ui");
    pAPI->glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)glbGetProcAddress("glVertexAttribI4ui");
    pAPI->glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)glbGetProcAddress("glVertexAttribI1iv");
    pAPI->glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)glbGetProcAddress("glVertexAttribI2iv");
    pAPI->glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)glbGetProcAddress("glVertexAttribI3iv");
    pAPI->glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)glbGetProcAddress("glVertexAttribI4iv");
    pAPI->glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)glbGetProcAddress("glVertexAttribI1uiv");
    pAPI->glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)glbGetProcAddress("glVertexAttribI2uiv");
    pAPI->glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)glbGetProcAddress("glVertexAttribI3uiv");
    pAPI->glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)glbGetProcAddress("glVertexAttribI4uiv");
    pAPI->glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)glbGetProcAddress("glVertexAttribI4bv");
    pAPI->glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)glbGetProcAddress("glVertexAttribI4sv");
    pAPI->glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)glbGetProcAddress("glVertexAttribI4ubv");
    pAPI->glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)glbGetProcAddress("glVertexAttribI4usv");
    pAPI->glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)glbGetProcAddress("glGetUniformuiv");
    pAPI->glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)glbGetProcAddress("glBindFragDataLocation");
    pAPI->glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)glbGetProcAddress("glGetFragDataLocation");
    pAPI->glUniform1ui = (PFNGLUNIFORM1UIPROC)glbGetProcAddress("glUniform1ui");
    pAPI->glUniform2ui = (PFNGLUNIFORM2UIPROC)glbGetProcAddress("glUniform2ui");
    pAPI->glUniform3ui = (PFNGLUNIFORM3UIPROC)glbGetProcAddress("glUniform3ui");
    pAPI->glUniform4ui = (PFNGLUNIFORM4UIPROC)glbGetProcAddress("glUniform4ui");
    pAPI->glUniform1uiv = (PFNGLUNIFORM1UIVPROC)glbGetProcAddress("glUniform1uiv");
    pAPI->glUniform2uiv = (PFNGLUNIFORM2UIVPROC)glbGetProcAddress("glUniform2uiv");
    pAPI->glUniform3uiv = (PFNGLUNIFORM3UIVPROC)glbGetProcAddress("glUniform3uiv");
    pAPI->glUniform4uiv = (PFNGLUNIFORM4UIVPROC)glbGetProcAddress("glUniform4uiv");
    pAPI->glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)glbGetProcAddress("glTexParameterIiv");
    pAPI->glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)glbGetProcAddress("glTexParameterIuiv");
    pAPI->glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)glbGetProcAddress("glGetTexParameterIiv");
    pAPI->glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)glbGetProcAddress("glGetTexParameterIuiv");
    pAPI->glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)glbGetProcAddress("glClearBufferiv");
    pAPI->glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)glbGetProcAddress("glClearBufferuiv");
    pAPI->glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)glbGetProcAddress("glClearBufferfv");
    pAPI->glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)glbGetProcAddress("glClearBufferfi");
    pAPI->glGetStringi = (PFNGLGETSTRINGIPROC)glbGetProcAddress("glGetStringi");
    pAPI->glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)glbGetProcAddress("glIsRenderbuffer");
    pAPI->glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)glbGetProcAddress("glBindRenderbuffer");
    pAPI->glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)glbGetProcAddress("glDeleteRenderbuffers");
    pAPI->glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)glbGetProcAddress("glGenRenderbuffers");
    pAPI->glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)glbGetProcAddress("glRenderbufferStorage");
    pAPI->glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)glbGetProcAddress("glGetRenderbufferParameteriv");
    pAPI->glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)glbGetProcAddress("glIsFramebuffer");
    pAPI->glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)glbGetProcAddress("glBindFramebuffer");
    pAPI->glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)glbGetProcAddress("glDeleteFramebuffers");
    pAPI->glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)glbGetProcAddress("glGenFramebuffers");
    pAPI->glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)glbGetProcAddress("glCheckFramebufferStatus");
    pAPI->glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)glbGetProcAddress("glFramebufferTexture1D");
    pAPI->glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)glbGetProcAddress("glFramebufferTexture2D");
    pAPI->glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)glbGetProcAddress("glFramebufferTexture3D");
    pAPI->glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)glbGetProcAddress("glFramebufferRenderbuffer");
    pAPI->glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)glbGetProcAddress("glGetFramebufferAttachmentParameteriv");
    pAPI->glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)glbGetProcAddress("glGenerateMipmap");
    pAPI->glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)glbGetProcAddress("glBlitFramebuffer");
    pAPI->glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)glbGetProcAddress("glRenderbufferStorageMultisample");
    pAPI->glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)glbGetProcAddress("glFramebufferTextureLayer");
    pAPI->glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)glbGetProcAddress("glMapBufferRange");
    pAPI->glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)glbGetProcAddress("glFlushMappedBufferRange");
    pAPI->glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)glbGetProcAddress("glBindVertexArray");
    pAPI->glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)glbGetProcAddress("glDeleteVertexArrays");
    pAPI->glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)glbGetProcAddress("glGenVertexArrays");
    pAPI->glIsVertexArray = (PFNGLISVERTEXARRAYPROC)glbGetProcAddress("glIsVertexArray");
    pAPI->glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)glbGetProcAddress("glDrawArraysInstanced");
    pAPI->glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)glbGetProcAddress("glDrawElementsInstanced");
    pAPI->glTexBuffer = (PFNGLTEXBUFFERPROC)glbGetProcAddress("glTexBuffer");
    pAPI->glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)glbGetProcAddress("glPrimitiveRestartIndex");
    pAPI->glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)glbGetProcAddress("glCopyBufferSubData");
    pAPI->glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)glbGetProcAddress("glGetUniformIndices");
    pAPI->glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)glbGetProcAddress("glGetActiveUniformsiv");
    pAPI->glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)glbGetProcAddress("glGetActiveUniformName");
    pAPI->glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)glbGetProcAddress("glGetUniformBlockIndex");
    pAPI->glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)glbGetProcAddress("glGetActiveUniformBlockiv");
    pAPI->glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)glbGetProcAddress("glGetActiveUniformBlockName");
    pAPI->glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)glbGetProcAddress("glUniformBlockBinding");
    pAPI->glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)glbGetProcAddress("glDrawElementsBaseVertex");
    pAPI->glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)glbGetProcAddress("glDrawRangeElementsBaseVertex");
    pAPI->glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)glbGetProcAddress("glDrawElementsInstancedBaseVertex");
    pAPI->glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)glbGetProcAddress("glMultiDrawElementsBaseVertex");
    pAPI->glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)glbGetProcAddress("glProvokingVertex");
    pAPI->glFenceSync = (PFNGLFENCESYNCPROC)glbGetProcAddress("glFenceSync");
    pAPI->glIsSync = (PFNGLISSYNCPROC)glbGetProcAddress("glIsSync");
    pAPI->glDeleteSync = (PFNGLDELETESYNCPROC)glbGetProcAddress("glDeleteSync");
    pAPI->glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)glbGetProcAddress("glClientWaitSync");
    pAPI->glWaitSync = (PFNGLWAITSYNCPROC)glbGetProcAddress("glWaitSync");
    pAPI->glGetInteger64v = (PFNGLGETINTEGER64VPROC)glbGetProcAddress("glGetInteger64v");
    pAPI->glGetSynciv = (PFNGLGETSYNCIVPROC)glbGetProcAddress("glGetSynciv");
    pAPI->glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)glbGetProcAddress("glGetInteger64i_v");
    pAPI->glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)glbGetProcAddress("glGetBufferParameteri64v");
    pAPI->glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)glbGetProcAddress("glFramebufferTexture");
    pAPI->glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)glbGetProcAddress("glTexImage2DMultisample");
    pAPI->glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)glbGetProcAddress("glTexImage3DMultisample");
    pAPI->glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)glbGetProcAddress("glGetMultisamplefv");
    pAPI->glSampleMaski = (PFNGLSAMPLEMASKIPROC)glbGetProcAddress("glSampleMaski");
    pAPI->glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)glbGetProcAddress("glBindFragDataLocationIndexed");
    pAPI->glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)glbGetProcAddress("glGetFragDataIndex");
    pAPI->glGenSamplers = (PFNGLGENSAMPLERSPROC)glbGetProcAddress("glGenSamplers");
    pAPI->glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)glbGetProcAddress("glDeleteSamplers");
    pAPI->glIsSampler = (PFNGLISSAMPLERPROC)glbGetProcAddress("glIsSampler");
    pAPI->glBindSampler = (PFNGLBINDSAMPLERPROC)glbGetProcAddress("glBindSampler");
    pAPI->glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)glbGetProcAddress("glSamplerParameteri");
    pAPI->glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)glbGetProcAddress("glSamplerParameteriv");
    pAPI->glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)glbGetProcAddress("glSamplerParameterf");
    pAPI->glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)glbGetProcAddress("glSamplerParameterfv");
    pAPI->glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)glbGetProcAddress("glSamplerParameterIiv");
    pAPI->glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)glbGetProcAddress("glSamplerParameterIuiv");
    pAPI->glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)glbGetProcAddress("glGetSamplerParameteriv");
    pAPI->glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)glbGetProcAddress("glGetSamplerParameterIiv");
    pAPI->glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)glbGetProcAddress("glGetSamplerParameterfv");
    pAPI->glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)glbGetProcAddress("glGetSamplerParameterIuiv");
    pAPI->glQueryCounter = (PFNGLQUERYCOUNTERPROC)glbGetProcAddress("glQueryCounter");
    pAPI->glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)glbGetProcAddress("glGetQueryObjecti64v");
    pAPI->glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)glbGetProcAddress("glGetQueryObjectui64v");
    pAPI->glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)glbGetProcAddress("glVertexAttribDivisor");
    pAPI->glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)glbGetProcAddress("glVertexAttribP1ui");
    pAPI->glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)glbGetProcAddress("glVertexAttribP1uiv");
    pAPI->glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)glbGetProcAddress("glVertexAttribP2ui");
    pAPI->glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)glbGetProcAddress("glVertexAttribP2uiv");
    pAPI->glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)glbGetProcAddress("glVertexAttribP3ui");
    pAPI->glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)glbGetProcAddress("glVertexAttribP3uiv");
    pAPI->glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)glbGetProcAddress("glVertexAttribP4ui");
    pAPI->glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)glbGetProcAddress("glVertexAttribP4uiv");
    pAPI->glVertexP2ui = (PFNGLVERTEXP2UIPROC)glbGetProcAddress("glVertexP2ui");
    pAPI->glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)glbGetProcAddress("glVertexP2uiv");
    pAPI->glVertexP3ui = (PFNGLVERTEXP3UIPROC)glbGetProcAddress("glVertexP3ui");
    pAPI->glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)glbGetProcAddress("glVertexP3uiv");
    pAPI->glVertexP4ui = (PFNGLVERTEXP4UIPROC)glbGetProcAddress("glVertexP4ui");
    pAPI->glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)glbGetProcAddress("glVertexP4uiv");
    pAPI->glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)glbGetProcAddress("glTexCoordP1ui");
    pAPI->glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)glbGetProcAddress("glTexCoordP1uiv");
    pAPI->glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)glbGetProcAddress("glTexCoordP2ui");
    pAPI->glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)glbGetProcAddress("glTexCoordP2uiv");
    pAPI->glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)glbGetProcAddress("glTexCoordP3ui");
    pAPI->glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)glbGetProcAddress("glTexCoordP3uiv");
    pAPI->glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)glbGetProcAddress("glTexCoordP4ui");
    pAPI->glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)glbGetProcAddress("glTexCoordP4uiv");
    pAPI->glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)glbGetProcAddress("glMultiTexCoordP1ui");
    pAPI->glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)glbGetProcAddress("glMultiTexCoordP1uiv");
    pAPI->glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)glbGetProcAddress("glMultiTexCoordP2ui");
    pAPI->glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)glbGetProcAddress("glMultiTexCoordP2uiv");
    pAPI->glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)glbGetProcAddress("glMultiTexCoordP3ui");
    pAPI->glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)glbGetProcAddress("glMultiTexCoordP3uiv");
    pAPI->glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)glbGetProcAddress("glMultiTexCoordP4ui");
    pAPI->glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)glbGetProcAddress("glMultiTexCoordP4uiv");
    pAPI->glNormalP3ui = (PFNGLNORMALP3UIPROC)glbGetProcAddress("glNormalP3ui");
    pAPI->glNormalP3uiv = (PFNGLNORMALP3UIVPROC)glbGetProcAddress("glNormalP3uiv");
    pAPI->glColorP3ui = (PFNGLCOLORP3UIPROC)glbGetProcAddress("glColorP3ui");
    pAPI->glColorP3uiv = (PFNGLCOLORP3UIVPROC)glbGetProcAddress("glColorP3uiv");
    pAPI->glColorP4ui = (PFNGLCOLORP4UIPROC)glbGetProcAddress("glColorP4ui");
    pAPI->glColorP4uiv = (PFNGLCOLORP4UIVPROC)glbGetProcAddress("glColorP4uiv");
    pAPI->glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)glbGetProcAddress("glSecondaryColorP3ui");
    pAPI->glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)glbGetProcAddress("glSecondaryColorP3uiv");
    pAPI->glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)glbGetProcAddress("glMinSampleShading");
    pAPI->glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)glbGetProcAddress("glBlendEquationi");
    pAPI->glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)glbGetProcAddress("glBlendEquationSeparatei");
    pAPI->glBlendFunci = (PFNGLBLENDFUNCIPROC)glbGetProcAddress("glBlendFunci");
    pAPI->glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)glbGetProcAddress("glBlendFuncSeparatei");
    pAPI->glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)glbGetProcAddress("glDrawArraysIndirect");
    pAPI->glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)glbGetProcAddress("glDrawElementsIndirect");
    pAPI->glUniform1d = (PFNGLUNIFORM1DPROC)glbGetProcAddress("glUniform1d");
    pAPI->glUniform2d = (PFNGLUNIFORM2DPROC)glbGetProcAddress("glUniform2d");
    pAPI->glUniform3d = (PFNGLUNIFORM3DPROC)glbGetProcAddress("glUniform3d");
    pAPI->glUniform4d = (PFNGLUNIFORM4DPROC)glbGetProcAddress("glUniform4d");
    pAPI->glUniform1dv = (PFNGLUNIFORM1DVPROC)glbGetProcAddress("glUniform1dv");
    pAPI->glUniform2dv = (PFNGLUNIFORM2DVPROC)glbGetProcAddress("glUniform2dv");
    pAPI->glUniform3dv = (PFNGLUNIFORM3DVPROC)glbGetProcAddress("glUniform3dv");
    pAPI->glUniform4dv = (PFNGLUNIFORM4DVPROC)glbGetProcAddress("glUniform4dv");
    pAPI->glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)glbGetProcAddress("glUniformMatrix2dv");
    pAPI->glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)glbGetProcAddress("glUniformMatrix3dv");
    pAPI->glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)glbGetProcAddress("glUniformMatrix4dv");
    pAPI->glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)glbGetProcAddress("glUniformMatrix2x3dv");
    pAPI->glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)glbGetProcAddress("glUniformMatrix2x4dv");
    pAPI->glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)glbGetProcAddress("glUniformMatrix3x2dv");
    pAPI->glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)glbGetProcAddress("glUniformMatrix3x4dv");
    pAPI->glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)glbGetProcAddress("glUniformMatrix4x2dv");
    pAPI->glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)glbGetProcAddress("glUniformMatrix4x3dv");
    pAPI->glGetUniformdv = (PFNGLGETUNIFORMDVPROC)glbGetProcAddress("glGetUniformdv");
    pAPI->glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)glbGetProcAddress("glGetSubroutineUniformLocation");
    pAPI->glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)glbGetProcAddress("glGetSubroutineIndex");
    pAPI->glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)glbGetProcAddress("glGetActiveSubroutineUniformiv");
    pAPI->glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)glbGetProcAddress("glGetActiveSubroutineUniformName");
    pAPI->glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)glbGetProcAddress("glGetActiveSubroutineName");
    pAPI->glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)glbGetProcAddress("glUniformSubroutinesuiv");
    pAPI->glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)glbGetProcAddress("glGetUniformSubroutineuiv");
    pAPI->glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)glbGetProcAddress("glGetProgramStageiv");
    pAPI->glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)glbGetProcAddress("glPatchParameteri");
    pAPI->glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)glbGetProcAddress("glPatchParameterfv");
    pAPI->glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)glbGetProcAddress("glBindTransformFeedback");
    pAPI->glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)glbGetProcAddress("glDeleteTransformFeedbacks");
    pAPI->glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)glbGetProcAddress("glGenTransformFeedbacks");
    pAPI->glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)glbGetProcAddress("glIsTransformFeedback");
    pAPI->glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)glbGetProcAddress("glPauseTransformFeedback");
    pAPI->glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)glbGetProcAddress("glResumeTransformFeedback");
    pAPI->glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)glbGetProcAddress("glDrawTransformFeedback");
    pAPI->glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)glbGetProcAddress("glDrawTransformFeedbackStream");
    pAPI->glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)glbGetProcAddress("glBeginQueryIndexed");
    pAPI->glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)glbGetProcAddress("glEndQueryIndexed");
    pAPI->glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)glbGetProcAddress("glGetQueryIndexediv");
    pAPI->glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)glbGetProcAddress("glReleaseShaderCompiler");
    pAPI->glShaderBinary = (PFNGLSHADERBINARYPROC)glbGetProcAddress("glShaderBinary");
    pAPI->glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)glbGetProcAddress("glGetShaderPrecisionFormat");
    pAPI->glDepthRangef = (PFNGLDEPTHRANGEFPROC)glbGetProcAddress("glDepthRangef");
    pAPI->glClearDepthf = (PFNGLCLEARDEPTHFPROC)glbGetProcAddress("glClearDepthf");
    pAPI->glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)glbGetProcAddress("glGetProgramBinary");
    pAPI->glProgramBinary = (PFNGLPROGRAMBINARYPROC)glbGetProcAddress("glProgramBinary");
    pAPI->glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)glbGetProcAddress("glProgramParameteri");
    pAPI->glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)glbGetProcAddress("glUseProgramStages");
    pAPI->glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)glbGetProcAddress("glActiveShaderProgram");
    pAPI->glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)glbGetProcAddress("glCreateShaderProgramv");
    pAPI->glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)glbGetProcAddress("glBindProgramPipeline");
    pAPI->glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)glbGetProcAddress("glDeleteProgramPipelines");
    pAPI->glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)glbGetProcAddress("glGenProgramPipelines");
    pAPI->glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)glbGetProcAddress("glIsProgramPipeline");
    pAPI->glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)glbGetProcAddress("glGetProgramPipelineiv");
    pAPI->glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)glbGetProcAddress("glProgramUniform1i");
    pAPI->glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)glbGetProcAddress("glProgramUniform1iv");
    pAPI->glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)glbGetProcAddress("glProgramUniform1f");
    pAPI->glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)glbGetProcAddress("glProgramUniform1fv");
    pAPI->glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)glbGetProcAddress("glProgramUniform1d");
    pAPI->glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)glbGetProcAddress("glProgramUniform1dv");
    pAPI->glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)glbGetProcAddress("glProgramUniform1ui");
    pAPI->glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)glbGetProcAddress("glProgramUniform1uiv");
    pAPI->glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)glbGetProcAddress("glProgramUniform2i");
    pAPI->glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)glbGetProcAddress("glProgramUniform2iv");
    pAPI->glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)glbGetProcAddress("glProgramUniform2f");
    pAPI->glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)glbGetProcAddress("glProgramUniform2fv");
    pAPI->glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)glbGetProcAddress("glProgramUniform2d");
    pAPI->glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)glbGetProcAddress("glProgramUniform2dv");
    pAPI->glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)glbGetProcAddress("glProgramUniform2ui");
    pAPI->glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)glbGetProcAddress("glProgramUniform2uiv");
    pAPI->glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)glbGetProcAddress("glProgramUniform3i");
    pAPI->glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)glbGetProcAddress("glProgramUniform3iv");
    pAPI->glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)glbGetProcAddress("glProgramUniform3f");
    pAPI->glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)glbGetProcAddress("glProgramUniform3fv");
    pAPI->glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)glbGetProcAddress("glProgramUniform3d");
    pAPI->glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)glbGetProcAddress("glProgramUniform3dv");
    pAPI->glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)glbGetProcAddress("glProgramUniform3ui");
    pAPI->glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)glbGetProcAddress("glProgramUniform3uiv");
    pAPI->glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)glbGetProcAddress("glProgramUniform4i");
    pAPI->glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)glbGetProcAddress("glProgramUniform4iv");
    pAPI->glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)glbGetProcAddress("glProgramUniform4f");
    pAPI->glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)glbGetProcAddress("glProgramUniform4fv");
    pAPI->glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)glbGetProcAddress("glProgramUniform4d");
    pAPI->glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)glbGetProcAddress("glProgramUniform4dv");
    pAPI->glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)glbGetProcAddress("glProgramUniform4ui");
    pAPI->glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)glbGetProcAddress("glProgramUniform4uiv");
    pAPI->glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)glbGetProcAddress("glProgramUniformMatrix2fv");
    pAPI->glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)glbGetProcAddress("glProgramUniformMatrix3fv");
    pAPI->glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)glbGetProcAddress("glProgramUniformMatrix4fv");
    pAPI->glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)glbGetProcAddress("glProgramUniformMatrix2dv");
    pAPI->glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)glbGetProcAddress("glProgramUniformMatrix3dv");
    pAPI->glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)glbGetProcAddress("glProgramUniformMatrix4dv");
    pAPI->glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)glbGetProcAddress("glProgramUniformMatrix2x3fv");
    pAPI->glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)glbGetProcAddress("glProgramUniformMatrix3x2fv");
    pAPI->glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)glbGetProcAddress("glProgramUniformMatrix2x4fv");
    pAPI->glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)glbGetProcAddress("glProgramUniformMatrix4x2fv");
    pAPI->glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)glbGetProcAddress("glProgramUniformMatrix3x4fv");
    pAPI->glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)glbGetProcAddress("glProgramUniformMatrix4x3fv");
    pAPI->glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)glbGetProcAddress("glProgramUniformMatrix2x3dv");
    pAPI->glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)glbGetProcAddress("glProgramUniformMatrix3x2dv");
    pAPI->glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)glbGetProcAddress("glProgramUniformMatrix2x4dv");
    pAPI->glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)glbGetProcAddress("glProgramUniformMatrix4x2dv");
    pAPI->glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)glbGetProcAddress("glProgramUniformMatrix3x4dv");
    pAPI->glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)glbGetProcAddress("glProgramUniformMatrix4x3dv");
    pAPI->glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)glbGetProcAddress("glValidateProgramPipeline");
    pAPI->glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)glbGetProcAddress("glGetProgramPipelineInfoLog");
    pAPI->glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)glbGetProcAddress("glVertexAttribL1d");
    pAPI->glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)glbGetProcAddress("glVertexAttribL2d");
    pAPI->glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)glbGetProcAddress("glVertexAttribL3d");
    pAPI->glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)glbGetProcAddress("glVertexAttribL4d");
    pAPI->glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)glbGetProcAddress("glVertexAttribL1dv");
    pAPI->glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)glbGetProcAddress("glVertexAttribL2dv");
    pAPI->glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)glbGetProcAddress("glVertexAttribL3dv");
    pAPI->glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)glbGetProcAddress("glVertexAttribL4dv");
    pAPI->glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)glbGetProcAddress("glVertexAttribLPointer");
    pAPI->glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)glbGetProcAddress("glGetVertexAttribLdv");
    pAPI->glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)glbGetProcAddress("glViewportArrayv");
    pAPI->glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)glbGetProcAddress("glViewportIndexedf");
    pAPI->glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)glbGetProcAddress("glViewportIndexedfv");
    pAPI->glScissorArrayv = (PFNGLSCISSORARRAYVPROC)glbGetProcAddress("glScissorArrayv");
    pAPI->glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)glbGetProcAddress("glScissorIndexed");
    pAPI->glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)glbGetProcAddress("glScissorIndexedv");
    pAPI->glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)glbGetProcAddress("glDepthRangeArrayv");
    pAPI->glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)glbGetProcAddress("glDepthRangeIndexed");
    pAPI->glGetFloati_v = (PFNGLGETFLOATI_VPROC)glbGetProcAddress("glGetFloati_v");
    pAPI->glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)glbGetProcAddress("glGetDoublei_v");
    pAPI->glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)glbGetProcAddress("glDrawArraysInstancedBaseInstance");
    pAPI->glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)glbGetProcAddress("glDrawElementsInstancedBaseInstance");
    pAPI->glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)glbGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");
    pAPI->glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC)glbGetProcAddress("glGetInternalformativ");
    pAPI->glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)glbGetProcAddress("glGetActiveAtomicCounterBufferiv");
    pAPI->glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC)glbGetProcAddress("glBindImageTexture");
    pAPI->glMemoryBarrier = (PFNGLMEMORYBARRIERPROC)glbGetProcAddress("glMemoryBarrier");
    pAPI->glTexStorage1D = (PFNGLTEXSTORAGE1DPROC)glbGetProcAddress("glTexStorage1D");
    pAPI->glTexStorage2D = (PFNGLTEXSTORAGE2DPROC)glbGetProcAddress("glTexStorage2D");
    pAPI->glTexStorage3D = (PFNGLTEXSTORAGE3DPROC)glbGetProcAddress("glTexStorage3D");
    pAPI->glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)glbGetProcAddress("glDrawTransformFeedbackInstanced");
    pAPI->glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)glbGetProcAddress("glDrawTransformFeedbackStreamInstanced");
    pAPI->glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)glbGetProcAddress("glClearBufferData");
    pAPI->glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)glbGetProcAddress("glClearBufferSubData");
    pAPI->glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC)glbGetProcAddress("glDispatchCompute");
    pAPI->glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC)glbGetProcAddress("glDispatchComputeIndirect");
    pAPI->glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)glbGetProcAddress("glCopyImageSubData");
    pAPI->glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC)glbGetProcAddress("glFramebufferParameteri");
    pAPI->glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)glbGetProcAddress("glGetFramebufferParameteriv");
    pAPI->glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC)glbGetProcAddress("glGetInternalformati64v");
    pAPI->glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC)glbGetProcAddress("glInvalidateTexSubImage");
    pAPI->glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC)glbGetProcAddress("glInvalidateTexImage");
    pAPI->glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC)glbGetProcAddress("glInvalidateBufferSubData");
    pAPI->glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC)glbGetProcAddress("glInvalidateBufferData");
    pAPI->glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC)glbGetProcAddress("glInvalidateFramebuffer");
    pAPI->glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC)glbGetProcAddress("glInvalidateSubFramebuffer");
    pAPI->glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)glbGetProcAddress("glMultiDrawArraysIndirect");
    pAPI->glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)glbGetProcAddress("glMultiDrawElementsIndirect");
    pAPI->glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC)glbGetProcAddress("glGetProgramInterfaceiv");
    pAPI->glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC)glbGetProcAddress("glGetProgramResourceIndex");
    pAPI->glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC)glbGetProcAddress("glGetProgramResourceName");
    pAPI->glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC)glbGetProcAddress("glGetProgramResourceiv");
    pAPI->glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC)glbGetProcAddress("glGetProgramResourceLocation");
    pAPI->glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)glbGetProcAddress("glGetProgramResourceLocationIndex");
    pAPI->glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC)glbGetProcAddress("glShaderStorageBlockBinding");
    pAPI->glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC)glbGetProcAddress("glTexBufferRange");
    pAPI->glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)glbGetProcAddress("glTexStorage2DMultisample");
    pAPI->glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)glbGetProcAddress("glTexStorage3DMultisample");
    pAPI->glTextureView = (PFNGLTEXTUREVIEWPROC)glbGetProcAddress("glTextureView");
    pAPI->glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC)glbGetProcAddress("glBindVertexBuffer");
    pAPI->glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC)glbGetProcAddress("glVertexAttribFormat");
    pAPI->glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC)glbGetProcAddress("glVertexAttribIFormat");
    pAPI->glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC)glbGetProcAddress("glVertexAttribLFormat");
    pAPI->glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC)glbGetProcAddress("glVertexAttribBinding");
    pAPI->glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC)glbGetProcAddress("glVertexBindingDivisor");
    pAPI->glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)glbGetProcAddress("glDebugMessageControl");
    pAPI->glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)glbGetProcAddress("glDebugMessageInsert");
    pAPI->glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)glbGetProcAddress("glDebugMessageCallback");
    pAPI->glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)glbGetProcAddress("glGetDebugMessageLog");
    pAPI->glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC)glbGetProcAddress("glPushDebugGroup");
    pAPI->glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC)glbGetProcAddress("glPopDebugGroup");
    pAPI->glObjectLabel = (PFNGLOBJECTLABELPROC)glbGetProcAddress("glObjectLabel");
    pAPI->glGetObjectLabel = (PFNGLGETOBJECTLABELPROC)glbGetProcAddress("glGetObjectLabel");
    pAPI->glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC)glbGetProcAddress("glObjectPtrLabel");
    pAPI->glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC)glbGetProcAddress("glGetObjectPtrLabel");
    pAPI->glBufferStorage = (PFNGLBUFFERSTORAGEPROC)glbGetProcAddress("glBufferStorage");
    pAPI->glClearTexImage = (PFNGLCLEARTEXIMAGEPROC)glbGetProcAddress("glClearTexImage");
    pAPI->glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC)glbGetProcAddress("glClearTexSubImage");
    pAPI->glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC)glbGetProcAddress("glBindBuffersBase");
    pAPI->glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC)glbGetProcAddress("glBindBuffersRange");
    pAPI->glBindTextures = (PFNGLBINDTEXTURESPROC)glbGetProcAddress("glBindTextures");
    pAPI->glBindSamplers = (PFNGLBINDSAMPLERSPROC)glbGetProcAddress("glBindSamplers");
    pAPI->glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC)glbGetProcAddress("glBindImageTextures");
    pAPI->glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC)glbGetProcAddress("glBindVertexBuffers");
    pAPI->glClipControl = (PFNGLCLIPCONTROLPROC)glbGetProcAddress("glClipControl");
    pAPI->glCreateTransformFeedbacks = (PFNGLCREATETRANSFORMFEEDBACKSPROC)glbGetProcAddress("glCreateTransformFeedbacks");
    pAPI->glTransformFeedbackBufferBase = (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)glbGetProcAddress("glTransformFeedbackBufferBase");
    pAPI->glTransformFeedbackBufferRange = (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)glbGetProcAddress("glTransformFeedbackBufferRange");
    pAPI->glGetTransformFeedbackiv = (PFNGLGETTRANSFORMFEEDBACKIVPROC)glbGetProcAddress("glGetTransformFeedbackiv");
    pAPI->glGetTransformFeedbacki_v = (PFNGLGETTRANSFORMFEEDBACKI_VPROC)glbGetProcAddress("glGetTransformFeedbacki_v");
    pAPI->glGetTransformFeedbacki64_v = (PFNGLGETTRANSFORMFEEDBACKI64_VPROC)glbGetProcAddress("glGetTransformFeedbacki64_v");
    pAPI->glCreateBuffers = (PFNGLCREATEBUFFERSPROC)glbGetProcAddress("glCreateBuffers");
    pAPI->glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC)glbGetProcAddress("glNamedBufferStorage");
    pAPI->glNamedBufferData = (PFNGLNAMEDBUFFERDATAPROC)glbGetProcAddress("glNamedBufferData");
    pAPI->glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC)glbGetProcAddress("glNamedBufferSubData");
    pAPI->glCopyNamedBufferSubData = (PFNGLCOPYNAMEDBUFFERSUBDATAPROC)glbGetProcAddress("glCopyNamedBufferSubData");
    pAPI->glClearNamedBufferData = (PFNGLCLEARNAMEDBUFFERDATAPROC)glbGetProcAddress("glClearNamedBufferData");
    pAPI->glClearNamedBufferSubData = (PFNGLCLEARNAMEDBUFFERSUBDATAPROC)glbGetProcAddress("glClearNamedBufferSubData");
    pAPI->glMapNamedBuffer = (PFNGLMAPNAMEDBUFFERPROC)glbGetProcAddress("glMapNamedBuffer");
    pAPI->glMapNamedBufferRange = (PFNGLMAPNAMEDBUFFERRANGEPROC)glbGetProcAddress("glMapNamedBufferRange");
    pAPI->glUnmapNamedBuffer = (PFNGLUNMAPNAMEDBUFFERPROC)glbGetProcAddress("glUnmapNamedBuffer");
    pAPI->glFlushMappedNamedBufferRange = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)glbGetProcAddress("glFlushMappedNamedBufferRange");
    pAPI->glGetNamedBufferParameteriv = (PFNGLGETNAMEDBUFFERPARAMETERIVPROC)glbGetProcAddress("glGetNamedBufferParameteriv");
    pAPI->glGetNamedBufferParameteri64v = (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)glbGetProcAddress("glGetNamedBufferParameteri64v");
    pAPI->glGetNamedBufferPointerv = (PFNGLGETNAMEDBUFFERPOINTERVPROC)glbGetProcAddress("glGetNamedBufferPointerv");
    pAPI->glGetNamedBufferSubData = (PFNGLGETNAMEDBUFFERSUBDATAPROC)glbGetProcAddress("glGetNamedBufferSubData");
    pAPI->glCreateFramebuffers = (PFNGLCREATEFRAMEBUFFERSPROC)glbGetProcAddress("glCreateFramebuffers");
    pAPI->glNamedFramebufferRenderbuffer = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)glbGetProcAddress("glNamedFramebufferRenderbuffer");
    pAPI->glNamedFramebufferParameteri = (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)glbGetProcAddress("glNamedFramebufferParameteri");
    pAPI->glNamedFramebufferTexture = (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)glbGetProcAddress("glNamedFramebufferTexture");
    pAPI->glNamedFramebufferTextureLayer = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)glbGetProcAddress("glNamedFramebufferTextureLayer");
    pAPI->glNamedFramebufferDrawBuffer = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)glbGetProcAddress("glNamedFramebufferDrawBuffer");
    pAPI->glNamedFramebufferDrawBuffers = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)glbGetProcAddress("glNamedFramebufferDrawBuffers");
    pAPI->glNamedFramebufferReadBuffer = (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)glbGetProcAddress("glNamedFramebufferReadBuffer");
    pAPI->glInvalidateNamedFramebufferData = (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)glbGetProcAddress("glInvalidateNamedFramebufferData");
    pAPI->glInvalidateNamedFramebufferSubData = (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)glbGetProcAddress("glInvalidateNamedFramebufferSubData");
    pAPI->glClearNamedFramebufferiv = (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)glbGetProcAddress("glClearNamedFramebufferiv");
    pAPI->glClearNamedFramebufferuiv = (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)glbGetProcAddress("glClearNamedFramebufferuiv");
    pAPI->glClearNamedFramebufferfv = (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)glbGetProcAddress("glClearNamedFramebufferfv");
    pAPI->glClearNamedFramebufferfi = (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)glbGetProcAddress("glClearNamedFramebufferfi");
    pAPI->glBlitNamedFramebuffer = (PFNGLBLITNAMEDFRAMEBUFFERPROC)glbGetProcAddress("glBlitNamedFramebuffer");
    pAPI->glCheckNamedFramebufferStatus = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)glbGetProcAddress("glCheckNamedFramebufferStatus");
    pAPI->glGetNamedFramebufferParameteriv = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)glbGetProcAddress("glGetNamedFramebufferParameteriv");
    pAPI->glGetNamedFramebufferAttachmentParameteriv = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)glbGetProcAddress("glGetNamedFramebufferAttachmentParameteriv");
    pAPI->glCreateRenderbuffers = (PFNGLCREATERENDERBUFFERSPROC)glbGetProcAddress("glCreateRenderbuffers");
    pAPI->glNamedRenderbufferStorage = (PFNGLNAMEDRENDERBUFFERSTORAGEPROC)glbGetProcAddress("glNamedRenderbufferStorage");
    pAPI->glNamedRenderbufferStorageMultisample = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)glbGetProcAddress("glNamedRenderbufferStorageMultisample");
    pAPI->glGetNamedRenderbufferParameteriv = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)glbGetProcAddress("glGetNamedRenderbufferParameteriv");
    pAPI->glCreateTextures = (PFNGLCREATETEXTURESPROC)glbGetProcAddress("glCreateTextures");
    pAPI->glTextureBuffer = (PFNGLTEXTUREBUFFERPROC)glbGetProcAddress("glTextureBuffer");
    pAPI->glTextureBufferRange = (PFNGLTEXTUREBUFFERRANGEPROC)glbGetProcAddress("glTextureBufferRange");
    pAPI->glTextureStorage1D = (PFNGLTEXTURESTORAGE1DPROC)glbGetProcAddress("glTextureStorage1D");
    pAPI->glTextureStorage2D = (PFNGLTEXTURESTORAGE2DPROC)glbGetProcAddress("glTextureStorage2D");
    pAPI->glTextureStorage3D = (PFNGLTEXTURESTORAGE3DPROC)glbGetProcAddress("glTextureStorage3D");
    pAPI->glTextureStorage2DMultisample = (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)glbGetProcAddress("glTextureStorage2DMultisample");
    pAPI->glTextureStorage3DMultisample = (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)glbGetProcAddress("glTextureStorage3DMultisample");
    pAPI->glTextureSubImage1D = (PFNGLTEXTURESUBIMAGE1DPROC)glbGetProcAddress("glTextureSubImage1D");
    pAPI->glTextureSubImage2D = (PFNGLTEXTURESUBIMAGE2DPROC)glbGetProcAddress("glTextureSubImage2D");
    pAPI->glTextureSubImage3D = (PFNGLTEXTURESUBIMAGE3DPROC)glbGetProcAddress("glTextureSubImage3D");
    pAPI->glCompressedTextureSubImage1D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)glbGetProcAddress("glCompressedTextureSubImage1D");
    pAPI->glCompressedTextureSubImage2D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)glbGetProcAddress("glCompressedTextureSubImage2D");
    pAPI->glCompressedTextureSubImage3D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)glbGetProcAddress("glCompressedTextureSubImage3D");
    pAPI->glCopyTextureSubImage1D = (PFNGLCOPYTEXTURESUBIMAGE1DPROC)glbGetProcAddress("glCopyTextureSubImage1D");
    pAPI->glCopyTextureSubImage2D = (PFNGLCOPYTEXTURESUBIMAGE2DPROC)glbGetProcAddress("glCopyTextureSubImage2D");
    pAPI->glCopyTextureSubImage3D = (PFNGLCOPYTEXTURESUBIMAGE3DPROC)glbGetProcAddress("glCopyTextureSubImage3D");
    pAPI->glTextureParameterf = (PFNGLTEXTUREPARAMETERFPROC)glbGetProcAddress("glTextureParameterf");
    pAPI->glTextureParameterfv = (PFNGLTEXTUREPARAMETERFVPROC)glbGetProcAddress("glTextureParameterfv");
    pAPI->glTextureParameteri = (PFNGLTEXTUREPARAMETERIPROC)glbGetProcAddress("glTextureParameteri");
    pAPI->glTextureParameterIiv = (PFNGLTEXTUREPARAMETERIIVPROC)glbGetProcAddress("glTextureParameterIiv");
    pAPI->glTextureParameterIuiv = (PFNGLTEXTUREPARAMETERIUIVPROC)glbGetProcAddress("glTextureParameterIuiv");
    pAPI->glTextureParameteriv = (PFNGLTEXTUREPARAMETERIVPROC)glbGetProcAddress("glTextureParameteriv");
    pAPI->glGenerateTextureMipmap = (PFNGLGENERATETEXTUREMIPMAPPROC)glbGetProcAddress("glGenerateTextureMipmap");
    pAPI->glBindTextureUnit = (PFNGLBINDTEXTUREUNITPROC)glbGetProcAddress("glBindTextureUnit");
    pAPI->glGetTextureImage = (PFNGLGETTEXTUREIMAGEPROC)glbGetProcAddress("glGetTextureImage");
    pAPI->glGetCompressedTextureImage = (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)glbGetProcAddress("glGetCompressedTextureImage");
    pAPI->glGetTextureLevelParameterfv = (PFNGLGETTEXTURELEVELPARAMETERFVPROC)glbGetProcAddress("glGetTextureLevelParameterfv");
    pAPI->glGetTextureLevelParameteriv = (PFNGLGETTEXTURELEVELPARAMETERIVPROC)glbGetProcAddress("glGetTextureLevelParameteriv");
    pAPI->glGetTextureParameterfv = (PFNGLGETTEXTUREPARAMETERFVPROC)glbGetProcAddress("glGetTextureParameterfv");
    pAPI->glGetTextureParameterIiv = (PFNGLGETTEXTUREPARAMETERIIVPROC)glbGetProcAddress("glGetTextureParameterIiv");
    pAPI->glGetTextureParameterIuiv = (PFNGLGETTEXTUREPARAMETERIUIVPROC)glbGetProcAddress("glGetTextureParameterIuiv");
    pAPI->glGetTextureParameteriv = (PFNGLGETTEXTUREPARAMETERIVPROC)glbGetProcAddress("glGetTextureParameteriv");
    pAPI->glCreateVertexArrays = (PFNGLCREATEVERTEXARRAYSPROC)glbGetProcAddress("glCreateVertexArrays");
    pAPI->glDisableVertexArrayAttrib = (PFNGLDISABLEVERTEXARRAYATTRIBPROC)glbGetProcAddress("glDisableVertexArrayAttrib");
    pAPI->glEnableVertexArrayAttrib = (PFNGLENABLEVERTEXARRAYATTRIBPROC)glbGetProcAddress("glEnableVertexArrayAttrib");
    pAPI->glVertexArrayElementBuffer = (PFNGLVERTEXARRAYELEMENTBUFFERPROC)glbGetProcAddress("glVertexArrayElementBuffer");
    pAPI->glVertexArrayVertexBuffer = (PFNGLVERTEXARRAYVERTEXBUFFERPROC)glbGetProcAddress("glVertexArrayVertexBuffer");
    pAPI->glVertexArrayVertexBuffers = (PFNGLVERTEXARRAYVERTEXBUFFERSPROC)glbGetProcAddress("glVertexArrayVertexBuffers");
    pAPI->glVertexArrayAttribBinding = (PFNGLVERTEXARRAYATTRIBBINDINGPROC)glbGetProcAddress("glVertexArrayAttribBinding");
    pAPI->glVertexArrayAttribFormat = (PFNGLVERTEXARRAYATTRIBFORMATPROC)glbGetProcAddress("glVertexArrayAttribFormat");
    pAPI->glVertexArrayAttribIFormat = (PFNGLVERTEXARRAYATTRIBIFORMATPROC)glbGetProcAddress("glVertexArrayAttribIFormat");
    pAPI->glVertexArrayAttribLFormat = (PFNGLVERTEXARRAYATTRIBLFORMATPROC)glbGetProcAddress("glVertexArrayAttribLFormat");
    pAPI->glVertexArrayBindingDivisor = (PFNGLVERTEXARRAYBINDINGDIVISORPROC)glbGetProcAddress("glVertexArrayBindingDivisor");
    pAPI->glGetVertexArrayiv = (PFNGLGETVERTEXARRAYIVPROC)glbGetProcAddress("glGetVertexArrayiv");
    pAPI->glGetVertexArrayIndexediv = (PFNGLGETVERTEXARRAYINDEXEDIVPROC)glbGetProcAddress("glGetVertexArrayIndexediv");
    pAPI->glGetVertexArrayIndexed64iv = (PFNGLGETVERTEXARRAYINDEXED64IVPROC)glbGetProcAddress("glGetVertexArrayIndexed64iv");
    pAPI->glCreateSamplers = (PFNGLCREATESAMPLERSPROC)glbGetProcAddress("glCreateSamplers");
    pAPI->glCreateProgramPipelines = (PFNGLCREATEPROGRAMPIPELINESPROC)glbGetProcAddress("glCreateProgramPipelines");
    pAPI->glCreateQueries = (PFNGLCREATEQUERIESPROC)glbGetProcAddress("glCreateQueries");
    pAPI->glGetQueryBufferObjecti64v = (PFNGLGETQUERYBUFFEROBJECTI64VPROC)glbGetProcAddress("glGetQueryBufferObjecti64v");
    pAPI->glGetQueryBufferObjectiv = (PFNGLGETQUERYBUFFEROBJECTIVPROC)glbGetProcAddress("glGetQueryBufferObjectiv");
    pAPI->glGetQueryBufferObjectui64v = (PFNGLGETQUERYBUFFEROBJECTUI64VPROC)glbGetProcAddress("glGetQueryBufferObjectui64v");
    pAPI->glGetQueryBufferObjectuiv = (PFNGLGETQUERYBUFFEROBJECTUIVPROC)glbGetProcAddress("glGetQueryBufferObjectuiv");
    pAPI->glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC)glbGetProcAddress("glMemoryBarrierByRegion");
    pAPI->glGetTextureSubImage = (PFNGLGETTEXTURESUBIMAGEPROC)glbGetProcAddress("glGetTextureSubImage");
    pAPI->glGetCompressedTextureSubImage = (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)glbGetProcAddress("glGetCompressedTextureSubImage");
    pAPI->glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC)glbGetProcAddress("glGetGraphicsResetStatus");
    pAPI->glGetnCompressedTexImage = (PFNGLGETNCOMPRESSEDTEXIMAGEPROC)glbGetProcAddress("glGetnCompressedTexImage");
    pAPI->glGetnTexImage = (PFNGLGETNTEXIMAGEPROC)glbGetProcAddress("glGetnTexImage");
    pAPI->glGetnUniformdv = (PFNGLGETNUNIFORMDVPROC)glbGetProcAddress("glGetnUniformdv");
    pAPI->glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC)glbGetProcAddress("glGetnUniformfv");
    pAPI->glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC)glbGetProcAddress("glGetnUniformiv");
    pAPI->glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC)glbGetProcAddress("glGetnUniformuiv");
    pAPI->glReadnPixels = (PFNGLREADNPIXELSPROC)glbGetProcAddress("glReadnPixels");
    pAPI->glGetnMapdv = (PFNGLGETNMAPDVPROC)glbGetProcAddress("glGetnMapdv");
    pAPI->glGetnMapfv = (PFNGLGETNMAPFVPROC)glbGetProcAddress("glGetnMapfv");
    pAPI->glGetnMapiv = (PFNGLGETNMAPIVPROC)glbGetProcAddress("glGetnMapiv");
    pAPI->glGetnPixelMapfv = (PFNGLGETNPIXELMAPFVPROC)glbGetProcAddress("glGetnPixelMapfv");
    pAPI->glGetnPixelMapuiv = (PFNGLGETNPIXELMAPUIVPROC)glbGetProcAddress("glGetnPixelMapuiv");
    pAPI->glGetnPixelMapusv = (PFNGLGETNPIXELMAPUSVPROC)glbGetProcAddress("glGetnPixelMapusv");
    pAPI->glGetnPolygonStipple = (PFNGLGETNPOLYGONSTIPPLEPROC)glbGetProcAddress("glGetnPolygonStipple");
    pAPI->glGetnColorTable = (PFNGLGETNCOLORTABLEPROC)glbGetProcAddress("glGetnColorTable");
    pAPI->glGetnConvolutionFilter = (PFNGLGETNCONVOLUTIONFILTERPROC)glbGetProcAddress("glGetnConvolutionFilter");
    pAPI->glGetnSeparableFilter = (PFNGLGETNSEPARABLEFILTERPROC)glbGetProcAddress("glGetnSeparableFilter");
    pAPI->glGetnHistogram = (PFNGLGETNHISTOGRAMPROC)glbGetProcAddress("glGetnHistogram");
    pAPI->glGetnMinmax = (PFNGLGETNMINMAXPROC)glbGetProcAddress("glGetnMinmax");
    pAPI->glTextureBarrier = (PFNGLTEXTUREBARRIERPROC)glbGetProcAddress("glTextureBarrier");
    pAPI->glSpecializeShader = (PFNGLSPECIALIZESHADERPROC)glbGetProcAddress("glSpecializeShader");
    pAPI->glMultiDrawArraysIndirectCount = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)glbGetProcAddress("glMultiDrawArraysIndirectCount");
    pAPI->glMultiDrawElementsIndirectCount = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)glbGetProcAddress("glMultiDrawElementsIndirectCount");
    pAPI->glPolygonOffsetClamp = (PFNGLPOLYGONOFFSETCLAMPPROC)glbGetProcAddress("glPolygonOffsetClamp");
#if defined(GLBIND_WGL)
    pAPI->wglCopyContext = (PFNWGLCOPYCONTEXTPROC)glbGetProcAddress("wglCopyContext");
    pAPI->wglCreateContext = (PFNWGLCREATECONTEXTPROC)glbGetProcAddress("wglCreateContext");
    pAPI->wglCreateLayerContext = (PFNWGLCREATELAYERCONTEXTPROC)glbGetProcAddress("wglCreateLayerContext");
    pAPI->wglDeleteContext = (PFNWGLDELETECONTEXTPROC)glbGetProcAddress("wglDeleteContext");
    pAPI->wglDescribeLayerPlane = (PFNWGLDESCRIBELAYERPLANEPROC)glbGetProcAddress("wglDescribeLayerPlane");
    pAPI->wglGetCurrentContext = (PFNWGLGETCURRENTCONTEXTPROC)glbGetProcAddress("wglGetCurrentContext");
    pAPI->wglGetCurrentDC = (PFNWGLGETCURRENTDCPROC)glbGetProcAddress("wglGetCurrentDC");
    pAPI->wglGetLayerPaletteEntries = (PFNWGLGETLAYERPALETTEENTRIESPROC)glbGetProcAddress("wglGetLayerPaletteEntries");
    pAPI->wglGetProcAddress = (PFNWGLGETPROCADDRESSPROC)glbGetProcAddress("wglGetProcAddress");
    pAPI->wglMakeCurrent = (PFNWGLMAKECURRENTPROC)glbGetProcAddress("wglMakeCurrent");
    pAPI->wglRealizeLayerPalette = (PFNWGLREALIZELAYERPALETTEPROC)glbGetProcAddress("wglRealizeLayerPalette");
    pAPI->wglSetLayerPaletteEntries = (PFNWGLSETLAYERPALETTEENTRIESPROC)glbGetProcAddress("wglSetLayerPaletteEntries");
    pAPI->wglShareLists = (PFNWGLSHARELISTSPROC)glbGetProcAddress("wglShareLists");
    pAPI->wglSwapLayerBuffers = (PFNWGLSWAPLAYERBUFFERSPROC)glbGetProcAddress("wglSwapLayerBuffers");
    pAPI->wglUseFontBitmapsA = (PFNWGLUSEFONTBITMAPSAPROC)glbGetProcAddress("wglUseFontBitmapsA");
    pAPI->wglUseFontBitmapsW = (PFNWGLUSEFONTBITMAPSWPROC)glbGetProcAddress("wglUseFontBitmapsW");
    pAPI->wglUseFontOutlinesA = (PFNWGLUSEFONTOUTLINESAPROC)glbGetProcAddress("wglUseFontOutlinesA");
    pAPI->wglUseFontOutlinesW = (PFNWGLUSEFONTOUTLINESWPROC)glbGetProcAddress("wglUseFontOutlinesW");
#endif /* GLBIND_WGL */
#if defined(GLBIND_GLX)
    pAPI->glXChooseVisual = (PFNGLXCHOOSEVISUALPROC)glbGetProcAddress("glXChooseVisual");
    pAPI->glXCreateContext = (PFNGLXCREATECONTEXTPROC)glbGetProcAddress("glXCreateContext");
    pAPI->glXDestroyContext = (PFNGLXDESTROYCONTEXTPROC)glbGetProcAddress("glXDestroyContext");
    pAPI->glXMakeCurrent = (PFNGLXMAKECURRENTPROC)glbGetProcAddress("glXMakeCurrent");
    pAPI->glXCopyContext = (PFNGLXCOPYCONTEXTPROC)glbGetProcAddress("glXCopyContext");
    pAPI->glXSwapBuffers = (PFNGLXSWAPBUFFERSPROC)glbGetProcAddress("glXSwapBuffers");
    pAPI->glXCreateGLXPixmap = (PFNGLXCREATEGLXPIXMAPPROC)glbGetProcAddress("glXCreateGLXPixmap");
    pAPI->glXDestroyGLXPixmap = (PFNGLXDESTROYGLXPIXMAPPROC)glbGetProcAddress("glXDestroyGLXPixmap");
    pAPI->glXQueryExtension = (PFNGLXQUERYEXTENSIONPROC)glbGetProcAddress("glXQueryExtension");
    pAPI->glXQueryVersion = (PFNGLXQUERYVERSIONPROC)glbGetProcAddress("glXQueryVersion");
    pAPI->glXIsDirect = (PFNGLXISDIRECTPROC)glbGetProcAddress("glXIsDirect");
    pAPI->glXGetConfig = (PFNGLXGETCONFIGPROC)glbGetProcAddress("glXGetConfig");
    pAPI->glXGetCurrentContext = (PFNGLXGETCURRENTCONTEXTPROC)glbGetProcAddress("glXGetCurrentContext");
    pAPI->glXGetCurrentDrawable = (PFNGLXGETCURRENTDRAWABLEPROC)glbGetProcAddress("glXGetCurrentDrawable");
    pAPI->glXWaitGL = (PFNGLXWAITGLPROC)glbGetProcAddress("glXWaitGL");
    pAPI->glXWaitX = (PFNGLXWAITXPROC)glbGetProcAddress("glXWaitX");
    pAPI->glXUseXFont = (PFNGLXUSEXFONTPROC)glbGetProcAddress("glXUseXFont");
    pAPI->glXQueryExtensionsString = (PFNGLXQUERYEXTENSIONSSTRINGPROC)glbGetProcAddress("glXQueryExtensionsString");
    pAPI->glXQueryServerString = (PFNGLXQUERYSERVERSTRINGPROC)glbGetProcAddress("glXQueryServerString");
    pAPI->glXGetClientString = (PFNGLXGETCLIENTSTRINGPROC)glbGetProcAddress("glXGetClientString");
    pAPI->glXGetCurrentDisplay = (PFNGLXGETCURRENTDISPLAYPROC)glbGetProcAddress("glXGetCurrentDisplay");
    pAPI->glXGetFBConfigs = (PFNGLXGETFBCONFIGSPROC)glbGetProcAddress("glXGetFBConfigs");
    pAPI->glXChooseFBConfig = (PFNGLXCHOOSEFBCONFIGPROC)glbGetProcAddress("glXChooseFBConfig");
    pAPI->glXGetFBConfigAttrib = (PFNGLXGETFBCONFIGATTRIBPROC)glbGetProcAddress("glXGetFBConfigAttrib");
    pAPI->glXGetVisualFromFBConfig = (PFNGLXGETVISUALFROMFBCONFIGPROC)glbGetProcAddress("glXGetVisualFromFBConfig");
    pAPI->glXCreateWindow = (PFNGLXCREATEWINDOWPROC)glbGetProcAddress("glXCreateWindow");
    pAPI->glXDestroyWindow = (PFNGLXDESTROYWINDOWPROC)glbGetProcAddress("glXDestroyWindow");
    pAPI->glXCreatePixmap = (PFNGLXCREATEPIXMAPPROC)glbGetProcAddress("glXCreatePixmap");
    pAPI->glXDestroyPixmap = (PFNGLXDESTROYPIXMAPPROC)glbGetProcAddress("glXDestroyPixmap");
    pAPI->glXCreatePbuffer = (PFNGLXCREATEPBUFFERPROC)glbGetProcAddress("glXCreatePbuffer");
    pAPI->glXDestroyPbuffer = (PFNGLXDESTROYPBUFFERPROC)glbGetProcAddress("glXDestroyPbuffer");
    pAPI->glXQueryDrawable = (PFNGLXQUERYDRAWABLEPROC)glbGetProcAddress("glXQueryDrawable");
    pAPI->glXCreateNewContext = (PFNGLXCREATENEWCONTEXTPROC)glbGetProcAddress("glXCreateNewContext");
    pAPI->glXMakeContextCurrent = (PFNGLXMAKECONTEXTCURRENTPROC)glbGetProcAddress("glXMakeContextCurrent");
    pAPI->glXGetCurrentReadDrawable = (PFNGLXGETCURRENTREADDRAWABLEPROC)glbGetProcAddress("glXGetCurrentReadDrawable");
    pAPI->glXQueryContext = (PFNGLXQUERYCONTEXTPROC)glbGetProcAddress("glXQueryContext");
    pAPI->glXSelectEvent = (PFNGLXSELECTEVENTPROC)glbGetProcAddress("glXSelectEvent");
    pAPI->glXGetSelectedEvent = (PFNGLXGETSELECTEDEVENTPROC)glbGetProcAddress("glXGetSelectedEvent");
    pAPI->glXGetProcAddress = (PFNGLXGETPROCADDRESSPROC)glbGetProcAddress("glXGetProcAddress");
#endif /* GLBIND_GLX */
    pAPI->glTbufferMask3DFX = (PFNGLTBUFFERMASK3DFXPROC)glbGetProcAddress("glTbufferMask3DFX");
    pAPI->glDebugMessageEnableAMD = (PFNGLDEBUGMESSAGEENABLEAMDPROC)glbGetProcAddress("glDebugMessageEnableAMD");
    pAPI->glDebugMessageInsertAMD = (PFNGLDEBUGMESSAGEINSERTAMDPROC)glbGetProcAddress("glDebugMessageInsertAMD");
    pAPI->glDebugMessageCallbackAMD = (PFNGLDEBUGMESSAGECALLBACKAMDPROC)glbGetProcAddress("glDebugMessageCallbackAMD");
    pAPI->glGetDebugMessageLogAMD = (PFNGLGETDEBUGMESSAGELOGAMDPROC)glbGetProcAddress("glGetDebugMessageLogAMD");
    pAPI->glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC)glbGetProcAddress("glBlendFuncIndexedAMD");
    pAPI->glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)glbGetProcAddress("glBlendFuncSeparateIndexedAMD");
    pAPI->glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC)glbGetProcAddress("glBlendEquationIndexedAMD");
    pAPI->glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)glbGetProcAddress("glBlendEquationSeparateIndexedAMD");
    pAPI->glRenderbufferStorageMultisampleAdvancedAMD = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC)glbGetProcAddress("glRenderbufferStorageMultisampleAdvancedAMD");
    pAPI->glNamedRenderbufferStorageMultisampleAdvancedAMD = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC)glbGetProcAddress("glNamedRenderbufferStorageMultisampleAdvancedAMD");
    pAPI->glFramebufferSamplePositionsfvAMD = (PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC)glbGetProcAddress("glFramebufferSamplePositionsfvAMD");
    pAPI->glNamedFramebufferSamplePositionsfvAMD = (PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC)glbGetProcAddress("glNamedFramebufferSamplePositionsfvAMD");
    pAPI->glGetFramebufferParameterfvAMD = (PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC)glbGetProcAddress("glGetFramebufferParameterfvAMD");
    pAPI->glGetNamedFramebufferParameterfvAMD = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC)glbGetProcAddress("glGetNamedFramebufferParameterfvAMD");
    pAPI->glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC)glbGetProcAddress("glUniform1i64NV");
    pAPI->glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC)glbGetProcAddress("glUniform2i64NV");
    pAPI->glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC)glbGetProcAddress("glUniform3i64NV");
    pAPI->glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC)glbGetProcAddress("glUniform4i64NV");
    pAPI->glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC)glbGetProcAddress("glUniform1i64vNV");
    pAPI->glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC)glbGetProcAddress("glUniform2i64vNV");
    pAPI->glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC)glbGetProcAddress("glUniform3i64vNV");
    pAPI->glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC)glbGetProcAddress("glUniform4i64vNV");
    pAPI->glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC)glbGetProcAddress("glUniform1ui64NV");
    pAPI->glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC)glbGetProcAddress("glUniform2ui64NV");
    pAPI->glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC)glbGetProcAddress("glUniform3ui64NV");
    pAPI->glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC)glbGetProcAddress("glUniform4ui64NV");
    pAPI->glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC)glbGetProcAddress("glUniform1ui64vNV");
    pAPI->glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC)glbGetProcAddress("glUniform2ui64vNV");
    pAPI->glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC)glbGetProcAddress("glUniform3ui64vNV");
    pAPI->glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC)glbGetProcAddress("glUniform4ui64vNV");
    pAPI->glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC)glbGetProcAddress("glGetUniformi64vNV");
    pAPI->glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC)glbGetProcAddress("glGetUniformui64vNV");
    pAPI->glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC)glbGetProcAddress("glProgramUniform1i64NV");
    pAPI->glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC)glbGetProcAddress("glProgramUniform2i64NV");
    pAPI->glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC)glbGetProcAddress("glProgramUniform3i64NV");
    pAPI->glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC)glbGetProcAddress("glProgramUniform4i64NV");
    pAPI->glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC)glbGetProcAddress("glProgramUniform1i64vNV");
    pAPI->glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC)glbGetProcAddress("glProgramUniform2i64vNV");
    pAPI->glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC)glbGetProcAddress("glProgramUniform3i64vNV");
    pAPI->glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC)glbGetProcAddress("glProgramUniform4i64vNV");
    pAPI->glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC)glbGetProcAddress("glProgramUniform1ui64NV");
    pAPI->glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC)glbGetProcAddress("glProgramUniform2ui64NV");
    pAPI->glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC)glbGetProcAddress("glProgramUniform3ui64NV");
    pAPI->glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC)glbGetProcAddress("glProgramUniform4ui64NV");
    pAPI->glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC)glbGetProcAddress("glProgramUniform1ui64vNV");
    pAPI->glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC)glbGetProcAddress("glProgramUniform2ui64vNV");
    pAPI->glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC)glbGetProcAddress("glProgramUniform3ui64vNV");
    pAPI->glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC)glbGetProcAddress("glProgramUniform4ui64vNV");
    pAPI->glVertexAttribParameteriAMD = (PFNGLVERTEXATTRIBPARAMETERIAMDPROC)glbGetProcAddress("glVertexAttribParameteriAMD");
    pAPI->glMultiDrawArraysIndirectAMD = (PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)glbGetProcAddress("glMultiDrawArraysIndirectAMD");
    pAPI->glMultiDrawElementsIndirectAMD = (PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)glbGetProcAddress("glMultiDrawElementsIndirectAMD");
    pAPI->glGenNamesAMD = (PFNGLGENNAMESAMDPROC)glbGetProcAddress("glGenNamesAMD");
    pAPI->glDeleteNamesAMD = (PFNGLDELETENAMESAMDPROC)glbGetProcAddress("glDeleteNamesAMD");
    pAPI->glIsNameAMD = (PFNGLISNAMEAMDPROC)glbGetProcAddress("glIsNameAMD");
    pAPI->glQueryObjectParameteruiAMD = (PFNGLQUERYOBJECTPARAMETERUIAMDPROC)glbGetProcAddress("glQueryObjectParameteruiAMD");
    pAPI->glGetPerfMonitorGroupsAMD = (PFNGLGETPERFMONITORGROUPSAMDPROC)glbGetProcAddress("glGetPerfMonitorGroupsAMD");
    pAPI->glGetPerfMonitorCountersAMD = (PFNGLGETPERFMONITORCOUNTERSAMDPROC)glbGetProcAddress("glGetPerfMonitorCountersAMD");
    pAPI->glGetPerfMonitorGroupStringAMD = (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)glbGetProcAddress("glGetPerfMonitorGroupStringAMD");
    pAPI->glGetPerfMonitorCounterStringAMD = (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)glbGetProcAddress("glGetPerfMonitorCounterStringAMD");
    pAPI->glGetPerfMonitorCounterInfoAMD = (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)glbGetProcAddress("glGetPerfMonitorCounterInfoAMD");
    pAPI->glGenPerfMonitorsAMD = (PFNGLGENPERFMONITORSAMDPROC)glbGetProcAddress("glGenPerfMonitorsAMD");
    pAPI->glDeletePerfMonitorsAMD = (PFNGLDELETEPERFMONITORSAMDPROC)glbGetProcAddress("glDeletePerfMonitorsAMD");
    pAPI->glSelectPerfMonitorCountersAMD = (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)glbGetProcAddress("glSelectPerfMonitorCountersAMD");
    pAPI->glBeginPerfMonitorAMD = (PFNGLBEGINPERFMONITORAMDPROC)glbGetProcAddress("glBeginPerfMonitorAMD");
    pAPI->glEndPerfMonitorAMD = (PFNGLENDPERFMONITORAMDPROC)glbGetProcAddress("glEndPerfMonitorAMD");
    pAPI->glGetPerfMonitorCounterDataAMD = (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)glbGetProcAddress("glGetPerfMonitorCounterDataAMD");
    pAPI->glSetMultisamplefvAMD = (PFNGLSETMULTISAMPLEFVAMDPROC)glbGetProcAddress("glSetMultisamplefvAMD");
    pAPI->glTexStorageSparseAMD = (PFNGLTEXSTORAGESPARSEAMDPROC)glbGetProcAddress("glTexStorageSparseAMD");
    pAPI->glTextureStorageSparseAMD = (PFNGLTEXTURESTORAGESPARSEAMDPROC)glbGetProcAddress("glTextureStorageSparseAMD");
    pAPI->glStencilOpValueAMD = (PFNGLSTENCILOPVALUEAMDPROC)glbGetProcAddress("glStencilOpValueAMD");
    pAPI->glTessellationFactorAMD = (PFNGLTESSELLATIONFACTORAMDPROC)glbGetProcAddress("glTessellationFactorAMD");
    pAPI->glTessellationModeAMD = (PFNGLTESSELLATIONMODEAMDPROC)glbGetProcAddress("glTessellationModeAMD");
    pAPI->glElementPointerAPPLE = (PFNGLELEMENTPOINTERAPPLEPROC)glbGetProcAddress("glElementPointerAPPLE");
    pAPI->glDrawElementArrayAPPLE = (PFNGLDRAWELEMENTARRAYAPPLEPROC)glbGetProcAddress("glDrawElementArrayAPPLE");
    pAPI->glDrawRangeElementArrayAPPLE = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)glbGetProcAddress("glDrawRangeElementArrayAPPLE");
    pAPI->glMultiDrawElementArrayAPPLE = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)glbGetProcAddress("glMultiDrawElementArrayAPPLE");
    pAPI->glMultiDrawRangeElementArrayAPPLE = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)glbGetProcAddress("glMultiDrawRangeElementArrayAPPLE");
    pAPI->glGenFencesAPPLE = (PFNGLGENFENCESAPPLEPROC)glbGetProcAddress("glGenFencesAPPLE");
    pAPI->glDeleteFencesAPPLE = (PFNGLDELETEFENCESAPPLEPROC)glbGetProcAddress("glDeleteFencesAPPLE");
    pAPI->glSetFenceAPPLE = (PFNGLSETFENCEAPPLEPROC)glbGetProcAddress("glSetFenceAPPLE");
    pAPI->glIsFenceAPPLE = (PFNGLISFENCEAPPLEPROC)glbGetProcAddress("glIsFenceAPPLE");
    pAPI->glTestFenceAPPLE = (PFNGLTESTFENCEAPPLEPROC)glbGetProcAddress("glTestFenceAPPLE");
    pAPI->glFinishFenceAPPLE = (PFNGLFINISHFENCEAPPLEPROC)glbGetProcAddress("glFinishFenceAPPLE");
    pAPI->glTestObjectAPPLE = (PFNGLTESTOBJECTAPPLEPROC)glbGetProcAddress("glTestObjectAPPLE");
    pAPI->glFinishObjectAPPLE = (PFNGLFINISHOBJECTAPPLEPROC)glbGetProcAddress("glFinishObjectAPPLE");
    pAPI->glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC)glbGetProcAddress("glBufferParameteriAPPLE");
    pAPI->glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)glbGetProcAddress("glFlushMappedBufferRangeAPPLE");
    pAPI->glObjectPurgeableAPPLE = (PFNGLOBJECTPURGEABLEAPPLEPROC)glbGetProcAddress("glObjectPurgeableAPPLE");
    pAPI->glObjectUnpurgeableAPPLE = (PFNGLOBJECTUNPURGEABLEAPPLEPROC)glbGetProcAddress("glObjectUnpurgeableAPPLE");
    pAPI->glGetObjectParameterivAPPLE = (PFNGLGETOBJECTPARAMETERIVAPPLEPROC)glbGetProcAddress("glGetObjectParameterivAPPLE");
    pAPI->glTextureRangeAPPLE = (PFNGLTEXTURERANGEAPPLEPROC)glbGetProcAddress("glTextureRangeAPPLE");
    pAPI->glGetTexParameterPointervAPPLE = (PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)glbGetProcAddress("glGetTexParameterPointervAPPLE");
    pAPI->glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC)glbGetProcAddress("glBindVertexArrayAPPLE");
    pAPI->glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)glbGetProcAddress("glDeleteVertexArraysAPPLE");
    pAPI->glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)glbGetProcAddress("glGenVertexArraysAPPLE");
    pAPI->glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)glbGetProcAddress("glIsVertexArrayAPPLE");
    pAPI->glVertexArrayRangeAPPLE = (PFNGLVERTEXARRAYRANGEAPPLEPROC)glbGetProcAddress("glVertexArrayRangeAPPLE");
    pAPI->glFlushVertexArrayRangeAPPLE = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)glbGetProcAddress("glFlushVertexArrayRangeAPPLE");
    pAPI->glVertexArrayParameteriAPPLE = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)glbGetProcAddress("glVertexArrayParameteriAPPLE");
    pAPI->glEnableVertexAttribAPPLE = (PFNGLENABLEVERTEXATTRIBAPPLEPROC)glbGetProcAddress("glEnableVertexAttribAPPLE");
    pAPI->glDisableVertexAttribAPPLE = (PFNGLDISABLEVERTEXATTRIBAPPLEPROC)glbGetProcAddress("glDisableVertexAttribAPPLE");
    pAPI->glIsVertexAttribEnabledAPPLE = (PFNGLISVERTEXATTRIBENABLEDAPPLEPROC)glbGetProcAddress("glIsVertexAttribEnabledAPPLE");
    pAPI->glMapVertexAttrib1dAPPLE = (PFNGLMAPVERTEXATTRIB1DAPPLEPROC)glbGetProcAddress("glMapVertexAttrib1dAPPLE");
    pAPI->glMapVertexAttrib1fAPPLE = (PFNGLMAPVERTEXATTRIB1FAPPLEPROC)glbGetProcAddress("glMapVertexAttrib1fAPPLE");
    pAPI->glMapVertexAttrib2dAPPLE = (PFNGLMAPVERTEXATTRIB2DAPPLEPROC)glbGetProcAddress("glMapVertexAttrib2dAPPLE");
    pAPI->glMapVertexAttrib2fAPPLE = (PFNGLMAPVERTEXATTRIB2FAPPLEPROC)glbGetProcAddress("glMapVertexAttrib2fAPPLE");
    pAPI->glPrimitiveBoundingBoxARB = (PFNGLPRIMITIVEBOUNDINGBOXARBPROC)glbGetProcAddress("glPrimitiveBoundingBoxARB");
    pAPI->glGetTextureHandleARB = (PFNGLGETTEXTUREHANDLEARBPROC)glbGetProcAddress("glGetTextureHandleARB");
    pAPI->glGetTextureSamplerHandleARB = (PFNGLGETTEXTURESAMPLERHANDLEARBPROC)glbGetProcAddress("glGetTextureSamplerHandleARB");
    pAPI->glMakeTextureHandleResidentARB = (PFNGLMAKETEXTUREHANDLERESIDENTARBPROC)glbGetProcAddress("glMakeTextureHandleResidentARB");
    pAPI->glMakeTextureHandleNonResidentARB = (PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC)glbGetProcAddress("glMakeTextureHandleNonResidentARB");
    pAPI->glGetImageHandleARB = (PFNGLGETIMAGEHANDLEARBPROC)glbGetProcAddress("glGetImageHandleARB");
    pAPI->glMakeImageHandleResidentARB = (PFNGLMAKEIMAGEHANDLERESIDENTARBPROC)glbGetProcAddress("glMakeImageHandleResidentARB");
    pAPI->glMakeImageHandleNonResidentARB = (PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC)glbGetProcAddress("glMakeImageHandleNonResidentARB");
    pAPI->glUniformHandleui64ARB = (PFNGLUNIFORMHANDLEUI64ARBPROC)glbGetProcAddress("glUniformHandleui64ARB");
    pAPI->glUniformHandleui64vARB = (PFNGLUNIFORMHANDLEUI64VARBPROC)glbGetProcAddress("glUniformHandleui64vARB");
    pAPI->glProgramUniformHandleui64ARB = (PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC)glbGetProcAddress("glProgramUniformHandleui64ARB");
    pAPI->glProgramUniformHandleui64vARB = (PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC)glbGetProcAddress("glProgramUniformHandleui64vARB");
    pAPI->glIsTextureHandleResidentARB = (PFNGLISTEXTUREHANDLERESIDENTARBPROC)glbGetProcAddress("glIsTextureHandleResidentARB");
    pAPI->glIsImageHandleResidentARB = (PFNGLISIMAGEHANDLERESIDENTARBPROC)glbGetProcAddress("glIsImageHandleResidentARB");
    pAPI->glVertexAttribL1ui64ARB = (PFNGLVERTEXATTRIBL1UI64ARBPROC)glbGetProcAddress("glVertexAttribL1ui64ARB");
    pAPI->glVertexAttribL1ui64vARB = (PFNGLVERTEXATTRIBL1UI64VARBPROC)glbGetProcAddress("glVertexAttribL1ui64vARB");
    pAPI->glGetVertexAttribLui64vARB = (PFNGLGETVERTEXATTRIBLUI64VARBPROC)glbGetProcAddress("glGetVertexAttribLui64vARB");
    pAPI->glCreateSyncFromCLeventARB = (PFNGLCREATESYNCFROMCLEVENTARBPROC)glbGetProcAddress("glCreateSyncFromCLeventARB");
    pAPI->glClampColorARB = (PFNGLCLAMPCOLORARBPROC)glbGetProcAddress("glClampColorARB");
    pAPI->glDispatchComputeGroupSizeARB = (PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)glbGetProcAddress("glDispatchComputeGroupSizeARB");
    pAPI->glDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC)glbGetProcAddress("glDebugMessageControlARB");
    pAPI->glDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC)glbGetProcAddress("glDebugMessageInsertARB");
    pAPI->glDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC)glbGetProcAddress("glDebugMessageCallbackARB");
    pAPI->glGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC)glbGetProcAddress("glGetDebugMessageLogARB");
    pAPI->glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)glbGetProcAddress("glDrawBuffersARB");
    pAPI->glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC)glbGetProcAddress("glBlendEquationiARB");
    pAPI->glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC)glbGetProcAddress("glBlendEquationSeparateiARB");
    pAPI->glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC)glbGetProcAddress("glBlendFunciARB");
    pAPI->glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC)glbGetProcAddress("glBlendFuncSeparateiARB");
    pAPI->glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)glbGetProcAddress("glDrawArraysInstancedARB");
    pAPI->glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)glbGetProcAddress("glDrawElementsInstancedARB");
    pAPI->glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC)glbGetProcAddress("glProgramStringARB");
    pAPI->glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)glbGetProcAddress("glBindProgramARB");
    pAPI->glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)glbGetProcAddress("glDeleteProgramsARB");
    pAPI->glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)glbGetProcAddress("glGenProgramsARB");
    pAPI->glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC)glbGetProcAddress("glProgramEnvParameter4dARB");
    pAPI->glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC)glbGetProcAddress("glProgramEnvParameter4dvARB");
    pAPI->glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC)glbGetProcAddress("glProgramEnvParameter4fARB");
    pAPI->glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC)glbGetProcAddress("glProgramEnvParameter4fvARB");
    pAPI->glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)glbGetProcAddress("glProgramLocalParameter4dARB");
    pAPI->glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)glbGetProcAddress("glProgramLocalParameter4dvARB");
    pAPI->glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)glbGetProcAddress("glProgramLocalParameter4fARB");
    pAPI->glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)glbGetProcAddress("glProgramLocalParameter4fvARB");
    pAPI->glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)glbGetProcAddress("glGetProgramEnvParameterdvARB");
    pAPI->glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)glbGetProcAddress("glGetProgramEnvParameterfvARB");
    pAPI->glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)glbGetProcAddress("glGetProgramLocalParameterdvARB");
    pAPI->glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)glbGetProcAddress("glGetProgramLocalParameterfvARB");
    pAPI->glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC)glbGetProcAddress("glGetProgramivARB");
    pAPI->glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC)glbGetProcAddress("glGetProgramStringARB");
    pAPI->glIsProgramARB = (PFNGLISPROGRAMARBPROC)glbGetProcAddress("glIsProgramARB");
    pAPI->glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)glbGetProcAddress("glProgramParameteriARB");
    pAPI->glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)glbGetProcAddress("glFramebufferTextureARB");
    pAPI->glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)glbGetProcAddress("glFramebufferTextureLayerARB");
    pAPI->glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)glbGetProcAddress("glFramebufferTextureFaceARB");
    pAPI->glSpecializeShaderARB = (PFNGLSPECIALIZESHADERARBPROC)glbGetProcAddress("glSpecializeShaderARB");
    pAPI->glUniform1i64ARB = (PFNGLUNIFORM1I64ARBPROC)glbGetProcAddress("glUniform1i64ARB");
    pAPI->glUniform2i64ARB = (PFNGLUNIFORM2I64ARBPROC)glbGetProcAddress("glUniform2i64ARB");
    pAPI->glUniform3i64ARB = (PFNGLUNIFORM3I64ARBPROC)glbGetProcAddress("glUniform3i64ARB");
    pAPI->glUniform4i64ARB = (PFNGLUNIFORM4I64ARBPROC)glbGetProcAddress("glUniform4i64ARB");
    pAPI->glUniform1i64vARB = (PFNGLUNIFORM1I64VARBPROC)glbGetProcAddress("glUniform1i64vARB");
    pAPI->glUniform2i64vARB = (PFNGLUNIFORM2I64VARBPROC)glbGetProcAddress("glUniform2i64vARB");
    pAPI->glUniform3i64vARB = (PFNGLUNIFORM3I64VARBPROC)glbGetProcAddress("glUniform3i64vARB");
    pAPI->glUniform4i64vARB = (PFNGLUNIFORM4I64VARBPROC)glbGetProcAddress("glUniform4i64vARB");
    pAPI->glUniform1ui64ARB = (PFNGLUNIFORM1UI64ARBPROC)glbGetProcAddress("glUniform1ui64ARB");
    pAPI->glUniform2ui64ARB = (PFNGLUNIFORM2UI64ARBPROC)glbGetProcAddress("glUniform2ui64ARB");
    pAPI->glUniform3ui64ARB = (PFNGLUNIFORM3UI64ARBPROC)glbGetProcAddress("glUniform3ui64ARB");
    pAPI->glUniform4ui64ARB = (PFNGLUNIFORM4UI64ARBPROC)glbGetProcAddress("glUniform4ui64ARB");
    pAPI->glUniform1ui64vARB = (PFNGLUNIFORM1UI64VARBPROC)glbGetProcAddress("glUniform1ui64vARB");
    pAPI->glUniform2ui64vARB = (PFNGLUNIFORM2UI64VARBPROC)glbGetProcAddress("glUniform2ui64vARB");
    pAPI->glUniform3ui64vARB = (PFNGLUNIFORM3UI64VARBPROC)glbGetProcAddress("glUniform3ui64vARB");
    pAPI->glUniform4ui64vARB = (PFNGLUNIFORM4UI64VARBPROC)glbGetProcAddress("glUniform4ui64vARB");
    pAPI->glGetUniformi64vARB = (PFNGLGETUNIFORMI64VARBPROC)glbGetProcAddress("glGetUniformi64vARB");
    pAPI->glGetUniformui64vARB = (PFNGLGETUNIFORMUI64VARBPROC)glbGetProcAddress("glGetUniformui64vARB");
    pAPI->glGetnUniformi64vARB = (PFNGLGETNUNIFORMI64VARBPROC)glbGetProcAddress("glGetnUniformi64vARB");
    pAPI->glGetnUniformui64vARB = (PFNGLGETNUNIFORMUI64VARBPROC)glbGetProcAddress("glGetnUniformui64vARB");
    pAPI->glProgramUniform1i64ARB = (PFNGLPROGRAMUNIFORM1I64ARBPROC)glbGetProcAddress("glProgramUniform1i64ARB");
    pAPI->glProgramUniform2i64ARB = (PFNGLPROGRAMUNIFORM2I64ARBPROC)glbGetProcAddress("glProgramUniform2i64ARB");
    pAPI->glProgramUniform3i64ARB = (PFNGLPROGRAMUNIFORM3I64ARBPROC)glbGetProcAddress("glProgramUniform3i64ARB");
    pAPI->glProgramUniform4i64ARB = (PFNGLPROGRAMUNIFORM4I64ARBPROC)glbGetProcAddress("glProgramUniform4i64ARB");
    pAPI->glProgramUniform1i64vARB = (PFNGLPROGRAMUNIFORM1I64VARBPROC)glbGetProcAddress("glProgramUniform1i64vARB");
    pAPI->glProgramUniform2i64vARB = (PFNGLPROGRAMUNIFORM2I64VARBPROC)glbGetProcAddress("glProgramUniform2i64vARB");
    pAPI->glProgramUniform3i64vARB = (PFNGLPROGRAMUNIFORM3I64VARBPROC)glbGetProcAddress("glProgramUniform3i64vARB");
    pAPI->glProgramUniform4i64vARB = (PFNGLPROGRAMUNIFORM4I64VARBPROC)glbGetProcAddress("glProgramUniform4i64vARB");
    pAPI->glProgramUniform1ui64ARB = (PFNGLPROGRAMUNIFORM1UI64ARBPROC)glbGetProcAddress("glProgramUniform1ui64ARB");
    pAPI->glProgramUniform2ui64ARB = (PFNGLPROGRAMUNIFORM2UI64ARBPROC)glbGetProcAddress("glProgramUniform2ui64ARB");
    pAPI->glProgramUniform3ui64ARB = (PFNGLPROGRAMUNIFORM3UI64ARBPROC)glbGetProcAddress("glProgramUniform3ui64ARB");
    pAPI->glProgramUniform4ui64ARB = (PFNGLPROGRAMUNIFORM4UI64ARBPROC)glbGetProcAddress("glProgramUniform4ui64ARB");
    pAPI->glProgramUniform1ui64vARB = (PFNGLPROGRAMUNIFORM1UI64VARBPROC)glbGetProcAddress("glProgramUniform1ui64vARB");
    pAPI->glProgramUniform2ui64vARB = (PFNGLPROGRAMUNIFORM2UI64VARBPROC)glbGetProcAddress("glProgramUniform2ui64vARB");
    pAPI->glProgramUniform3ui64vARB = (PFNGLPROGRAMUNIFORM3UI64VARBPROC)glbGetProcAddress("glProgramUniform3ui64vARB");
    pAPI->glProgramUniform4ui64vARB = (PFNGLPROGRAMUNIFORM4UI64VARBPROC)glbGetProcAddress("glProgramUniform4ui64vARB");
    pAPI->glColorTable = (PFNGLCOLORTABLEPROC)glbGetProcAddress("glColorTable");
    pAPI->glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)glbGetProcAddress("glColorTableParameterfv");
    pAPI->glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)glbGetProcAddress("glColorTableParameteriv");
    pAPI->glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)glbGetProcAddress("glCopyColorTable");
    pAPI->glGetColorTable = (PFNGLGETCOLORTABLEPROC)glbGetProcAddress("glGetColorTable");
    pAPI->glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)glbGetProcAddress("glGetColorTableParameterfv");
    pAPI->glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)glbGetProcAddress("glGetColorTableParameteriv");
    pAPI->glColorSubTable = (PFNGLCOLORSUBTABLEPROC)glbGetProcAddress("glColorSubTable");
    pAPI->glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC)glbGetProcAddress("glCopyColorSubTable");
    pAPI->glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC)glbGetProcAddress("glConvolutionFilter1D");
    pAPI->glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC)glbGetProcAddress("glConvolutionFilter2D");
    pAPI->glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC)glbGetProcAddress("glConvolutionParameterf");
    pAPI->glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC)glbGetProcAddress("glConvolutionParameterfv");
    pAPI->glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC)glbGetProcAddress("glConvolutionParameteri");
    pAPI->glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC)glbGetProcAddress("glConvolutionParameteriv");
    pAPI->glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)glbGetProcAddress("glCopyConvolutionFilter1D");
    pAPI->glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)glbGetProcAddress("glCopyConvolutionFilter2D");
    pAPI->glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC)glbGetProcAddress("glGetConvolutionFilter");
    pAPI->glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)glbGetProcAddress("glGetConvolutionParameterfv");
    pAPI->glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)glbGetProcAddress("glGetConvolutionParameteriv");
    pAPI->glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC)glbGetProcAddress("glGetSeparableFilter");
    pAPI->glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC)glbGetProcAddress("glSeparableFilter2D");
    pAPI->glGetHistogram = (PFNGLGETHISTOGRAMPROC)glbGetProcAddress("glGetHistogram");
    pAPI->glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC)glbGetProcAddress("glGetHistogramParameterfv");
    pAPI->glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC)glbGetProcAddress("glGetHistogramParameteriv");
    pAPI->glGetMinmax = (PFNGLGETMINMAXPROC)glbGetProcAddress("glGetMinmax");
    pAPI->glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC)glbGetProcAddress("glGetMinmaxParameterfv");
    pAPI->glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC)glbGetProcAddress("glGetMinmaxParameteriv");
    pAPI->glHistogram = (PFNGLHISTOGRAMPROC)glbGetProcAddress("glHistogram");
    pAPI->glMinmax = (PFNGLMINMAXPROC)glbGetProcAddress("glMinmax");
    pAPI->glResetHistogram = (PFNGLRESETHISTOGRAMPROC)glbGetProcAddress("glResetHistogram");
    pAPI->glResetMinmax = (PFNGLRESETMINMAXPROC)glbGetProcAddress("glResetMinmax");
    pAPI->glMultiDrawArraysIndirectCountARB = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)glbGetProcAddress("glMultiDrawArraysIndirectCountARB");
    pAPI->glMultiDrawElementsIndirectCountARB = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)glbGetProcAddress("glMultiDrawElementsIndirectCountARB");
    pAPI->glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC)glbGetProcAddress("glVertexAttribDivisorARB");
    pAPI->glCurrentPaletteMatrixARB = (PFNGLCURRENTPALETTEMATRIXARBPROC)glbGetProcAddress("glCurrentPaletteMatrixARB");
    pAPI->glMatrixIndexubvARB = (PFNGLMATRIXINDEXUBVARBPROC)glbGetProcAddress("glMatrixIndexubvARB");
    pAPI->glMatrixIndexusvARB = (PFNGLMATRIXINDEXUSVARBPROC)glbGetProcAddress("glMatrixIndexusvARB");
    pAPI->glMatrixIndexuivARB = (PFNGLMATRIXINDEXUIVARBPROC)glbGetProcAddress("glMatrixIndexuivARB");
    pAPI->glMatrixIndexPointerARB = (PFNGLMATRIXINDEXPOINTERARBPROC)glbGetProcAddress("glMatrixIndexPointerARB");
    pAPI->glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC)glbGetProcAddress("glSampleCoverageARB");
    pAPI->glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)glbGetProcAddress("glActiveTextureARB");
    pAPI->glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)glbGetProcAddress("glClientActiveTextureARB");
    pAPI->glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)glbGetProcAddress("glMultiTexCoord1dARB");
    pAPI->glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)glbGetProcAddress("glMultiTexCoord1dvARB");
    pAPI->glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)glbGetProcAddress("glMultiTexCoord1fARB");
    pAPI->glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)glbGetProcAddress("glMultiTexCoord1fvARB");
    pAPI->glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)glbGetProcAddress("glMultiTexCoord1iARB");
    pAPI->glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)glbGetProcAddress("glMultiTexCoord1ivARB");
    pAPI->glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)glbGetProcAddress("glMultiTexCoord1sARB");
    pAPI->glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)glbGetProcAddress("glMultiTexCoord1svARB");
    pAPI->glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)glbGetProcAddress("glMultiTexCoord2dARB");
    pAPI->glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)glbGetProcAddress("glMultiTexCoord2dvARB");
    pAPI->glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)glbGetProcAddress("glMultiTexCoord2fARB");
    pAPI->glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)glbGetProcAddress("glMultiTexCoord2fvARB");
    pAPI->glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)glbGetProcAddress("glMultiTexCoord2iARB");
    pAPI->glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)glbGetProcAddress("glMultiTexCoord2ivARB");
    pAPI->glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)glbGetProcAddress("glMultiTexCoord2sARB");
    pAPI->glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)glbGetProcAddress("glMultiTexCoord2svARB");
    pAPI->glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)glbGetProcAddress("glMultiTexCoord3dARB");
    pAPI->glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)glbGetProcAddress("glMultiTexCoord3dvARB");
    pAPI->glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)glbGetProcAddress("glMultiTexCoord3fARB");
    pAPI->glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)glbGetProcAddress("glMultiTexCoord3fvARB");
    pAPI->glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)glbGetProcAddress("glMultiTexCoord3iARB");
    pAPI->glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)glbGetProcAddress("glMultiTexCoord3ivARB");
    pAPI->glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)glbGetProcAddress("glMultiTexCoord3sARB");
    pAPI->glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)glbGetProcAddress("glMultiTexCoord3svARB");
    pAPI->glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)glbGetProcAddress("glMultiTexCoord4dARB");
    pAPI->glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)glbGetProcAddress("glMultiTexCoord4dvARB");
    pAPI->glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)glbGetProcAddress("glMultiTexCoord4fARB");
    pAPI->glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)glbGetProcAddress("glMultiTexCoord4fvARB");
    pAPI->glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)glbGetProcAddress("glMultiTexCoord4iARB");
    pAPI->glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)glbGetProcAddress("glMultiTexCoord4ivARB");
    pAPI->glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)glbGetProcAddress("glMultiTexCoord4sARB");
    pAPI->glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)glbGetProcAddress("glMultiTexCoord4svARB");
    pAPI->glGenQueriesARB = (PFNGLGENQUERIESARBPROC)glbGetProcAddress("glGenQueriesARB");
    pAPI->glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC)glbGetProcAddress("glDeleteQueriesARB");
    pAPI->glIsQueryARB = (PFNGLISQUERYARBPROC)glbGetProcAddress("glIsQueryARB");
    pAPI->glBeginQueryARB = (PFNGLBEGINQUERYARBPROC)glbGetProcAddress("glBeginQueryARB");
    pAPI->glEndQueryARB = (PFNGLENDQUERYARBPROC)glbGetProcAddress("glEndQueryARB");
    pAPI->glGetQueryivARB = (PFNGLGETQUERYIVARBPROC)glbGetProcAddress("glGetQueryivARB");
    pAPI->glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)glbGetProcAddress("glGetQueryObjectivARB");
    pAPI->glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC)glbGetProcAddress("glGetQueryObjectuivARB");
    pAPI->glMaxShaderCompilerThreadsARB = (PFNGLMAXSHADERCOMPILERTHREADSARBPROC)glbGetProcAddress("glMaxShaderCompilerThreadsARB");
    pAPI->glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)glbGetProcAddress("glPointParameterfARB");
    pAPI->glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)glbGetProcAddress("glPointParameterfvARB");
    pAPI->glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC)glbGetProcAddress("glGetGraphicsResetStatusARB");
    pAPI->glGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC)glbGetProcAddress("glGetnTexImageARB");
    pAPI->glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC)glbGetProcAddress("glReadnPixelsARB");
    pAPI->glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)glbGetProcAddress("glGetnCompressedTexImageARB");
    pAPI->glGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC)glbGetProcAddress("glGetnUniformfvARB");
    pAPI->glGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC)glbGetProcAddress("glGetnUniformivARB");
    pAPI->glGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC)glbGetProcAddress("glGetnUniformuivARB");
    pAPI->glGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC)glbGetProcAddress("glGetnUniformdvARB");
    pAPI->glGetnMapdvARB = (PFNGLGETNMAPDVARBPROC)glbGetProcAddress("glGetnMapdvARB");
    pAPI->glGetnMapfvARB = (PFNGLGETNMAPFVARBPROC)glbGetProcAddress("glGetnMapfvARB");
    pAPI->glGetnMapivARB = (PFNGLGETNMAPIVARBPROC)glbGetProcAddress("glGetnMapivARB");
    pAPI->glGetnPixelMapfvARB = (PFNGLGETNPIXELMAPFVARBPROC)glbGetProcAddress("glGetnPixelMapfvARB");
    pAPI->glGetnPixelMapuivARB = (PFNGLGETNPIXELMAPUIVARBPROC)glbGetProcAddress("glGetnPixelMapuivARB");
    pAPI->glGetnPixelMapusvARB = (PFNGLGETNPIXELMAPUSVARBPROC)glbGetProcAddress("glGetnPixelMapusvARB");
    pAPI->glGetnPolygonStippleARB = (PFNGLGETNPOLYGONSTIPPLEARBPROC)glbGetProcAddress("glGetnPolygonStippleARB");
    pAPI->glGetnColorTableARB = (PFNGLGETNCOLORTABLEARBPROC)glbGetProcAddress("glGetnColorTableARB");
    pAPI->glGetnConvolutionFilterARB = (PFNGLGETNCONVOLUTIONFILTERARBPROC)glbGetProcAddress("glGetnConvolutionFilterARB");
    pAPI->glGetnSeparableFilterARB = (PFNGLGETNSEPARABLEFILTERARBPROC)glbGetProcAddress("glGetnSeparableFilterARB");
    pAPI->glGetnHistogramARB = (PFNGLGETNHISTOGRAMARBPROC)glbGetProcAddress("glGetnHistogramARB");
    pAPI->glGetnMinmaxARB = (PFNGLGETNMINMAXARBPROC)glbGetProcAddress("glGetnMinmaxARB");
    pAPI->glFramebufferSampleLocationsfvARB = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)glbGetProcAddress("glFramebufferSampleLocationsfvARB");
    pAPI->glNamedFramebufferSampleLocationsfvARB = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)glbGetProcAddress("glNamedFramebufferSampleLocationsfvARB");
    pAPI->glEvaluateDepthValuesARB = (PFNGLEVALUATEDEPTHVALUESARBPROC)glbGetProcAddress("glEvaluateDepthValuesARB");
    pAPI->glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC)glbGetProcAddress("glMinSampleShadingARB");
    pAPI->glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC)glbGetProcAddress("glDeleteObjectARB");
    pAPI->glGetHandleARB = (PFNGLGETHANDLEARBPROC)glbGetProcAddress("glGetHandleARB");
    pAPI->glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC)glbGetProcAddress("glDetachObjectARB");
    pAPI->glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)glbGetProcAddress("glCreateShaderObjectARB");
    pAPI->glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC)glbGetProcAddress("glShaderSourceARB");
    pAPI->glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC)glbGetProcAddress("glCompileShaderARB");
    pAPI->glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)glbGetProcAddress("glCreateProgramObjectARB");
    pAPI->glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC)glbGetProcAddress("glAttachObjectARB");
    pAPI->glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC)glbGetProcAddress("glLinkProgramARB");
    pAPI->glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)glbGetProcAddress("glUseProgramObjectARB");
    pAPI->glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)glbGetProcAddress("glValidateProgramARB");
    pAPI->glUniform1fARB = (PFNGLUNIFORM1FARBPROC)glbGetProcAddress("glUniform1fARB");
    pAPI->glUniform2fARB = (PFNGLUNIFORM2FARBPROC)glbGetProcAddress("glUniform2fARB");
    pAPI->glUniform3fARB = (PFNGLUNIFORM3FARBPROC)glbGetProcAddress("glUniform3fARB");
    pAPI->glUniform4fARB = (PFNGLUNIFORM4FARBPROC)glbGetProcAddress("glUniform4fARB");
    pAPI->glUniform1iARB = (PFNGLUNIFORM1IARBPROC)glbGetProcAddress("glUniform1iARB");
    pAPI->glUniform2iARB = (PFNGLUNIFORM2IARBPROC)glbGetProcAddress("glUniform2iARB");
    pAPI->glUniform3iARB = (PFNGLUNIFORM3IARBPROC)glbGetProcAddress("glUniform3iARB");
    pAPI->glUniform4iARB = (PFNGLUNIFORM4IARBPROC)glbGetProcAddress("glUniform4iARB");
    pAPI->glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC)glbGetProcAddress("glUniform1fvARB");
    pAPI->glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC)glbGetProcAddress("glUniform2fvARB");
    pAPI->glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC)glbGetProcAddress("glUniform3fvARB");
    pAPI->glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC)glbGetProcAddress("glUniform4fvARB");
    pAPI->glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC)glbGetProcAddress("glUniform1ivARB");
    pAPI->glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC)glbGetProcAddress("glUniform2ivARB");
    pAPI->glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC)glbGetProcAddress("glUniform3ivARB");
    pAPI->glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC)glbGetProcAddress("glUniform4ivARB");
    pAPI->glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)glbGetProcAddress("glUniformMatrix2fvARB");
    pAPI->glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)glbGetProcAddress("glUniformMatrix3fvARB");
    pAPI->glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)glbGetProcAddress("glUniformMatrix4fvARB");
    pAPI->glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC)glbGetProcAddress("glGetObjectParameterfvARB");
    pAPI->glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC)glbGetProcAddress("glGetObjectParameterivARB");
    pAPI->glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC)glbGetProcAddress("glGetInfoLogARB");
    pAPI->glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC)glbGetProcAddress("glGetAttachedObjectsARB");
    pAPI->glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)glbGetProcAddress("glGetUniformLocationARB");
    pAPI->glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)glbGetProcAddress("glGetActiveUniformARB");
    pAPI->glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)glbGetProcAddress("glGetUniformfvARB");
    pAPI->glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC)glbGetProcAddress("glGetUniformivARB");
    pAPI->glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)glbGetProcAddress("glGetShaderSourceARB");
    pAPI->glNamedStringARB = (PFNGLNAMEDSTRINGARBPROC)glbGetProcAddress("glNamedStringARB");
    pAPI->glDeleteNamedStringARB = (PFNGLDELETENAMEDSTRINGARBPROC)glbGetProcAddress("glDeleteNamedStringARB");
    pAPI->glCompileShaderIncludeARB = (PFNGLCOMPILESHADERINCLUDEARBPROC)glbGetProcAddress("glCompileShaderIncludeARB");
    pAPI->glIsNamedStringARB = (PFNGLISNAMEDSTRINGARBPROC)glbGetProcAddress("glIsNamedStringARB");
    pAPI->glGetNamedStringARB = (PFNGLGETNAMEDSTRINGARBPROC)glbGetProcAddress("glGetNamedStringARB");
    pAPI->glGetNamedStringivARB = (PFNGLGETNAMEDSTRINGIVARBPROC)glbGetProcAddress("glGetNamedStringivARB");
    pAPI->glBufferPageCommitmentARB = (PFNGLBUFFERPAGECOMMITMENTARBPROC)glbGetProcAddress("glBufferPageCommitmentARB");
    pAPI->glNamedBufferPageCommitmentEXT = (PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC)glbGetProcAddress("glNamedBufferPageCommitmentEXT");
    pAPI->glNamedBufferPageCommitmentARB = (PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC)glbGetProcAddress("glNamedBufferPageCommitmentARB");
    pAPI->glTexPageCommitmentARB = (PFNGLTEXPAGECOMMITMENTARBPROC)glbGetProcAddress("glTexPageCommitmentARB");
    pAPI->glTexBufferARB = (PFNGLTEXBUFFERARBPROC)glbGetProcAddress("glTexBufferARB");
    pAPI->glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)glbGetProcAddress("glCompressedTexImage3DARB");
    pAPI->glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)glbGetProcAddress("glCompressedTexImage2DARB");
    pAPI->glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)glbGetProcAddress("glCompressedTexImage1DARB");
    pAPI->glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)glbGetProcAddress("glCompressedTexSubImage3DARB");
    pAPI->glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)glbGetProcAddress("glCompressedTexSubImage2DARB");
    pAPI->glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)glbGetProcAddress("glCompressedTexSubImage1DARB");
    pAPI->glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)glbGetProcAddress("glGetCompressedTexImageARB");
    pAPI->glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)glbGetProcAddress("glLoadTransposeMatrixfARB");
    pAPI->glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)glbGetProcAddress("glLoadTransposeMatrixdARB");
    pAPI->glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)glbGetProcAddress("glMultTransposeMatrixfARB");
    pAPI->glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)glbGetProcAddress("glMultTransposeMatrixdARB");
    pAPI->glWeightbvARB = (PFNGLWEIGHTBVARBPROC)glbGetProcAddress("glWeightbvARB");
    pAPI->glWeightsvARB = (PFNGLWEIGHTSVARBPROC)glbGetProcAddress("glWeightsvARB");
    pAPI->glWeightivARB = (PFNGLWEIGHTIVARBPROC)glbGetProcAddress("glWeightivARB");
    pAPI->glWeightfvARB = (PFNGLWEIGHTFVARBPROC)glbGetProcAddress("glWeightfvARB");
    pAPI->glWeightdvARB = (PFNGLWEIGHTDVARBPROC)glbGetProcAddress("glWeightdvARB");
    pAPI->glWeightubvARB = (PFNGLWEIGHTUBVARBPROC)glbGetProcAddress("glWeightubvARB");
    pAPI->glWeightusvARB = (PFNGLWEIGHTUSVARBPROC)glbGetProcAddress("glWeightusvARB");
    pAPI->glWeightuivARB = (PFNGLWEIGHTUIVARBPROC)glbGetProcAddress("glWeightuivARB");
    pAPI->glWeightPointerARB = (PFNGLWEIGHTPOINTERARBPROC)glbGetProcAddress("glWeightPointerARB");
    pAPI->glVertexBlendARB = (PFNGLVERTEXBLENDARBPROC)glbGetProcAddress("glVertexBlendARB");
    pAPI->glBindBufferARB = (PFNGLBINDBUFFERARBPROC)glbGetProcAddress("glBindBufferARB");
    pAPI->glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)glbGetProcAddress("glDeleteBuffersARB");
    pAPI->glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)glbGetProcAddress("glGenBuffersARB");
    pAPI->glIsBufferARB = (PFNGLISBUFFERARBPROC)glbGetProcAddress("glIsBufferARB");
    pAPI->glBufferDataARB = (PFNGLBUFFERDATAARBPROC)glbGetProcAddress("glBufferDataARB");
    pAPI->glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)glbGetProcAddress("glBufferSubDataARB");
    pAPI->glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)glbGetProcAddress("glGetBufferSubDataARB");
    pAPI->glMapBufferARB = (PFNGLMAPBUFFERARBPROC)glbGetProcAddress("glMapBufferARB");
    pAPI->glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)glbGetProcAddress("glUnmapBufferARB");
    pAPI->glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)glbGetProcAddress("glGetBufferParameterivARB");
    pAPI->glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)glbGetProcAddress("glGetBufferPointervARB");
    pAPI->glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)glbGetProcAddress("glVertexAttrib1dARB");
    pAPI->glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)glbGetProcAddress("glVertexAttrib1dvARB");
    pAPI->glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)glbGetProcAddress("glVertexAttrib1fARB");
    pAPI->glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)glbGetProcAddress("glVertexAttrib1fvARB");
    pAPI->glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)glbGetProcAddress("glVertexAttrib1sARB");
    pAPI->glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)glbGetProcAddress("glVertexAttrib1svARB");
    pAPI->glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)glbGetProcAddress("glVertexAttrib2dARB");
    pAPI->glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)glbGetProcAddress("glVertexAttrib2dvARB");
    pAPI->glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)glbGetProcAddress("glVertexAttrib2fARB");
    pAPI->glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)glbGetProcAddress("glVertexAttrib2fvARB");
    pAPI->glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)glbGetProcAddress("glVertexAttrib2sARB");
    pAPI->glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)glbGetProcAddress("glVertexAttrib2svARB");
    pAPI->glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)glbGetProcAddress("glVertexAttrib3dARB");
    pAPI->glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)glbGetProcAddress("glVertexAttrib3dvARB");
    pAPI->glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)glbGetProcAddress("glVertexAttrib3fARB");
    pAPI->glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)glbGetProcAddress("glVertexAttrib3fvARB");
    pAPI->glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)glbGetProcAddress("glVertexAttrib3sARB");
    pAPI->glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)glbGetProcAddress("glVertexAttrib3svARB");
    pAPI->glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)glbGetProcAddress("glVertexAttrib4NbvARB");
    pAPI->glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)glbGetProcAddress("glVertexAttrib4NivARB");
    pAPI->glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)glbGetProcAddress("glVertexAttrib4NsvARB");
    pAPI->glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)glbGetProcAddress("glVertexAttrib4NubARB");
    pAPI->glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)glbGetProcAddress("glVertexAttrib4NubvARB");
    pAPI->glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)glbGetProcAddress("glVertexAttrib4NuivARB");
    pAPI->glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)glbGetProcAddress("glVertexAttrib4NusvARB");
    pAPI->glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)glbGetProcAddress("glVertexAttrib4bvARB");
    pAPI->glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)glbGetProcAddress("glVertexAttrib4dARB");
    pAPI->glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)glbGetProcAddress("glVertexAttrib4dvARB");
    pAPI->glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)glbGetProcAddress("glVertexAttrib4fARB");
    pAPI->glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)glbGetProcAddress("glVertexAttrib4fvARB");
    pAPI->glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)glbGetProcAddress("glVertexAttrib4ivARB");
    pAPI->glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)glbGetProcAddress("glVertexAttrib4sARB");
    pAPI->glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)glbGetProcAddress("glVertexAttrib4svARB");
    pAPI->glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)glbGetProcAddress("glVertexAttrib4ubvARB");
    pAPI->glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)glbGetProcAddress("glVertexAttrib4uivARB");
    pAPI->glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)glbGetProcAddress("glVertexAttrib4usvARB");
    pAPI->glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)glbGetProcAddress("glVertexAttribPointerARB");
    pAPI->glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)glbGetProcAddress("glEnableVertexAttribArrayARB");
    pAPI->glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)glbGetProcAddress("glDisableVertexAttribArrayARB");
    pAPI->glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)glbGetProcAddress("glGetVertexAttribdvARB");
    pAPI->glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)glbGetProcAddress("glGetVertexAttribfvARB");
    pAPI->glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)glbGetProcAddress("glGetVertexAttribivARB");
    pAPI->glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)glbGetProcAddress("glGetVertexAttribPointervARB");
    pAPI->glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)glbGetProcAddress("glBindAttribLocationARB");
    pAPI->glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)glbGetProcAddress("glGetActiveAttribARB");
    pAPI->glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)glbGetProcAddress("glGetAttribLocationARB");
    pAPI->glDepthRangeArraydvNV = (PFNGLDEPTHRANGEARRAYDVNVPROC)glbGetProcAddress("glDepthRangeArraydvNV");
    pAPI->glDepthRangeIndexeddNV = (PFNGLDEPTHRANGEINDEXEDDNVPROC)glbGetProcAddress("glDepthRangeIndexeddNV");
    pAPI->glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC)glbGetProcAddress("glWindowPos2dARB");
    pAPI->glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC)glbGetProcAddress("glWindowPos2dvARB");
    pAPI->glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC)glbGetProcAddress("glWindowPos2fARB");
    pAPI->glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC)glbGetProcAddress("glWindowPos2fvARB");
    pAPI->glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC)glbGetProcAddress("glWindowPos2iARB");
    pAPI->glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC)glbGetProcAddress("glWindowPos2ivARB");
    pAPI->glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC)glbGetProcAddress("glWindowPos2sARB");
    pAPI->glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC)glbGetProcAddress("glWindowPos2svARB");
    pAPI->glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC)glbGetProcAddress("glWindowPos3dARB");
    pAPI->glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC)glbGetProcAddress("glWindowPos3dvARB");
    pAPI->glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC)glbGetProcAddress("glWindowPos3fARB");
    pAPI->glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC)glbGetProcAddress("glWindowPos3fvARB");
    pAPI->glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC)glbGetProcAddress("glWindowPos3iARB");
    pAPI->glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC)glbGetProcAddress("glWindowPos3ivARB");
    pAPI->glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC)glbGetProcAddress("glWindowPos3sARB");
    pAPI->glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC)glbGetProcAddress("glWindowPos3svARB");
    pAPI->glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)glbGetProcAddress("glDrawBuffersATI");
    pAPI->glElementPointerATI = (PFNGLELEMENTPOINTERATIPROC)glbGetProcAddress("glElementPointerATI");
    pAPI->glDrawElementArrayATI = (PFNGLDRAWELEMENTARRAYATIPROC)glbGetProcAddress("glDrawElementArrayATI");
    pAPI->glDrawRangeElementArrayATI = (PFNGLDRAWRANGEELEMENTARRAYATIPROC)glbGetProcAddress("glDrawRangeElementArrayATI");
    pAPI->glTexBumpParameterivATI = (PFNGLTEXBUMPPARAMETERIVATIPROC)glbGetProcAddress("glTexBumpParameterivATI");
    pAPI->glTexBumpParameterfvATI = (PFNGLTEXBUMPPARAMETERFVATIPROC)glbGetProcAddress("glTexBumpParameterfvATI");
    pAPI->glGetTexBumpParameterivATI = (PFNGLGETTEXBUMPPARAMETERIVATIPROC)glbGetProcAddress("glGetTexBumpParameterivATI");
    pAPI->glGetTexBumpParameterfvATI = (PFNGLGETTEXBUMPPARAMETERFVATIPROC)glbGetProcAddress("glGetTexBumpParameterfvATI");
    pAPI->glGenFragmentShadersATI = (PFNGLGENFRAGMENTSHADERSATIPROC)glbGetProcAddress("glGenFragmentShadersATI");
    pAPI->glBindFragmentShaderATI = (PFNGLBINDFRAGMENTSHADERATIPROC)glbGetProcAddress("glBindFragmentShaderATI");
    pAPI->glDeleteFragmentShaderATI = (PFNGLDELETEFRAGMENTSHADERATIPROC)glbGetProcAddress("glDeleteFragmentShaderATI");
    pAPI->glBeginFragmentShaderATI = (PFNGLBEGINFRAGMENTSHADERATIPROC)glbGetProcAddress("glBeginFragmentShaderATI");
    pAPI->glEndFragmentShaderATI = (PFNGLENDFRAGMENTSHADERATIPROC)glbGetProcAddress("glEndFragmentShaderATI");
    pAPI->glPassTexCoordATI = (PFNGLPASSTEXCOORDATIPROC)glbGetProcAddress("glPassTexCoordATI");
    pAPI->glSampleMapATI = (PFNGLSAMPLEMAPATIPROC)glbGetProcAddress("glSampleMapATI");
    pAPI->glColorFragmentOp1ATI = (PFNGLCOLORFRAGMENTOP1ATIPROC)glbGetProcAddress("glColorFragmentOp1ATI");
    pAPI->glColorFragmentOp2ATI = (PFNGLCOLORFRAGMENTOP2ATIPROC)glbGetProcAddress("glColorFragmentOp2ATI");
    pAPI->glColorFragmentOp3ATI = (PFNGLCOLORFRAGMENTOP3ATIPROC)glbGetProcAddress("glColorFragmentOp3ATI");
    pAPI->glAlphaFragmentOp1ATI = (PFNGLALPHAFRAGMENTOP1ATIPROC)glbGetProcAddress("glAlphaFragmentOp1ATI");
    pAPI->glAlphaFragmentOp2ATI = (PFNGLALPHAFRAGMENTOP2ATIPROC)glbGetProcAddress("glAlphaFragmentOp2ATI");
    pAPI->glAlphaFragmentOp3ATI = (PFNGLALPHAFRAGMENTOP3ATIPROC)glbGetProcAddress("glAlphaFragmentOp3ATI");
    pAPI->glSetFragmentShaderConstantATI = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)glbGetProcAddress("glSetFragmentShaderConstantATI");
    pAPI->glMapObjectBufferATI = (PFNGLMAPOBJECTBUFFERATIPROC)glbGetProcAddress("glMapObjectBufferATI");
    pAPI->glUnmapObjectBufferATI = (PFNGLUNMAPOBJECTBUFFERATIPROC)glbGetProcAddress("glUnmapObjectBufferATI");
    pAPI->glPNTrianglesiATI = (PFNGLPNTRIANGLESIATIPROC)glbGetProcAddress("glPNTrianglesiATI");
    pAPI->glPNTrianglesfATI = (PFNGLPNTRIANGLESFATIPROC)glbGetProcAddress("glPNTrianglesfATI");
    pAPI->glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)glbGetProcAddress("glStencilOpSeparateATI");
    pAPI->glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC)glbGetProcAddress("glStencilFuncSeparateATI");
    pAPI->glNewObjectBufferATI = (PFNGLNEWOBJECTBUFFERATIPROC)glbGetProcAddress("glNewObjectBufferATI");
    pAPI->glIsObjectBufferATI = (PFNGLISOBJECTBUFFERATIPROC)glbGetProcAddress("glIsObjectBufferATI");
    pAPI->glUpdateObjectBufferATI = (PFNGLUPDATEOBJECTBUFFERATIPROC)glbGetProcAddress("glUpdateObjectBufferATI");
    pAPI->glGetObjectBufferfvATI = (PFNGLGETOBJECTBUFFERFVATIPROC)glbGetProcAddress("glGetObjectBufferfvATI");
    pAPI->glGetObjectBufferivATI = (PFNGLGETOBJECTBUFFERIVATIPROC)glbGetProcAddress("glGetObjectBufferivATI");
    pAPI->glFreeObjectBufferATI = (PFNGLFREEOBJECTBUFFERATIPROC)glbGetProcAddress("glFreeObjectBufferATI");
    pAPI->glArrayObjectATI = (PFNGLARRAYOBJECTATIPROC)glbGetProcAddress("glArrayObjectATI");
    pAPI->glGetArrayObjectfvATI = (PFNGLGETARRAYOBJECTFVATIPROC)glbGetProcAddress("glGetArrayObjectfvATI");
    pAPI->glGetArrayObjectivATI = (PFNGLGETARRAYOBJECTIVATIPROC)glbGetProcAddress("glGetArrayObjectivATI");
    pAPI->glVariantArrayObjectATI = (PFNGLVARIANTARRAYOBJECTATIPROC)glbGetProcAddress("glVariantArrayObjectATI");
    pAPI->glGetVariantArrayObjectfvATI = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC)glbGetProcAddress("glGetVariantArrayObjectfvATI");
    pAPI->glGetVariantArrayObjectivATI = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC)glbGetProcAddress("glGetVariantArrayObjectivATI");
    pAPI->glVertexAttribArrayObjectATI = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)glbGetProcAddress("glVertexAttribArrayObjectATI");
    pAPI->glGetVertexAttribArrayObjectfvATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)glbGetProcAddress("glGetVertexAttribArrayObjectfvATI");
    pAPI->glGetVertexAttribArrayObjectivATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)glbGetProcAddress("glGetVertexAttribArrayObjectivATI");
    pAPI->glVertexStream1sATI = (PFNGLVERTEXSTREAM1SATIPROC)glbGetProcAddress("glVertexStream1sATI");
    pAPI->glVertexStream1svATI = (PFNGLVERTEXSTREAM1SVATIPROC)glbGetProcAddress("glVertexStream1svATI");
    pAPI->glVertexStream1iATI = (PFNGLVERTEXSTREAM1IATIPROC)glbGetProcAddress("glVertexStream1iATI");
    pAPI->glVertexStream1ivATI = (PFNGLVERTEXSTREAM1IVATIPROC)glbGetProcAddress("glVertexStream1ivATI");
    pAPI->glVertexStream1fATI = (PFNGLVERTEXSTREAM1FATIPROC)glbGetProcAddress("glVertexStream1fATI");
    pAPI->glVertexStream1fvATI = (PFNGLVERTEXSTREAM1FVATIPROC)glbGetProcAddress("glVertexStream1fvATI");
    pAPI->glVertexStream1dATI = (PFNGLVERTEXSTREAM1DATIPROC)glbGetProcAddress("glVertexStream1dATI");
    pAPI->glVertexStream1dvATI = (PFNGLVERTEXSTREAM1DVATIPROC)glbGetProcAddress("glVertexStream1dvATI");
    pAPI->glVertexStream2sATI = (PFNGLVERTEXSTREAM2SATIPROC)glbGetProcAddress("glVertexStream2sATI");
    pAPI->glVertexStream2svATI = (PFNGLVERTEXSTREAM2SVATIPROC)glbGetProcAddress("glVertexStream2svATI");
    pAPI->glVertexStream2iATI = (PFNGLVERTEXSTREAM2IATIPROC)glbGetProcAddress("glVertexStream2iATI");
    pAPI->glVertexStream2ivATI = (PFNGLVERTEXSTREAM2IVATIPROC)glbGetProcAddress("glVertexStream2ivATI");
    pAPI->glVertexStream2fATI = (PFNGLVERTEXSTREAM2FATIPROC)glbGetProcAddress("glVertexStream2fATI");
    pAPI->glVertexStream2fvATI = (PFNGLVERTEXSTREAM2FVATIPROC)glbGetProcAddress("glVertexStream2fvATI");
    pAPI->glVertexStream2dATI = (PFNGLVERTEXSTREAM2DATIPROC)glbGetProcAddress("glVertexStream2dATI");
    pAPI->glVertexStream2dvATI = (PFNGLVERTEXSTREAM2DVATIPROC)glbGetProcAddress("glVertexStream2dvATI");
    pAPI->glVertexStream3sATI = (PFNGLVERTEXSTREAM3SATIPROC)glbGetProcAddress("glVertexStream3sATI");
    pAPI->glVertexStream3svATI = (PFNGLVERTEXSTREAM3SVATIPROC)glbGetProcAddress("glVertexStream3svATI");
    pAPI->glVertexStream3iATI = (PFNGLVERTEXSTREAM3IATIPROC)glbGetProcAddress("glVertexStream3iATI");
    pAPI->glVertexStream3ivATI = (PFNGLVERTEXSTREAM3IVATIPROC)glbGetProcAddress("glVertexStream3ivATI");
    pAPI->glVertexStream3fATI = (PFNGLVERTEXSTREAM3FATIPROC)glbGetProcAddress("glVertexStream3fATI");
    pAPI->glVertexStream3fvATI = (PFNGLVERTEXSTREAM3FVATIPROC)glbGetProcAddress("glVertexStream3fvATI");
    pAPI->glVertexStream3dATI = (PFNGLVERTEXSTREAM3DATIPROC)glbGetProcAddress("glVertexStream3dATI");
    pAPI->glVertexStream3dvATI = (PFNGLVERTEXSTREAM3DVATIPROC)glbGetProcAddress("glVertexStream3dvATI");
    pAPI->glVertexStream4sATI = (PFNGLVERTEXSTREAM4SATIPROC)glbGetProcAddress("glVertexStream4sATI");
    pAPI->glVertexStream4svATI = (PFNGLVERTEXSTREAM4SVATIPROC)glbGetProcAddress("glVertexStream4svATI");
    pAPI->glVertexStream4iATI = (PFNGLVERTEXSTREAM4IATIPROC)glbGetProcAddress("glVertexStream4iATI");
    pAPI->glVertexStream4ivATI = (PFNGLVERTEXSTREAM4IVATIPROC)glbGetProcAddress("glVertexStream4ivATI");
    pAPI->glVertexStream4fATI = (PFNGLVERTEXSTREAM4FATIPROC)glbGetProcAddress("glVertexStream4fATI");
    pAPI->glVertexStream4fvATI = (PFNGLVERTEXSTREAM4FVATIPROC)glbGetProcAddress("glVertexStream4fvATI");
    pAPI->glVertexStream4dATI = (PFNGLVERTEXSTREAM4DATIPROC)glbGetProcAddress("glVertexStream4dATI");
    pAPI->glVertexStream4dvATI = (PFNGLVERTEXSTREAM4DVATIPROC)glbGetProcAddress("glVertexStream4dvATI");
    pAPI->glNormalStream3bATI = (PFNGLNORMALSTREAM3BATIPROC)glbGetProcAddress("glNormalStream3bATI");
    pAPI->glNormalStream3bvATI = (PFNGLNORMALSTREAM3BVATIPROC)glbGetProcAddress("glNormalStream3bvATI");
    pAPI->glNormalStream3sATI = (PFNGLNORMALSTREAM3SATIPROC)glbGetProcAddress("glNormalStream3sATI");
    pAPI->glNormalStream3svATI = (PFNGLNORMALSTREAM3SVATIPROC)glbGetProcAddress("glNormalStream3svATI");
    pAPI->glNormalStream3iATI = (PFNGLNORMALSTREAM3IATIPROC)glbGetProcAddress("glNormalStream3iATI");
    pAPI->glNormalStream3ivATI = (PFNGLNORMALSTREAM3IVATIPROC)glbGetProcAddress("glNormalStream3ivATI");
    pAPI->glNormalStream3fATI = (PFNGLNORMALSTREAM3FATIPROC)glbGetProcAddress("glNormalStream3fATI");
    pAPI->glNormalStream3fvATI = (PFNGLNORMALSTREAM3FVATIPROC)glbGetProcAddress("glNormalStream3fvATI");
    pAPI->glNormalStream3dATI = (PFNGLNORMALSTREAM3DATIPROC)glbGetProcAddress("glNormalStream3dATI");
    pAPI->glNormalStream3dvATI = (PFNGLNORMALSTREAM3DVATIPROC)glbGetProcAddress("glNormalStream3dvATI");
    pAPI->glClientActiveVertexStreamATI = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)glbGetProcAddress("glClientActiveVertexStreamATI");
    pAPI->glVertexBlendEnviATI = (PFNGLVERTEXBLENDENVIATIPROC)glbGetProcAddress("glVertexBlendEnviATI");
    pAPI->glVertexBlendEnvfATI = (PFNGLVERTEXBLENDENVFATIPROC)glbGetProcAddress("glVertexBlendEnvfATI");
    pAPI->glEGLImageTargetTexStorageEXT = (PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC)glbGetProcAddress("glEGLImageTargetTexStorageEXT");
    pAPI->glEGLImageTargetTextureStorageEXT = (PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC)glbGetProcAddress("glEGLImageTargetTextureStorageEXT");
    pAPI->glUniformBufferEXT = (PFNGLUNIFORMBUFFEREXTPROC)glbGetProcAddress("glUniformBufferEXT");
    pAPI->glGetUniformBufferSizeEXT = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC)glbGetProcAddress("glGetUniformBufferSizeEXT");
    pAPI->glGetUniformOffsetEXT = (PFNGLGETUNIFORMOFFSETEXTPROC)glbGetProcAddress("glGetUniformOffsetEXT");
    pAPI->glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)glbGetProcAddress("glBlendColorEXT");
    pAPI->glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)glbGetProcAddress("glBlendEquationSeparateEXT");
    pAPI->glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)glbGetProcAddress("glBlendFuncSeparateEXT");
    pAPI->glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)glbGetProcAddress("glBlendEquationEXT");
    pAPI->glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC)glbGetProcAddress("glColorSubTableEXT");
    pAPI->glCopyColorSubTableEXT = (PFNGLCOPYCOLORSUBTABLEEXTPROC)glbGetProcAddress("glCopyColorSubTableEXT");
    pAPI->glLockArraysEXT = (PFNGLLOCKARRAYSEXTPROC)glbGetProcAddress("glLockArraysEXT");
    pAPI->glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC)glbGetProcAddress("glUnlockArraysEXT");
    pAPI->glConvolutionFilter1DEXT = (PFNGLCONVOLUTIONFILTER1DEXTPROC)glbGetProcAddress("glConvolutionFilter1DEXT");
    pAPI->glConvolutionFilter2DEXT = (PFNGLCONVOLUTIONFILTER2DEXTPROC)glbGetProcAddress("glConvolutionFilter2DEXT");
    pAPI->glConvolutionParameterfEXT = (PFNGLCONVOLUTIONPARAMETERFEXTPROC)glbGetProcAddress("glConvolutionParameterfEXT");
    pAPI->glConvolutionParameterfvEXT = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC)glbGetProcAddress("glConvolutionParameterfvEXT");
    pAPI->glConvolutionParameteriEXT = (PFNGLCONVOLUTIONPARAMETERIEXTPROC)glbGetProcAddress("glConvolutionParameteriEXT");
    pAPI->glConvolutionParameterivEXT = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC)glbGetProcAddress("glConvolutionParameterivEXT");
    pAPI->glCopyConvolutionFilter1DEXT = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)glbGetProcAddress("glCopyConvolutionFilter1DEXT");
    pAPI->glCopyConvolutionFilter2DEXT = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)glbGetProcAddress("glCopyConvolutionFilter2DEXT");
    pAPI->glGetConvolutionFilterEXT = (PFNGLGETCONVOLUTIONFILTEREXTPROC)glbGetProcAddress("glGetConvolutionFilterEXT");
    pAPI->glGetConvolutionParameterfvEXT = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)glbGetProcAddress("glGetConvolutionParameterfvEXT");
    pAPI->glGetConvolutionParameterivEXT = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)glbGetProcAddress("glGetConvolutionParameterivEXT");
    pAPI->glGetSeparableFilterEXT = (PFNGLGETSEPARABLEFILTEREXTPROC)glbGetProcAddress("glGetSeparableFilterEXT");
    pAPI->glSeparableFilter2DEXT = (PFNGLSEPARABLEFILTER2DEXTPROC)glbGetProcAddress("glSeparableFilter2DEXT");
    pAPI->glTangent3bEXT = (PFNGLTANGENT3BEXTPROC)glbGetProcAddress("glTangent3bEXT");
    pAPI->glTangent3bvEXT = (PFNGLTANGENT3BVEXTPROC)glbGetProcAddress("glTangent3bvEXT");
    pAPI->glTangent3dEXT = (PFNGLTANGENT3DEXTPROC)glbGetProcAddress("glTangent3dEXT");
    pAPI->glTangent3dvEXT = (PFNGLTANGENT3DVEXTPROC)glbGetProcAddress("glTangent3dvEXT");
    pAPI->glTangent3fEXT = (PFNGLTANGENT3FEXTPROC)glbGetProcAddress("glTangent3fEXT");
    pAPI->glTangent3fvEXT = (PFNGLTANGENT3FVEXTPROC)glbGetProcAddress("glTangent3fvEXT");
    pAPI->glTangent3iEXT = (PFNGLTANGENT3IEXTPROC)glbGetProcAddress("glTangent3iEXT");
    pAPI->glTangent3ivEXT = (PFNGLTANGENT3IVEXTPROC)glbGetProcAddress("glTangent3ivEXT");
    pAPI->glTangent3sEXT = (PFNGLTANGENT3SEXTPROC)glbGetProcAddress("glTangent3sEXT");
    pAPI->glTangent3svEXT = (PFNGLTANGENT3SVEXTPROC)glbGetProcAddress("glTangent3svEXT");
    pAPI->glBinormal3bEXT = (PFNGLBINORMAL3BEXTPROC)glbGetProcAddress("glBinormal3bEXT");
    pAPI->glBinormal3bvEXT = (PFNGLBINORMAL3BVEXTPROC)glbGetProcAddress("glBinormal3bvEXT");
    pAPI->glBinormal3dEXT = (PFNGLBINORMAL3DEXTPROC)glbGetProcAddress("glBinormal3dEXT");
    pAPI->glBinormal3dvEXT = (PFNGLBINORMAL3DVEXTPROC)glbGetProcAddress("glBinormal3dvEXT");
    pAPI->glBinormal3fEXT = (PFNGLBINORMAL3FEXTPROC)glbGetProcAddress("glBinormal3fEXT");
    pAPI->glBinormal3fvEXT = (PFNGLBINORMAL3FVEXTPROC)glbGetProcAddress("glBinormal3fvEXT");
    pAPI->glBinormal3iEXT = (PFNGLBINORMAL3IEXTPROC)glbGetProcAddress("glBinormal3iEXT");
    pAPI->glBinormal3ivEXT = (PFNGLBINORMAL3IVEXTPROC)glbGetProcAddress("glBinormal3ivEXT");
    pAPI->glBinormal3sEXT = (PFNGLBINORMAL3SEXTPROC)glbGetProcAddress("glBinormal3sEXT");
    pAPI->glBinormal3svEXT = (PFNGLBINORMAL3SVEXTPROC)glbGetProcAddress("glBinormal3svEXT");
    pAPI->glTangentPointerEXT = (PFNGLTANGENTPOINTEREXTPROC)glbGetProcAddress("glTangentPointerEXT");
    pAPI->glBinormalPointerEXT = (PFNGLBINORMALPOINTEREXTPROC)glbGetProcAddress("glBinormalPointerEXT");
    pAPI->glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)glbGetProcAddress("glCopyTexImage1DEXT");
    pAPI->glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)glbGetProcAddress("glCopyTexImage2DEXT");
    pAPI->glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)glbGetProcAddress("glCopyTexSubImage1DEXT");
    pAPI->glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)glbGetProcAddress("glCopyTexSubImage2DEXT");
    pAPI->glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)glbGetProcAddress("glCopyTexSubImage3DEXT");
    pAPI->glCullParameterdvEXT = (PFNGLCULLPARAMETERDVEXTPROC)glbGetProcAddress("glCullParameterdvEXT");
    pAPI->glCullParameterfvEXT = (PFNGLCULLPARAMETERFVEXTPROC)glbGetProcAddress("glCullParameterfvEXT");
    pAPI->glLabelObjectEXT = (PFNGLLABELOBJECTEXTPROC)glbGetProcAddress("glLabelObjectEXT");
    pAPI->glGetObjectLabelEXT = (PFNGLGETOBJECTLABELEXTPROC)glbGetProcAddress("glGetObjectLabelEXT");
    pAPI->glInsertEventMarkerEXT = (PFNGLINSERTEVENTMARKEREXTPROC)glbGetProcAddress("glInsertEventMarkerEXT");
    pAPI->glPushGroupMarkerEXT = (PFNGLPUSHGROUPMARKEREXTPROC)glbGetProcAddress("glPushGroupMarkerEXT");
    pAPI->glPopGroupMarkerEXT = (PFNGLPOPGROUPMARKEREXTPROC)glbGetProcAddress("glPopGroupMarkerEXT");
    pAPI->glDepthBoundsEXT = (PFNGLDEPTHBOUNDSEXTPROC)glbGetProcAddress("glDepthBoundsEXT");
    pAPI->glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC)glbGetProcAddress("glMatrixLoadfEXT");
    pAPI->glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC)glbGetProcAddress("glMatrixLoaddEXT");
    pAPI->glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC)glbGetProcAddress("glMatrixMultfEXT");
    pAPI->glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC)glbGetProcAddress("glMatrixMultdEXT");
    pAPI->glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC)glbGetProcAddress("glMatrixLoadIdentityEXT");
    pAPI->glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC)glbGetProcAddress("glMatrixRotatefEXT");
    pAPI->glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC)glbGetProcAddress("glMatrixRotatedEXT");
    pAPI->glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC)glbGetProcAddress("glMatrixScalefEXT");
    pAPI->glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC)glbGetProcAddress("glMatrixScaledEXT");
    pAPI->glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC)glbGetProcAddress("glMatrixTranslatefEXT");
    pAPI->glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC)glbGetProcAddress("glMatrixTranslatedEXT");
    pAPI->glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC)glbGetProcAddress("glMatrixFrustumEXT");
    pAPI->glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC)glbGetProcAddress("glMatrixOrthoEXT");
    pAPI->glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC)glbGetProcAddress("glMatrixPopEXT");
    pAPI->glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC)glbGetProcAddress("glMatrixPushEXT");
    pAPI->glClientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC)glbGetProcAddress("glClientAttribDefaultEXT");
    pAPI->glPushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)glbGetProcAddress("glPushClientAttribDefaultEXT");
    pAPI->glTextureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC)glbGetProcAddress("glTextureParameterfEXT");
    pAPI->glTextureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC)glbGetProcAddress("glTextureParameterfvEXT");
    pAPI->glTextureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC)glbGetProcAddress("glTextureParameteriEXT");
    pAPI->glTextureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC)glbGetProcAddress("glTextureParameterivEXT");
    pAPI->glTextureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC)glbGetProcAddress("glTextureImage1DEXT");
    pAPI->glTextureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC)glbGetProcAddress("glTextureImage2DEXT");
    pAPI->glTextureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC)glbGetProcAddress("glTextureSubImage1DEXT");
    pAPI->glTextureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC)glbGetProcAddress("glTextureSubImage2DEXT");
    pAPI->glCopyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC)glbGetProcAddress("glCopyTextureImage1DEXT");
    pAPI->glCopyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC)glbGetProcAddress("glCopyTextureImage2DEXT");
    pAPI->glCopyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)glbGetProcAddress("glCopyTextureSubImage1DEXT");
    pAPI->glCopyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)glbGetProcAddress("glCopyTextureSubImage2DEXT");
    pAPI->glGetTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC)glbGetProcAddress("glGetTextureImageEXT");
    pAPI->glGetTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC)glbGetProcAddress("glGetTextureParameterfvEXT");
    pAPI->glGetTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC)glbGetProcAddress("glGetTextureParameterivEXT");
    pAPI->glGetTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)glbGetProcAddress("glGetTextureLevelParameterfvEXT");
    pAPI->glGetTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)glbGetProcAddress("glGetTextureLevelParameterivEXT");
    pAPI->glTextureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC)glbGetProcAddress("glTextureImage3DEXT");
    pAPI->glTextureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC)glbGetProcAddress("glTextureSubImage3DEXT");
    pAPI->glCopyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)glbGetProcAddress("glCopyTextureSubImage3DEXT");
    pAPI->glBindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC)glbGetProcAddress("glBindMultiTextureEXT");
    pAPI->glMultiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC)glbGetProcAddress("glMultiTexCoordPointerEXT");
    pAPI->glMultiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC)glbGetProcAddress("glMultiTexEnvfEXT");
    pAPI->glMultiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC)glbGetProcAddress("glMultiTexEnvfvEXT");
    pAPI->glMultiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC)glbGetProcAddress("glMultiTexEnviEXT");
    pAPI->glMultiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC)glbGetProcAddress("glMultiTexEnvivEXT");
    pAPI->glMultiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC)glbGetProcAddress("glMultiTexGendEXT");
    pAPI->glMultiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC)glbGetProcAddress("glMultiTexGendvEXT");
    pAPI->glMultiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC)glbGetProcAddress("glMultiTexGenfEXT");
    pAPI->glMultiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC)glbGetProcAddress("glMultiTexGenfvEXT");
    pAPI->glMultiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC)glbGetProcAddress("glMultiTexGeniEXT");
    pAPI->glMultiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC)glbGetProcAddress("glMultiTexGenivEXT");
    pAPI->glGetMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC)glbGetProcAddress("glGetMultiTexEnvfvEXT");
    pAPI->glGetMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC)glbGetProcAddress("glGetMultiTexEnvivEXT");
    pAPI->glGetMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC)glbGetProcAddress("glGetMultiTexGendvEXT");
    pAPI->glGetMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC)glbGetProcAddress("glGetMultiTexGenfvEXT");
    pAPI->glGetMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC)glbGetProcAddress("glGetMultiTexGenivEXT");
    pAPI->glMultiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC)glbGetProcAddress("glMultiTexParameteriEXT");
    pAPI->glMultiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC)glbGetProcAddress("glMultiTexParameterivEXT");
    pAPI->glMultiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC)glbGetProcAddress("glMultiTexParameterfEXT");
    pAPI->glMultiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC)glbGetProcAddress("glMultiTexParameterfvEXT");
    pAPI->glMultiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC)glbGetProcAddress("glMultiTexImage1DEXT");
    pAPI->glMultiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC)glbGetProcAddress("glMultiTexImage2DEXT");
    pAPI->glMultiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC)glbGetProcAddress("glMultiTexSubImage1DEXT");
    pAPI->glMultiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC)glbGetProcAddress("glMultiTexSubImage2DEXT");
    pAPI->glCopyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC)glbGetProcAddress("glCopyMultiTexImage1DEXT");
    pAPI->glCopyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC)glbGetProcAddress("glCopyMultiTexImage2DEXT");
    pAPI->glCopyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)glbGetProcAddress("glCopyMultiTexSubImage1DEXT");
    pAPI->glCopyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)glbGetProcAddress("glCopyMultiTexSubImage2DEXT");
    pAPI->glGetMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC)glbGetProcAddress("glGetMultiTexImageEXT");
    pAPI->glGetMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC)glbGetProcAddress("glGetMultiTexParameterfvEXT");
    pAPI->glGetMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC)glbGetProcAddress("glGetMultiTexParameterivEXT");
    pAPI->glGetMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)glbGetProcAddress("glGetMultiTexLevelParameterfvEXT");
    pAPI->glGetMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)glbGetProcAddress("glGetMultiTexLevelParameterivEXT");
    pAPI->glMultiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC)glbGetProcAddress("glMultiTexImage3DEXT");
    pAPI->glMultiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC)glbGetProcAddress("glMultiTexSubImage3DEXT");
    pAPI->glCopyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)glbGetProcAddress("glCopyMultiTexSubImage3DEXT");
    pAPI->glEnableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)glbGetProcAddress("glEnableClientStateIndexedEXT");
    pAPI->glDisableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)glbGetProcAddress("glDisableClientStateIndexedEXT");
    pAPI->glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC)glbGetProcAddress("glGetFloatIndexedvEXT");
    pAPI->glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC)glbGetProcAddress("glGetDoubleIndexedvEXT");
    pAPI->glGetPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC)glbGetProcAddress("glGetPointerIndexedvEXT");
    pAPI->glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)glbGetProcAddress("glEnableIndexedEXT");
    pAPI->glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)glbGetProcAddress("glDisableIndexedEXT");
    pAPI->glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)glbGetProcAddress("glIsEnabledIndexedEXT");
    pAPI->glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)glbGetProcAddress("glGetIntegerIndexedvEXT");
    pAPI->glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)glbGetProcAddress("glGetBooleanIndexedvEXT");
    pAPI->glCompressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)glbGetProcAddress("glCompressedTextureImage3DEXT");
    pAPI->glCompressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)glbGetProcAddress("glCompressedTextureImage2DEXT");
    pAPI->glCompressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)glbGetProcAddress("glCompressedTextureImage1DEXT");
    pAPI->glCompressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)glbGetProcAddress("glCompressedTextureSubImage3DEXT");
    pAPI->glCompressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)glbGetProcAddress("glCompressedTextureSubImage2DEXT");
    pAPI->glCompressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)glbGetProcAddress("glCompressedTextureSubImage1DEXT");
    pAPI->glGetCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)glbGetProcAddress("glGetCompressedTextureImageEXT");
    pAPI->glCompressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)glbGetProcAddress("glCompressedMultiTexImage3DEXT");
    pAPI->glCompressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)glbGetProcAddress("glCompressedMultiTexImage2DEXT");
    pAPI->glCompressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)glbGetProcAddress("glCompressedMultiTexImage1DEXT");
    pAPI->glCompressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)glbGetProcAddress("glCompressedMultiTexSubImage3DEXT");
    pAPI->glCompressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)glbGetProcAddress("glCompressedMultiTexSubImage2DEXT");
    pAPI->glCompressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)glbGetProcAddress("glCompressedMultiTexSubImage1DEXT");
    pAPI->glGetCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)glbGetProcAddress("glGetCompressedMultiTexImageEXT");
    pAPI->glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC)glbGetProcAddress("glMatrixLoadTransposefEXT");
    pAPI->glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC)glbGetProcAddress("glMatrixLoadTransposedEXT");
    pAPI->glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC)glbGetProcAddress("glMatrixMultTransposefEXT");
    pAPI->glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC)glbGetProcAddress("glMatrixMultTransposedEXT");
    pAPI->glNamedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC)glbGetProcAddress("glNamedBufferDataEXT");
    pAPI->glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC)glbGetProcAddress("glNamedBufferSubDataEXT");
    pAPI->glMapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC)glbGetProcAddress("glMapNamedBufferEXT");
    pAPI->glUnmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC)glbGetProcAddress("glUnmapNamedBufferEXT");
    pAPI->glGetNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)glbGetProcAddress("glGetNamedBufferParameterivEXT");
    pAPI->glGetNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)glbGetProcAddress("glGetNamedBufferPointervEXT");
    pAPI->glGetNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)glbGetProcAddress("glGetNamedBufferSubDataEXT");
    pAPI->glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC)glbGetProcAddress("glProgramUniform1fEXT");
    pAPI->glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC)glbGetProcAddress("glProgramUniform2fEXT");
    pAPI->glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC)glbGetProcAddress("glProgramUniform3fEXT");
    pAPI->glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC)glbGetProcAddress("glProgramUniform4fEXT");
    pAPI->glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC)glbGetProcAddress("glProgramUniform1iEXT");
    pAPI->glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC)glbGetProcAddress("glProgramUniform2iEXT");
    pAPI->glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC)glbGetProcAddress("glProgramUniform3iEXT");
    pAPI->glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC)glbGetProcAddress("glProgramUniform4iEXT");
    pAPI->glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC)glbGetProcAddress("glProgramUniform1fvEXT");
    pAPI->glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC)glbGetProcAddress("glProgramUniform2fvEXT");
    pAPI->glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC)glbGetProcAddress("glProgramUniform3fvEXT");
    pAPI->glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC)glbGetProcAddress("glProgramUniform4fvEXT");
    pAPI->glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC)glbGetProcAddress("glProgramUniform1ivEXT");
    pAPI->glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC)glbGetProcAddress("glProgramUniform2ivEXT");
    pAPI->glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC)glbGetProcAddress("glProgramUniform3ivEXT");
    pAPI->glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC)glbGetProcAddress("glProgramUniform4ivEXT");
    pAPI->glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)glbGetProcAddress("glProgramUniformMatrix2fvEXT");
    pAPI->glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)glbGetProcAddress("glProgramUniformMatrix3fvEXT");
    pAPI->glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)glbGetProcAddress("glProgramUniformMatrix4fvEXT");
    pAPI->glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)glbGetProcAddress("glProgramUniformMatrix2x3fvEXT");
    pAPI->glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)glbGetProcAddress("glProgramUniformMatrix3x2fvEXT");
    pAPI->glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)glbGetProcAddress("glProgramUniformMatrix2x4fvEXT");
    pAPI->glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)glbGetProcAddress("glProgramUniformMatrix4x2fvEXT");
    pAPI->glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)glbGetProcAddress("glProgramUniformMatrix3x4fvEXT");
    pAPI->glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)glbGetProcAddress("glProgramUniformMatrix4x3fvEXT");
    pAPI->glTextureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC)glbGetProcAddress("glTextureBufferEXT");
    pAPI->glMultiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC)glbGetProcAddress("glMultiTexBufferEXT");
    pAPI->glTextureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC)glbGetProcAddress("glTextureParameterIivEXT");
    pAPI->glTextureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC)glbGetProcAddress("glTextureParameterIuivEXT");
    pAPI->glGetTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC)glbGetProcAddress("glGetTextureParameterIivEXT");
    pAPI->glGetTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)glbGetProcAddress("glGetTextureParameterIuivEXT");
    pAPI->glMultiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC)glbGetProcAddress("glMultiTexParameterIivEXT");
    pAPI->glMultiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC)glbGetProcAddress("glMultiTexParameterIuivEXT");
    pAPI->glGetMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC)glbGetProcAddress("glGetMultiTexParameterIivEXT");
    pAPI->glGetMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)glbGetProcAddress("glGetMultiTexParameterIuivEXT");
    pAPI->glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC)glbGetProcAddress("glProgramUniform1uiEXT");
    pAPI->glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC)glbGetProcAddress("glProgramUniform2uiEXT");
    pAPI->glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC)glbGetProcAddress("glProgramUniform3uiEXT");
    pAPI->glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC)glbGetProcAddress("glProgramUniform4uiEXT");
    pAPI->glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC)glbGetProcAddress("glProgramUniform1uivEXT");
    pAPI->glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC)glbGetProcAddress("glProgramUniform2uivEXT");
    pAPI->glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC)glbGetProcAddress("glProgramUniform3uivEXT");
    pAPI->glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC)glbGetProcAddress("glProgramUniform4uivEXT");
    pAPI->glNamedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)glbGetProcAddress("glNamedProgramLocalParameters4fvEXT");
    pAPI->glNamedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)glbGetProcAddress("glNamedProgramLocalParameterI4iEXT");
    pAPI->glNamedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)glbGetProcAddress("glNamedProgramLocalParameterI4ivEXT");
    pAPI->glNamedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)glbGetProcAddress("glNamedProgramLocalParametersI4ivEXT");
    pAPI->glNamedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)glbGetProcAddress("glNamedProgramLocalParameterI4uiEXT");
    pAPI->glNamedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)glbGetProcAddress("glNamedProgramLocalParameterI4uivEXT");
    pAPI->glNamedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)glbGetProcAddress("glNamedProgramLocalParametersI4uivEXT");
    pAPI->glGetNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)glbGetProcAddress("glGetNamedProgramLocalParameterIivEXT");
    pAPI->glGetNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)glbGetProcAddress("glGetNamedProgramLocalParameterIuivEXT");
    pAPI->glEnableClientStateiEXT = (PFNGLENABLECLIENTSTATEIEXTPROC)glbGetProcAddress("glEnableClientStateiEXT");
    pAPI->glDisableClientStateiEXT = (PFNGLDISABLECLIENTSTATEIEXTPROC)glbGetProcAddress("glDisableClientStateiEXT");
    pAPI->glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC)glbGetProcAddress("glGetFloati_vEXT");
    pAPI->glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC)glbGetProcAddress("glGetDoublei_vEXT");
    pAPI->glGetPointeri_vEXT = (PFNGLGETPOINTERI_VEXTPROC)glbGetProcAddress("glGetPointeri_vEXT");
    pAPI->glNamedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC)glbGetProcAddress("glNamedProgramStringEXT");
    pAPI->glNamedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)glbGetProcAddress("glNamedProgramLocalParameter4dEXT");
    pAPI->glNamedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)glbGetProcAddress("glNamedProgramLocalParameter4dvEXT");
    pAPI->glNamedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)glbGetProcAddress("glNamedProgramLocalParameter4fEXT");
    pAPI->glNamedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)glbGetProcAddress("glNamedProgramLocalParameter4fvEXT");
    pAPI->glGetNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)glbGetProcAddress("glGetNamedProgramLocalParameterdvEXT");
    pAPI->glGetNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)glbGetProcAddress("glGetNamedProgramLocalParameterfvEXT");
    pAPI->glGetNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC)glbGetProcAddress("glGetNamedProgramivEXT");
    pAPI->glGetNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)glbGetProcAddress("glGetNamedProgramStringEXT");
    pAPI->glNamedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)glbGetProcAddress("glNamedRenderbufferStorageEXT");
    pAPI->glGetNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)glbGetProcAddress("glGetNamedRenderbufferParameterivEXT");
    pAPI->glNamedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)glbGetProcAddress("glNamedRenderbufferStorageMultisampleEXT");
    pAPI->glNamedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)glbGetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT");
    pAPI->glCheckNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)glbGetProcAddress("glCheckNamedFramebufferStatusEXT");
    pAPI->glNamedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)glbGetProcAddress("glNamedFramebufferTexture1DEXT");
    pAPI->glNamedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)glbGetProcAddress("glNamedFramebufferTexture2DEXT");
    pAPI->glNamedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)glbGetProcAddress("glNamedFramebufferTexture3DEXT");
    pAPI->glNamedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)glbGetProcAddress("glNamedFramebufferRenderbufferEXT");
    pAPI->glGetNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)glbGetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT");
    pAPI->glGenerateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC)glbGetProcAddress("glGenerateTextureMipmapEXT");
    pAPI->glGenerateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC)glbGetProcAddress("glGenerateMultiTexMipmapEXT");
    pAPI->glFramebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)glbGetProcAddress("glFramebufferDrawBufferEXT");
    pAPI->glFramebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)glbGetProcAddress("glFramebufferDrawBuffersEXT");
    pAPI->glFramebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC)glbGetProcAddress("glFramebufferReadBufferEXT");
    pAPI->glGetFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)glbGetProcAddress("glGetFramebufferParameterivEXT");
    pAPI->glNamedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)glbGetProcAddress("glNamedCopyBufferSubDataEXT");
    pAPI->glNamedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)glbGetProcAddress("glNamedFramebufferTextureEXT");
    pAPI->glNamedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)glbGetProcAddress("glNamedFramebufferTextureLayerEXT");
    pAPI->glNamedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)glbGetProcAddress("glNamedFramebufferTextureFaceEXT");
    pAPI->glTextureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC)glbGetProcAddress("glTextureRenderbufferEXT");
    pAPI->glMultiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC)glbGetProcAddress("glMultiTexRenderbufferEXT");
    pAPI->glVertexArrayVertexOffsetEXT = (PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)glbGetProcAddress("glVertexArrayVertexOffsetEXT");
    pAPI->glVertexArrayColorOffsetEXT = (PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)glbGetProcAddress("glVertexArrayColorOffsetEXT");
    pAPI->glVertexArrayEdgeFlagOffsetEXT = (PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)glbGetProcAddress("glVertexArrayEdgeFlagOffsetEXT");
    pAPI->glVertexArrayIndexOffsetEXT = (PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)glbGetProcAddress("glVertexArrayIndexOffsetEXT");
    pAPI->glVertexArrayNormalOffsetEXT = (PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)glbGetProcAddress("glVertexArrayNormalOffsetEXT");
    pAPI->glVertexArrayTexCoordOffsetEXT = (PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)glbGetProcAddress("glVertexArrayTexCoordOffsetEXT");
    pAPI->glVertexArrayMultiTexCoordOffsetEXT = (PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)glbGetProcAddress("glVertexArrayMultiTexCoordOffsetEXT");
    pAPI->glVertexArrayFogCoordOffsetEXT = (PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)glbGetProcAddress("glVertexArrayFogCoordOffsetEXT");
    pAPI->glVertexArraySecondaryColorOffsetEXT = (PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)glbGetProcAddress("glVertexArraySecondaryColorOffsetEXT");
    pAPI->glVertexArrayVertexAttribOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)glbGetProcAddress("glVertexArrayVertexAttribOffsetEXT");
    pAPI->glVertexArrayVertexAttribIOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)glbGetProcAddress("glVertexArrayVertexAttribIOffsetEXT");
    pAPI->glEnableVertexArrayEXT = (PFNGLENABLEVERTEXARRAYEXTPROC)glbGetProcAddress("glEnableVertexArrayEXT");
    pAPI->glDisableVertexArrayEXT = (PFNGLDISABLEVERTEXARRAYEXTPROC)glbGetProcAddress("glDisableVertexArrayEXT");
    pAPI->glEnableVertexArrayAttribEXT = (PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)glbGetProcAddress("glEnableVertexArrayAttribEXT");
    pAPI->glDisableVertexArrayAttribEXT = (PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)glbGetProcAddress("glDisableVertexArrayAttribEXT");
    pAPI->glGetVertexArrayIntegervEXT = (PFNGLGETVERTEXARRAYINTEGERVEXTPROC)glbGetProcAddress("glGetVertexArrayIntegervEXT");
    pAPI->glGetVertexArrayPointervEXT = (PFNGLGETVERTEXARRAYPOINTERVEXTPROC)glbGetProcAddress("glGetVertexArrayPointervEXT");
    pAPI->glGetVertexArrayIntegeri_vEXT = (PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)glbGetProcAddress("glGetVertexArrayIntegeri_vEXT");
    pAPI->glGetVertexArrayPointeri_vEXT = (PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)glbGetProcAddress("glGetVertexArrayPointeri_vEXT");
    pAPI->glMapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC)glbGetProcAddress("glMapNamedBufferRangeEXT");
    pAPI->glFlushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)glbGetProcAddress("glFlushMappedNamedBufferRangeEXT");
    pAPI->glNamedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC)glbGetProcAddress("glNamedBufferStorageEXT");
    pAPI->glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC)glbGetProcAddress("glClearNamedBufferDataEXT");
    pAPI->glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)glbGetProcAddress("glClearNamedBufferSubDataEXT");
    pAPI->glNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)glbGetProcAddress("glNamedFramebufferParameteriEXT");
    pAPI->glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)glbGetProcAddress("glGetNamedFramebufferParameterivEXT");
    pAPI->glProgramUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC)glbGetProcAddress("glProgramUniform1dEXT");
    pAPI->glProgramUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC)glbGetProcAddress("glProgramUniform2dEXT");
    pAPI->glProgramUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC)glbGetProcAddress("glProgramUniform3dEXT");
    pAPI->glProgramUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC)glbGetProcAddress("glProgramUniform4dEXT");
    pAPI->glProgramUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC)glbGetProcAddress("glProgramUniform1dvEXT");
    pAPI->glProgramUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC)glbGetProcAddress("glProgramUniform2dvEXT");
    pAPI->glProgramUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC)glbGetProcAddress("glProgramUniform3dvEXT");
    pAPI->glProgramUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC)glbGetProcAddress("glProgramUniform4dvEXT");
    pAPI->glProgramUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)glbGetProcAddress("glProgramUniformMatrix2dvEXT");
    pAPI->glProgramUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)glbGetProcAddress("glProgramUniformMatrix3dvEXT");
    pAPI->glProgramUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)glbGetProcAddress("glProgramUniformMatrix4dvEXT");
    pAPI->glProgramUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)glbGetProcAddress("glProgramUniformMatrix2x3dvEXT");
    pAPI->glProgramUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)glbGetProcAddress("glProgramUniformMatrix2x4dvEXT");
    pAPI->glProgramUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)glbGetProcAddress("glProgramUniformMatrix3x2dvEXT");
    pAPI->glProgramUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)glbGetProcAddress("glProgramUniformMatrix3x4dvEXT");
    pAPI->glProgramUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)glbGetProcAddress("glProgramUniformMatrix4x2dvEXT");
    pAPI->glProgramUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)glbGetProcAddress("glProgramUniformMatrix4x3dvEXT");
    pAPI->glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC)glbGetProcAddress("glTextureBufferRangeEXT");
    pAPI->glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC)glbGetProcAddress("glTextureStorage1DEXT");
    pAPI->glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC)glbGetProcAddress("glTextureStorage2DEXT");
    pAPI->glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC)glbGetProcAddress("glTextureStorage3DEXT");
    pAPI->glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)glbGetProcAddress("glTextureStorage2DMultisampleEXT");
    pAPI->glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)glbGetProcAddress("glTextureStorage3DMultisampleEXT");
    pAPI->glVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)glbGetProcAddress("glVertexArrayBindVertexBufferEXT");
    pAPI->glVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)glbGetProcAddress("glVertexArrayVertexAttribFormatEXT");
    pAPI->glVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)glbGetProcAddress("glVertexArrayVertexAttribIFormatEXT");
    pAPI->glVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)glbGetProcAddress("glVertexArrayVertexAttribLFormatEXT");
    pAPI->glVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)glbGetProcAddress("glVertexArrayVertexAttribBindingEXT");
    pAPI->glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)glbGetProcAddress("glVertexArrayVertexBindingDivisorEXT");
    pAPI->glVertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)glbGetProcAddress("glVertexArrayVertexAttribLOffsetEXT");
    pAPI->glTexturePageCommitmentEXT = (PFNGLTEXTUREPAGECOMMITMENTEXTPROC)glbGetProcAddress("glTexturePageCommitmentEXT");
    pAPI->glVertexArrayVertexAttribDivisorEXT = (PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)glbGetProcAddress("glVertexArrayVertexAttribDivisorEXT");
    pAPI->glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)glbGetProcAddress("glColorMaskIndexedEXT");
    pAPI->glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)glbGetProcAddress("glDrawArraysInstancedEXT");
    pAPI->glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)glbGetProcAddress("glDrawElementsInstancedEXT");
    pAPI->glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC)glbGetProcAddress("glDrawRangeElementsEXT");
    pAPI->glBufferStorageExternalEXT = (PFNGLBUFFERSTORAGEEXTERNALEXTPROC)glbGetProcAddress("glBufferStorageExternalEXT");
    pAPI->glNamedBufferStorageExternalEXT = (PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC)glbGetProcAddress("glNamedBufferStorageExternalEXT");
    pAPI->glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC)glbGetProcAddress("glFogCoordfEXT");
    pAPI->glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC)glbGetProcAddress("glFogCoordfvEXT");
    pAPI->glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC)glbGetProcAddress("glFogCoorddEXT");
    pAPI->glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC)glbGetProcAddress("glFogCoorddvEXT");
    pAPI->glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC)glbGetProcAddress("glFogCoordPointerEXT");
    pAPI->glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)glbGetProcAddress("glBlitFramebufferEXT");
    pAPI->glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)glbGetProcAddress("glRenderbufferStorageMultisampleEXT");
    pAPI->glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)glbGetProcAddress("glIsRenderbufferEXT");
    pAPI->glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC)glbGetProcAddress("glBindRenderbufferEXT");
    pAPI->glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)glbGetProcAddress("glDeleteRenderbuffersEXT");
    pAPI->glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)glbGetProcAddress("glGenRenderbuffersEXT");
    pAPI->glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)glbGetProcAddress("glRenderbufferStorageEXT");
    pAPI->glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)glbGetProcAddress("glGetRenderbufferParameterivEXT");
    pAPI->glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)glbGetProcAddress("glIsFramebufferEXT");
    pAPI->glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC)glbGetProcAddress("glBindFramebufferEXT");
    pAPI->glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)glbGetProcAddress("glDeleteFramebuffersEXT");
    pAPI->glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)glbGetProcAddress("glGenFramebuffersEXT");
    pAPI->glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)glbGetProcAddress("glCheckFramebufferStatusEXT");
    pAPI->glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)glbGetProcAddress("glFramebufferTexture1DEXT");
    pAPI->glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)glbGetProcAddress("glFramebufferTexture2DEXT");
    pAPI->glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)glbGetProcAddress("glFramebufferTexture3DEXT");
    pAPI->glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)glbGetProcAddress("glFramebufferRenderbufferEXT");
    pAPI->glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)glbGetProcAddress("glGetFramebufferAttachmentParameterivEXT");
    pAPI->glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)glbGetProcAddress("glGenerateMipmapEXT");
    pAPI->glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)glbGetProcAddress("glProgramParameteriEXT");
    pAPI->glProgramEnvParameters4fvEXT = (PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)glbGetProcAddress("glProgramEnvParameters4fvEXT");
    pAPI->glProgramLocalParameters4fvEXT = (PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)glbGetProcAddress("glProgramLocalParameters4fvEXT");
    pAPI->glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC)glbGetProcAddress("glGetUniformuivEXT");
    pAPI->glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC)glbGetProcAddress("glBindFragDataLocationEXT");
    pAPI->glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC)glbGetProcAddress("glGetFragDataLocationEXT");
    pAPI->glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC)glbGetProcAddress("glUniform1uiEXT");
    pAPI->glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC)glbGetProcAddress("glUniform2uiEXT");
    pAPI->glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC)glbGetProcAddress("glUniform3uiEXT");
    pAPI->glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC)glbGetProcAddress("glUniform4uiEXT");
    pAPI->glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC)glbGetProcAddress("glUniform1uivEXT");
    pAPI->glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC)glbGetProcAddress("glUniform2uivEXT");
    pAPI->glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC)glbGetProcAddress("glUniform3uivEXT");
    pAPI->glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC)glbGetProcAddress("glUniform4uivEXT");
    pAPI->glGetHistogramEXT = (PFNGLGETHISTOGRAMEXTPROC)glbGetProcAddress("glGetHistogramEXT");
    pAPI->glGetHistogramParameterfvEXT = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)glbGetProcAddress("glGetHistogramParameterfvEXT");
    pAPI->glGetHistogramParameterivEXT = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)glbGetProcAddress("glGetHistogramParameterivEXT");
    pAPI->glGetMinmaxEXT = (PFNGLGETMINMAXEXTPROC)glbGetProcAddress("glGetMinmaxEXT");
    pAPI->glGetMinmaxParameterfvEXT = (PFNGLGETMINMAXPARAMETERFVEXTPROC)glbGetProcAddress("glGetMinmaxParameterfvEXT");
    pAPI->glGetMinmaxParameterivEXT = (PFNGLGETMINMAXPARAMETERIVEXTPROC)glbGetProcAddress("glGetMinmaxParameterivEXT");
    pAPI->glHistogramEXT = (PFNGLHISTOGRAMEXTPROC)glbGetProcAddress("glHistogramEXT");
    pAPI->glMinmaxEXT = (PFNGLMINMAXEXTPROC)glbGetProcAddress("glMinmaxEXT");
    pAPI->glResetHistogramEXT = (PFNGLRESETHISTOGRAMEXTPROC)glbGetProcAddress("glResetHistogramEXT");
    pAPI->glResetMinmaxEXT = (PFNGLRESETMINMAXEXTPROC)glbGetProcAddress("glResetMinmaxEXT");
    pAPI->glIndexFuncEXT = (PFNGLINDEXFUNCEXTPROC)glbGetProcAddress("glIndexFuncEXT");
    pAPI->glIndexMaterialEXT = (PFNGLINDEXMATERIALEXTPROC)glbGetProcAddress("glIndexMaterialEXT");
    pAPI->glApplyTextureEXT = (PFNGLAPPLYTEXTUREEXTPROC)glbGetProcAddress("glApplyTextureEXT");
    pAPI->glTextureLightEXT = (PFNGLTEXTURELIGHTEXTPROC)glbGetProcAddress("glTextureLightEXT");
    pAPI->glTextureMaterialEXT = (PFNGLTEXTUREMATERIALEXTPROC)glbGetProcAddress("glTextureMaterialEXT");
    pAPI->glGetUnsignedBytevEXT = (PFNGLGETUNSIGNEDBYTEVEXTPROC)glbGetProcAddress("glGetUnsignedBytevEXT");
    pAPI->glGetUnsignedBytei_vEXT = (PFNGLGETUNSIGNEDBYTEI_VEXTPROC)glbGetProcAddress("glGetUnsignedBytei_vEXT");
    pAPI->glDeleteMemoryObjectsEXT = (PFNGLDELETEMEMORYOBJECTSEXTPROC)glbGetProcAddress("glDeleteMemoryObjectsEXT");
    pAPI->glIsMemoryObjectEXT = (PFNGLISMEMORYOBJECTEXTPROC)glbGetProcAddress("glIsMemoryObjectEXT");
    pAPI->glCreateMemoryObjectsEXT = (PFNGLCREATEMEMORYOBJECTSEXTPROC)glbGetProcAddress("glCreateMemoryObjectsEXT");
    pAPI->glMemoryObjectParameterivEXT = (PFNGLMEMORYOBJECTPARAMETERIVEXTPROC)glbGetProcAddress("glMemoryObjectParameterivEXT");
    pAPI->glGetMemoryObjectParameterivEXT = (PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC)glbGetProcAddress("glGetMemoryObjectParameterivEXT");
    pAPI->glTexStorageMem2DEXT = (PFNGLTEXSTORAGEMEM2DEXTPROC)glbGetProcAddress("glTexStorageMem2DEXT");
    pAPI->glTexStorageMem2DMultisampleEXT = (PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC)glbGetProcAddress("glTexStorageMem2DMultisampleEXT");
    pAPI->glTexStorageMem3DEXT = (PFNGLTEXSTORAGEMEM3DEXTPROC)glbGetProcAddress("glTexStorageMem3DEXT");
    pAPI->glTexStorageMem3DMultisampleEXT = (PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC)glbGetProcAddress("glTexStorageMem3DMultisampleEXT");
    pAPI->glBufferStorageMemEXT = (PFNGLBUFFERSTORAGEMEMEXTPROC)glbGetProcAddress("glBufferStorageMemEXT");
    pAPI->glTextureStorageMem2DEXT = (PFNGLTEXTURESTORAGEMEM2DEXTPROC)glbGetProcAddress("glTextureStorageMem2DEXT");
    pAPI->glTextureStorageMem2DMultisampleEXT = (PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC)glbGetProcAddress("glTextureStorageMem2DMultisampleEXT");
    pAPI->glTextureStorageMem3DEXT = (PFNGLTEXTURESTORAGEMEM3DEXTPROC)glbGetProcAddress("glTextureStorageMem3DEXT");
    pAPI->glTextureStorageMem3DMultisampleEXT = (PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC)glbGetProcAddress("glTextureStorageMem3DMultisampleEXT");
    pAPI->glNamedBufferStorageMemEXT = (PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC)glbGetProcAddress("glNamedBufferStorageMemEXT");
    pAPI->glTexStorageMem1DEXT = (PFNGLTEXSTORAGEMEM1DEXTPROC)glbGetProcAddress("glTexStorageMem1DEXT");
    pAPI->glTextureStorageMem1DEXT = (PFNGLTEXTURESTORAGEMEM1DEXTPROC)glbGetProcAddress("glTextureStorageMem1DEXT");
    pAPI->glImportMemoryFdEXT = (PFNGLIMPORTMEMORYFDEXTPROC)glbGetProcAddress("glImportMemoryFdEXT");
    pAPI->glImportMemoryWin32HandleEXT = (PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC)glbGetProcAddress("glImportMemoryWin32HandleEXT");
    pAPI->glImportMemoryWin32NameEXT = (PFNGLIMPORTMEMORYWIN32NAMEEXTPROC)glbGetProcAddress("glImportMemoryWin32NameEXT");
    pAPI->glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC)glbGetProcAddress("glMultiDrawArraysEXT");
    pAPI->glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC)glbGetProcAddress("glMultiDrawElementsEXT");
    pAPI->glSampleMaskEXT = (PFNGLSAMPLEMASKEXTPROC)glbGetProcAddress("glSampleMaskEXT");
    pAPI->glSamplePatternEXT = (PFNGLSAMPLEPATTERNEXTPROC)glbGetProcAddress("glSamplePatternEXT");
    pAPI->glColorTableEXT = (PFNGLCOLORTABLEEXTPROC)glbGetProcAddress("glColorTableEXT");
    pAPI->glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC)glbGetProcAddress("glGetColorTableEXT");
    pAPI->glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)glbGetProcAddress("glGetColorTableParameterivEXT");
    pAPI->glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)glbGetProcAddress("glGetColorTableParameterfvEXT");
    pAPI->glPixelTransformParameteriEXT = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)glbGetProcAddress("glPixelTransformParameteriEXT");
    pAPI->glPixelTransformParameterfEXT = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)glbGetProcAddress("glPixelTransformParameterfEXT");
    pAPI->glPixelTransformParameterivEXT = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)glbGetProcAddress("glPixelTransformParameterivEXT");
    pAPI->glPixelTransformParameterfvEXT = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)glbGetProcAddress("glPixelTransformParameterfvEXT");
    pAPI->glGetPixelTransformParameterivEXT = (PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)glbGetProcAddress("glGetPixelTransformParameterivEXT");
    pAPI->glGetPixelTransformParameterfvEXT = (PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)glbGetProcAddress("glGetPixelTransformParameterfvEXT");
    pAPI->glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)glbGetProcAddress("glPointParameterfEXT");
    pAPI->glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)glbGetProcAddress("glPointParameterfvEXT");
    pAPI->glPolygonOffsetEXT = (PFNGLPOLYGONOFFSETEXTPROC)glbGetProcAddress("glPolygonOffsetEXT");
    pAPI->glPolygonOffsetClampEXT = (PFNGLPOLYGONOFFSETCLAMPEXTPROC)glbGetProcAddress("glPolygonOffsetClampEXT");
    pAPI->glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC)glbGetProcAddress("glProvokingVertexEXT");
    pAPI->glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC)glbGetProcAddress("glRasterSamplesEXT");
    pAPI->glGenSemaphoresEXT = (PFNGLGENSEMAPHORESEXTPROC)glbGetProcAddress("glGenSemaphoresEXT");
    pAPI->glDeleteSemaphoresEXT = (PFNGLDELETESEMAPHORESEXTPROC)glbGetProcAddress("glDeleteSemaphoresEXT");
    pAPI->glIsSemaphoreEXT = (PFNGLISSEMAPHOREEXTPROC)glbGetProcAddress("glIsSemaphoreEXT");
    pAPI->glSemaphoreParameterui64vEXT = (PFNGLSEMAPHOREPARAMETERUI64VEXTPROC)glbGetProcAddress("glSemaphoreParameterui64vEXT");
    pAPI->glGetSemaphoreParameterui64vEXT = (PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC)glbGetProcAddress("glGetSemaphoreParameterui64vEXT");
    pAPI->glWaitSemaphoreEXT = (PFNGLWAITSEMAPHOREEXTPROC)glbGetProcAddress("glWaitSemaphoreEXT");
    pAPI->glSignalSemaphoreEXT = (PFNGLSIGNALSEMAPHOREEXTPROC)glbGetProcAddress("glSignalSemaphoreEXT");
    pAPI->glImportSemaphoreFdEXT = (PFNGLIMPORTSEMAPHOREFDEXTPROC)glbGetProcAddress("glImportSemaphoreFdEXT");
    pAPI->glImportSemaphoreWin32HandleEXT = (PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC)glbGetProcAddress("glImportSemaphoreWin32HandleEXT");
    pAPI->glImportSemaphoreWin32NameEXT = (PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC)glbGetProcAddress("glImportSemaphoreWin32NameEXT");
    pAPI->glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC)glbGetProcAddress("glSecondaryColor3bEXT");
    pAPI->glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC)glbGetProcAddress("glSecondaryColor3bvEXT");
    pAPI->glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC)glbGetProcAddress("glSecondaryColor3dEXT");
    pAPI->glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC)glbGetProcAddress("glSecondaryColor3dvEXT");
    pAPI->glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC)glbGetProcAddress("glSecondaryColor3fEXT");
    pAPI->glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC)glbGetProcAddress("glSecondaryColor3fvEXT");
    pAPI->glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC)glbGetProcAddress("glSecondaryColor3iEXT");
    pAPI->glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC)glbGetProcAddress("glSecondaryColor3ivEXT");
    pAPI->glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC)glbGetProcAddress("glSecondaryColor3sEXT");
    pAPI->glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC)glbGetProcAddress("glSecondaryColor3svEXT");
    pAPI->glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC)glbGetProcAddress("glSecondaryColor3ubEXT");
    pAPI->glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC)glbGetProcAddress("glSecondaryColor3ubvEXT");
    pAPI->glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC)glbGetProcAddress("glSecondaryColor3uiEXT");
    pAPI->glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC)glbGetProcAddress("glSecondaryColor3uivEXT");
    pAPI->glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC)glbGetProcAddress("glSecondaryColor3usEXT");
    pAPI->glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC)glbGetProcAddress("glSecondaryColor3usvEXT");
    pAPI->glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC)glbGetProcAddress("glSecondaryColorPointerEXT");
    pAPI->glUseShaderProgramEXT = (PFNGLUSESHADERPROGRAMEXTPROC)glbGetProcAddress("glUseShaderProgramEXT");
    pAPI->glActiveProgramEXT = (PFNGLACTIVEPROGRAMEXTPROC)glbGetProcAddress("glActiveProgramEXT");
    pAPI->glCreateShaderProgramEXT = (PFNGLCREATESHADERPROGRAMEXTPROC)glbGetProcAddress("glCreateShaderProgramEXT");
    pAPI->glActiveShaderProgramEXT = (PFNGLACTIVESHADERPROGRAMEXTPROC)glbGetProcAddress("glActiveShaderProgramEXT");
    pAPI->glBindProgramPipelineEXT = (PFNGLBINDPROGRAMPIPELINEEXTPROC)glbGetProcAddress("glBindProgramPipelineEXT");
    pAPI->glCreateShaderProgramvEXT = (PFNGLCREATESHADERPROGRAMVEXTPROC)glbGetProcAddress("glCreateShaderProgramvEXT");
    pAPI->glDeleteProgramPipelinesEXT = (PFNGLDELETEPROGRAMPIPELINESEXTPROC)glbGetProcAddress("glDeleteProgramPipelinesEXT");
    pAPI->glGenProgramPipelinesEXT = (PFNGLGENPROGRAMPIPELINESEXTPROC)glbGetProcAddress("glGenProgramPipelinesEXT");
    pAPI->glGetProgramPipelineInfoLogEXT = (PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC)glbGetProcAddress("glGetProgramPipelineInfoLogEXT");
    pAPI->glGetProgramPipelineivEXT = (PFNGLGETPROGRAMPIPELINEIVEXTPROC)glbGetProcAddress("glGetProgramPipelineivEXT");
    pAPI->glIsProgramPipelineEXT = (PFNGLISPROGRAMPIPELINEEXTPROC)glbGetProcAddress("glIsProgramPipelineEXT");
    pAPI->glUseProgramStagesEXT = (PFNGLUSEPROGRAMSTAGESEXTPROC)glbGetProcAddress("glUseProgramStagesEXT");
    pAPI->glValidateProgramPipelineEXT = (PFNGLVALIDATEPROGRAMPIPELINEEXTPROC)glbGetProcAddress("glValidateProgramPipelineEXT");
    pAPI->glFramebufferFetchBarrierEXT = (PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC)glbGetProcAddress("glFramebufferFetchBarrierEXT");
    pAPI->glBindImageTextureEXT = (PFNGLBINDIMAGETEXTUREEXTPROC)glbGetProcAddress("glBindImageTextureEXT");
    pAPI->glMemoryBarrierEXT = (PFNGLMEMORYBARRIEREXTPROC)glbGetProcAddress("glMemoryBarrierEXT");
    pAPI->glStencilClearTagEXT = (PFNGLSTENCILCLEARTAGEXTPROC)glbGetProcAddress("glStencilClearTagEXT");
    pAPI->glActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC)glbGetProcAddress("glActiveStencilFaceEXT");
    pAPI->glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)glbGetProcAddress("glTexSubImage1DEXT");
    pAPI->glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)glbGetProcAddress("glTexSubImage2DEXT");
    pAPI->glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC)glbGetProcAddress("glTexImage3DEXT");
    pAPI->glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC)glbGetProcAddress("glTexSubImage3DEXT");
    pAPI->glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)glbGetProcAddress("glFramebufferTextureLayerEXT");
    pAPI->glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)glbGetProcAddress("glTexBufferEXT");
    pAPI->glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)glbGetProcAddress("glTexParameterIivEXT");
    pAPI->glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)glbGetProcAddress("glTexParameterIuivEXT");
    pAPI->glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)glbGetProcAddress("glGetTexParameterIivEXT");
    pAPI->glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)glbGetProcAddress("glGetTexParameterIuivEXT");
    pAPI->glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC)glbGetProcAddress("glClearColorIiEXT");
    pAPI->glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC)glbGetProcAddress("glClearColorIuiEXT");
    pAPI->glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC)glbGetProcAddress("glAreTexturesResidentEXT");
    pAPI->glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)glbGetProcAddress("glBindTextureEXT");
    pAPI->glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC)glbGetProcAddress("glDeleteTexturesEXT");
    pAPI->glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC)glbGetProcAddress("glGenTexturesEXT");
    pAPI->glIsTextureEXT = (PFNGLISTEXTUREEXTPROC)glbGetProcAddress("glIsTextureEXT");
    pAPI->glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC)glbGetProcAddress("glPrioritizeTexturesEXT");
    pAPI->glTextureNormalEXT = (PFNGLTEXTURENORMALEXTPROC)glbGetProcAddress("glTextureNormalEXT");
    pAPI->glCreateSemaphoresNV = (PFNGLCREATESEMAPHORESNVPROC)glbGetProcAddress("glCreateSemaphoresNV");
    pAPI->glSemaphoreParameterivNV = (PFNGLSEMAPHOREPARAMETERIVNVPROC)glbGetProcAddress("glSemaphoreParameterivNV");
    pAPI->glGetSemaphoreParameterivNV = (PFNGLGETSEMAPHOREPARAMETERIVNVPROC)glbGetProcAddress("glGetSemaphoreParameterivNV");
    pAPI->glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC)glbGetProcAddress("glGetQueryObjecti64vEXT");
    pAPI->glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC)glbGetProcAddress("glGetQueryObjectui64vEXT");
    pAPI->glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)glbGetProcAddress("glBeginTransformFeedbackEXT");
    pAPI->glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)glbGetProcAddress("glEndTransformFeedbackEXT");
    pAPI->glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)glbGetProcAddress("glBindBufferRangeEXT");
    pAPI->glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC)glbGetProcAddress("glBindBufferOffsetEXT");
    pAPI->glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)glbGetProcAddress("glBindBufferBaseEXT");
    pAPI->glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)glbGetProcAddress("glTransformFeedbackVaryingsEXT");
    pAPI->glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)glbGetProcAddress("glGetTransformFeedbackVaryingEXT");
    pAPI->glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC)glbGetProcAddress("glArrayElementEXT");
    pAPI->glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC)glbGetProcAddress("glColorPointerEXT");
    pAPI->glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)glbGetProcAddress("glDrawArraysEXT");
    pAPI->glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC)glbGetProcAddress("glEdgeFlagPointerEXT");
    pAPI->glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC)glbGetProcAddress("glGetPointervEXT");
    pAPI->glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC)glbGetProcAddress("glIndexPointerEXT");
    pAPI->glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC)glbGetProcAddress("glNormalPointerEXT");
    pAPI->glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC)glbGetProcAddress("glTexCoordPointerEXT");
    pAPI->glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC)glbGetProcAddress("glVertexPointerEXT");
    pAPI->glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC)glbGetProcAddress("glVertexAttribL1dEXT");
    pAPI->glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC)glbGetProcAddress("glVertexAttribL2dEXT");
    pAPI->glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC)glbGetProcAddress("glVertexAttribL3dEXT");
    pAPI->glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC)glbGetProcAddress("glVertexAttribL4dEXT");
    pAPI->glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC)glbGetProcAddress("glVertexAttribL1dvEXT");
    pAPI->glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC)glbGetProcAddress("glVertexAttribL2dvEXT");
    pAPI->glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC)glbGetProcAddress("glVertexAttribL3dvEXT");
    pAPI->glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC)glbGetProcAddress("glVertexAttribL4dvEXT");
    pAPI->glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC)glbGetProcAddress("glVertexAttribLPointerEXT");
    pAPI->glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC)glbGetProcAddress("glGetVertexAttribLdvEXT");
    pAPI->glBeginVertexShaderEXT = (PFNGLBEGINVERTEXSHADEREXTPROC)glbGetProcAddress("glBeginVertexShaderEXT");
    pAPI->glEndVertexShaderEXT = (PFNGLENDVERTEXSHADEREXTPROC)glbGetProcAddress("glEndVertexShaderEXT");
    pAPI->glBindVertexShaderEXT = (PFNGLBINDVERTEXSHADEREXTPROC)glbGetProcAddress("glBindVertexShaderEXT");
    pAPI->glGenVertexShadersEXT = (PFNGLGENVERTEXSHADERSEXTPROC)glbGetProcAddress("glGenVertexShadersEXT");
    pAPI->glDeleteVertexShaderEXT = (PFNGLDELETEVERTEXSHADEREXTPROC)glbGetProcAddress("glDeleteVertexShaderEXT");
    pAPI->glShaderOp1EXT = (PFNGLSHADEROP1EXTPROC)glbGetProcAddress("glShaderOp1EXT");
    pAPI->glShaderOp2EXT = (PFNGLSHADEROP2EXTPROC)glbGetProcAddress("glShaderOp2EXT");
    pAPI->glShaderOp3EXT = (PFNGLSHADEROP3EXTPROC)glbGetProcAddress("glShaderOp3EXT");
    pAPI->glSwizzleEXT = (PFNGLSWIZZLEEXTPROC)glbGetProcAddress("glSwizzleEXT");
    pAPI->glWriteMaskEXT = (PFNGLWRITEMASKEXTPROC)glbGetProcAddress("glWriteMaskEXT");
    pAPI->glInsertComponentEXT = (PFNGLINSERTCOMPONENTEXTPROC)glbGetProcAddress("glInsertComponentEXT");
    pAPI->glExtractComponentEXT = (PFNGLEXTRACTCOMPONENTEXTPROC)glbGetProcAddress("glExtractComponentEXT");
    pAPI->glGenSymbolsEXT = (PFNGLGENSYMBOLSEXTPROC)glbGetProcAddress("glGenSymbolsEXT");
    pAPI->glSetInvariantEXT = (PFNGLSETINVARIANTEXTPROC)glbGetProcAddress("glSetInvariantEXT");
    pAPI->glSetLocalConstantEXT = (PFNGLSETLOCALCONSTANTEXTPROC)glbGetProcAddress("glSetLocalConstantEXT");
    pAPI->glVariantbvEXT = (PFNGLVARIANTBVEXTPROC)glbGetProcAddress("glVariantbvEXT");
    pAPI->glVariantsvEXT = (PFNGLVARIANTSVEXTPROC)glbGetProcAddress("glVariantsvEXT");
    pAPI->glVariantivEXT = (PFNGLVARIANTIVEXTPROC)glbGetProcAddress("glVariantivEXT");
    pAPI->glVariantfvEXT = (PFNGLVARIANTFVEXTPROC)glbGetProcAddress("glVariantfvEXT");
    pAPI->glVariantdvEXT = (PFNGLVARIANTDVEXTPROC)glbGetProcAddress("glVariantdvEXT");
    pAPI->glVariantubvEXT = (PFNGLVARIANTUBVEXTPROC)glbGetProcAddress("glVariantubvEXT");
    pAPI->glVariantusvEXT = (PFNGLVARIANTUSVEXTPROC)glbGetProcAddress("glVariantusvEXT");
    pAPI->glVariantuivEXT = (PFNGLVARIANTUIVEXTPROC)glbGetProcAddress("glVariantuivEXT");
    pAPI->glVariantPointerEXT = (PFNGLVARIANTPOINTEREXTPROC)glbGetProcAddress("glVariantPointerEXT");
    pAPI->glEnableVariantClientStateEXT = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)glbGetProcAddress("glEnableVariantClientStateEXT");
    pAPI->glDisableVariantClientStateEXT = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)glbGetProcAddress("glDisableVariantClientStateEXT");
    pAPI->glBindLightParameterEXT = (PFNGLBINDLIGHTPARAMETEREXTPROC)glbGetProcAddress("glBindLightParameterEXT");
    pAPI->glBindMaterialParameterEXT = (PFNGLBINDMATERIALPARAMETEREXTPROC)glbGetProcAddress("glBindMaterialParameterEXT");
    pAPI->glBindTexGenParameterEXT = (PFNGLBINDTEXGENPARAMETEREXTPROC)glbGetProcAddress("glBindTexGenParameterEXT");
    pAPI->glBindTextureUnitParameterEXT = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)glbGetProcAddress("glBindTextureUnitParameterEXT");
    pAPI->glBindParameterEXT = (PFNGLBINDPARAMETEREXTPROC)glbGetProcAddress("glBindParameterEXT");
    pAPI->glIsVariantEnabledEXT = (PFNGLISVARIANTENABLEDEXTPROC)glbGetProcAddress("glIsVariantEnabledEXT");
    pAPI->glGetVariantBooleanvEXT = (PFNGLGETVARIANTBOOLEANVEXTPROC)glbGetProcAddress("glGetVariantBooleanvEXT");
    pAPI->glGetVariantIntegervEXT = (PFNGLGETVARIANTINTEGERVEXTPROC)glbGetProcAddress("glGetVariantIntegervEXT");
    pAPI->glGetVariantFloatvEXT = (PFNGLGETVARIANTFLOATVEXTPROC)glbGetProcAddress("glGetVariantFloatvEXT");
    pAPI->glGetVariantPointervEXT = (PFNGLGETVARIANTPOINTERVEXTPROC)glbGetProcAddress("glGetVariantPointervEXT");
    pAPI->glGetInvariantBooleanvEXT = (PFNGLGETINVARIANTBOOLEANVEXTPROC)glbGetProcAddress("glGetInvariantBooleanvEXT");
    pAPI->glGetInvariantIntegervEXT = (PFNGLGETINVARIANTINTEGERVEXTPROC)glbGetProcAddress("glGetInvariantIntegervEXT");
    pAPI->glGetInvariantFloatvEXT = (PFNGLGETINVARIANTFLOATVEXTPROC)glbGetProcAddress("glGetInvariantFloatvEXT");
    pAPI->glGetLocalConstantBooleanvEXT = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)glbGetProcAddress("glGetLocalConstantBooleanvEXT");
    pAPI->glGetLocalConstantIntegervEXT = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)glbGetProcAddress("glGetLocalConstantIntegervEXT");
    pAPI->glGetLocalConstantFloatvEXT = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC)glbGetProcAddress("glGetLocalConstantFloatvEXT");
    pAPI->glVertexWeightfEXT = (PFNGLVERTEXWEIGHTFEXTPROC)glbGetProcAddress("glVertexWeightfEXT");
    pAPI->glVertexWeightfvEXT = (PFNGLVERTEXWEIGHTFVEXTPROC)glbGetProcAddress("glVertexWeightfvEXT");
    pAPI->glVertexWeightPointerEXT = (PFNGLVERTEXWEIGHTPOINTEREXTPROC)glbGetProcAddress("glVertexWeightPointerEXT");
    pAPI->glAcquireKeyedMutexWin32EXT = (PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC)glbGetProcAddress("glAcquireKeyedMutexWin32EXT");
    pAPI->glReleaseKeyedMutexWin32EXT = (PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC)glbGetProcAddress("glReleaseKeyedMutexWin32EXT");
    pAPI->glWindowRectanglesEXT = (PFNGLWINDOWRECTANGLESEXTPROC)glbGetProcAddress("glWindowRectanglesEXT");
    pAPI->glImportSyncEXT = (PFNGLIMPORTSYNCEXTPROC)glbGetProcAddress("glImportSyncEXT");
    pAPI->glFrameTerminatorGREMEDY = (PFNGLFRAMETERMINATORGREMEDYPROC)glbGetProcAddress("glFrameTerminatorGREMEDY");
    pAPI->glStringMarkerGREMEDY = (PFNGLSTRINGMARKERGREMEDYPROC)glbGetProcAddress("glStringMarkerGREMEDY");
    pAPI->glImageTransformParameteriHP = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC)glbGetProcAddress("glImageTransformParameteriHP");
    pAPI->glImageTransformParameterfHP = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC)glbGetProcAddress("glImageTransformParameterfHP");
    pAPI->glImageTransformParameterivHP = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)glbGetProcAddress("glImageTransformParameterivHP");
    pAPI->glImageTransformParameterfvHP = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)glbGetProcAddress("glImageTransformParameterfvHP");
    pAPI->glGetImageTransformParameterivHP = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)glbGetProcAddress("glGetImageTransformParameterivHP");
    pAPI->glGetImageTransformParameterfvHP = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)glbGetProcAddress("glGetImageTransformParameterfvHP");
    pAPI->glMultiModeDrawArraysIBM = (PFNGLMULTIMODEDRAWARRAYSIBMPROC)glbGetProcAddress("glMultiModeDrawArraysIBM");
    pAPI->glMultiModeDrawElementsIBM = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC)glbGetProcAddress("glMultiModeDrawElementsIBM");
    pAPI->glFlushStaticDataIBM = (PFNGLFLUSHSTATICDATAIBMPROC)glbGetProcAddress("glFlushStaticDataIBM");
    pAPI->glColorPointerListIBM = (PFNGLCOLORPOINTERLISTIBMPROC)glbGetProcAddress("glColorPointerListIBM");
    pAPI->glSecondaryColorPointerListIBM = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)glbGetProcAddress("glSecondaryColorPointerListIBM");
    pAPI->glEdgeFlagPointerListIBM = (PFNGLEDGEFLAGPOINTERLISTIBMPROC)glbGetProcAddress("glEdgeFlagPointerListIBM");
    pAPI->glFogCoordPointerListIBM = (PFNGLFOGCOORDPOINTERLISTIBMPROC)glbGetProcAddress("glFogCoordPointerListIBM");
    pAPI->glIndexPointerListIBM = (PFNGLINDEXPOINTERLISTIBMPROC)glbGetProcAddress("glIndexPointerListIBM");
    pAPI->glNormalPointerListIBM = (PFNGLNORMALPOINTERLISTIBMPROC)glbGetProcAddress("glNormalPointerListIBM");
    pAPI->glTexCoordPointerListIBM = (PFNGLTEXCOORDPOINTERLISTIBMPROC)glbGetProcAddress("glTexCoordPointerListIBM");
    pAPI->glVertexPointerListIBM = (PFNGLVERTEXPOINTERLISTIBMPROC)glbGetProcAddress("glVertexPointerListIBM");
    pAPI->glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)glbGetProcAddress("glBlendFuncSeparateINGR");
    pAPI->glApplyFramebufferAttachmentCMAAINTEL = (PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC)glbGetProcAddress("glApplyFramebufferAttachmentCMAAINTEL");
    pAPI->glSyncTextureINTEL = (PFNGLSYNCTEXTUREINTELPROC)glbGetProcAddress("glSyncTextureINTEL");
    pAPI->glUnmapTexture2DINTEL = (PFNGLUNMAPTEXTURE2DINTELPROC)glbGetProcAddress("glUnmapTexture2DINTEL");
    pAPI->glMapTexture2DINTEL = (PFNGLMAPTEXTURE2DINTELPROC)glbGetProcAddress("glMapTexture2DINTEL");
    pAPI->glVertexPointervINTEL = (PFNGLVERTEXPOINTERVINTELPROC)glbGetProcAddress("glVertexPointervINTEL");
    pAPI->glNormalPointervINTEL = (PFNGLNORMALPOINTERVINTELPROC)glbGetProcAddress("glNormalPointervINTEL");
    pAPI->glColorPointervINTEL = (PFNGLCOLORPOINTERVINTELPROC)glbGetProcAddress("glColorPointervINTEL");
    pAPI->glTexCoordPointervINTEL = (PFNGLTEXCOORDPOINTERVINTELPROC)glbGetProcAddress("glTexCoordPointervINTEL");
    pAPI->glBeginPerfQueryINTEL = (PFNGLBEGINPERFQUERYINTELPROC)glbGetProcAddress("glBeginPerfQueryINTEL");
    pAPI->glCreatePerfQueryINTEL = (PFNGLCREATEPERFQUERYINTELPROC)glbGetProcAddress("glCreatePerfQueryINTEL");
    pAPI->glDeletePerfQueryINTEL = (PFNGLDELETEPERFQUERYINTELPROC)glbGetProcAddress("glDeletePerfQueryINTEL");
    pAPI->glEndPerfQueryINTEL = (PFNGLENDPERFQUERYINTELPROC)glbGetProcAddress("glEndPerfQueryINTEL");
    pAPI->glGetFirstPerfQueryIdINTEL = (PFNGLGETFIRSTPERFQUERYIDINTELPROC)glbGetProcAddress("glGetFirstPerfQueryIdINTEL");
    pAPI->glGetNextPerfQueryIdINTEL = (PFNGLGETNEXTPERFQUERYIDINTELPROC)glbGetProcAddress("glGetNextPerfQueryIdINTEL");
    pAPI->glGetPerfCounterInfoINTEL = (PFNGLGETPERFCOUNTERINFOINTELPROC)glbGetProcAddress("glGetPerfCounterInfoINTEL");
    pAPI->glGetPerfQueryDataINTEL = (PFNGLGETPERFQUERYDATAINTELPROC)glbGetProcAddress("glGetPerfQueryDataINTEL");
    pAPI->glGetPerfQueryIdByNameINTEL = (PFNGLGETPERFQUERYIDBYNAMEINTELPROC)glbGetProcAddress("glGetPerfQueryIdByNameINTEL");
    pAPI->glGetPerfQueryInfoINTEL = (PFNGLGETPERFQUERYINFOINTELPROC)glbGetProcAddress("glGetPerfQueryInfoINTEL");
    pAPI->glBlendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC)glbGetProcAddress("glBlendBarrierKHR");
    pAPI->glDebugMessageControlKHR = (PFNGLDEBUGMESSAGECONTROLKHRPROC)glbGetProcAddress("glDebugMessageControlKHR");
    pAPI->glDebugMessageInsertKHR = (PFNGLDEBUGMESSAGEINSERTKHRPROC)glbGetProcAddress("glDebugMessageInsertKHR");
    pAPI->glDebugMessageCallbackKHR = (PFNGLDEBUGMESSAGECALLBACKKHRPROC)glbGetProcAddress("glDebugMessageCallbackKHR");
    pAPI->glGetDebugMessageLogKHR = (PFNGLGETDEBUGMESSAGELOGKHRPROC)glbGetProcAddress("glGetDebugMessageLogKHR");
    pAPI->glPushDebugGroupKHR = (PFNGLPUSHDEBUGGROUPKHRPROC)glbGetProcAddress("glPushDebugGroupKHR");
    pAPI->glPopDebugGroupKHR = (PFNGLPOPDEBUGGROUPKHRPROC)glbGetProcAddress("glPopDebugGroupKHR");
    pAPI->glObjectLabelKHR = (PFNGLOBJECTLABELKHRPROC)glbGetProcAddress("glObjectLabelKHR");
    pAPI->glGetObjectLabelKHR = (PFNGLGETOBJECTLABELKHRPROC)glbGetProcAddress("glGetObjectLabelKHR");
    pAPI->glObjectPtrLabelKHR = (PFNGLOBJECTPTRLABELKHRPROC)glbGetProcAddress("glObjectPtrLabelKHR");
    pAPI->glGetObjectPtrLabelKHR = (PFNGLGETOBJECTPTRLABELKHRPROC)glbGetProcAddress("glGetObjectPtrLabelKHR");
    pAPI->glGetPointervKHR = (PFNGLGETPOINTERVKHRPROC)glbGetProcAddress("glGetPointervKHR");
    pAPI->glGetGraphicsResetStatusKHR = (PFNGLGETGRAPHICSRESETSTATUSKHRPROC)glbGetProcAddress("glGetGraphicsResetStatusKHR");
    pAPI->glReadnPixelsKHR = (PFNGLREADNPIXELSKHRPROC)glbGetProcAddress("glReadnPixelsKHR");
    pAPI->glGetnUniformfvKHR = (PFNGLGETNUNIFORMFVKHRPROC)glbGetProcAddress("glGetnUniformfvKHR");
    pAPI->glGetnUniformivKHR = (PFNGLGETNUNIFORMIVKHRPROC)glbGetProcAddress("glGetnUniformivKHR");
    pAPI->glGetnUniformuivKHR = (PFNGLGETNUNIFORMUIVKHRPROC)glbGetProcAddress("glGetnUniformuivKHR");
    pAPI->glMaxShaderCompilerThreadsKHR = (PFNGLMAXSHADERCOMPILERTHREADSKHRPROC)glbGetProcAddress("glMaxShaderCompilerThreadsKHR");
    pAPI->glFramebufferParameteriMESA = (PFNGLFRAMEBUFFERPARAMETERIMESAPROC)glbGetProcAddress("glFramebufferParameteriMESA");
    pAPI->glGetFramebufferParameterivMESA = (PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC)glbGetProcAddress("glGetFramebufferParameterivMESA");
    pAPI->glResizeBuffersMESA = (PFNGLRESIZEBUFFERSMESAPROC)glbGetProcAddress("glResizeBuffersMESA");
    pAPI->glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC)glbGetProcAddress("glWindowPos2dMESA");
    pAPI->glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC)glbGetProcAddress("glWindowPos2dvMESA");
    pAPI->glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC)glbGetProcAddress("glWindowPos2fMESA");
    pAPI->glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC)glbGetProcAddress("glWindowPos2fvMESA");
    pAPI->glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC)glbGetProcAddress("glWindowPos2iMESA");
    pAPI->glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC)glbGetProcAddress("glWindowPos2ivMESA");
    pAPI->glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC)glbGetProcAddress("glWindowPos2sMESA");
    pAPI->glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC)glbGetProcAddress("glWindowPos2svMESA");
    pAPI->glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC)glbGetProcAddress("glWindowPos3dMESA");
    pAPI->glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC)glbGetProcAddress("glWindowPos3dvMESA");
    pAPI->glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC)glbGetProcAddress("glWindowPos3fMESA");
    pAPI->glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC)glbGetProcAddress("glWindowPos3fvMESA");
    pAPI->glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC)glbGetProcAddress("glWindowPos3iMESA");
    pAPI->glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC)glbGetProcAddress("glWindowPos3ivMESA");
    pAPI->glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC)glbGetProcAddress("glWindowPos3sMESA");
    pAPI->glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC)glbGetProcAddress("glWindowPos3svMESA");
    pAPI->glWindowPos4dMESA = (PFNGLWINDOWPOS4DMESAPROC)glbGetProcAddress("glWindowPos4dMESA");
    pAPI->glWindowPos4dvMESA = (PFNGLWINDOWPOS4DVMESAPROC)glbGetProcAddress("glWindowPos4dvMESA");
    pAPI->glWindowPos4fMESA = (PFNGLWINDOWPOS4FMESAPROC)glbGetProcAddress("glWindowPos4fMESA");
    pAPI->glWindowPos4fvMESA = (PFNGLWINDOWPOS4FVMESAPROC)glbGetProcAddress("glWindowPos4fvMESA");
    pAPI->glWindowPos4iMESA = (PFNGLWINDOWPOS4IMESAPROC)glbGetProcAddress("glWindowPos4iMESA");
    pAPI->glWindowPos4ivMESA = (PFNGLWINDOWPOS4IVMESAPROC)glbGetProcAddress("glWindowPos4ivMESA");
    pAPI->glWindowPos4sMESA = (PFNGLWINDOWPOS4SMESAPROC)glbGetProcAddress("glWindowPos4sMESA");
    pAPI->glWindowPos4svMESA = (PFNGLWINDOWPOS4SVMESAPROC)glbGetProcAddress("glWindowPos4svMESA");
    pAPI->glBeginConditionalRenderNVX = (PFNGLBEGINCONDITIONALRENDERNVXPROC)glbGetProcAddress("glBeginConditionalRenderNVX");
    pAPI->glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)glbGetProcAddress("glEndConditionalRenderNVX");
    pAPI->glLGPUNamedBufferSubDataNVX = (PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC)glbGetProcAddress("glLGPUNamedBufferSubDataNVX");
    pAPI->glLGPUCopyImageSubDataNVX = (PFNGLLGPUCOPYIMAGESUBDATANVXPROC)glbGetProcAddress("glLGPUCopyImageSubDataNVX");
    pAPI->glLGPUInterlockNVX = (PFNGLLGPUINTERLOCKNVXPROC)glbGetProcAddress("glLGPUInterlockNVX");
    pAPI->glAlphaToCoverageDitherControlNV = (PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC)glbGetProcAddress("glAlphaToCoverageDitherControlNV");
    pAPI->glMultiDrawArraysIndirectBindlessNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC)glbGetProcAddress("glMultiDrawArraysIndirectBindlessNV");
    pAPI->glMultiDrawElementsIndirectBindlessNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC)glbGetProcAddress("glMultiDrawElementsIndirectBindlessNV");
    pAPI->glMultiDrawArraysIndirectBindlessCountNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC)glbGetProcAddress("glMultiDrawArraysIndirectBindlessCountNV");
    pAPI->glMultiDrawElementsIndirectBindlessCountNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC)glbGetProcAddress("glMultiDrawElementsIndirectBindlessCountNV");
    pAPI->glGetTextureHandleNV = (PFNGLGETTEXTUREHANDLENVPROC)glbGetProcAddress("glGetTextureHandleNV");
    pAPI->glGetTextureSamplerHandleNV = (PFNGLGETTEXTURESAMPLERHANDLENVPROC)glbGetProcAddress("glGetTextureSamplerHandleNV");
    pAPI->glMakeTextureHandleResidentNV = (PFNGLMAKETEXTUREHANDLERESIDENTNVPROC)glbGetProcAddress("glMakeTextureHandleResidentNV");
    pAPI->glMakeTextureHandleNonResidentNV = (PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC)glbGetProcAddress("glMakeTextureHandleNonResidentNV");
    pAPI->glGetImageHandleNV = (PFNGLGETIMAGEHANDLENVPROC)glbGetProcAddress("glGetImageHandleNV");
    pAPI->glMakeImageHandleResidentNV = (PFNGLMAKEIMAGEHANDLERESIDENTNVPROC)glbGetProcAddress("glMakeImageHandleResidentNV");
    pAPI->glMakeImageHandleNonResidentNV = (PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC)glbGetProcAddress("glMakeImageHandleNonResidentNV");
    pAPI->glUniformHandleui64NV = (PFNGLUNIFORMHANDLEUI64NVPROC)glbGetProcAddress("glUniformHandleui64NV");
    pAPI->glUniformHandleui64vNV = (PFNGLUNIFORMHANDLEUI64VNVPROC)glbGetProcAddress("glUniformHandleui64vNV");
    pAPI->glProgramUniformHandleui64NV = (PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC)glbGetProcAddress("glProgramUniformHandleui64NV");
    pAPI->glProgramUniformHandleui64vNV = (PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC)glbGetProcAddress("glProgramUniformHandleui64vNV");
    pAPI->glIsTextureHandleResidentNV = (PFNGLISTEXTUREHANDLERESIDENTNVPROC)glbGetProcAddress("glIsTextureHandleResidentNV");
    pAPI->glIsImageHandleResidentNV = (PFNGLISIMAGEHANDLERESIDENTNVPROC)glbGetProcAddress("glIsImageHandleResidentNV");
    pAPI->glBlendParameteriNV = (PFNGLBLENDPARAMETERINVPROC)glbGetProcAddress("glBlendParameteriNV");
    pAPI->glBlendBarrierNV = (PFNGLBLENDBARRIERNVPROC)glbGetProcAddress("glBlendBarrierNV");
    pAPI->glViewportPositionWScaleNV = (PFNGLVIEWPORTPOSITIONWSCALENVPROC)glbGetProcAddress("glViewportPositionWScaleNV");
    pAPI->glCreateStatesNV = (PFNGLCREATESTATESNVPROC)glbGetProcAddress("glCreateStatesNV");
    pAPI->glDeleteStatesNV = (PFNGLDELETESTATESNVPROC)glbGetProcAddress("glDeleteStatesNV");
    pAPI->glIsStateNV = (PFNGLISSTATENVPROC)glbGetProcAddress("glIsStateNV");
    pAPI->glStateCaptureNV = (PFNGLSTATECAPTURENVPROC)glbGetProcAddress("glStateCaptureNV");
    pAPI->glGetCommandHeaderNV = (PFNGLGETCOMMANDHEADERNVPROC)glbGetProcAddress("glGetCommandHeaderNV");
    pAPI->glGetStageIndexNV = (PFNGLGETSTAGEINDEXNVPROC)glbGetProcAddress("glGetStageIndexNV");
    pAPI->glDrawCommandsNV = (PFNGLDRAWCOMMANDSNVPROC)glbGetProcAddress("glDrawCommandsNV");
    pAPI->glDrawCommandsAddressNV = (PFNGLDRAWCOMMANDSADDRESSNVPROC)glbGetProcAddress("glDrawCommandsAddressNV");
    pAPI->glDrawCommandsStatesNV = (PFNGLDRAWCOMMANDSSTATESNVPROC)glbGetProcAddress("glDrawCommandsStatesNV");
    pAPI->glDrawCommandsStatesAddressNV = (PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC)glbGetProcAddress("glDrawCommandsStatesAddressNV");
    pAPI->glCreateCommandListsNV = (PFNGLCREATECOMMANDLISTSNVPROC)glbGetProcAddress("glCreateCommandListsNV");
    pAPI->glDeleteCommandListsNV = (PFNGLDELETECOMMANDLISTSNVPROC)glbGetProcAddress("glDeleteCommandListsNV");
    pAPI->glIsCommandListNV = (PFNGLISCOMMANDLISTNVPROC)glbGetProcAddress("glIsCommandListNV");
    pAPI->glListDrawCommandsStatesClientNV = (PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC)glbGetProcAddress("glListDrawCommandsStatesClientNV");
    pAPI->glCommandListSegmentsNV = (PFNGLCOMMANDLISTSEGMENTSNVPROC)glbGetProcAddress("glCommandListSegmentsNV");
    pAPI->glCompileCommandListNV = (PFNGLCOMPILECOMMANDLISTNVPROC)glbGetProcAddress("glCompileCommandListNV");
    pAPI->glCallCommandListNV = (PFNGLCALLCOMMANDLISTNVPROC)glbGetProcAddress("glCallCommandListNV");
    pAPI->glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC)glbGetProcAddress("glBeginConditionalRenderNV");
    pAPI->glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)glbGetProcAddress("glEndConditionalRenderNV");
    pAPI->glSubpixelPrecisionBiasNV = (PFNGLSUBPIXELPRECISIONBIASNVPROC)glbGetProcAddress("glSubpixelPrecisionBiasNV");
    pAPI->glConservativeRasterParameterfNV = (PFNGLCONSERVATIVERASTERPARAMETERFNVPROC)glbGetProcAddress("glConservativeRasterParameterfNV");
    pAPI->glConservativeRasterParameteriNV = (PFNGLCONSERVATIVERASTERPARAMETERINVPROC)glbGetProcAddress("glConservativeRasterParameteriNV");
    pAPI->glCopyImageSubDataNV = (PFNGLCOPYIMAGESUBDATANVPROC)glbGetProcAddress("glCopyImageSubDataNV");
    pAPI->glDepthRangedNV = (PFNGLDEPTHRANGEDNVPROC)glbGetProcAddress("glDepthRangedNV");
    pAPI->glClearDepthdNV = (PFNGLCLEARDEPTHDNVPROC)glbGetProcAddress("glClearDepthdNV");
    pAPI->glDepthBoundsdNV = (PFNGLDEPTHBOUNDSDNVPROC)glbGetProcAddress("glDepthBoundsdNV");
    pAPI->glDrawTextureNV = (PFNGLDRAWTEXTURENVPROC)glbGetProcAddress("glDrawTextureNV");
    pAPI->glDrawVkImageNV = (PFNGLDRAWVKIMAGENVPROC)glbGetProcAddress("glDrawVkImageNV");
    pAPI->glGetVkProcAddrNV = (PFNGLGETVKPROCADDRNVPROC)glbGetProcAddress("glGetVkProcAddrNV");
    pAPI->glWaitVkSemaphoreNV = (PFNGLWAITVKSEMAPHORENVPROC)glbGetProcAddress("glWaitVkSemaphoreNV");
    pAPI->glSignalVkSemaphoreNV = (PFNGLSIGNALVKSEMAPHORENVPROC)glbGetProcAddress("glSignalVkSemaphoreNV");
    pAPI->glSignalVkFenceNV = (PFNGLSIGNALVKFENCENVPROC)glbGetProcAddress("glSignalVkFenceNV");
    pAPI->glMapControlPointsNV = (PFNGLMAPCONTROLPOINTSNVPROC)glbGetProcAddress("glMapControlPointsNV");
    pAPI->glMapParameterivNV = (PFNGLMAPPARAMETERIVNVPROC)glbGetProcAddress("glMapParameterivNV");
    pAPI->glMapParameterfvNV = (PFNGLMAPPARAMETERFVNVPROC)glbGetProcAddress("glMapParameterfvNV");
    pAPI->glGetMapControlPointsNV = (PFNGLGETMAPCONTROLPOINTSNVPROC)glbGetProcAddress("glGetMapControlPointsNV");
    pAPI->glGetMapParameterivNV = (PFNGLGETMAPPARAMETERIVNVPROC)glbGetProcAddress("glGetMapParameterivNV");
    pAPI->glGetMapParameterfvNV = (PFNGLGETMAPPARAMETERFVNVPROC)glbGetProcAddress("glGetMapParameterfvNV");
    pAPI->glGetMapAttribParameterivNV = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC)glbGetProcAddress("glGetMapAttribParameterivNV");
    pAPI->glGetMapAttribParameterfvNV = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC)glbGetProcAddress("glGetMapAttribParameterfvNV");
    pAPI->glEvalMapsNV = (PFNGLEVALMAPSNVPROC)glbGetProcAddress("glEvalMapsNV");
    pAPI->glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC)glbGetProcAddress("glGetMultisamplefvNV");
    pAPI->glSampleMaskIndexedNV = (PFNGLSAMPLEMASKINDEXEDNVPROC)glbGetProcAddress("glSampleMaskIndexedNV");
    pAPI->glTexRenderbufferNV = (PFNGLTEXRENDERBUFFERNVPROC)glbGetProcAddress("glTexRenderbufferNV");
    pAPI->glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC)glbGetProcAddress("glDeleteFencesNV");
    pAPI->glGenFencesNV = (PFNGLGENFENCESNVPROC)glbGetProcAddress("glGenFencesNV");
    pAPI->glIsFenceNV = (PFNGLISFENCENVPROC)glbGetProcAddress("glIsFenceNV");
    pAPI->glTestFenceNV = (PFNGLTESTFENCENVPROC)glbGetProcAddress("glTestFenceNV");
    pAPI->glGetFenceivNV = (PFNGLGETFENCEIVNVPROC)glbGetProcAddress("glGetFenceivNV");
    pAPI->glFinishFenceNV = (PFNGLFINISHFENCENVPROC)glbGetProcAddress("glFinishFenceNV");
    pAPI->glSetFenceNV = (PFNGLSETFENCENVPROC)glbGetProcAddress("glSetFenceNV");
    pAPI->glFragmentCoverageColorNV = (PFNGLFRAGMENTCOVERAGECOLORNVPROC)glbGetProcAddress("glFragmentCoverageColorNV");
    pAPI->glProgramNamedParameter4fNV = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)glbGetProcAddress("glProgramNamedParameter4fNV");
    pAPI->glProgramNamedParameter4fvNV = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)glbGetProcAddress("glProgramNamedParameter4fvNV");
    pAPI->glProgramNamedParameter4dNV = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)glbGetProcAddress("glProgramNamedParameter4dNV");
    pAPI->glProgramNamedParameter4dvNV = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)glbGetProcAddress("glProgramNamedParameter4dvNV");
    pAPI->glGetProgramNamedParameterfvNV = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)glbGetProcAddress("glGetProgramNamedParameterfvNV");
    pAPI->glGetProgramNamedParameterdvNV = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)glbGetProcAddress("glGetProgramNamedParameterdvNV");
    pAPI->glCoverageModulationTableNV = (PFNGLCOVERAGEMODULATIONTABLENVPROC)glbGetProcAddress("glCoverageModulationTableNV");
    pAPI->glGetCoverageModulationTableNV = (PFNGLGETCOVERAGEMODULATIONTABLENVPROC)glbGetProcAddress("glGetCoverageModulationTableNV");
    pAPI->glCoverageModulationNV = (PFNGLCOVERAGEMODULATIONNVPROC)glbGetProcAddress("glCoverageModulationNV");
    pAPI->glRenderbufferStorageMultisampleCoverageNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)glbGetProcAddress("glRenderbufferStorageMultisampleCoverageNV");
    pAPI->glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC)glbGetProcAddress("glProgramVertexLimitNV");
    pAPI->glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)glbGetProcAddress("glFramebufferTextureEXT");
    pAPI->glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)glbGetProcAddress("glFramebufferTextureFaceEXT");
    pAPI->glProgramLocalParameterI4iNV = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC)glbGetProcAddress("glProgramLocalParameterI4iNV");
    pAPI->glProgramLocalParameterI4ivNV = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)glbGetProcAddress("glProgramLocalParameterI4ivNV");
    pAPI->glProgramLocalParametersI4ivNV = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)glbGetProcAddress("glProgramLocalParametersI4ivNV");
    pAPI->glProgramLocalParameterI4uiNV = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)glbGetProcAddress("glProgramLocalParameterI4uiNV");
    pAPI->glProgramLocalParameterI4uivNV = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)glbGetProcAddress("glProgramLocalParameterI4uivNV");
    pAPI->glProgramLocalParametersI4uivNV = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)glbGetProcAddress("glProgramLocalParametersI4uivNV");
    pAPI->glProgramEnvParameterI4iNV = (PFNGLPROGRAMENVPARAMETERI4INVPROC)glbGetProcAddress("glProgramEnvParameterI4iNV");
    pAPI->glProgramEnvParameterI4ivNV = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC)glbGetProcAddress("glProgramEnvParameterI4ivNV");
    pAPI->glProgramEnvParametersI4ivNV = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)glbGetProcAddress("glProgramEnvParametersI4ivNV");
    pAPI->glProgramEnvParameterI4uiNV = (PFNGLPROGRAMENVPARAMETERI4UINVPROC)glbGetProcAddress("glProgramEnvParameterI4uiNV");
    pAPI->glProgramEnvParameterI4uivNV = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)glbGetProcAddress("glProgramEnvParameterI4uivNV");
    pAPI->glProgramEnvParametersI4uivNV = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)glbGetProcAddress("glProgramEnvParametersI4uivNV");
    pAPI->glGetProgramLocalParameterIivNV = (PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)glbGetProcAddress("glGetProgramLocalParameterIivNV");
    pAPI->glGetProgramLocalParameterIuivNV = (PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)glbGetProcAddress("glGetProgramLocalParameterIuivNV");
    pAPI->glGetProgramEnvParameterIivNV = (PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)glbGetProcAddress("glGetProgramEnvParameterIivNV");
    pAPI->glGetProgramEnvParameterIuivNV = (PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)glbGetProcAddress("glGetProgramEnvParameterIuivNV");
    pAPI->glProgramSubroutineParametersuivNV = (PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC)glbGetProcAddress("glProgramSubroutineParametersuivNV");
    pAPI->glGetProgramSubroutineParameteruivNV = (PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC)glbGetProcAddress("glGetProgramSubroutineParameteruivNV");
    pAPI->glVertex2hNV = (PFNGLVERTEX2HNVPROC)glbGetProcAddress("glVertex2hNV");
    pAPI->glVertex2hvNV = (PFNGLVERTEX2HVNVPROC)glbGetProcAddress("glVertex2hvNV");
    pAPI->glVertex3hNV = (PFNGLVERTEX3HNVPROC)glbGetProcAddress("glVertex3hNV");
    pAPI->glVertex3hvNV = (PFNGLVERTEX3HVNVPROC)glbGetProcAddress("glVertex3hvNV");
    pAPI->glVertex4hNV = (PFNGLVERTEX4HNVPROC)glbGetProcAddress("glVertex4hNV");
    pAPI->glVertex4hvNV = (PFNGLVERTEX4HVNVPROC)glbGetProcAddress("glVertex4hvNV");
    pAPI->glNormal3hNV = (PFNGLNORMAL3HNVPROC)glbGetProcAddress("glNormal3hNV");
    pAPI->glNormal3hvNV = (PFNGLNORMAL3HVNVPROC)glbGetProcAddress("glNormal3hvNV");
    pAPI->glColor3hNV = (PFNGLCOLOR3HNVPROC)glbGetProcAddress("glColor3hNV");
    pAPI->glColor3hvNV = (PFNGLCOLOR3HVNVPROC)glbGetProcAddress("glColor3hvNV");
    pAPI->glColor4hNV = (PFNGLCOLOR4HNVPROC)glbGetProcAddress("glColor4hNV");
    pAPI->glColor4hvNV = (PFNGLCOLOR4HVNVPROC)glbGetProcAddress("glColor4hvNV");
    pAPI->glTexCoord1hNV = (PFNGLTEXCOORD1HNVPROC)glbGetProcAddress("glTexCoord1hNV");
    pAPI->glTexCoord1hvNV = (PFNGLTEXCOORD1HVNVPROC)glbGetProcAddress("glTexCoord1hvNV");
    pAPI->glTexCoord2hNV = (PFNGLTEXCOORD2HNVPROC)glbGetProcAddress("glTexCoord2hNV");
    pAPI->glTexCoord2hvNV = (PFNGLTEXCOORD2HVNVPROC)glbGetProcAddress("glTexCoord2hvNV");
    pAPI->glTexCoord3hNV = (PFNGLTEXCOORD3HNVPROC)glbGetProcAddress("glTexCoord3hNV");
    pAPI->glTexCoord3hvNV = (PFNGLTEXCOORD3HVNVPROC)glbGetProcAddress("glTexCoord3hvNV");
    pAPI->glTexCoord4hNV = (PFNGLTEXCOORD4HNVPROC)glbGetProcAddress("glTexCoord4hNV");
    pAPI->glTexCoord4hvNV = (PFNGLTEXCOORD4HVNVPROC)glbGetProcAddress("glTexCoord4hvNV");
    pAPI->glMultiTexCoord1hNV = (PFNGLMULTITEXCOORD1HNVPROC)glbGetProcAddress("glMultiTexCoord1hNV");
    pAPI->glMultiTexCoord1hvNV = (PFNGLMULTITEXCOORD1HVNVPROC)glbGetProcAddress("glMultiTexCoord1hvNV");
    pAPI->glMultiTexCoord2hNV = (PFNGLMULTITEXCOORD2HNVPROC)glbGetProcAddress("glMultiTexCoord2hNV");
    pAPI->glMultiTexCoord2hvNV = (PFNGLMULTITEXCOORD2HVNVPROC)glbGetProcAddress("glMultiTexCoord2hvNV");
    pAPI->glMultiTexCoord3hNV = (PFNGLMULTITEXCOORD3HNVPROC)glbGetProcAddress("glMultiTexCoord3hNV");
    pAPI->glMultiTexCoord3hvNV = (PFNGLMULTITEXCOORD3HVNVPROC)glbGetProcAddress("glMultiTexCoord3hvNV");
    pAPI->glMultiTexCoord4hNV = (PFNGLMULTITEXCOORD4HNVPROC)glbGetProcAddress("glMultiTexCoord4hNV");
    pAPI->glMultiTexCoord4hvNV = (PFNGLMULTITEXCOORD4HVNVPROC)glbGetProcAddress("glMultiTexCoord4hvNV");
    pAPI->glFogCoordhNV = (PFNGLFOGCOORDHNVPROC)glbGetProcAddress("glFogCoordhNV");
    pAPI->glFogCoordhvNV = (PFNGLFOGCOORDHVNVPROC)glbGetProcAddress("glFogCoordhvNV");
    pAPI->glSecondaryColor3hNV = (PFNGLSECONDARYCOLOR3HNVPROC)glbGetProcAddress("glSecondaryColor3hNV");
    pAPI->glSecondaryColor3hvNV = (PFNGLSECONDARYCOLOR3HVNVPROC)glbGetProcAddress("glSecondaryColor3hvNV");
    pAPI->glVertexWeighthNV = (PFNGLVERTEXWEIGHTHNVPROC)glbGetProcAddress("glVertexWeighthNV");
    pAPI->glVertexWeighthvNV = (PFNGLVERTEXWEIGHTHVNVPROC)glbGetProcAddress("glVertexWeighthvNV");
    pAPI->glVertexAttrib1hNV = (PFNGLVERTEXATTRIB1HNVPROC)glbGetProcAddress("glVertexAttrib1hNV");
    pAPI->glVertexAttrib1hvNV = (PFNGLVERTEXATTRIB1HVNVPROC)glbGetProcAddress("glVertexAttrib1hvNV");
    pAPI->glVertexAttrib2hNV = (PFNGLVERTEXATTRIB2HNVPROC)glbGetProcAddress("glVertexAttrib2hNV");
    pAPI->glVertexAttrib2hvNV = (PFNGLVERTEXATTRIB2HVNVPROC)glbGetProcAddress("glVertexAttrib2hvNV");
    pAPI->glVertexAttrib3hNV = (PFNGLVERTEXATTRIB3HNVPROC)glbGetProcAddress("glVertexAttrib3hNV");
    pAPI->glVertexAttrib3hvNV = (PFNGLVERTEXATTRIB3HVNVPROC)glbGetProcAddress("glVertexAttrib3hvNV");
    pAPI->glVertexAttrib4hNV = (PFNGLVERTEXATTRIB4HNVPROC)glbGetProcAddress("glVertexAttrib4hNV");
    pAPI->glVertexAttrib4hvNV = (PFNGLVERTEXATTRIB4HVNVPROC)glbGetProcAddress("glVertexAttrib4hvNV");
    pAPI->glVertexAttribs1hvNV = (PFNGLVERTEXATTRIBS1HVNVPROC)glbGetProcAddress("glVertexAttribs1hvNV");
    pAPI->glVertexAttribs2hvNV = (PFNGLVERTEXATTRIBS2HVNVPROC)glbGetProcAddress("glVertexAttribs2hvNV");
    pAPI->glVertexAttribs3hvNV = (PFNGLVERTEXATTRIBS3HVNVPROC)glbGetProcAddress("glVertexAttribs3hvNV");
    pAPI->glVertexAttribs4hvNV = (PFNGLVERTEXATTRIBS4HVNVPROC)glbGetProcAddress("glVertexAttribs4hvNV");
    pAPI->glGetInternalformatSampleivNV = (PFNGLGETINTERNALFORMATSAMPLEIVNVPROC)glbGetProcAddress("glGetInternalformatSampleivNV");
    pAPI->glRenderGpuMaskNV = (PFNGLRENDERGPUMASKNVPROC)glbGetProcAddress("glRenderGpuMaskNV");
    pAPI->glMulticastBufferSubDataNV = (PFNGLMULTICASTBUFFERSUBDATANVPROC)glbGetProcAddress("glMulticastBufferSubDataNV");
    pAPI->glMulticastCopyBufferSubDataNV = (PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC)glbGetProcAddress("glMulticastCopyBufferSubDataNV");
    pAPI->glMulticastCopyImageSubDataNV = (PFNGLMULTICASTCOPYIMAGESUBDATANVPROC)glbGetProcAddress("glMulticastCopyImageSubDataNV");
    pAPI->glMulticastBlitFramebufferNV = (PFNGLMULTICASTBLITFRAMEBUFFERNVPROC)glbGetProcAddress("glMulticastBlitFramebufferNV");
    pAPI->glMulticastFramebufferSampleLocationsfvNV = (PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)glbGetProcAddress("glMulticastFramebufferSampleLocationsfvNV");
    pAPI->glMulticastBarrierNV = (PFNGLMULTICASTBARRIERNVPROC)glbGetProcAddress("glMulticastBarrierNV");
    pAPI->glMulticastWaitSyncNV = (PFNGLMULTICASTWAITSYNCNVPROC)glbGetProcAddress("glMulticastWaitSyncNV");
    pAPI->glMulticastGetQueryObjectivNV = (PFNGLMULTICASTGETQUERYOBJECTIVNVPROC)glbGetProcAddress("glMulticastGetQueryObjectivNV");
    pAPI->glMulticastGetQueryObjectuivNV = (PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC)glbGetProcAddress("glMulticastGetQueryObjectuivNV");
    pAPI->glMulticastGetQueryObjecti64vNV = (PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC)glbGetProcAddress("glMulticastGetQueryObjecti64vNV");
    pAPI->glMulticastGetQueryObjectui64vNV = (PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC)glbGetProcAddress("glMulticastGetQueryObjectui64vNV");
    pAPI->glUploadGpuMaskNVX = (PFNGLUPLOADGPUMASKNVXPROC)glbGetProcAddress("glUploadGpuMaskNVX");
    pAPI->glMulticastViewportArrayvNVX = (PFNGLMULTICASTVIEWPORTARRAYVNVXPROC)glbGetProcAddress("glMulticastViewportArrayvNVX");
    pAPI->glMulticastViewportPositionWScaleNVX = (PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC)glbGetProcAddress("glMulticastViewportPositionWScaleNVX");
    pAPI->glMulticastScissorArrayvNVX = (PFNGLMULTICASTSCISSORARRAYVNVXPROC)glbGetProcAddress("glMulticastScissorArrayvNVX");
    pAPI->glAsyncCopyBufferSubDataNVX = (PFNGLASYNCCOPYBUFFERSUBDATANVXPROC)glbGetProcAddress("glAsyncCopyBufferSubDataNVX");
    pAPI->glAsyncCopyImageSubDataNVX = (PFNGLASYNCCOPYIMAGESUBDATANVXPROC)glbGetProcAddress("glAsyncCopyImageSubDataNVX");
    pAPI->glCreateProgressFenceNVX = (PFNGLCREATEPROGRESSFENCENVXPROC)glbGetProcAddress("glCreateProgressFenceNVX");
    pAPI->glSignalSemaphoreui64NVX = (PFNGLSIGNALSEMAPHOREUI64NVXPROC)glbGetProcAddress("glSignalSemaphoreui64NVX");
    pAPI->glWaitSemaphoreui64NVX = (PFNGLWAITSEMAPHOREUI64NVXPROC)glbGetProcAddress("glWaitSemaphoreui64NVX");
    pAPI->glClientWaitSemaphoreui64NVX = (PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC)glbGetProcAddress("glClientWaitSemaphoreui64NVX");
    pAPI->glGetMemoryObjectDetachedResourcesuivNV = (PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC)glbGetProcAddress("glGetMemoryObjectDetachedResourcesuivNV");
    pAPI->glResetMemoryObjectParameterNV = (PFNGLRESETMEMORYOBJECTPARAMETERNVPROC)glbGetProcAddress("glResetMemoryObjectParameterNV");
    pAPI->glTexAttachMemoryNV = (PFNGLTEXATTACHMEMORYNVPROC)glbGetProcAddress("glTexAttachMemoryNV");
    pAPI->glBufferAttachMemoryNV = (PFNGLBUFFERATTACHMEMORYNVPROC)glbGetProcAddress("glBufferAttachMemoryNV");
    pAPI->glTextureAttachMemoryNV = (PFNGLTEXTUREATTACHMEMORYNVPROC)glbGetProcAddress("glTextureAttachMemoryNV");
    pAPI->glNamedBufferAttachMemoryNV = (PFNGLNAMEDBUFFERATTACHMEMORYNVPROC)glbGetProcAddress("glNamedBufferAttachMemoryNV");
    pAPI->glBufferPageCommitmentMemNV = (PFNGLBUFFERPAGECOMMITMENTMEMNVPROC)glbGetProcAddress("glBufferPageCommitmentMemNV");
    pAPI->glTexPageCommitmentMemNV = (PFNGLTEXPAGECOMMITMENTMEMNVPROC)glbGetProcAddress("glTexPageCommitmentMemNV");
    pAPI->glNamedBufferPageCommitmentMemNV = (PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC)glbGetProcAddress("glNamedBufferPageCommitmentMemNV");
    pAPI->glTexturePageCommitmentMemNV = (PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC)glbGetProcAddress("glTexturePageCommitmentMemNV");
    pAPI->glDrawMeshTasksNV = (PFNGLDRAWMESHTASKSNVPROC)glbGetProcAddress("glDrawMeshTasksNV");
    pAPI->glDrawMeshTasksIndirectNV = (PFNGLDRAWMESHTASKSINDIRECTNVPROC)glbGetProcAddress("glDrawMeshTasksIndirectNV");
    pAPI->glMultiDrawMeshTasksIndirectNV = (PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC)glbGetProcAddress("glMultiDrawMeshTasksIndirectNV");
    pAPI->glMultiDrawMeshTasksIndirectCountNV = (PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC)glbGetProcAddress("glMultiDrawMeshTasksIndirectCountNV");
    pAPI->glGenOcclusionQueriesNV = (PFNGLGENOCCLUSIONQUERIESNVPROC)glbGetProcAddress("glGenOcclusionQueriesNV");
    pAPI->glDeleteOcclusionQueriesNV = (PFNGLDELETEOCCLUSIONQUERIESNVPROC)glbGetProcAddress("glDeleteOcclusionQueriesNV");
    pAPI->glIsOcclusionQueryNV = (PFNGLISOCCLUSIONQUERYNVPROC)glbGetProcAddress("glIsOcclusionQueryNV");
    pAPI->glBeginOcclusionQueryNV = (PFNGLBEGINOCCLUSIONQUERYNVPROC)glbGetProcAddress("glBeginOcclusionQueryNV");
    pAPI->glEndOcclusionQueryNV = (PFNGLENDOCCLUSIONQUERYNVPROC)glbGetProcAddress("glEndOcclusionQueryNV");
    pAPI->glGetOcclusionQueryivNV = (PFNGLGETOCCLUSIONQUERYIVNVPROC)glbGetProcAddress("glGetOcclusionQueryivNV");
    pAPI->glGetOcclusionQueryuivNV = (PFNGLGETOCCLUSIONQUERYUIVNVPROC)glbGetProcAddress("glGetOcclusionQueryuivNV");
    pAPI->glProgramBufferParametersfvNV = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)glbGetProcAddress("glProgramBufferParametersfvNV");
    pAPI->glProgramBufferParametersIivNV = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)glbGetProcAddress("glProgramBufferParametersIivNV");
    pAPI->glProgramBufferParametersIuivNV = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)glbGetProcAddress("glProgramBufferParametersIuivNV");
    pAPI->glGenPathsNV = (PFNGLGENPATHSNVPROC)glbGetProcAddress("glGenPathsNV");
    pAPI->glDeletePathsNV = (PFNGLDELETEPATHSNVPROC)glbGetProcAddress("glDeletePathsNV");
    pAPI->glIsPathNV = (PFNGLISPATHNVPROC)glbGetProcAddress("glIsPathNV");
    pAPI->glPathCommandsNV = (PFNGLPATHCOMMANDSNVPROC)glbGetProcAddress("glPathCommandsNV");
    pAPI->glPathCoordsNV = (PFNGLPATHCOORDSNVPROC)glbGetProcAddress("glPathCoordsNV");
    pAPI->glPathSubCommandsNV = (PFNGLPATHSUBCOMMANDSNVPROC)glbGetProcAddress("glPathSubCommandsNV");
    pAPI->glPathSubCoordsNV = (PFNGLPATHSUBCOORDSNVPROC)glbGetProcAddress("glPathSubCoordsNV");
    pAPI->glPathStringNV = (PFNGLPATHSTRINGNVPROC)glbGetProcAddress("glPathStringNV");
    pAPI->glPathGlyphsNV = (PFNGLPATHGLYPHSNVPROC)glbGetProcAddress("glPathGlyphsNV");
    pAPI->glPathGlyphRangeNV = (PFNGLPATHGLYPHRANGENVPROC)glbGetProcAddress("glPathGlyphRangeNV");
    pAPI->glWeightPathsNV = (PFNGLWEIGHTPATHSNVPROC)glbGetProcAddress("glWeightPathsNV");
    pAPI->glCopyPathNV = (PFNGLCOPYPATHNVPROC)glbGetProcAddress("glCopyPathNV");
    pAPI->glInterpolatePathsNV = (PFNGLINTERPOLATEPATHSNVPROC)glbGetProcAddress("glInterpolatePathsNV");
    pAPI->glTransformPathNV = (PFNGLTRANSFORMPATHNVPROC)glbGetProcAddress("glTransformPathNV");
    pAPI->glPathParameterivNV = (PFNGLPATHPARAMETERIVNVPROC)glbGetProcAddress("glPathParameterivNV");
    pAPI->glPathParameteriNV = (PFNGLPATHPARAMETERINVPROC)glbGetProcAddress("glPathParameteriNV");
    pAPI->glPathParameterfvNV = (PFNGLPATHPARAMETERFVNVPROC)glbGetProcAddress("glPathParameterfvNV");
    pAPI->glPathParameterfNV = (PFNGLPATHPARAMETERFNVPROC)glbGetProcAddress("glPathParameterfNV");
    pAPI->glPathDashArrayNV = (PFNGLPATHDASHARRAYNVPROC)glbGetProcAddress("glPathDashArrayNV");
    pAPI->glPathStencilFuncNV = (PFNGLPATHSTENCILFUNCNVPROC)glbGetProcAddress("glPathStencilFuncNV");
    pAPI->glPathStencilDepthOffsetNV = (PFNGLPATHSTENCILDEPTHOFFSETNVPROC)glbGetProcAddress("glPathStencilDepthOffsetNV");
    pAPI->glStencilFillPathNV = (PFNGLSTENCILFILLPATHNVPROC)glbGetProcAddress("glStencilFillPathNV");
    pAPI->glStencilStrokePathNV = (PFNGLSTENCILSTROKEPATHNVPROC)glbGetProcAddress("glStencilStrokePathNV");
    pAPI->glStencilFillPathInstancedNV = (PFNGLSTENCILFILLPATHINSTANCEDNVPROC)glbGetProcAddress("glStencilFillPathInstancedNV");
    pAPI->glStencilStrokePathInstancedNV = (PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC)glbGetProcAddress("glStencilStrokePathInstancedNV");
    pAPI->glPathCoverDepthFuncNV = (PFNGLPATHCOVERDEPTHFUNCNVPROC)glbGetProcAddress("glPathCoverDepthFuncNV");
    pAPI->glCoverFillPathNV = (PFNGLCOVERFILLPATHNVPROC)glbGetProcAddress("glCoverFillPathNV");
    pAPI->glCoverStrokePathNV = (PFNGLCOVERSTROKEPATHNVPROC)glbGetProcAddress("glCoverStrokePathNV");
    pAPI->glCoverFillPathInstancedNV = (PFNGLCOVERFILLPATHINSTANCEDNVPROC)glbGetProcAddress("glCoverFillPathInstancedNV");
    pAPI->glCoverStrokePathInstancedNV = (PFNGLCOVERSTROKEPATHINSTANCEDNVPROC)glbGetProcAddress("glCoverStrokePathInstancedNV");
    pAPI->glGetPathParameterivNV = (PFNGLGETPATHPARAMETERIVNVPROC)glbGetProcAddress("glGetPathParameterivNV");
    pAPI->glGetPathParameterfvNV = (PFNGLGETPATHPARAMETERFVNVPROC)glbGetProcAddress("glGetPathParameterfvNV");
    pAPI->glGetPathCommandsNV = (PFNGLGETPATHCOMMANDSNVPROC)glbGetProcAddress("glGetPathCommandsNV");
    pAPI->glGetPathCoordsNV = (PFNGLGETPATHCOORDSNVPROC)glbGetProcAddress("glGetPathCoordsNV");
    pAPI->glGetPathDashArrayNV = (PFNGLGETPATHDASHARRAYNVPROC)glbGetProcAddress("glGetPathDashArrayNV");
    pAPI->glGetPathMetricsNV = (PFNGLGETPATHMETRICSNVPROC)glbGetProcAddress("glGetPathMetricsNV");
    pAPI->glGetPathMetricRangeNV = (PFNGLGETPATHMETRICRANGENVPROC)glbGetProcAddress("glGetPathMetricRangeNV");
    pAPI->glGetPathSpacingNV = (PFNGLGETPATHSPACINGNVPROC)glbGetProcAddress("glGetPathSpacingNV");
    pAPI->glIsPointInFillPathNV = (PFNGLISPOINTINFILLPATHNVPROC)glbGetProcAddress("glIsPointInFillPathNV");
    pAPI->glIsPointInStrokePathNV = (PFNGLISPOINTINSTROKEPATHNVPROC)glbGetProcAddress("glIsPointInStrokePathNV");
    pAPI->glGetPathLengthNV = (PFNGLGETPATHLENGTHNVPROC)glbGetProcAddress("glGetPathLengthNV");
    pAPI->glPointAlongPathNV = (PFNGLPOINTALONGPATHNVPROC)glbGetProcAddress("glPointAlongPathNV");
    pAPI->glMatrixLoad3x2fNV = (PFNGLMATRIXLOAD3X2FNVPROC)glbGetProcAddress("glMatrixLoad3x2fNV");
    pAPI->glMatrixLoad3x3fNV = (PFNGLMATRIXLOAD3X3FNVPROC)glbGetProcAddress("glMatrixLoad3x3fNV");
    pAPI->glMatrixLoadTranspose3x3fNV = (PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC)glbGetProcAddress("glMatrixLoadTranspose3x3fNV");
    pAPI->glMatrixMult3x2fNV = (PFNGLMATRIXMULT3X2FNVPROC)glbGetProcAddress("glMatrixMult3x2fNV");
    pAPI->glMatrixMult3x3fNV = (PFNGLMATRIXMULT3X3FNVPROC)glbGetProcAddress("glMatrixMult3x3fNV");
    pAPI->glMatrixMultTranspose3x3fNV = (PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC)glbGetProcAddress("glMatrixMultTranspose3x3fNV");
    pAPI->glStencilThenCoverFillPathNV = (PFNGLSTENCILTHENCOVERFILLPATHNVPROC)glbGetProcAddress("glStencilThenCoverFillPathNV");
    pAPI->glStencilThenCoverStrokePathNV = (PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC)glbGetProcAddress("glStencilThenCoverStrokePathNV");
    pAPI->glStencilThenCoverFillPathInstancedNV = (PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC)glbGetProcAddress("glStencilThenCoverFillPathInstancedNV");
    pAPI->glStencilThenCoverStrokePathInstancedNV = (PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC)glbGetProcAddress("glStencilThenCoverStrokePathInstancedNV");
    pAPI->glPathGlyphIndexRangeNV = (PFNGLPATHGLYPHINDEXRANGENVPROC)glbGetProcAddress("glPathGlyphIndexRangeNV");
    pAPI->glPathGlyphIndexArrayNV = (PFNGLPATHGLYPHINDEXARRAYNVPROC)glbGetProcAddress("glPathGlyphIndexArrayNV");
    pAPI->glPathMemoryGlyphIndexArrayNV = (PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC)glbGetProcAddress("glPathMemoryGlyphIndexArrayNV");
    pAPI->glProgramPathFragmentInputGenNV = (PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC)glbGetProcAddress("glProgramPathFragmentInputGenNV");
    pAPI->glGetProgramResourcefvNV = (PFNGLGETPROGRAMRESOURCEFVNVPROC)glbGetProcAddress("glGetProgramResourcefvNV");
    pAPI->glPathColorGenNV = (PFNGLPATHCOLORGENNVPROC)glbGetProcAddress("glPathColorGenNV");
    pAPI->glPathTexGenNV = (PFNGLPATHTEXGENNVPROC)glbGetProcAddress("glPathTexGenNV");
    pAPI->glPathFogGenNV = (PFNGLPATHFOGGENNVPROC)glbGetProcAddress("glPathFogGenNV");
    pAPI->glGetPathColorGenivNV = (PFNGLGETPATHCOLORGENIVNVPROC)glbGetProcAddress("glGetPathColorGenivNV");
    pAPI->glGetPathColorGenfvNV = (PFNGLGETPATHCOLORGENFVNVPROC)glbGetProcAddress("glGetPathColorGenfvNV");
    pAPI->glGetPathTexGenivNV = (PFNGLGETPATHTEXGENIVNVPROC)glbGetProcAddress("glGetPathTexGenivNV");
    pAPI->glGetPathTexGenfvNV = (PFNGLGETPATHTEXGENFVNVPROC)glbGetProcAddress("glGetPathTexGenfvNV");
    pAPI->glPixelDataRangeNV = (PFNGLPIXELDATARANGENVPROC)glbGetProcAddress("glPixelDataRangeNV");
    pAPI->glFlushPixelDataRangeNV = (PFNGLFLUSHPIXELDATARANGENVPROC)glbGetProcAddress("glFlushPixelDataRangeNV");
    pAPI->glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC)glbGetProcAddress("glPointParameteriNV");
    pAPI->glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC)glbGetProcAddress("glPointParameterivNV");
    pAPI->glPresentFrameKeyedNV = (PFNGLPRESENTFRAMEKEYEDNVPROC)glbGetProcAddress("glPresentFrameKeyedNV");
    pAPI->glPresentFrameDualFillNV = (PFNGLPRESENTFRAMEDUALFILLNVPROC)glbGetProcAddress("glPresentFrameDualFillNV");
    pAPI->glGetVideoivNV = (PFNGLGETVIDEOIVNVPROC)glbGetProcAddress("glGetVideoivNV");
    pAPI->glGetVideouivNV = (PFNGLGETVIDEOUIVNVPROC)glbGetProcAddress("glGetVideouivNV");
    pAPI->glGetVideoi64vNV = (PFNGLGETVIDEOI64VNVPROC)glbGetProcAddress("glGetVideoi64vNV");
    pAPI->glGetVideoui64vNV = (PFNGLGETVIDEOUI64VNVPROC)glbGetProcAddress("glGetVideoui64vNV");
    pAPI->glPrimitiveRestartNV = (PFNGLPRIMITIVERESTARTNVPROC)glbGetProcAddress("glPrimitiveRestartNV");
    pAPI->glPrimitiveRestartIndexNV = (PFNGLPRIMITIVERESTARTINDEXNVPROC)glbGetProcAddress("glPrimitiveRestartIndexNV");
    pAPI->glQueryResourceNV = (PFNGLQUERYRESOURCENVPROC)glbGetProcAddress("glQueryResourceNV");
    pAPI->glGenQueryResourceTagNV = (PFNGLGENQUERYRESOURCETAGNVPROC)glbGetProcAddress("glGenQueryResourceTagNV");
    pAPI->glDeleteQueryResourceTagNV = (PFNGLDELETEQUERYRESOURCETAGNVPROC)glbGetProcAddress("glDeleteQueryResourceTagNV");
    pAPI->glQueryResourceTagNV = (PFNGLQUERYRESOURCETAGNVPROC)glbGetProcAddress("glQueryResourceTagNV");
    pAPI->glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC)glbGetProcAddress("glCombinerParameterfvNV");
    pAPI->glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC)glbGetProcAddress("glCombinerParameterfNV");
    pAPI->glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC)glbGetProcAddress("glCombinerParameterivNV");
    pAPI->glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC)glbGetProcAddress("glCombinerParameteriNV");
    pAPI->glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC)glbGetProcAddress("glCombinerInputNV");
    pAPI->glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC)glbGetProcAddress("glCombinerOutputNV");
    pAPI->glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC)glbGetProcAddress("glFinalCombinerInputNV");
    pAPI->glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)glbGetProcAddress("glGetCombinerInputParameterfvNV");
    pAPI->glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)glbGetProcAddress("glGetCombinerInputParameterivNV");
    pAPI->glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)glbGetProcAddress("glGetCombinerOutputParameterfvNV");
    pAPI->glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)glbGetProcAddress("glGetCombinerOutputParameterivNV");
    pAPI->glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)glbGetProcAddress("glGetFinalCombinerInputParameterfvNV");
    pAPI->glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)glbGetProcAddress("glGetFinalCombinerInputParameterivNV");
    pAPI->glCombinerStageParameterfvNV = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)glbGetProcAddress("glCombinerStageParameterfvNV");
    pAPI->glGetCombinerStageParameterfvNV = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)glbGetProcAddress("glGetCombinerStageParameterfvNV");
    pAPI->glFramebufferSampleLocationsfvNV = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)glbGetProcAddress("glFramebufferSampleLocationsfvNV");
    pAPI->glNamedFramebufferSampleLocationsfvNV = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)glbGetProcAddress("glNamedFramebufferSampleLocationsfvNV");
    pAPI->glResolveDepthValuesNV = (PFNGLRESOLVEDEPTHVALUESNVPROC)glbGetProcAddress("glResolveDepthValuesNV");
    pAPI->glScissorExclusiveNV = (PFNGLSCISSOREXCLUSIVENVPROC)glbGetProcAddress("glScissorExclusiveNV");
    pAPI->glScissorExclusiveArrayvNV = (PFNGLSCISSOREXCLUSIVEARRAYVNVPROC)glbGetProcAddress("glScissorExclusiveArrayvNV");
    pAPI->glMakeBufferResidentNV = (PFNGLMAKEBUFFERRESIDENTNVPROC)glbGetProcAddress("glMakeBufferResidentNV");
    pAPI->glMakeBufferNonResidentNV = (PFNGLMAKEBUFFERNONRESIDENTNVPROC)glbGetProcAddress("glMakeBufferNonResidentNV");
    pAPI->glIsBufferResidentNV = (PFNGLISBUFFERRESIDENTNVPROC)glbGetProcAddress("glIsBufferResidentNV");
    pAPI->glMakeNamedBufferResidentNV = (PFNGLMAKENAMEDBUFFERRESIDENTNVPROC)glbGetProcAddress("glMakeNamedBufferResidentNV");
    pAPI->glMakeNamedBufferNonResidentNV = (PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC)glbGetProcAddress("glMakeNamedBufferNonResidentNV");
    pAPI->glIsNamedBufferResidentNV = (PFNGLISNAMEDBUFFERRESIDENTNVPROC)glbGetProcAddress("glIsNamedBufferResidentNV");
    pAPI->glGetBufferParameterui64vNV = (PFNGLGETBUFFERPARAMETERUI64VNVPROC)glbGetProcAddress("glGetBufferParameterui64vNV");
    pAPI->glGetNamedBufferParameterui64vNV = (PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC)glbGetProcAddress("glGetNamedBufferParameterui64vNV");
    pAPI->glGetIntegerui64vNV = (PFNGLGETINTEGERUI64VNVPROC)glbGetProcAddress("glGetIntegerui64vNV");
    pAPI->glUniformui64NV = (PFNGLUNIFORMUI64NVPROC)glbGetProcAddress("glUniformui64NV");
    pAPI->glUniformui64vNV = (PFNGLUNIFORMUI64VNVPROC)glbGetProcAddress("glUniformui64vNV");
    pAPI->glProgramUniformui64NV = (PFNGLPROGRAMUNIFORMUI64NVPROC)glbGetProcAddress("glProgramUniformui64NV");
    pAPI->glProgramUniformui64vNV = (PFNGLPROGRAMUNIFORMUI64VNVPROC)glbGetProcAddress("glProgramUniformui64vNV");
    pAPI->glBindShadingRateImageNV = (PFNGLBINDSHADINGRATEIMAGENVPROC)glbGetProcAddress("glBindShadingRateImageNV");
    pAPI->glGetShadingRateImagePaletteNV = (PFNGLGETSHADINGRATEIMAGEPALETTENVPROC)glbGetProcAddress("glGetShadingRateImagePaletteNV");
    pAPI->glGetShadingRateSampleLocationivNV = (PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC)glbGetProcAddress("glGetShadingRateSampleLocationivNV");
    pAPI->glShadingRateImageBarrierNV = (PFNGLSHADINGRATEIMAGEBARRIERNVPROC)glbGetProcAddress("glShadingRateImageBarrierNV");
    pAPI->glShadingRateImagePaletteNV = (PFNGLSHADINGRATEIMAGEPALETTENVPROC)glbGetProcAddress("glShadingRateImagePaletteNV");
    pAPI->glShadingRateSampleOrderNV = (PFNGLSHADINGRATESAMPLEORDERNVPROC)glbGetProcAddress("glShadingRateSampleOrderNV");
    pAPI->glShadingRateSampleOrderCustomNV = (PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC)glbGetProcAddress("glShadingRateSampleOrderCustomNV");
    pAPI->glTextureBarrierNV = (PFNGLTEXTUREBARRIERNVPROC)glbGetProcAddress("glTextureBarrierNV");
    pAPI->glTexImage2DMultisampleCoverageNV = (PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC)glbGetProcAddress("glTexImage2DMultisampleCoverageNV");
    pAPI->glTexImage3DMultisampleCoverageNV = (PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC)glbGetProcAddress("glTexImage3DMultisampleCoverageNV");
    pAPI->glTextureImage2DMultisampleNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC)glbGetProcAddress("glTextureImage2DMultisampleNV");
    pAPI->glTextureImage3DMultisampleNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC)glbGetProcAddress("glTextureImage3DMultisampleNV");
    pAPI->glTextureImage2DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC)glbGetProcAddress("glTextureImage2DMultisampleCoverageNV");
    pAPI->glTextureImage3DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC)glbGetProcAddress("glTextureImage3DMultisampleCoverageNV");
    pAPI->glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)glbGetProcAddress("glBeginTransformFeedbackNV");
    pAPI->glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)glbGetProcAddress("glEndTransformFeedbackNV");
    pAPI->glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)glbGetProcAddress("glTransformFeedbackAttribsNV");
    pAPI->glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)glbGetProcAddress("glBindBufferRangeNV");
    pAPI->glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC)glbGetProcAddress("glBindBufferOffsetNV");
    pAPI->glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)glbGetProcAddress("glBindBufferBaseNV");
    pAPI->glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)glbGetProcAddress("glTransformFeedbackVaryingsNV");
    pAPI->glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC)glbGetProcAddress("glActiveVaryingNV");
    pAPI->glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC)glbGetProcAddress("glGetVaryingLocationNV");
    pAPI->glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC)glbGetProcAddress("glGetActiveVaryingNV");
    pAPI->glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)glbGetProcAddress("glGetTransformFeedbackVaryingNV");
    pAPI->glTransformFeedbackStreamAttribsNV = (PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)glbGetProcAddress("glTransformFeedbackStreamAttribsNV");
    pAPI->glBindTransformFeedbackNV = (PFNGLBINDTRANSFORMFEEDBACKNVPROC)glbGetProcAddress("glBindTransformFeedbackNV");
    pAPI->glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC)glbGetProcAddress("glDeleteTransformFeedbacksNV");
    pAPI->glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC)glbGetProcAddress("glGenTransformFeedbacksNV");
    pAPI->glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC)glbGetProcAddress("glIsTransformFeedbackNV");
    pAPI->glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC)glbGetProcAddress("glPauseTransformFeedbackNV");
    pAPI->glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC)glbGetProcAddress("glResumeTransformFeedbackNV");
    pAPI->glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC)glbGetProcAddress("glDrawTransformFeedbackNV");
    pAPI->glVDPAUInitNV = (PFNGLVDPAUINITNVPROC)glbGetProcAddress("glVDPAUInitNV");
    pAPI->glVDPAUFiniNV = (PFNGLVDPAUFININVPROC)glbGetProcAddress("glVDPAUFiniNV");
    pAPI->glVDPAURegisterVideoSurfaceNV = (PFNGLVDPAUREGISTERVIDEOSURFACENVPROC)glbGetProcAddress("glVDPAURegisterVideoSurfaceNV");
    pAPI->glVDPAURegisterOutputSurfaceNV = (PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC)glbGetProcAddress("glVDPAURegisterOutputSurfaceNV");
    pAPI->glVDPAUIsSurfaceNV = (PFNGLVDPAUISSURFACENVPROC)glbGetProcAddress("glVDPAUIsSurfaceNV");
    pAPI->glVDPAUUnregisterSurfaceNV = (PFNGLVDPAUUNREGISTERSURFACENVPROC)glbGetProcAddress("glVDPAUUnregisterSurfaceNV");
    pAPI->glVDPAUGetSurfaceivNV = (PFNGLVDPAUGETSURFACEIVNVPROC)glbGetProcAddress("glVDPAUGetSurfaceivNV");
    pAPI->glVDPAUSurfaceAccessNV = (PFNGLVDPAUSURFACEACCESSNVPROC)glbGetProcAddress("glVDPAUSurfaceAccessNV");
    pAPI->glVDPAUMapSurfacesNV = (PFNGLVDPAUMAPSURFACESNVPROC)glbGetProcAddress("glVDPAUMapSurfacesNV");
    pAPI->glVDPAUUnmapSurfacesNV = (PFNGLVDPAUUNMAPSURFACESNVPROC)glbGetProcAddress("glVDPAUUnmapSurfacesNV");
    pAPI->glVDPAURegisterVideoSurfaceWithPictureStructureNV = (PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC)glbGetProcAddress("glVDPAURegisterVideoSurfaceWithPictureStructureNV");
    pAPI->glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)glbGetProcAddress("glFlushVertexArrayRangeNV");
    pAPI->glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC)glbGetProcAddress("glVertexArrayRangeNV");
    pAPI->glVertexAttribL1i64NV = (PFNGLVERTEXATTRIBL1I64NVPROC)glbGetProcAddress("glVertexAttribL1i64NV");
    pAPI->glVertexAttribL2i64NV = (PFNGLVERTEXATTRIBL2I64NVPROC)glbGetProcAddress("glVertexAttribL2i64NV");
    pAPI->glVertexAttribL3i64NV = (PFNGLVERTEXATTRIBL3I64NVPROC)glbGetProcAddress("glVertexAttribL3i64NV");
    pAPI->glVertexAttribL4i64NV = (PFNGLVERTEXATTRIBL4I64NVPROC)glbGetProcAddress("glVertexAttribL4i64NV");
    pAPI->glVertexAttribL1i64vNV = (PFNGLVERTEXATTRIBL1I64VNVPROC)glbGetProcAddress("glVertexAttribL1i64vNV");
    pAPI->glVertexAttribL2i64vNV = (PFNGLVERTEXATTRIBL2I64VNVPROC)glbGetProcAddress("glVertexAttribL2i64vNV");
    pAPI->glVertexAttribL3i64vNV = (PFNGLVERTEXATTRIBL3I64VNVPROC)glbGetProcAddress("glVertexAttribL3i64vNV");
    pAPI->glVertexAttribL4i64vNV = (PFNGLVERTEXATTRIBL4I64VNVPROC)glbGetProcAddress("glVertexAttribL4i64vNV");
    pAPI->glVertexAttribL1ui64NV = (PFNGLVERTEXATTRIBL1UI64NVPROC)glbGetProcAddress("glVertexAttribL1ui64NV");
    pAPI->glVertexAttribL2ui64NV = (PFNGLVERTEXATTRIBL2UI64NVPROC)glbGetProcAddress("glVertexAttribL2ui64NV");
    pAPI->glVertexAttribL3ui64NV = (PFNGLVERTEXATTRIBL3UI64NVPROC)glbGetProcAddress("glVertexAttribL3ui64NV");
    pAPI->glVertexAttribL4ui64NV = (PFNGLVERTEXATTRIBL4UI64NVPROC)glbGetProcAddress("glVertexAttribL4ui64NV");
    pAPI->glVertexAttribL1ui64vNV = (PFNGLVERTEXATTRIBL1UI64VNVPROC)glbGetProcAddress("glVertexAttribL1ui64vNV");
    pAPI->glVertexAttribL2ui64vNV = (PFNGLVERTEXATTRIBL2UI64VNVPROC)glbGetProcAddress("glVertexAttribL2ui64vNV");
    pAPI->glVertexAttribL3ui64vNV = (PFNGLVERTEXATTRIBL3UI64VNVPROC)glbGetProcAddress("glVertexAttribL3ui64vNV");
    pAPI->glVertexAttribL4ui64vNV = (PFNGLVERTEXATTRIBL4UI64VNVPROC)glbGetProcAddress("glVertexAttribL4ui64vNV");
    pAPI->glGetVertexAttribLi64vNV = (PFNGLGETVERTEXATTRIBLI64VNVPROC)glbGetProcAddress("glGetVertexAttribLi64vNV");
    pAPI->glGetVertexAttribLui64vNV = (PFNGLGETVERTEXATTRIBLUI64VNVPROC)glbGetProcAddress("glGetVertexAttribLui64vNV");
    pAPI->glVertexAttribLFormatNV = (PFNGLVERTEXATTRIBLFORMATNVPROC)glbGetProcAddress("glVertexAttribLFormatNV");
    pAPI->glBufferAddressRangeNV = (PFNGLBUFFERADDRESSRANGENVPROC)glbGetProcAddress("glBufferAddressRangeNV");
    pAPI->glVertexFormatNV = (PFNGLVERTEXFORMATNVPROC)glbGetProcAddress("glVertexFormatNV");
    pAPI->glNormalFormatNV = (PFNGLNORMALFORMATNVPROC)glbGetProcAddress("glNormalFormatNV");
    pAPI->glColorFormatNV = (PFNGLCOLORFORMATNVPROC)glbGetProcAddress("glColorFormatNV");
    pAPI->glIndexFormatNV = (PFNGLINDEXFORMATNVPROC)glbGetProcAddress("glIndexFormatNV");
    pAPI->glTexCoordFormatNV = (PFNGLTEXCOORDFORMATNVPROC)glbGetProcAddress("glTexCoordFormatNV");
    pAPI->glEdgeFlagFormatNV = (PFNGLEDGEFLAGFORMATNVPROC)glbGetProcAddress("glEdgeFlagFormatNV");
    pAPI->glSecondaryColorFormatNV = (PFNGLSECONDARYCOLORFORMATNVPROC)glbGetProcAddress("glSecondaryColorFormatNV");
    pAPI->glFogCoordFormatNV = (PFNGLFOGCOORDFORMATNVPROC)glbGetProcAddress("glFogCoordFormatNV");
    pAPI->glVertexAttribFormatNV = (PFNGLVERTEXATTRIBFORMATNVPROC)glbGetProcAddress("glVertexAttribFormatNV");
    pAPI->glVertexAttribIFormatNV = (PFNGLVERTEXATTRIBIFORMATNVPROC)glbGetProcAddress("glVertexAttribIFormatNV");
    pAPI->glGetIntegerui64i_vNV = (PFNGLGETINTEGERUI64I_VNVPROC)glbGetProcAddress("glGetIntegerui64i_vNV");
    pAPI->glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC)glbGetProcAddress("glAreProgramsResidentNV");
    pAPI->glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)glbGetProcAddress("glBindProgramNV");
    pAPI->glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)glbGetProcAddress("glDeleteProgramsNV");
    pAPI->glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC)glbGetProcAddress("glExecuteProgramNV");
    pAPI->glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)glbGetProcAddress("glGenProgramsNV");
    pAPI->glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC)glbGetProcAddress("glGetProgramParameterdvNV");
    pAPI->glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC)glbGetProcAddress("glGetProgramParameterfvNV");
    pAPI->glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC)glbGetProcAddress("glGetProgramivNV");
    pAPI->glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC)glbGetProcAddress("glGetProgramStringNV");
    pAPI->glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC)glbGetProcAddress("glGetTrackMatrixivNV");
    pAPI->glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)glbGetProcAddress("glGetVertexAttribdvNV");
    pAPI->glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)glbGetProcAddress("glGetVertexAttribfvNV");
    pAPI->glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)glbGetProcAddress("glGetVertexAttribivNV");
    pAPI->glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)glbGetProcAddress("glGetVertexAttribPointervNV");
    pAPI->glIsProgramNV = (PFNGLISPROGRAMNVPROC)glbGetProcAddress("glIsProgramNV");
    pAPI->glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC)glbGetProcAddress("glLoadProgramNV");
    pAPI->glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC)glbGetProcAddress("glProgramParameter4dNV");
    pAPI->glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC)glbGetProcAddress("glProgramParameter4dvNV");
    pAPI->glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC)glbGetProcAddress("glProgramParameter4fNV");
    pAPI->glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC)glbGetProcAddress("glProgramParameter4fvNV");
    pAPI->glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC)glbGetProcAddress("glProgramParameters4dvNV");
    pAPI->glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC)glbGetProcAddress("glProgramParameters4fvNV");
    pAPI->glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)glbGetProcAddress("glRequestResidentProgramsNV");
    pAPI->glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC)glbGetProcAddress("glTrackMatrixNV");
    pAPI->glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC)glbGetProcAddress("glVertexAttribPointerNV");
    pAPI->glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)glbGetProcAddress("glVertexAttrib1dNV");
    pAPI->glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)glbGetProcAddress("glVertexAttrib1dvNV");
    pAPI->glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)glbGetProcAddress("glVertexAttrib1fNV");
    pAPI->glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)glbGetProcAddress("glVertexAttrib1fvNV");
    pAPI->glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)glbGetProcAddress("glVertexAttrib1sNV");
    pAPI->glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)glbGetProcAddress("glVertexAttrib1svNV");
    pAPI->glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)glbGetProcAddress("glVertexAttrib2dNV");
    pAPI->glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)glbGetProcAddress("glVertexAttrib2dvNV");
    pAPI->glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)glbGetProcAddress("glVertexAttrib2fNV");
    pAPI->glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)glbGetProcAddress("glVertexAttrib2fvNV");
    pAPI->glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)glbGetProcAddress("glVertexAttrib2sNV");
    pAPI->glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)glbGetProcAddress("glVertexAttrib2svNV");
    pAPI->glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)glbGetProcAddress("glVertexAttrib3dNV");
    pAPI->glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)glbGetProcAddress("glVertexAttrib3dvNV");
    pAPI->glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)glbGetProcAddress("glVertexAttrib3fNV");
    pAPI->glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)glbGetProcAddress("glVertexAttrib3fvNV");
    pAPI->glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)glbGetProcAddress("glVertexAttrib3sNV");
    pAPI->glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)glbGetProcAddress("glVertexAttrib3svNV");
    pAPI->glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)glbGetProcAddress("glVertexAttrib4dNV");
    pAPI->glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)glbGetProcAddress("glVertexAttrib4dvNV");
    pAPI->glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)glbGetProcAddress("glVertexAttrib4fNV");
    pAPI->glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)glbGetProcAddress("glVertexAttrib4fvNV");
    pAPI->glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)glbGetProcAddress("glVertexAttrib4sNV");
    pAPI->glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)glbGetProcAddress("glVertexAttrib4svNV");
    pAPI->glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)glbGetProcAddress("glVertexAttrib4ubNV");
    pAPI->glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)glbGetProcAddress("glVertexAttrib4ubvNV");
    pAPI->glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC)glbGetProcAddress("glVertexAttribs1dvNV");
    pAPI->glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC)glbGetProcAddress("glVertexAttribs1fvNV");
    pAPI->glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC)glbGetProcAddress("glVertexAttribs1svNV");
    pAPI->glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC)glbGetProcAddress("glVertexAttribs2dvNV");
    pAPI->glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC)glbGetProcAddress("glVertexAttribs2fvNV");
    pAPI->glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC)glbGetProcAddress("glVertexAttribs2svNV");
    pAPI->glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC)glbGetProcAddress("glVertexAttribs3dvNV");
    pAPI->glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC)glbGetProcAddress("glVertexAttribs3fvNV");
    pAPI->glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC)glbGetProcAddress("glVertexAttribs3svNV");
    pAPI->glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC)glbGetProcAddress("glVertexAttribs4dvNV");
    pAPI->glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC)glbGetProcAddress("glVertexAttribs4fvNV");
    pAPI->glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC)glbGetProcAddress("glVertexAttribs4svNV");
    pAPI->glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC)glbGetProcAddress("glVertexAttribs4ubvNV");
    pAPI->glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC)glbGetProcAddress("glVertexAttribI1iEXT");
    pAPI->glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC)glbGetProcAddress("glVertexAttribI2iEXT");
    pAPI->glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC)glbGetProcAddress("glVertexAttribI3iEXT");
    pAPI->glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC)glbGetProcAddress("glVertexAttribI4iEXT");
    pAPI->glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC)glbGetProcAddress("glVertexAttribI1uiEXT");
    pAPI->glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC)glbGetProcAddress("glVertexAttribI2uiEXT");
    pAPI->glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC)glbGetProcAddress("glVertexAttribI3uiEXT");
    pAPI->glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC)glbGetProcAddress("glVertexAttribI4uiEXT");
    pAPI->glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC)glbGetProcAddress("glVertexAttribI1ivEXT");
    pAPI->glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC)glbGetProcAddress("glVertexAttribI2ivEXT");
    pAPI->glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC)glbGetProcAddress("glVertexAttribI3ivEXT");
    pAPI->glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC)glbGetProcAddress("glVertexAttribI4ivEXT");
    pAPI->glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC)glbGetProcAddress("glVertexAttribI1uivEXT");
    pAPI->glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC)glbGetProcAddress("glVertexAttribI2uivEXT");
    pAPI->glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC)glbGetProcAddress("glVertexAttribI3uivEXT");
    pAPI->glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC)glbGetProcAddress("glVertexAttribI4uivEXT");
    pAPI->glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC)glbGetProcAddress("glVertexAttribI4bvEXT");
    pAPI->glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC)glbGetProcAddress("glVertexAttribI4svEXT");
    pAPI->glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC)glbGetProcAddress("glVertexAttribI4ubvEXT");
    pAPI->glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC)glbGetProcAddress("glVertexAttribI4usvEXT");
    pAPI->glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)glbGetProcAddress("glVertexAttribIPointerEXT");
    pAPI->glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC)glbGetProcAddress("glGetVertexAttribIivEXT");
    pAPI->glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)glbGetProcAddress("glGetVertexAttribIuivEXT");
    pAPI->glBeginVideoCaptureNV = (PFNGLBEGINVIDEOCAPTURENVPROC)glbGetProcAddress("glBeginVideoCaptureNV");
    pAPI->glBindVideoCaptureStreamBufferNV = (PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC)glbGetProcAddress("glBindVideoCaptureStreamBufferNV");
    pAPI->glBindVideoCaptureStreamTextureNV = (PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC)glbGetProcAddress("glBindVideoCaptureStreamTextureNV");
    pAPI->glEndVideoCaptureNV = (PFNGLENDVIDEOCAPTURENVPROC)glbGetProcAddress("glEndVideoCaptureNV");
    pAPI->glGetVideoCaptureivNV = (PFNGLGETVIDEOCAPTUREIVNVPROC)glbGetProcAddress("glGetVideoCaptureivNV");
    pAPI->glGetVideoCaptureStreamivNV = (PFNGLGETVIDEOCAPTURESTREAMIVNVPROC)glbGetProcAddress("glGetVideoCaptureStreamivNV");
    pAPI->glGetVideoCaptureStreamfvNV = (PFNGLGETVIDEOCAPTURESTREAMFVNVPROC)glbGetProcAddress("glGetVideoCaptureStreamfvNV");
    pAPI->glGetVideoCaptureStreamdvNV = (PFNGLGETVIDEOCAPTURESTREAMDVNVPROC)glbGetProcAddress("glGetVideoCaptureStreamdvNV");
    pAPI->glVideoCaptureNV = (PFNGLVIDEOCAPTURENVPROC)glbGetProcAddress("glVideoCaptureNV");
    pAPI->glVideoCaptureStreamParameterivNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC)glbGetProcAddress("glVideoCaptureStreamParameterivNV");
    pAPI->glVideoCaptureStreamParameterfvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC)glbGetProcAddress("glVideoCaptureStreamParameterfvNV");
    pAPI->glVideoCaptureStreamParameterdvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC)glbGetProcAddress("glVideoCaptureStreamParameterdvNV");
    pAPI->glViewportSwizzleNV = (PFNGLVIEWPORTSWIZZLENVPROC)glbGetProcAddress("glViewportSwizzleNV");
    pAPI->glMultiTexCoord1bOES = (PFNGLMULTITEXCOORD1BOESPROC)glbGetProcAddress("glMultiTexCoord1bOES");
    pAPI->glMultiTexCoord1bvOES = (PFNGLMULTITEXCOORD1BVOESPROC)glbGetProcAddress("glMultiTexCoord1bvOES");
    pAPI->glMultiTexCoord2bOES = (PFNGLMULTITEXCOORD2BOESPROC)glbGetProcAddress("glMultiTexCoord2bOES");
    pAPI->glMultiTexCoord2bvOES = (PFNGLMULTITEXCOORD2BVOESPROC)glbGetProcAddress("glMultiTexCoord2bvOES");
    pAPI->glMultiTexCoord3bOES = (PFNGLMULTITEXCOORD3BOESPROC)glbGetProcAddress("glMultiTexCoord3bOES");
    pAPI->glMultiTexCoord3bvOES = (PFNGLMULTITEXCOORD3BVOESPROC)glbGetProcAddress("glMultiTexCoord3bvOES");
    pAPI->glMultiTexCoord4bOES = (PFNGLMULTITEXCOORD4BOESPROC)glbGetProcAddress("glMultiTexCoord4bOES");
    pAPI->glMultiTexCoord4bvOES = (PFNGLMULTITEXCOORD4BVOESPROC)glbGetProcAddress("glMultiTexCoord4bvOES");
    pAPI->glTexCoord1bOES = (PFNGLTEXCOORD1BOESPROC)glbGetProcAddress("glTexCoord1bOES");
    pAPI->glTexCoord1bvOES = (PFNGLTEXCOORD1BVOESPROC)glbGetProcAddress("glTexCoord1bvOES");
    pAPI->glTexCoord2bOES = (PFNGLTEXCOORD2BOESPROC)glbGetProcAddress("glTexCoord2bOES");
    pAPI->glTexCoord2bvOES = (PFNGLTEXCOORD2BVOESPROC)glbGetProcAddress("glTexCoord2bvOES");
    pAPI->glTexCoord3bOES = (PFNGLTEXCOORD3BOESPROC)glbGetProcAddress("glTexCoord3bOES");
    pAPI->glTexCoord3bvOES = (PFNGLTEXCOORD3BVOESPROC)glbGetProcAddress("glTexCoord3bvOES");
    pAPI->glTexCoord4bOES = (PFNGLTEXCOORD4BOESPROC)glbGetProcAddress("glTexCoord4bOES");
    pAPI->glTexCoord4bvOES = (PFNGLTEXCOORD4BVOESPROC)glbGetProcAddress("glTexCoord4bvOES");
    pAPI->glVertex2bOES = (PFNGLVERTEX2BOESPROC)glbGetProcAddress("glVertex2bOES");
    pAPI->glVertex2bvOES = (PFNGLVERTEX2BVOESPROC)glbGetProcAddress("glVertex2bvOES");
    pAPI->glVertex3bOES = (PFNGLVERTEX3BOESPROC)glbGetProcAddress("glVertex3bOES");
    pAPI->glVertex3bvOES = (PFNGLVERTEX3BVOESPROC)glbGetProcAddress("glVertex3bvOES");
    pAPI->glVertex4bOES = (PFNGLVERTEX4BOESPROC)glbGetProcAddress("glVertex4bOES");
    pAPI->glVertex4bvOES = (PFNGLVERTEX4BVOESPROC)glbGetProcAddress("glVertex4bvOES");
    pAPI->glAlphaFuncxOES = (PFNGLALPHAFUNCXOESPROC)glbGetProcAddress("glAlphaFuncxOES");
    pAPI->glClearColorxOES = (PFNGLCLEARCOLORXOESPROC)glbGetProcAddress("glClearColorxOES");
    pAPI->glClearDepthxOES = (PFNGLCLEARDEPTHXOESPROC)glbGetProcAddress("glClearDepthxOES");
    pAPI->glClipPlanexOES = (PFNGLCLIPPLANEXOESPROC)glbGetProcAddress("glClipPlanexOES");
    pAPI->glColor4xOES = (PFNGLCOLOR4XOESPROC)glbGetProcAddress("glColor4xOES");
    pAPI->glDepthRangexOES = (PFNGLDEPTHRANGEXOESPROC)glbGetProcAddress("glDepthRangexOES");
    pAPI->glFogxOES = (PFNGLFOGXOESPROC)glbGetProcAddress("glFogxOES");
    pAPI->glFogxvOES = (PFNGLFOGXVOESPROC)glbGetProcAddress("glFogxvOES");
    pAPI->glFrustumxOES = (PFNGLFRUSTUMXOESPROC)glbGetProcAddress("glFrustumxOES");
    pAPI->glGetClipPlanexOES = (PFNGLGETCLIPPLANEXOESPROC)glbGetProcAddress("glGetClipPlanexOES");
    pAPI->glGetFixedvOES = (PFNGLGETFIXEDVOESPROC)glbGetProcAddress("glGetFixedvOES");
    pAPI->glGetTexEnvxvOES = (PFNGLGETTEXENVXVOESPROC)glbGetProcAddress("glGetTexEnvxvOES");
    pAPI->glGetTexParameterxvOES = (PFNGLGETTEXPARAMETERXVOESPROC)glbGetProcAddress("glGetTexParameterxvOES");
    pAPI->glLightModelxOES = (PFNGLLIGHTMODELXOESPROC)glbGetProcAddress("glLightModelxOES");
    pAPI->glLightModelxvOES = (PFNGLLIGHTMODELXVOESPROC)glbGetProcAddress("glLightModelxvOES");
    pAPI->glLightxOES = (PFNGLLIGHTXOESPROC)glbGetProcAddress("glLightxOES");
    pAPI->glLightxvOES = (PFNGLLIGHTXVOESPROC)glbGetProcAddress("glLightxvOES");
    pAPI->glLineWidthxOES = (PFNGLLINEWIDTHXOESPROC)glbGetProcAddress("glLineWidthxOES");
    pAPI->glLoadMatrixxOES = (PFNGLLOADMATRIXXOESPROC)glbGetProcAddress("glLoadMatrixxOES");
    pAPI->glMaterialxOES = (PFNGLMATERIALXOESPROC)glbGetProcAddress("glMaterialxOES");
    pAPI->glMaterialxvOES = (PFNGLMATERIALXVOESPROC)glbGetProcAddress("glMaterialxvOES");
    pAPI->glMultMatrixxOES = (PFNGLMULTMATRIXXOESPROC)glbGetProcAddress("glMultMatrixxOES");
    pAPI->glMultiTexCoord4xOES = (PFNGLMULTITEXCOORD4XOESPROC)glbGetProcAddress("glMultiTexCoord4xOES");
    pAPI->glNormal3xOES = (PFNGLNORMAL3XOESPROC)glbGetProcAddress("glNormal3xOES");
    pAPI->glOrthoxOES = (PFNGLORTHOXOESPROC)glbGetProcAddress("glOrthoxOES");
    pAPI->glPointParameterxvOES = (PFNGLPOINTPARAMETERXVOESPROC)glbGetProcAddress("glPointParameterxvOES");
    pAPI->glPointSizexOES = (PFNGLPOINTSIZEXOESPROC)glbGetProcAddress("glPointSizexOES");
    pAPI->glPolygonOffsetxOES = (PFNGLPOLYGONOFFSETXOESPROC)glbGetProcAddress("glPolygonOffsetxOES");
    pAPI->glRotatexOES = (PFNGLROTATEXOESPROC)glbGetProcAddress("glRotatexOES");
    pAPI->glScalexOES = (PFNGLSCALEXOESPROC)glbGetProcAddress("glScalexOES");
    pAPI->glTexEnvxOES = (PFNGLTEXENVXOESPROC)glbGetProcAddress("glTexEnvxOES");
    pAPI->glTexEnvxvOES = (PFNGLTEXENVXVOESPROC)glbGetProcAddress("glTexEnvxvOES");
    pAPI->glTexParameterxOES = (PFNGLTEXPARAMETERXOESPROC)glbGetProcAddress("glTexParameterxOES");
    pAPI->glTexParameterxvOES = (PFNGLTEXPARAMETERXVOESPROC)glbGetProcAddress("glTexParameterxvOES");
    pAPI->glTranslatexOES = (PFNGLTRANSLATEXOESPROC)glbGetProcAddress("glTranslatexOES");
    pAPI->glGetLightxvOES = (PFNGLGETLIGHTXVOESPROC)glbGetProcAddress("glGetLightxvOES");
    pAPI->glGetMaterialxvOES = (PFNGLGETMATERIALXVOESPROC)glbGetProcAddress("glGetMaterialxvOES");
    pAPI->glPointParameterxOES = (PFNGLPOINTPARAMETERXOESPROC)glbGetProcAddress("glPointParameterxOES");
    pAPI->glSampleCoveragexOES = (PFNGLSAMPLECOVERAGEXOESPROC)glbGetProcAddress("glSampleCoveragexOES");
    pAPI->glAccumxOES = (PFNGLACCUMXOESPROC)glbGetProcAddress("glAccumxOES");
    pAPI->glBitmapxOES = (PFNGLBITMAPXOESPROC)glbGetProcAddress("glBitmapxOES");
    pAPI->glBlendColorxOES = (PFNGLBLENDCOLORXOESPROC)glbGetProcAddress("glBlendColorxOES");
    pAPI->glClearAccumxOES = (PFNGLCLEARACCUMXOESPROC)glbGetProcAddress("glClearAccumxOES");
    pAPI->glColor3xOES = (PFNGLCOLOR3XOESPROC)glbGetProcAddress("glColor3xOES");
    pAPI->glColor3xvOES = (PFNGLCOLOR3XVOESPROC)glbGetProcAddress("glColor3xvOES");
    pAPI->glColor4xvOES = (PFNGLCOLOR4XVOESPROC)glbGetProcAddress("glColor4xvOES");
    pAPI->glConvolutionParameterxOES = (PFNGLCONVOLUTIONPARAMETERXOESPROC)glbGetProcAddress("glConvolutionParameterxOES");
    pAPI->glConvolutionParameterxvOES = (PFNGLCONVOLUTIONPARAMETERXVOESPROC)glbGetProcAddress("glConvolutionParameterxvOES");
    pAPI->glEvalCoord1xOES = (PFNGLEVALCOORD1XOESPROC)glbGetProcAddress("glEvalCoord1xOES");
    pAPI->glEvalCoord1xvOES = (PFNGLEVALCOORD1XVOESPROC)glbGetProcAddress("glEvalCoord1xvOES");
    pAPI->glEvalCoord2xOES = (PFNGLEVALCOORD2XOESPROC)glbGetProcAddress("glEvalCoord2xOES");
    pAPI->glEvalCoord2xvOES = (PFNGLEVALCOORD2XVOESPROC)glbGetProcAddress("glEvalCoord2xvOES");
    pAPI->glFeedbackBufferxOES = (PFNGLFEEDBACKBUFFERXOESPROC)glbGetProcAddress("glFeedbackBufferxOES");
    pAPI->glGetConvolutionParameterxvOES = (PFNGLGETCONVOLUTIONPARAMETERXVOESPROC)glbGetProcAddress("glGetConvolutionParameterxvOES");
    pAPI->glGetHistogramParameterxvOES = (PFNGLGETHISTOGRAMPARAMETERXVOESPROC)glbGetProcAddress("glGetHistogramParameterxvOES");
    pAPI->glGetLightxOES = (PFNGLGETLIGHTXOESPROC)glbGetProcAddress("glGetLightxOES");
    pAPI->glGetMapxvOES = (PFNGLGETMAPXVOESPROC)glbGetProcAddress("glGetMapxvOES");
    pAPI->glGetMaterialxOES = (PFNGLGETMATERIALXOESPROC)glbGetProcAddress("glGetMaterialxOES");
    pAPI->glGetPixelMapxv = (PFNGLGETPIXELMAPXVPROC)glbGetProcAddress("glGetPixelMapxv");
    pAPI->glGetTexGenxvOES = (PFNGLGETTEXGENXVOESPROC)glbGetProcAddress("glGetTexGenxvOES");
    pAPI->glGetTexLevelParameterxvOES = (PFNGLGETTEXLEVELPARAMETERXVOESPROC)glbGetProcAddress("glGetTexLevelParameterxvOES");
    pAPI->glIndexxOES = (PFNGLINDEXXOESPROC)glbGetProcAddress("glIndexxOES");
    pAPI->glIndexxvOES = (PFNGLINDEXXVOESPROC)glbGetProcAddress("glIndexxvOES");
    pAPI->glLoadTransposeMatrixxOES = (PFNGLLOADTRANSPOSEMATRIXXOESPROC)glbGetProcAddress("glLoadTransposeMatrixxOES");
    pAPI->glMap1xOES = (PFNGLMAP1XOESPROC)glbGetProcAddress("glMap1xOES");
    pAPI->glMap2xOES = (PFNGLMAP2XOESPROC)glbGetProcAddress("glMap2xOES");
    pAPI->glMapGrid1xOES = (PFNGLMAPGRID1XOESPROC)glbGetProcAddress("glMapGrid1xOES");
    pAPI->glMapGrid2xOES = (PFNGLMAPGRID2XOESPROC)glbGetProcAddress("glMapGrid2xOES");
    pAPI->glMultTransposeMatrixxOES = (PFNGLMULTTRANSPOSEMATRIXXOESPROC)glbGetProcAddress("glMultTransposeMatrixxOES");
    pAPI->glMultiTexCoord1xOES = (PFNGLMULTITEXCOORD1XOESPROC)glbGetProcAddress("glMultiTexCoord1xOES");
    pAPI->glMultiTexCoord1xvOES = (PFNGLMULTITEXCOORD1XVOESPROC)glbGetProcAddress("glMultiTexCoord1xvOES");
    pAPI->glMultiTexCoord2xOES = (PFNGLMULTITEXCOORD2XOESPROC)glbGetProcAddress("glMultiTexCoord2xOES");
    pAPI->glMultiTexCoord2xvOES = (PFNGLMULTITEXCOORD2XVOESPROC)glbGetProcAddress("glMultiTexCoord2xvOES");
    pAPI->glMultiTexCoord3xOES = (PFNGLMULTITEXCOORD3XOESPROC)glbGetProcAddress("glMultiTexCoord3xOES");
    pAPI->glMultiTexCoord3xvOES = (PFNGLMULTITEXCOORD3XVOESPROC)glbGetProcAddress("glMultiTexCoord3xvOES");
    pAPI->glMultiTexCoord4xvOES = (PFNGLMULTITEXCOORD4XVOESPROC)glbGetProcAddress("glMultiTexCoord4xvOES");
    pAPI->glNormal3xvOES = (PFNGLNORMAL3XVOESPROC)glbGetProcAddress("glNormal3xvOES");
    pAPI->glPassThroughxOES = (PFNGLPASSTHROUGHXOESPROC)glbGetProcAddress("glPassThroughxOES");
    pAPI->glPixelMapx = (PFNGLPIXELMAPXPROC)glbGetProcAddress("glPixelMapx");
    pAPI->glPixelStorex = (PFNGLPIXELSTOREXPROC)glbGetProcAddress("glPixelStorex");
    pAPI->glPixelTransferxOES = (PFNGLPIXELTRANSFERXOESPROC)glbGetProcAddress("glPixelTransferxOES");
    pAPI->glPixelZoomxOES = (PFNGLPIXELZOOMXOESPROC)glbGetProcAddress("glPixelZoomxOES");
    pAPI->glPrioritizeTexturesxOES = (PFNGLPRIORITIZETEXTURESXOESPROC)glbGetProcAddress("glPrioritizeTexturesxOES");
    pAPI->glRasterPos2xOES = (PFNGLRASTERPOS2XOESPROC)glbGetProcAddress("glRasterPos2xOES");
    pAPI->glRasterPos2xvOES = (PFNGLRASTERPOS2XVOESPROC)glbGetProcAddress("glRasterPos2xvOES");
    pAPI->glRasterPos3xOES = (PFNGLRASTERPOS3XOESPROC)glbGetProcAddress("glRasterPos3xOES");
    pAPI->glRasterPos3xvOES = (PFNGLRASTERPOS3XVOESPROC)glbGetProcAddress("glRasterPos3xvOES");
    pAPI->glRasterPos4xOES = (PFNGLRASTERPOS4XOESPROC)glbGetProcAddress("glRasterPos4xOES");
    pAPI->glRasterPos4xvOES = (PFNGLRASTERPOS4XVOESPROC)glbGetProcAddress("glRasterPos4xvOES");
    pAPI->glRectxOES = (PFNGLRECTXOESPROC)glbGetProcAddress("glRectxOES");
    pAPI->glRectxvOES = (PFNGLRECTXVOESPROC)glbGetProcAddress("glRectxvOES");
    pAPI->glTexCoord1xOES = (PFNGLTEXCOORD1XOESPROC)glbGetProcAddress("glTexCoord1xOES");
    pAPI->glTexCoord1xvOES = (PFNGLTEXCOORD1XVOESPROC)glbGetProcAddress("glTexCoord1xvOES");
    pAPI->glTexCoord2xOES = (PFNGLTEXCOORD2XOESPROC)glbGetProcAddress("glTexCoord2xOES");
    pAPI->glTexCoord2xvOES = (PFNGLTEXCOORD2XVOESPROC)glbGetProcAddress("glTexCoord2xvOES");
    pAPI->glTexCoord3xOES = (PFNGLTEXCOORD3XOESPROC)glbGetProcAddress("glTexCoord3xOES");
    pAPI->glTexCoord3xvOES = (PFNGLTEXCOORD3XVOESPROC)glbGetProcAddress("glTexCoord3xvOES");
    pAPI->glTexCoord4xOES = (PFNGLTEXCOORD4XOESPROC)glbGetProcAddress("glTexCoord4xOES");
    pAPI->glTexCoord4xvOES = (PFNGLTEXCOORD4XVOESPROC)glbGetProcAddress("glTexCoord4xvOES");
    pAPI->glTexGenxOES = (PFNGLTEXGENXOESPROC)glbGetProcAddress("glTexGenxOES");
    pAPI->glTexGenxvOES = (PFNGLTEXGENXVOESPROC)glbGetProcAddress("glTexGenxvOES");
    pAPI->glVertex2xOES = (PFNGLVERTEX2XOESPROC)glbGetProcAddress("glVertex2xOES");
    pAPI->glVertex2xvOES = (PFNGLVERTEX2XVOESPROC)glbGetProcAddress("glVertex2xvOES");
    pAPI->glVertex3xOES = (PFNGLVERTEX3XOESPROC)glbGetProcAddress("glVertex3xOES");
    pAPI->glVertex3xvOES = (PFNGLVERTEX3XVOESPROC)glbGetProcAddress("glVertex3xvOES");
    pAPI->glVertex4xOES = (PFNGLVERTEX4XOESPROC)glbGetProcAddress("glVertex4xOES");
    pAPI->glVertex4xvOES = (PFNGLVERTEX4XVOESPROC)glbGetProcAddress("glVertex4xvOES");
    pAPI->glQueryMatrixxOES = (PFNGLQUERYMATRIXXOESPROC)glbGetProcAddress("glQueryMatrixxOES");
    pAPI->glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC)glbGetProcAddress("glClearDepthfOES");
    pAPI->glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC)glbGetProcAddress("glClipPlanefOES");
    pAPI->glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC)glbGetProcAddress("glDepthRangefOES");
    pAPI->glFrustumfOES = (PFNGLFRUSTUMFOESPROC)glbGetProcAddress("glFrustumfOES");
    pAPI->glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC)glbGetProcAddress("glGetClipPlanefOES");
    pAPI->glOrthofOES = (PFNGLORTHOFOESPROC)glbGetProcAddress("glOrthofOES");
    pAPI->glFramebufferTextureMultiviewOVR = (PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC)glbGetProcAddress("glFramebufferTextureMultiviewOVR");
    pAPI->glHintPGI = (PFNGLHINTPGIPROC)glbGetProcAddress("glHintPGI");
    pAPI->glDetailTexFuncSGIS = (PFNGLDETAILTEXFUNCSGISPROC)glbGetProcAddress("glDetailTexFuncSGIS");
    pAPI->glGetDetailTexFuncSGIS = (PFNGLGETDETAILTEXFUNCSGISPROC)glbGetProcAddress("glGetDetailTexFuncSGIS");
    pAPI->glFogFuncSGIS = (PFNGLFOGFUNCSGISPROC)glbGetProcAddress("glFogFuncSGIS");
    pAPI->glGetFogFuncSGIS = (PFNGLGETFOGFUNCSGISPROC)glbGetProcAddress("glGetFogFuncSGIS");
    pAPI->glSampleMaskSGIS = (PFNGLSAMPLEMASKSGISPROC)glbGetProcAddress("glSampleMaskSGIS");
    pAPI->glSamplePatternSGIS = (PFNGLSAMPLEPATTERNSGISPROC)glbGetProcAddress("glSamplePatternSGIS");
    pAPI->glPixelTexGenParameteriSGIS = (PFNGLPIXELTEXGENPARAMETERISGISPROC)glbGetProcAddress("glPixelTexGenParameteriSGIS");
    pAPI->glPixelTexGenParameterivSGIS = (PFNGLPIXELTEXGENPARAMETERIVSGISPROC)glbGetProcAddress("glPixelTexGenParameterivSGIS");
    pAPI->glPixelTexGenParameterfSGIS = (PFNGLPIXELTEXGENPARAMETERFSGISPROC)glbGetProcAddress("glPixelTexGenParameterfSGIS");
    pAPI->glPixelTexGenParameterfvSGIS = (PFNGLPIXELTEXGENPARAMETERFVSGISPROC)glbGetProcAddress("glPixelTexGenParameterfvSGIS");
    pAPI->glGetPixelTexGenParameterivSGIS = (PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)glbGetProcAddress("glGetPixelTexGenParameterivSGIS");
    pAPI->glGetPixelTexGenParameterfvSGIS = (PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)glbGetProcAddress("glGetPixelTexGenParameterfvSGIS");
    pAPI->glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)glbGetProcAddress("glPointParameterfSGIS");
    pAPI->glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)glbGetProcAddress("glPointParameterfvSGIS");
    pAPI->glSharpenTexFuncSGIS = (PFNGLSHARPENTEXFUNCSGISPROC)glbGetProcAddress("glSharpenTexFuncSGIS");
    pAPI->glGetSharpenTexFuncSGIS = (PFNGLGETSHARPENTEXFUNCSGISPROC)glbGetProcAddress("glGetSharpenTexFuncSGIS");
    pAPI->glTexImage4DSGIS = (PFNGLTEXIMAGE4DSGISPROC)glbGetProcAddress("glTexImage4DSGIS");
    pAPI->glTexSubImage4DSGIS = (PFNGLTEXSUBIMAGE4DSGISPROC)glbGetProcAddress("glTexSubImage4DSGIS");
    pAPI->glTextureColorMaskSGIS = (PFNGLTEXTURECOLORMASKSGISPROC)glbGetProcAddress("glTextureColorMaskSGIS");
    pAPI->glGetTexFilterFuncSGIS = (PFNGLGETTEXFILTERFUNCSGISPROC)glbGetProcAddress("glGetTexFilterFuncSGIS");
    pAPI->glTexFilterFuncSGIS = (PFNGLTEXFILTERFUNCSGISPROC)glbGetProcAddress("glTexFilterFuncSGIS");
    pAPI->glAsyncMarkerSGIX = (PFNGLASYNCMARKERSGIXPROC)glbGetProcAddress("glAsyncMarkerSGIX");
    pAPI->glFinishAsyncSGIX = (PFNGLFINISHASYNCSGIXPROC)glbGetProcAddress("glFinishAsyncSGIX");
    pAPI->glPollAsyncSGIX = (PFNGLPOLLASYNCSGIXPROC)glbGetProcAddress("glPollAsyncSGIX");
    pAPI->glGenAsyncMarkersSGIX = (PFNGLGENASYNCMARKERSSGIXPROC)glbGetProcAddress("glGenAsyncMarkersSGIX");
    pAPI->glDeleteAsyncMarkersSGIX = (PFNGLDELETEASYNCMARKERSSGIXPROC)glbGetProcAddress("glDeleteAsyncMarkersSGIX");
    pAPI->glIsAsyncMarkerSGIX = (PFNGLISASYNCMARKERSGIXPROC)glbGetProcAddress("glIsAsyncMarkerSGIX");
    pAPI->glFlushRasterSGIX = (PFNGLFLUSHRASTERSGIXPROC)glbGetProcAddress("glFlushRasterSGIX");
    pAPI->glFragmentColorMaterialSGIX = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC)glbGetProcAddress("glFragmentColorMaterialSGIX");
    pAPI->glFragmentLightfSGIX = (PFNGLFRAGMENTLIGHTFSGIXPROC)glbGetProcAddress("glFragmentLightfSGIX");
    pAPI->glFragmentLightfvSGIX = (PFNGLFRAGMENTLIGHTFVSGIXPROC)glbGetProcAddress("glFragmentLightfvSGIX");
    pAPI->glFragmentLightiSGIX = (PFNGLFRAGMENTLIGHTISGIXPROC)glbGetProcAddress("glFragmentLightiSGIX");
    pAPI->glFragmentLightivSGIX = (PFNGLFRAGMENTLIGHTIVSGIXPROC)glbGetProcAddress("glFragmentLightivSGIX");
    pAPI->glFragmentLightModelfSGIX = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC)glbGetProcAddress("glFragmentLightModelfSGIX");
    pAPI->glFragmentLightModelfvSGIX = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)glbGetProcAddress("glFragmentLightModelfvSGIX");
    pAPI->glFragmentLightModeliSGIX = (PFNGLFRAGMENTLIGHTMODELISGIXPROC)glbGetProcAddress("glFragmentLightModeliSGIX");
    pAPI->glFragmentLightModelivSGIX = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)glbGetProcAddress("glFragmentLightModelivSGIX");
    pAPI->glFragmentMaterialfSGIX = (PFNGLFRAGMENTMATERIALFSGIXPROC)glbGetProcAddress("glFragmentMaterialfSGIX");
    pAPI->glFragmentMaterialfvSGIX = (PFNGLFRAGMENTMATERIALFVSGIXPROC)glbGetProcAddress("glFragmentMaterialfvSGIX");
    pAPI->glFragmentMaterialiSGIX = (PFNGLFRAGMENTMATERIALISGIXPROC)glbGetProcAddress("glFragmentMaterialiSGIX");
    pAPI->glFragmentMaterialivSGIX = (PFNGLFRAGMENTMATERIALIVSGIXPROC)glbGetProcAddress("glFragmentMaterialivSGIX");
    pAPI->glGetFragmentLightfvSGIX = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC)glbGetProcAddress("glGetFragmentLightfvSGIX");
    pAPI->glGetFragmentLightivSGIX = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC)glbGetProcAddress("glGetFragmentLightivSGIX");
    pAPI->glGetFragmentMaterialfvSGIX = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC)glbGetProcAddress("glGetFragmentMaterialfvSGIX");
    pAPI->glGetFragmentMaterialivSGIX = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC)glbGetProcAddress("glGetFragmentMaterialivSGIX");
    pAPI->glLightEnviSGIX = (PFNGLLIGHTENVISGIXPROC)glbGetProcAddress("glLightEnviSGIX");
    pAPI->glFrameZoomSGIX = (PFNGLFRAMEZOOMSGIXPROC)glbGetProcAddress("glFrameZoomSGIX");
    pAPI->glIglooInterfaceSGIX = (PFNGLIGLOOINTERFACESGIXPROC)glbGetProcAddress("glIglooInterfaceSGIX");
    pAPI->glGetInstrumentsSGIX = (PFNGLGETINSTRUMENTSSGIXPROC)glbGetProcAddress("glGetInstrumentsSGIX");
    pAPI->glInstrumentsBufferSGIX = (PFNGLINSTRUMENTSBUFFERSGIXPROC)glbGetProcAddress("glInstrumentsBufferSGIX");
    pAPI->glPollInstrumentsSGIX = (PFNGLPOLLINSTRUMENTSSGIXPROC)glbGetProcAddress("glPollInstrumentsSGIX");
    pAPI->glReadInstrumentsSGIX = (PFNGLREADINSTRUMENTSSGIXPROC)glbGetProcAddress("glReadInstrumentsSGIX");
    pAPI->glStartInstrumentsSGIX = (PFNGLSTARTINSTRUMENTSSGIXPROC)glbGetProcAddress("glStartInstrumentsSGIX");
    pAPI->glStopInstrumentsSGIX = (PFNGLSTOPINSTRUMENTSSGIXPROC)glbGetProcAddress("glStopInstrumentsSGIX");
    pAPI->glGetListParameterfvSGIX = (PFNGLGETLISTPARAMETERFVSGIXPROC)glbGetProcAddress("glGetListParameterfvSGIX");
    pAPI->glGetListParameterivSGIX = (PFNGLGETLISTPARAMETERIVSGIXPROC)glbGetProcAddress("glGetListParameterivSGIX");
    pAPI->glListParameterfSGIX = (PFNGLLISTPARAMETERFSGIXPROC)glbGetProcAddress("glListParameterfSGIX");
    pAPI->glListParameterfvSGIX = (PFNGLLISTPARAMETERFVSGIXPROC)glbGetProcAddress("glListParameterfvSGIX");
    pAPI->glListParameteriSGIX = (PFNGLLISTPARAMETERISGIXPROC)glbGetProcAddress("glListParameteriSGIX");
    pAPI->glListParameterivSGIX = (PFNGLLISTPARAMETERIVSGIXPROC)glbGetProcAddress("glListParameterivSGIX");
    pAPI->glPixelTexGenSGIX = (PFNGLPIXELTEXGENSGIXPROC)glbGetProcAddress("glPixelTexGenSGIX");
    pAPI->glDeformationMap3dSGIX = (PFNGLDEFORMATIONMAP3DSGIXPROC)glbGetProcAddress("glDeformationMap3dSGIX");
    pAPI->glDeformationMap3fSGIX = (PFNGLDEFORMATIONMAP3FSGIXPROC)glbGetProcAddress("glDeformationMap3fSGIX");
    pAPI->glDeformSGIX = (PFNGLDEFORMSGIXPROC)glbGetProcAddress("glDeformSGIX");
    pAPI->glLoadIdentityDeformationMapSGIX = (PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)glbGetProcAddress("glLoadIdentityDeformationMapSGIX");
    pAPI->glReferencePlaneSGIX = (PFNGLREFERENCEPLANESGIXPROC)glbGetProcAddress("glReferencePlaneSGIX");
    pAPI->glSpriteParameterfSGIX = (PFNGLSPRITEPARAMETERFSGIXPROC)glbGetProcAddress("glSpriteParameterfSGIX");
    pAPI->glSpriteParameterfvSGIX = (PFNGLSPRITEPARAMETERFVSGIXPROC)glbGetProcAddress("glSpriteParameterfvSGIX");
    pAPI->glSpriteParameteriSGIX = (PFNGLSPRITEPARAMETERISGIXPROC)glbGetProcAddress("glSpriteParameteriSGIX");
    pAPI->glSpriteParameterivSGIX = (PFNGLSPRITEPARAMETERIVSGIXPROC)glbGetProcAddress("glSpriteParameterivSGIX");
    pAPI->glTagSampleBufferSGIX = (PFNGLTAGSAMPLEBUFFERSGIXPROC)glbGetProcAddress("glTagSampleBufferSGIX");
    pAPI->glColorTableSGI = (PFNGLCOLORTABLESGIPROC)glbGetProcAddress("glColorTableSGI");
    pAPI->glColorTableParameterfvSGI = (PFNGLCOLORTABLEPARAMETERFVSGIPROC)glbGetProcAddress("glColorTableParameterfvSGI");
    pAPI->glColorTableParameterivSGI = (PFNGLCOLORTABLEPARAMETERIVSGIPROC)glbGetProcAddress("glColorTableParameterivSGI");
    pAPI->glCopyColorTableSGI = (PFNGLCOPYCOLORTABLESGIPROC)glbGetProcAddress("glCopyColorTableSGI");
    pAPI->glGetColorTableSGI = (PFNGLGETCOLORTABLESGIPROC)glbGetProcAddress("glGetColorTableSGI");
    pAPI->glGetColorTableParameterfvSGI = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)glbGetProcAddress("glGetColorTableParameterfvSGI");
    pAPI->glGetColorTableParameterivSGI = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)glbGetProcAddress("glGetColorTableParameterivSGI");
    pAPI->glFinishTextureSUNX = (PFNGLFINISHTEXTURESUNXPROC)glbGetProcAddress("glFinishTextureSUNX");
    pAPI->glGlobalAlphaFactorbSUN = (PFNGLGLOBALALPHAFACTORBSUNPROC)glbGetProcAddress("glGlobalAlphaFactorbSUN");
    pAPI->glGlobalAlphaFactorsSUN = (PFNGLGLOBALALPHAFACTORSSUNPROC)glbGetProcAddress("glGlobalAlphaFactorsSUN");
    pAPI->glGlobalAlphaFactoriSUN = (PFNGLGLOBALALPHAFACTORISUNPROC)glbGetProcAddress("glGlobalAlphaFactoriSUN");
    pAPI->glGlobalAlphaFactorfSUN = (PFNGLGLOBALALPHAFACTORFSUNPROC)glbGetProcAddress("glGlobalAlphaFactorfSUN");
    pAPI->glGlobalAlphaFactordSUN = (PFNGLGLOBALALPHAFACTORDSUNPROC)glbGetProcAddress("glGlobalAlphaFactordSUN");
    pAPI->glGlobalAlphaFactorubSUN = (PFNGLGLOBALALPHAFACTORUBSUNPROC)glbGetProcAddress("glGlobalAlphaFactorubSUN");
    pAPI->glGlobalAlphaFactorusSUN = (PFNGLGLOBALALPHAFACTORUSSUNPROC)glbGetProcAddress("glGlobalAlphaFactorusSUN");
    pAPI->glGlobalAlphaFactoruiSUN = (PFNGLGLOBALALPHAFACTORUISUNPROC)glbGetProcAddress("glGlobalAlphaFactoruiSUN");
    pAPI->glDrawMeshArraysSUN = (PFNGLDRAWMESHARRAYSSUNPROC)glbGetProcAddress("glDrawMeshArraysSUN");
    pAPI->glReplacementCodeuiSUN = (PFNGLREPLACEMENTCODEUISUNPROC)glbGetProcAddress("glReplacementCodeuiSUN");
    pAPI->glReplacementCodeusSUN = (PFNGLREPLACEMENTCODEUSSUNPROC)glbGetProcAddress("glReplacementCodeusSUN");
    pAPI->glReplacementCodeubSUN = (PFNGLREPLACEMENTCODEUBSUNPROC)glbGetProcAddress("glReplacementCodeubSUN");
    pAPI->glReplacementCodeuivSUN = (PFNGLREPLACEMENTCODEUIVSUNPROC)glbGetProcAddress("glReplacementCodeuivSUN");
    pAPI->glReplacementCodeusvSUN = (PFNGLREPLACEMENTCODEUSVSUNPROC)glbGetProcAddress("glReplacementCodeusvSUN");
    pAPI->glReplacementCodeubvSUN = (PFNGLREPLACEMENTCODEUBVSUNPROC)glbGetProcAddress("glReplacementCodeubvSUN");
    pAPI->glReplacementCodePointerSUN = (PFNGLREPLACEMENTCODEPOINTERSUNPROC)glbGetProcAddress("glReplacementCodePointerSUN");
    pAPI->glColor4ubVertex2fSUN = (PFNGLCOLOR4UBVERTEX2FSUNPROC)glbGetProcAddress("glColor4ubVertex2fSUN");
    pAPI->glColor4ubVertex2fvSUN = (PFNGLCOLOR4UBVERTEX2FVSUNPROC)glbGetProcAddress("glColor4ubVertex2fvSUN");
    pAPI->glColor4ubVertex3fSUN = (PFNGLCOLOR4UBVERTEX3FSUNPROC)glbGetProcAddress("glColor4ubVertex3fSUN");
    pAPI->glColor4ubVertex3fvSUN = (PFNGLCOLOR4UBVERTEX3FVSUNPROC)glbGetProcAddress("glColor4ubVertex3fvSUN");
    pAPI->glColor3fVertex3fSUN = (PFNGLCOLOR3FVERTEX3FSUNPROC)glbGetProcAddress("glColor3fVertex3fSUN");
    pAPI->glColor3fVertex3fvSUN = (PFNGLCOLOR3FVERTEX3FVSUNPROC)glbGetProcAddress("glColor3fVertex3fvSUN");
    pAPI->glNormal3fVertex3fSUN = (PFNGLNORMAL3FVERTEX3FSUNPROC)glbGetProcAddress("glNormal3fVertex3fSUN");
    pAPI->glNormal3fVertex3fvSUN = (PFNGLNORMAL3FVERTEX3FVSUNPROC)glbGetProcAddress("glNormal3fVertex3fvSUN");
    pAPI->glColor4fNormal3fVertex3fSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)glbGetProcAddress("glColor4fNormal3fVertex3fSUN");
    pAPI->glColor4fNormal3fVertex3fvSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glbGetProcAddress("glColor4fNormal3fVertex3fvSUN");
    pAPI->glTexCoord2fVertex3fSUN = (PFNGLTEXCOORD2FVERTEX3FSUNPROC)glbGetProcAddress("glTexCoord2fVertex3fSUN");
    pAPI->glTexCoord2fVertex3fvSUN = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC)glbGetProcAddress("glTexCoord2fVertex3fvSUN");
    pAPI->glTexCoord4fVertex4fSUN = (PFNGLTEXCOORD4FVERTEX4FSUNPROC)glbGetProcAddress("glTexCoord4fVertex4fSUN");
    pAPI->glTexCoord4fVertex4fvSUN = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC)glbGetProcAddress("glTexCoord4fVertex4fvSUN");
    pAPI->glTexCoord2fColor4ubVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)glbGetProcAddress("glTexCoord2fColor4ubVertex3fSUN");
    pAPI->glTexCoord2fColor4ubVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)glbGetProcAddress("glTexCoord2fColor4ubVertex3fvSUN");
    pAPI->glTexCoord2fColor3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)glbGetProcAddress("glTexCoord2fColor3fVertex3fSUN");
    pAPI->glTexCoord2fColor3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)glbGetProcAddress("glTexCoord2fColor3fVertex3fvSUN");
    pAPI->glTexCoord2fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)glbGetProcAddress("glTexCoord2fNormal3fVertex3fSUN");
    pAPI->glTexCoord2fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)glbGetProcAddress("glTexCoord2fNormal3fVertex3fvSUN");
    pAPI->glTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)glbGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN");
    pAPI->glTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glbGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN");
    pAPI->glTexCoord4fColor4fNormal3fVertex4fSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)glbGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN");
    pAPI->glTexCoord4fColor4fNormal3fVertex4fvSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)glbGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN");
    pAPI->glReplacementCodeuiVertex3fSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)glbGetProcAddress("glReplacementCodeuiVertex3fSUN");
    pAPI->glReplacementCodeuiVertex3fvSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)glbGetProcAddress("glReplacementCodeuiVertex3fvSUN");
    pAPI->glReplacementCodeuiColor4ubVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)glbGetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN");
    pAPI->glReplacementCodeuiColor4ubVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)glbGetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN");
    pAPI->glReplacementCodeuiColor3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)glbGetProcAddress("glReplacementCodeuiColor3fVertex3fSUN");
    pAPI->glReplacementCodeuiColor3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)glbGetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN");
    pAPI->glReplacementCodeuiNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)glbGetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN");
    pAPI->glReplacementCodeuiNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)glbGetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN");
    pAPI->glReplacementCodeuiColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)glbGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
    pAPI->glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)glbGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
    pAPI->glReplacementCodeuiTexCoord2fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)glbGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN");
    pAPI->glReplacementCodeuiTexCoord2fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)glbGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN");
    pAPI->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)glbGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
    pAPI->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)glbGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
    pAPI->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)glbGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
    pAPI->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glbGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
#if defined(GLBIND_WGL)
    pAPI->wglSetStereoEmitterState3DL = (PFNWGLSETSTEREOEMITTERSTATE3DLPROC)glbGetProcAddress("wglSetStereoEmitterState3DL");
    pAPI->wglGetGPUIDsAMD = (PFNWGLGETGPUIDSAMDPROC)glbGetProcAddress("wglGetGPUIDsAMD");
    pAPI->wglGetGPUInfoAMD = (PFNWGLGETGPUINFOAMDPROC)glbGetProcAddress("wglGetGPUInfoAMD");
    pAPI->wglGetContextGPUIDAMD = (PFNWGLGETCONTEXTGPUIDAMDPROC)glbGetProcAddress("wglGetContextGPUIDAMD");
    pAPI->wglCreateAssociatedContextAMD = (PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC)glbGetProcAddress("wglCreateAssociatedContextAMD");
    pAPI->wglCreateAssociatedContextAttribsAMD = (PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)glbGetProcAddress("wglCreateAssociatedContextAttribsAMD");
    pAPI->wglDeleteAssociatedContextAMD = (PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC)glbGetProcAddress("wglDeleteAssociatedContextAMD");
    pAPI->wglMakeAssociatedContextCurrentAMD = (PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)glbGetProcAddress("wglMakeAssociatedContextCurrentAMD");
    pAPI->wglGetCurrentAssociatedContextAMD = (PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC)glbGetProcAddress("wglGetCurrentAssociatedContextAMD");
    pAPI->wglBlitContextFramebufferAMD = (PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC)glbGetProcAddress("wglBlitContextFramebufferAMD");
    pAPI->wglCreateBufferRegionARB = (PFNWGLCREATEBUFFERREGIONARBPROC)glbGetProcAddress("wglCreateBufferRegionARB");
    pAPI->wglDeleteBufferRegionARB = (PFNWGLDELETEBUFFERREGIONARBPROC)glbGetProcAddress("wglDeleteBufferRegionARB");
    pAPI->wglSaveBufferRegionARB = (PFNWGLSAVEBUFFERREGIONARBPROC)glbGetProcAddress("wglSaveBufferRegionARB");
    pAPI->wglRestoreBufferRegionARB = (PFNWGLRESTOREBUFFERREGIONARBPROC)glbGetProcAddress("wglRestoreBufferRegionARB");
    pAPI->wglCreateContextAttribsARB = (PFNWGLCREATECONTEXTATTRIBSARBPROC)glbGetProcAddress("wglCreateContextAttribsARB");
    pAPI->wglGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC)glbGetProcAddress("wglGetExtensionsStringARB");
    pAPI->wglMakeContextCurrentARB = (PFNWGLMAKECONTEXTCURRENTARBPROC)glbGetProcAddress("wglMakeContextCurrentARB");
    pAPI->wglGetCurrentReadDCARB = (PFNWGLGETCURRENTREADDCARBPROC)glbGetProcAddress("wglGetCurrentReadDCARB");
    pAPI->wglCreatePbufferARB = (PFNWGLCREATEPBUFFERARBPROC)glbGetProcAddress("wglCreatePbufferARB");
    pAPI->wglGetPbufferDCARB = (PFNWGLGETPBUFFERDCARBPROC)glbGetProcAddress("wglGetPbufferDCARB");
    pAPI->wglReleasePbufferDCARB = (PFNWGLRELEASEPBUFFERDCARBPROC)glbGetProcAddress("wglReleasePbufferDCARB");
    pAPI->wglDestroyPbufferARB = (PFNWGLDESTROYPBUFFERARBPROC)glbGetProcAddress("wglDestroyPbufferARB");
    pAPI->wglQueryPbufferARB = (PFNWGLQUERYPBUFFERARBPROC)glbGetProcAddress("wglQueryPbufferARB");
    pAPI->wglGetPixelFormatAttribivARB = (PFNWGLGETPIXELFORMATATTRIBIVARBPROC)glbGetProcAddress("wglGetPixelFormatAttribivARB");
    pAPI->wglGetPixelFormatAttribfvARB = (PFNWGLGETPIXELFORMATATTRIBFVARBPROC)glbGetProcAddress("wglGetPixelFormatAttribfvARB");
    pAPI->wglChoosePixelFormatARB = (PFNWGLCHOOSEPIXELFORMATARBPROC)glbGetProcAddress("wglChoosePixelFormatARB");
    pAPI->wglBindTexImageARB = (PFNWGLBINDTEXIMAGEARBPROC)glbGetProcAddress("wglBindTexImageARB");
    pAPI->wglReleaseTexImageARB = (PFNWGLRELEASETEXIMAGEARBPROC)glbGetProcAddress("wglReleaseTexImageARB");
    pAPI->wglSetPbufferAttribARB = (PFNWGLSETPBUFFERATTRIBARBPROC)glbGetProcAddress("wglSetPbufferAttribARB");
    pAPI->wglCreateDisplayColorTableEXT = (PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC)glbGetProcAddress("wglCreateDisplayColorTableEXT");
    pAPI->wglLoadDisplayColorTableEXT = (PFNWGLLOADDISPLAYCOLORTABLEEXTPROC)glbGetProcAddress("wglLoadDisplayColorTableEXT");
    pAPI->wglBindDisplayColorTableEXT = (PFNWGLBINDDISPLAYCOLORTABLEEXTPROC)glbGetProcAddress("wglBindDisplayColorTableEXT");
    pAPI->wglDestroyDisplayColorTableEXT = (PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC)glbGetProcAddress("wglDestroyDisplayColorTableEXT");
    pAPI->wglGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC)glbGetProcAddress("wglGetExtensionsStringEXT");
    pAPI->wglMakeContextCurrentEXT = (PFNWGLMAKECONTEXTCURRENTEXTPROC)glbGetProcAddress("wglMakeContextCurrentEXT");
    pAPI->wglGetCurrentReadDCEXT = (PFNWGLGETCURRENTREADDCEXTPROC)glbGetProcAddress("wglGetCurrentReadDCEXT");
    pAPI->wglCreatePbufferEXT = (PFNWGLCREATEPBUFFEREXTPROC)glbGetProcAddress("wglCreatePbufferEXT");
    pAPI->wglGetPbufferDCEXT = (PFNWGLGETPBUFFERDCEXTPROC)glbGetProcAddress("wglGetPbufferDCEXT");
    pAPI->wglReleasePbufferDCEXT = (PFNWGLRELEASEPBUFFERDCEXTPROC)glbGetProcAddress("wglReleasePbufferDCEXT");
    pAPI->wglDestroyPbufferEXT = (PFNWGLDESTROYPBUFFEREXTPROC)glbGetProcAddress("wglDestroyPbufferEXT");
    pAPI->wglQueryPbufferEXT = (PFNWGLQUERYPBUFFEREXTPROC)glbGetProcAddress("wglQueryPbufferEXT");
    pAPI->wglGetPixelFormatAttribivEXT = (PFNWGLGETPIXELFORMATATTRIBIVEXTPROC)glbGetProcAddress("wglGetPixelFormatAttribivEXT");
    pAPI->wglGetPixelFormatAttribfvEXT = (PFNWGLGETPIXELFORMATATTRIBFVEXTPROC)glbGetProcAddress("wglGetPixelFormatAttribfvEXT");
    pAPI->wglChoosePixelFormatEXT = (PFNWGLCHOOSEPIXELFORMATEXTPROC)glbGetProcAddress("wglChoosePixelFormatEXT");
    pAPI->wglSwapIntervalEXT = (PFNWGLSWAPINTERVALEXTPROC)glbGetProcAddress("wglSwapIntervalEXT");
    pAPI->wglGetSwapIntervalEXT = (PFNWGLGETSWAPINTERVALEXTPROC)glbGetProcAddress("wglGetSwapIntervalEXT");
    pAPI->wglGetDigitalVideoParametersI3D = (PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC)glbGetProcAddress("wglGetDigitalVideoParametersI3D");
    pAPI->wglSetDigitalVideoParametersI3D = (PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC)glbGetProcAddress("wglSetDigitalVideoParametersI3D");
    pAPI->wglGetGammaTableParametersI3D = (PFNWGLGETGAMMATABLEPARAMETERSI3DPROC)glbGetProcAddress("wglGetGammaTableParametersI3D");
    pAPI->wglSetGammaTableParametersI3D = (PFNWGLSETGAMMATABLEPARAMETERSI3DPROC)glbGetProcAddress("wglSetGammaTableParametersI3D");
    pAPI->wglGetGammaTableI3D = (PFNWGLGETGAMMATABLEI3DPROC)glbGetProcAddress("wglGetGammaTableI3D");
    pAPI->wglSetGammaTableI3D = (PFNWGLSETGAMMATABLEI3DPROC)glbGetProcAddress("wglSetGammaTableI3D");
    pAPI->wglEnableGenlockI3D = (PFNWGLENABLEGENLOCKI3DPROC)glbGetProcAddress("wglEnableGenlockI3D");
    pAPI->wglDisableGenlockI3D = (PFNWGLDISABLEGENLOCKI3DPROC)glbGetProcAddress("wglDisableGenlockI3D");
    pAPI->wglIsEnabledGenlockI3D = (PFNWGLISENABLEDGENLOCKI3DPROC)glbGetProcAddress("wglIsEnabledGenlockI3D");
    pAPI->wglGenlockSourceI3D = (PFNWGLGENLOCKSOURCEI3DPROC)glbGetProcAddress("wglGenlockSourceI3D");
    pAPI->wglGetGenlockSourceI3D = (PFNWGLGETGENLOCKSOURCEI3DPROC)glbGetProcAddress("wglGetGenlockSourceI3D");
    pAPI->wglGenlockSourceEdgeI3D = (PFNWGLGENLOCKSOURCEEDGEI3DPROC)glbGetProcAddress("wglGenlockSourceEdgeI3D");
    pAPI->wglGetGenlockSourceEdgeI3D = (PFNWGLGETGENLOCKSOURCEEDGEI3DPROC)glbGetProcAddress("wglGetGenlockSourceEdgeI3D");
    pAPI->wglGenlockSampleRateI3D = (PFNWGLGENLOCKSAMPLERATEI3DPROC)glbGetProcAddress("wglGenlockSampleRateI3D");
    pAPI->wglGetGenlockSampleRateI3D = (PFNWGLGETGENLOCKSAMPLERATEI3DPROC)glbGetProcAddress("wglGetGenlockSampleRateI3D");
    pAPI->wglGenlockSourceDelayI3D = (PFNWGLGENLOCKSOURCEDELAYI3DPROC)glbGetProcAddress("wglGenlockSourceDelayI3D");
    pAPI->wglGetGenlockSourceDelayI3D = (PFNWGLGETGENLOCKSOURCEDELAYI3DPROC)glbGetProcAddress("wglGetGenlockSourceDelayI3D");
    pAPI->wglQueryGenlockMaxSourceDelayI3D = (PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC)glbGetProcAddress("wglQueryGenlockMaxSourceDelayI3D");
    pAPI->wglCreateImageBufferI3D = (PFNWGLCREATEIMAGEBUFFERI3DPROC)glbGetProcAddress("wglCreateImageBufferI3D");
    pAPI->wglDestroyImageBufferI3D = (PFNWGLDESTROYIMAGEBUFFERI3DPROC)glbGetProcAddress("wglDestroyImageBufferI3D");
    pAPI->wglAssociateImageBufferEventsI3D = (PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC)glbGetProcAddress("wglAssociateImageBufferEventsI3D");
    pAPI->wglReleaseImageBufferEventsI3D = (PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC)glbGetProcAddress("wglReleaseImageBufferEventsI3D");
    pAPI->wglEnableFrameLockI3D = (PFNWGLENABLEFRAMELOCKI3DPROC)glbGetProcAddress("wglEnableFrameLockI3D");
    pAPI->wglDisableFrameLockI3D = (PFNWGLDISABLEFRAMELOCKI3DPROC)glbGetProcAddress("wglDisableFrameLockI3D");
    pAPI->wglIsEnabledFrameLockI3D = (PFNWGLISENABLEDFRAMELOCKI3DPROC)glbGetProcAddress("wglIsEnabledFrameLockI3D");
    pAPI->wglQueryFrameLockMasterI3D = (PFNWGLQUERYFRAMELOCKMASTERI3DPROC)glbGetProcAddress("wglQueryFrameLockMasterI3D");
    pAPI->wglGetFrameUsageI3D = (PFNWGLGETFRAMEUSAGEI3DPROC)glbGetProcAddress("wglGetFrameUsageI3D");
    pAPI->wglBeginFrameTrackingI3D = (PFNWGLBEGINFRAMETRACKINGI3DPROC)glbGetProcAddress("wglBeginFrameTrackingI3D");
    pAPI->wglEndFrameTrackingI3D = (PFNWGLENDFRAMETRACKINGI3DPROC)glbGetProcAddress("wglEndFrameTrackingI3D");
    pAPI->wglQueryFrameTrackingI3D = (PFNWGLQUERYFRAMETRACKINGI3DPROC)glbGetProcAddress("wglQueryFrameTrackingI3D");
    pAPI->wglCopyImageSubDataNV = (PFNWGLCOPYIMAGESUBDATANVPROC)glbGetProcAddress("wglCopyImageSubDataNV");
    pAPI->wglDelayBeforeSwapNV = (PFNWGLDELAYBEFORESWAPNVPROC)glbGetProcAddress("wglDelayBeforeSwapNV");
    pAPI->wglDXSetResourceShareHandleNV = (PFNWGLDXSETRESOURCESHAREHANDLENVPROC)glbGetProcAddress("wglDXSetResourceShareHandleNV");
    pAPI->wglDXOpenDeviceNV = (PFNWGLDXOPENDEVICENVPROC)glbGetProcAddress("wglDXOpenDeviceNV");
    pAPI->wglDXCloseDeviceNV = (PFNWGLDXCLOSEDEVICENVPROC)glbGetProcAddress("wglDXCloseDeviceNV");
    pAPI->wglDXRegisterObjectNV = (PFNWGLDXREGISTEROBJECTNVPROC)glbGetProcAddress("wglDXRegisterObjectNV");
    pAPI->wglDXUnregisterObjectNV = (PFNWGLDXUNREGISTEROBJECTNVPROC)glbGetProcAddress("wglDXUnregisterObjectNV");
    pAPI->wglDXObjectAccessNV = (PFNWGLDXOBJECTACCESSNVPROC)glbGetProcAddress("wglDXObjectAccessNV");
    pAPI->wglDXLockObjectsNV = (PFNWGLDXLOCKOBJECTSNVPROC)glbGetProcAddress("wglDXLockObjectsNV");
    pAPI->wglDXUnlockObjectsNV = (PFNWGLDXUNLOCKOBJECTSNVPROC)glbGetProcAddress("wglDXUnlockObjectsNV");
    pAPI->wglEnumGpusNV = (PFNWGLENUMGPUSNVPROC)glbGetProcAddress("wglEnumGpusNV");
    pAPI->wglEnumGpuDevicesNV = (PFNWGLENUMGPUDEVICESNVPROC)glbGetProcAddress("wglEnumGpuDevicesNV");
    pAPI->wglCreateAffinityDCNV = (PFNWGLCREATEAFFINITYDCNVPROC)glbGetProcAddress("wglCreateAffinityDCNV");
    pAPI->wglEnumGpusFromAffinityDCNV = (PFNWGLENUMGPUSFROMAFFINITYDCNVPROC)glbGetProcAddress("wglEnumGpusFromAffinityDCNV");
    pAPI->wglDeleteDCNV = (PFNWGLDELETEDCNVPROC)glbGetProcAddress("wglDeleteDCNV");
    pAPI->wglEnumerateVideoDevicesNV = (PFNWGLENUMERATEVIDEODEVICESNVPROC)glbGetProcAddress("wglEnumerateVideoDevicesNV");
    pAPI->wglBindVideoDeviceNV = (PFNWGLBINDVIDEODEVICENVPROC)glbGetProcAddress("wglBindVideoDeviceNV");
    pAPI->wglQueryCurrentContextNV = (PFNWGLQUERYCURRENTCONTEXTNVPROC)glbGetProcAddress("wglQueryCurrentContextNV");
    pAPI->wglJoinSwapGroupNV = (PFNWGLJOINSWAPGROUPNVPROC)glbGetProcAddress("wglJoinSwapGroupNV");
    pAPI->wglBindSwapBarrierNV = (PFNWGLBINDSWAPBARRIERNVPROC)glbGetProcAddress("wglBindSwapBarrierNV");
    pAPI->wglQuerySwapGroupNV = (PFNWGLQUERYSWAPGROUPNVPROC)glbGetProcAddress("wglQuerySwapGroupNV");
    pAPI->wglQueryMaxSwapGroupsNV = (PFNWGLQUERYMAXSWAPGROUPSNVPROC)glbGetProcAddress("wglQueryMaxSwapGroupsNV");
    pAPI->wglQueryFrameCountNV = (PFNWGLQUERYFRAMECOUNTNVPROC)glbGetProcAddress("wglQueryFrameCountNV");
    pAPI->wglResetFrameCountNV = (PFNWGLRESETFRAMECOUNTNVPROC)glbGetProcAddress("wglResetFrameCountNV");
    pAPI->wglBindVideoCaptureDeviceNV = (PFNWGLBINDVIDEOCAPTUREDEVICENVPROC)glbGetProcAddress("wglBindVideoCaptureDeviceNV");
    pAPI->wglEnumerateVideoCaptureDevicesNV = (PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC)glbGetProcAddress("wglEnumerateVideoCaptureDevicesNV");
    pAPI->wglLockVideoCaptureDeviceNV = (PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC)glbGetProcAddress("wglLockVideoCaptureDeviceNV");
    pAPI->wglQueryVideoCaptureDeviceNV = (PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC)glbGetProcAddress("wglQueryVideoCaptureDeviceNV");
    pAPI->wglReleaseVideoCaptureDeviceNV = (PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC)glbGetProcAddress("wglReleaseVideoCaptureDeviceNV");
    pAPI->wglGetVideoDeviceNV = (PFNWGLGETVIDEODEVICENVPROC)glbGetProcAddress("wglGetVideoDeviceNV");
    pAPI->wglReleaseVideoDeviceNV = (PFNWGLRELEASEVIDEODEVICENVPROC)glbGetProcAddress("wglReleaseVideoDeviceNV");
    pAPI->wglBindVideoImageNV = (PFNWGLBINDVIDEOIMAGENVPROC)glbGetProcAddress("wglBindVideoImageNV");
    pAPI->wglReleaseVideoImageNV = (PFNWGLRELEASEVIDEOIMAGENVPROC)glbGetProcAddress("wglReleaseVideoImageNV");
    pAPI->wglSendPbufferToVideoNV = (PFNWGLSENDPBUFFERTOVIDEONVPROC)glbGetProcAddress("wglSendPbufferToVideoNV");
    pAPI->wglGetVideoInfoNV = (PFNWGLGETVIDEOINFONVPROC)glbGetProcAddress("wglGetVideoInfoNV");
    pAPI->wglAllocateMemoryNV = (PFNWGLALLOCATEMEMORYNVPROC)glbGetProcAddress("wglAllocateMemoryNV");
    pAPI->wglFreeMemoryNV = (PFNWGLFREEMEMORYNVPROC)glbGetProcAddress("wglFreeMemoryNV");
    pAPI->wglGetSyncValuesOML = (PFNWGLGETSYNCVALUESOMLPROC)glbGetProcAddress("wglGetSyncValuesOML");
    pAPI->wglGetMscRateOML = (PFNWGLGETMSCRATEOMLPROC)glbGetProcAddress("wglGetMscRateOML");
    pAPI->wglSwapBuffersMscOML = (PFNWGLSWAPBUFFERSMSCOMLPROC)glbGetProcAddress("wglSwapBuffersMscOML");
    pAPI->wglSwapLayerBuffersMscOML = (PFNWGLSWAPLAYERBUFFERSMSCOMLPROC)glbGetProcAddress("wglSwapLayerBuffersMscOML");
    pAPI->wglWaitForMscOML = (PFNWGLWAITFORMSCOMLPROC)glbGetProcAddress("wglWaitForMscOML");
    pAPI->wglWaitForSbcOML = (PFNWGLWAITFORSBCOMLPROC)glbGetProcAddress("wglWaitForSbcOML");
#endif /* GLBIND_WGL */
#if defined(GLBIND_GLX)
    pAPI->glXGetGPUIDsAMD = (PFNGLXGETGPUIDSAMDPROC)glbGetProcAddress("glXGetGPUIDsAMD");
    pAPI->glXGetGPUInfoAMD = (PFNGLXGETGPUINFOAMDPROC)glbGetProcAddress("glXGetGPUInfoAMD");
    pAPI->glXGetContextGPUIDAMD = (PFNGLXGETCONTEXTGPUIDAMDPROC)glbGetProcAddress("glXGetContextGPUIDAMD");
    pAPI->glXCreateAssociatedContextAMD = (PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC)glbGetProcAddress("glXCreateAssociatedContextAMD");
    pAPI->glXCreateAssociatedContextAttribsAMD = (PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)glbGetProcAddress("glXCreateAssociatedContextAttribsAMD");
    pAPI->glXDeleteAssociatedContextAMD = (PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC)glbGetProcAddress("glXDeleteAssociatedContextAMD");
    pAPI->glXMakeAssociatedContextCurrentAMD = (PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)glbGetProcAddress("glXMakeAssociatedContextCurrentAMD");
    pAPI->glXGetCurrentAssociatedContextAMD = (PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC)glbGetProcAddress("glXGetCurrentAssociatedContextAMD");
    pAPI->glXBlitContextFramebufferAMD = (PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC)glbGetProcAddress("glXBlitContextFramebufferAMD");
    pAPI->glXCreateContextAttribsARB = (PFNGLXCREATECONTEXTATTRIBSARBPROC)glbGetProcAddress("glXCreateContextAttribsARB");
    pAPI->glXGetProcAddressARB = (PFNGLXGETPROCADDRESSARBPROC)glbGetProcAddress("glXGetProcAddressARB");
    pAPI->glXGetCurrentDisplayEXT = (PFNGLXGETCURRENTDISPLAYEXTPROC)glbGetProcAddress("glXGetCurrentDisplayEXT");
    pAPI->glXQueryContextInfoEXT = (PFNGLXQUERYCONTEXTINFOEXTPROC)glbGetProcAddress("glXQueryContextInfoEXT");
    pAPI->glXGetContextIDEXT = (PFNGLXGETCONTEXTIDEXTPROC)glbGetProcAddress("glXGetContextIDEXT");
    pAPI->glXImportContextEXT = (PFNGLXIMPORTCONTEXTEXTPROC)glbGetProcAddress("glXImportContextEXT");
    pAPI->glXFreeContextEXT = (PFNGLXFREECONTEXTEXTPROC)glbGetProcAddress("glXFreeContextEXT");
    pAPI->glXSwapIntervalEXT = (PFNGLXSWAPINTERVALEXTPROC)glbGetProcAddress("glXSwapIntervalEXT");
    pAPI->glXBindTexImageEXT = (PFNGLXBINDTEXIMAGEEXTPROC)glbGetProcAddress("glXBindTexImageEXT");
    pAPI->glXReleaseTexImageEXT = (PFNGLXRELEASETEXIMAGEEXTPROC)glbGetProcAddress("glXReleaseTexImageEXT");
    pAPI->glXGetAGPOffsetMESA = (PFNGLXGETAGPOFFSETMESAPROC)glbGetProcAddress("glXGetAGPOffsetMESA");
    pAPI->glXCopySubBufferMESA = (PFNGLXCOPYSUBBUFFERMESAPROC)glbGetProcAddress("glXCopySubBufferMESA");
    pAPI->glXCreateGLXPixmapMESA = (PFNGLXCREATEGLXPIXMAPMESAPROC)glbGetProcAddress("glXCreateGLXPixmapMESA");
    pAPI->glXQueryCurrentRendererIntegerMESA = (PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC)glbGetProcAddress("glXQueryCurrentRendererIntegerMESA");
    pAPI->glXQueryCurrentRendererStringMESA = (PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC)glbGetProcAddress("glXQueryCurrentRendererStringMESA");
    pAPI->glXQueryRendererIntegerMESA = (PFNGLXQUERYRENDERERINTEGERMESAPROC)glbGetProcAddress("glXQueryRendererIntegerMESA");
    pAPI->glXQueryRendererStringMESA = (PFNGLXQUERYRENDERERSTRINGMESAPROC)glbGetProcAddress("glXQueryRendererStringMESA");
    pAPI->glXReleaseBuffersMESA = (PFNGLXRELEASEBUFFERSMESAPROC)glbGetProcAddress("glXReleaseBuffersMESA");
    pAPI->glXSet3DfxModeMESA = (PFNGLXSET3DFXMODEMESAPROC)glbGetProcAddress("glXSet3DfxModeMESA");
    pAPI->glXGetSwapIntervalMESA = (PFNGLXGETSWAPINTERVALMESAPROC)glbGetProcAddress("glXGetSwapIntervalMESA");
    pAPI->glXSwapIntervalMESA = (PFNGLXSWAPINTERVALMESAPROC)glbGetProcAddress("glXSwapIntervalMESA");
    pAPI->glXCopyBufferSubDataNV = (PFNGLXCOPYBUFFERSUBDATANVPROC)glbGetProcAddress("glXCopyBufferSubDataNV");
    pAPI->glXNamedCopyBufferSubDataNV = (PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC)glbGetProcAddress("glXNamedCopyBufferSubDataNV");
    pAPI->glXCopyImageSubDataNV = (PFNGLXCOPYIMAGESUBDATANVPROC)glbGetProcAddress("glXCopyImageSubDataNV");
    pAPI->glXDelayBeforeSwapNV = (PFNGLXDELAYBEFORESWAPNVPROC)glbGetProcAddress("glXDelayBeforeSwapNV");
    pAPI->glXEnumerateVideoDevicesNV = (PFNGLXENUMERATEVIDEODEVICESNVPROC)glbGetProcAddress("glXEnumerateVideoDevicesNV");
    pAPI->glXBindVideoDeviceNV = (PFNGLXBINDVIDEODEVICENVPROC)glbGetProcAddress("glXBindVideoDeviceNV");
    pAPI->glXJoinSwapGroupNV = (PFNGLXJOINSWAPGROUPNVPROC)glbGetProcAddress("glXJoinSwapGroupNV");
    pAPI->glXBindSwapBarrierNV = (PFNGLXBINDSWAPBARRIERNVPROC)glbGetProcAddress("glXBindSwapBarrierNV");
    pAPI->glXQuerySwapGroupNV = (PFNGLXQUERYSWAPGROUPNVPROC)glbGetProcAddress("glXQuerySwapGroupNV");
    pAPI->glXQueryMaxSwapGroupsNV = (PFNGLXQUERYMAXSWAPGROUPSNVPROC)glbGetProcAddress("glXQueryMaxSwapGroupsNV");
    pAPI->glXQueryFrameCountNV = (PFNGLXQUERYFRAMECOUNTNVPROC)glbGetProcAddress("glXQueryFrameCountNV");
    pAPI->glXResetFrameCountNV = (PFNGLXRESETFRAMECOUNTNVPROC)glbGetProcAddress("glXResetFrameCountNV");
    pAPI->glXBindVideoCaptureDeviceNV = (PFNGLXBINDVIDEOCAPTUREDEVICENVPROC)glbGetProcAddress("glXBindVideoCaptureDeviceNV");
    pAPI->glXEnumerateVideoCaptureDevicesNV = (PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC)glbGetProcAddress("glXEnumerateVideoCaptureDevicesNV");
    pAPI->glXLockVideoCaptureDeviceNV = (PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC)glbGetProcAddress("glXLockVideoCaptureDeviceNV");
    pAPI->glXQueryVideoCaptureDeviceNV = (PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC)glbGetProcAddress("glXQueryVideoCaptureDeviceNV");
    pAPI->glXReleaseVideoCaptureDeviceNV = (PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC)glbGetProcAddress("glXReleaseVideoCaptureDeviceNV");
    pAPI->glXGetVideoDeviceNV = (PFNGLXGETVIDEODEVICENVPROC)glbGetProcAddress("glXGetVideoDeviceNV");
    pAPI->glXReleaseVideoDeviceNV = (PFNGLXRELEASEVIDEODEVICENVPROC)glbGetProcAddress("glXReleaseVideoDeviceNV");
    pAPI->glXBindVideoImageNV = (PFNGLXBINDVIDEOIMAGENVPROC)glbGetProcAddress("glXBindVideoImageNV");
    pAPI->glXReleaseVideoImageNV = (PFNGLXRELEASEVIDEOIMAGENVPROC)glbGetProcAddress("glXReleaseVideoImageNV");
    pAPI->glXSendPbufferToVideoNV = (PFNGLXSENDPBUFFERTOVIDEONVPROC)glbGetProcAddress("glXSendPbufferToVideoNV");
    pAPI->glXGetVideoInfoNV = (PFNGLXGETVIDEOINFONVPROC)glbGetProcAddress("glXGetVideoInfoNV");
    pAPI->glXGetSyncValuesOML = (PFNGLXGETSYNCVALUESOMLPROC)glbGetProcAddress("glXGetSyncValuesOML");
    pAPI->glXGetMscRateOML = (PFNGLXGETMSCRATEOMLPROC)glbGetProcAddress("glXGetMscRateOML");
    pAPI->glXSwapBuffersMscOML = (PFNGLXSWAPBUFFERSMSCOMLPROC)glbGetProcAddress("glXSwapBuffersMscOML");
    pAPI->glXWaitForMscOML = (PFNGLXWAITFORMSCOMLPROC)glbGetProcAddress("glXWaitForMscOML");
    pAPI->glXWaitForSbcOML = (PFNGLXWAITFORSBCOMLPROC)glbGetProcAddress("glXWaitForSbcOML");
    pAPI->glXCushionSGI = (PFNGLXCUSHIONSGIPROC)glbGetProcAddress("glXCushionSGI");
    pAPI->glXMakeCurrentReadSGI = (PFNGLXMAKECURRENTREADSGIPROC)glbGetProcAddress("glXMakeCurrentReadSGI");
    pAPI->glXGetCurrentReadDrawableSGI = (PFNGLXGETCURRENTREADDRAWABLESGIPROC)glbGetProcAddress("glXGetCurrentReadDrawableSGI");
    pAPI->glXSwapIntervalSGI = (PFNGLXSWAPINTERVALSGIPROC)glbGetProcAddress("glXSwapIntervalSGI");
    pAPI->glXGetVideoSyncSGI = (PFNGLXGETVIDEOSYNCSGIPROC)glbGetProcAddress("glXGetVideoSyncSGI");
    pAPI->glXWaitVideoSyncSGI = (PFNGLXWAITVIDEOSYNCSGIPROC)glbGetProcAddress("glXWaitVideoSyncSGI");
    pAPI->glXGetFBConfigAttribSGIX = (PFNGLXGETFBCONFIGATTRIBSGIXPROC)glbGetProcAddress("glXGetFBConfigAttribSGIX");
    pAPI->glXChooseFBConfigSGIX = (PFNGLXCHOOSEFBCONFIGSGIXPROC)glbGetProcAddress("glXChooseFBConfigSGIX");
    pAPI->glXCreateGLXPixmapWithConfigSGIX = (PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC)glbGetProcAddress("glXCreateGLXPixmapWithConfigSGIX");
    pAPI->glXCreateContextWithConfigSGIX = (PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC)glbGetProcAddress("glXCreateContextWithConfigSGIX");
    pAPI->glXGetVisualFromFBConfigSGIX = (PFNGLXGETVISUALFROMFBCONFIGSGIXPROC)glbGetProcAddress("glXGetVisualFromFBConfigSGIX");
    pAPI->glXGetFBConfigFromVisualSGIX = (PFNGLXGETFBCONFIGFROMVISUALSGIXPROC)glbGetProcAddress("glXGetFBConfigFromVisualSGIX");
    pAPI->glXQueryHyperpipeNetworkSGIX = (PFNGLXQUERYHYPERPIPENETWORKSGIXPROC)glbGetProcAddress("glXQueryHyperpipeNetworkSGIX");
    pAPI->glXHyperpipeConfigSGIX = (PFNGLXHYPERPIPECONFIGSGIXPROC)glbGetProcAddress("glXHyperpipeConfigSGIX");
    pAPI->glXQueryHyperpipeConfigSGIX = (PFNGLXQUERYHYPERPIPECONFIGSGIXPROC)glbGetProcAddress("glXQueryHyperpipeConfigSGIX");
    pAPI->glXDestroyHyperpipeConfigSGIX = (PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC)glbGetProcAddress("glXDestroyHyperpipeConfigSGIX");
    pAPI->glXBindHyperpipeSGIX = (PFNGLXBINDHYPERPIPESGIXPROC)glbGetProcAddress("glXBindHyperpipeSGIX");
    pAPI->glXQueryHyperpipeBestAttribSGIX = (PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC)glbGetProcAddress("glXQueryHyperpipeBestAttribSGIX");
    pAPI->glXHyperpipeAttribSGIX = (PFNGLXHYPERPIPEATTRIBSGIXPROC)glbGetProcAddress("glXHyperpipeAttribSGIX");
    pAPI->glXQueryHyperpipeAttribSGIX = (PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC)glbGetProcAddress("glXQueryHyperpipeAttribSGIX");
    pAPI->glXCreateGLXPbufferSGIX = (PFNGLXCREATEGLXPBUFFERSGIXPROC)glbGetProcAddress("glXCreateGLXPbufferSGIX");
    pAPI->glXDestroyGLXPbufferSGIX = (PFNGLXDESTROYGLXPBUFFERSGIXPROC)glbGetProcAddress("glXDestroyGLXPbufferSGIX");
    pAPI->glXQueryGLXPbufferSGIX = (PFNGLXQUERYGLXPBUFFERSGIXPROC)glbGetProcAddress("glXQueryGLXPbufferSGIX");
    pAPI->glXSelectEventSGIX = (PFNGLXSELECTEVENTSGIXPROC)glbGetProcAddress("glXSelectEventSGIX");
    pAPI->glXGetSelectedEventSGIX = (PFNGLXGETSELECTEDEVENTSGIXPROC)glbGetProcAddress("glXGetSelectedEventSGIX");
    pAPI->glXBindSwapBarrierSGIX = (PFNGLXBINDSWAPBARRIERSGIXPROC)glbGetProcAddress("glXBindSwapBarrierSGIX");
    pAPI->glXQueryMaxSwapBarriersSGIX = (PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC)glbGetProcAddress("glXQueryMaxSwapBarriersSGIX");
    pAPI->glXJoinSwapGroupSGIX = (PFNGLXJOINSWAPGROUPSGIXPROC)glbGetProcAddress("glXJoinSwapGroupSGIX");
    pAPI->glXBindChannelToWindowSGIX = (PFNGLXBINDCHANNELTOWINDOWSGIXPROC)glbGetProcAddress("glXBindChannelToWindowSGIX");
    pAPI->glXChannelRectSGIX = (PFNGLXCHANNELRECTSGIXPROC)glbGetProcAddress("glXChannelRectSGIX");
    pAPI->glXQueryChannelRectSGIX = (PFNGLXQUERYCHANNELRECTSGIXPROC)glbGetProcAddress("glXQueryChannelRectSGIX");
    pAPI->glXQueryChannelDeltasSGIX = (PFNGLXQUERYCHANNELDELTASSGIXPROC)glbGetProcAddress("glXQueryChannelDeltasSGIX");
    pAPI->glXChannelRectSyncSGIX = (PFNGLXCHANNELRECTSYNCSGIXPROC)glbGetProcAddress("glXChannelRectSyncSGIX");
    pAPI->glXGetTransparentIndexSUN = (PFNGLXGETTRANSPARENTINDEXSUNPROC)glbGetProcAddress("glXGetTransparentIndexSUN");
#endif /* GLBIND_GLX */

    return GL_NO_ERROR;
}

void glbUninit()
{
    if (g_glbInitCount == 0) {
        return;
    }

    g_glbInitCount -= 1;
    if (g_glbInitCount == 0) {
#if defined(GLBIND_WGL)
        if (glbind_RC) {
            glbind_wglDeleteContext(glbind_RC);
            glbind_RC = 0;
        }
        if (glbind_DummyHWND) {
            DestroyWindow(glbind_DummyHWND);
            glbind_DummyHWND = 0;
        }
        glbind_DC = 0;
#endif
#if defined(GLBIND_GLX)
        if (glbind_RC) {
            glbind_glXDestroyContext(glbind_pDisplay, glbind_RC);
            glbind_RC = 0;
        }
        if (glbind_DummyWindow) {
            glbind_XDestroyWindow(glbind_pDisplay, glbind_DummyWindow);
            glbind_DummyWindow = 0;
        }
        if (glbind_pDisplay && glbind_OwnsDisplay) {
            glbind_XCloseDisplay(glbind_pDisplay);
            glbind_pDisplay = 0;
            glbind_OwnsDisplay = GL_FALSE;
        }
#endif

        glb_dlclose(g_glbOpenGLSO);
        g_glbOpenGLSO = NULL;
    }
}

GLenum glbBindAPI(const GLBapi* pAPI)
{
    GLenum result;

    if (pAPI == NULL) {
        GLBapi tempAPI;
#if defined(GLBIND_WGL)
        result = glbInitContextAPI(glbind_DC, glbind_RC, &tempAPI);
#endif
#if defined(GLBIND_GLX)
        result = glbInitContextAPI(glbind_pDisplay, glbind_DummyWindow, glbind_RC, &tempAPI);
#endif
        if (result != GL_NO_ERROR) {
            return result;
        }

        return glbBindAPI(&tempAPI);
    }

    glCullFace = pAPI->glCullFace;
    glFrontFace = pAPI->glFrontFace;
    glHint = pAPI->glHint;
    glLineWidth = pAPI->glLineWidth;
    glPointSize = pAPI->glPointSize;
    glPolygonMode = pAPI->glPolygonMode;
    glScissor = pAPI->glScissor;
    glTexParameterf = pAPI->glTexParameterf;
    glTexParameterfv = pAPI->glTexParameterfv;
    glTexParameteri = pAPI->glTexParameteri;
    glTexParameteriv = pAPI->glTexParameteriv;
    glTexImage1D = pAPI->glTexImage1D;
    glTexImage2D = pAPI->glTexImage2D;
    glDrawBuffer = pAPI->glDrawBuffer;
    glClear = pAPI->glClear;
    glClearColor = pAPI->glClearColor;
    glClearStencil = pAPI->glClearStencil;
    glClearDepth = pAPI->glClearDepth;
    glStencilMask = pAPI->glStencilMask;
    glColorMask = pAPI->glColorMask;
    glDepthMask = pAPI->glDepthMask;
    glDisable = pAPI->glDisable;
    glEnable = pAPI->glEnable;
    glFinish = pAPI->glFinish;
    glFlush = pAPI->glFlush;
    glBlendFunc = pAPI->glBlendFunc;
    glLogicOp = pAPI->glLogicOp;
    glStencilFunc = pAPI->glStencilFunc;
    glStencilOp = pAPI->glStencilOp;
    glDepthFunc = pAPI->glDepthFunc;
    glPixelStoref = pAPI->glPixelStoref;
    glPixelStorei = pAPI->glPixelStorei;
    glReadBuffer = pAPI->glReadBuffer;
    glReadPixels = pAPI->glReadPixels;
    glGetBooleanv = pAPI->glGetBooleanv;
    glGetDoublev = pAPI->glGetDoublev;
    glGetError = pAPI->glGetError;
    glGetFloatv = pAPI->glGetFloatv;
    glGetIntegerv = pAPI->glGetIntegerv;
    glGetString = pAPI->glGetString;
    glGetTexImage = pAPI->glGetTexImage;
    glGetTexParameterfv = pAPI->glGetTexParameterfv;
    glGetTexParameteriv = pAPI->glGetTexParameteriv;
    glGetTexLevelParameterfv = pAPI->glGetTexLevelParameterfv;
    glGetTexLevelParameteriv = pAPI->glGetTexLevelParameteriv;
    glIsEnabled = pAPI->glIsEnabled;
    glDepthRange = pAPI->glDepthRange;
    glViewport = pAPI->glViewport;
    glNewList = pAPI->glNewList;
    glEndList = pAPI->glEndList;
    glCallList = pAPI->glCallList;
    glCallLists = pAPI->glCallLists;
    glDeleteLists = pAPI->glDeleteLists;
    glGenLists = pAPI->glGenLists;
    glListBase = pAPI->glListBase;
    glBegin = pAPI->glBegin;
    glBitmap = pAPI->glBitmap;
    glColor3b = pAPI->glColor3b;
    glColor3bv = pAPI->glColor3bv;
    glColor3d = pAPI->glColor3d;
    glColor3dv = pAPI->glColor3dv;
    glColor3f = pAPI->glColor3f;
    glColor3fv = pAPI->glColor3fv;
    glColor3i = pAPI->glColor3i;
    glColor3iv = pAPI->glColor3iv;
    glColor3s = pAPI->glColor3s;
    glColor3sv = pAPI->glColor3sv;
    glColor3ub = pAPI->glColor3ub;
    glColor3ubv = pAPI->glColor3ubv;
    glColor3ui = pAPI->glColor3ui;
    glColor3uiv = pAPI->glColor3uiv;
    glColor3us = pAPI->glColor3us;
    glColor3usv = pAPI->glColor3usv;
    glColor4b = pAPI->glColor4b;
    glColor4bv = pAPI->glColor4bv;
    glColor4d = pAPI->glColor4d;
    glColor4dv = pAPI->glColor4dv;
    glColor4f = pAPI->glColor4f;
    glColor4fv = pAPI->glColor4fv;
    glColor4i = pAPI->glColor4i;
    glColor4iv = pAPI->glColor4iv;
    glColor4s = pAPI->glColor4s;
    glColor4sv = pAPI->glColor4sv;
    glColor4ub = pAPI->glColor4ub;
    glColor4ubv = pAPI->glColor4ubv;
    glColor4ui = pAPI->glColor4ui;
    glColor4uiv = pAPI->glColor4uiv;
    glColor4us = pAPI->glColor4us;
    glColor4usv = pAPI->glColor4usv;
    glEdgeFlag = pAPI->glEdgeFlag;
    glEdgeFlagv = pAPI->glEdgeFlagv;
    glEnd = pAPI->glEnd;
    glIndexd = pAPI->glIndexd;
    glIndexdv = pAPI->glIndexdv;
    glIndexf = pAPI->glIndexf;
    glIndexfv = pAPI->glIndexfv;
    glIndexi = pAPI->glIndexi;
    glIndexiv = pAPI->glIndexiv;
    glIndexs = pAPI->glIndexs;
    glIndexsv = pAPI->glIndexsv;
    glNormal3b = pAPI->glNormal3b;
    glNormal3bv = pAPI->glNormal3bv;
    glNormal3d = pAPI->glNormal3d;
    glNormal3dv = pAPI->glNormal3dv;
    glNormal3f = pAPI->glNormal3f;
    glNormal3fv = pAPI->glNormal3fv;
    glNormal3i = pAPI->glNormal3i;
    glNormal3iv = pAPI->glNormal3iv;
    glNormal3s = pAPI->glNormal3s;
    glNormal3sv = pAPI->glNormal3sv;
    glRasterPos2d = pAPI->glRasterPos2d;
    glRasterPos2dv = pAPI->glRasterPos2dv;
    glRasterPos2f = pAPI->glRasterPos2f;
    glRasterPos2fv = pAPI->glRasterPos2fv;
    glRasterPos2i = pAPI->glRasterPos2i;
    glRasterPos2iv = pAPI->glRasterPos2iv;
    glRasterPos2s = pAPI->glRasterPos2s;
    glRasterPos2sv = pAPI->glRasterPos2sv;
    glRasterPos3d = pAPI->glRasterPos3d;
    glRasterPos3dv = pAPI->glRasterPos3dv;
    glRasterPos3f = pAPI->glRasterPos3f;
    glRasterPos3fv = pAPI->glRasterPos3fv;
    glRasterPos3i = pAPI->glRasterPos3i;
    glRasterPos3iv = pAPI->glRasterPos3iv;
    glRasterPos3s = pAPI->glRasterPos3s;
    glRasterPos3sv = pAPI->glRasterPos3sv;
    glRasterPos4d = pAPI->glRasterPos4d;
    glRasterPos4dv = pAPI->glRasterPos4dv;
    glRasterPos4f = pAPI->glRasterPos4f;
    glRasterPos4fv = pAPI->glRasterPos4fv;
    glRasterPos4i = pAPI->glRasterPos4i;
    glRasterPos4iv = pAPI->glRasterPos4iv;
    glRasterPos4s = pAPI->glRasterPos4s;
    glRasterPos4sv = pAPI->glRasterPos4sv;
    glRectd = pAPI->glRectd;
    glRectdv = pAPI->glRectdv;
    glRectf = pAPI->glRectf;
    glRectfv = pAPI->glRectfv;
    glRecti = pAPI->glRecti;
    glRectiv = pAPI->glRectiv;
    glRects = pAPI->glRects;
    glRectsv = pAPI->glRectsv;
    glTexCoord1d = pAPI->glTexCoord1d;
    glTexCoord1dv = pAPI->glTexCoord1dv;
    glTexCoord1f = pAPI->glTexCoord1f;
    glTexCoord1fv = pAPI->glTexCoord1fv;
    glTexCoord1i = pAPI->glTexCoord1i;
    glTexCoord1iv = pAPI->glTexCoord1iv;
    glTexCoord1s = pAPI->glTexCoord1s;
    glTexCoord1sv = pAPI->glTexCoord1sv;
    glTexCoord2d = pAPI->glTexCoord2d;
    glTexCoord2dv = pAPI->glTexCoord2dv;
    glTexCoord2f = pAPI->glTexCoord2f;
    glTexCoord2fv = pAPI->glTexCoord2fv;
    glTexCoord2i = pAPI->glTexCoord2i;
    glTexCoord2iv = pAPI->glTexCoord2iv;
    glTexCoord2s = pAPI->glTexCoord2s;
    glTexCoord2sv = pAPI->glTexCoord2sv;
    glTexCoord3d = pAPI->glTexCoord3d;
    glTexCoord3dv = pAPI->glTexCoord3dv;
    glTexCoord3f = pAPI->glTexCoord3f;
    glTexCoord3fv = pAPI->glTexCoord3fv;
    glTexCoord3i = pAPI->glTexCoord3i;
    glTexCoord3iv = pAPI->glTexCoord3iv;
    glTexCoord3s = pAPI->glTexCoord3s;
    glTexCoord3sv = pAPI->glTexCoord3sv;
    glTexCoord4d = pAPI->glTexCoord4d;
    glTexCoord4dv = pAPI->glTexCoord4dv;
    glTexCoord4f = pAPI->glTexCoord4f;
    glTexCoord4fv = pAPI->glTexCoord4fv;
    glTexCoord4i = pAPI->glTexCoord4i;
    glTexCoord4iv = pAPI->glTexCoord4iv;
    glTexCoord4s = pAPI->glTexCoord4s;
    glTexCoord4sv = pAPI->glTexCoord4sv;
    glVertex2d = pAPI->glVertex2d;
    glVertex2dv = pAPI->glVertex2dv;
    glVertex2f = pAPI->glVertex2f;
    glVertex2fv = pAPI->glVertex2fv;
    glVertex2i = pAPI->glVertex2i;
    glVertex2iv = pAPI->glVertex2iv;
    glVertex2s = pAPI->glVertex2s;
    glVertex2sv = pAPI->glVertex2sv;
    glVertex3d = pAPI->glVertex3d;
    glVertex3dv = pAPI->glVertex3dv;
    glVertex3f = pAPI->glVertex3f;
    glVertex3fv = pAPI->glVertex3fv;
    glVertex3i = pAPI->glVertex3i;
    glVertex3iv = pAPI->glVertex3iv;
    glVertex3s = pAPI->glVertex3s;
    glVertex3sv = pAPI->glVertex3sv;
    glVertex4d = pAPI->glVertex4d;
    glVertex4dv = pAPI->glVertex4dv;
    glVertex4f = pAPI->glVertex4f;
    glVertex4fv = pAPI->glVertex4fv;
    glVertex4i = pAPI->glVertex4i;
    glVertex4iv = pAPI->glVertex4iv;
    glVertex4s = pAPI->glVertex4s;
    glVertex4sv = pAPI->glVertex4sv;
    glClipPlane = pAPI->glClipPlane;
    glColorMaterial = pAPI->glColorMaterial;
    glFogf = pAPI->glFogf;
    glFogfv = pAPI->glFogfv;
    glFogi = pAPI->glFogi;
    glFogiv = pAPI->glFogiv;
    glLightf = pAPI->glLightf;
    glLightfv = pAPI->glLightfv;
    glLighti = pAPI->glLighti;
    glLightiv = pAPI->glLightiv;
    glLightModelf = pAPI->glLightModelf;
    glLightModelfv = pAPI->glLightModelfv;
    glLightModeli = pAPI->glLightModeli;
    glLightModeliv = pAPI->glLightModeliv;
    glLineStipple = pAPI->glLineStipple;
    glMaterialf = pAPI->glMaterialf;
    glMaterialfv = pAPI->glMaterialfv;
    glMateriali = pAPI->glMateriali;
    glMaterialiv = pAPI->glMaterialiv;
    glPolygonStipple = pAPI->glPolygonStipple;
    glShadeModel = pAPI->glShadeModel;
    glTexEnvf = pAPI->glTexEnvf;
    glTexEnvfv = pAPI->glTexEnvfv;
    glTexEnvi = pAPI->glTexEnvi;
    glTexEnviv = pAPI->glTexEnviv;
    glTexGend = pAPI->glTexGend;
    glTexGendv = pAPI->glTexGendv;
    glTexGenf = pAPI->glTexGenf;
    glTexGenfv = pAPI->glTexGenfv;
    glTexGeni = pAPI->glTexGeni;
    glTexGeniv = pAPI->glTexGeniv;
    glFeedbackBuffer = pAPI->glFeedbackBuffer;
    glSelectBuffer = pAPI->glSelectBuffer;
    glRenderMode = pAPI->glRenderMode;
    glInitNames = pAPI->glInitNames;
    glLoadName = pAPI->glLoadName;
    glPassThrough = pAPI->glPassThrough;
    glPopName = pAPI->glPopName;
    glPushName = pAPI->glPushName;
    glClearAccum = pAPI->glClearAccum;
    glClearIndex = pAPI->glClearIndex;
    glIndexMask = pAPI->glIndexMask;
    glAccum = pAPI->glAccum;
    glPopAttrib = pAPI->glPopAttrib;
    glPushAttrib = pAPI->glPushAttrib;
    glMap1d = pAPI->glMap1d;
    glMap1f = pAPI->glMap1f;
    glMap2d = pAPI->glMap2d;
    glMap2f = pAPI->glMap2f;
    glMapGrid1d = pAPI->glMapGrid1d;
    glMapGrid1f = pAPI->glMapGrid1f;
    glMapGrid2d = pAPI->glMapGrid2d;
    glMapGrid2f = pAPI->glMapGrid2f;
    glEvalCoord1d = pAPI->glEvalCoord1d;
    glEvalCoord1dv = pAPI->glEvalCoord1dv;
    glEvalCoord1f = pAPI->glEvalCoord1f;
    glEvalCoord1fv = pAPI->glEvalCoord1fv;
    glEvalCoord2d = pAPI->glEvalCoord2d;
    glEvalCoord2dv = pAPI->glEvalCoord2dv;
    glEvalCoord2f = pAPI->glEvalCoord2f;
    glEvalCoord2fv = pAPI->glEvalCoord2fv;
    glEvalMesh1 = pAPI->glEvalMesh1;
    glEvalPoint1 = pAPI->glEvalPoint1;
    glEvalMesh2 = pAPI->glEvalMesh2;
    glEvalPoint2 = pAPI->glEvalPoint2;
    glAlphaFunc = pAPI->glAlphaFunc;
    glPixelZoom = pAPI->glPixelZoom;
    glPixelTransferf = pAPI->glPixelTransferf;
    glPixelTransferi = pAPI->glPixelTransferi;
    glPixelMapfv = pAPI->glPixelMapfv;
    glPixelMapuiv = pAPI->glPixelMapuiv;
    glPixelMapusv = pAPI->glPixelMapusv;
    glCopyPixels = pAPI->glCopyPixels;
    glDrawPixels = pAPI->glDrawPixels;
    glGetClipPlane = pAPI->glGetClipPlane;
    glGetLightfv = pAPI->glGetLightfv;
    glGetLightiv = pAPI->glGetLightiv;
    glGetMapdv = pAPI->glGetMapdv;
    glGetMapfv = pAPI->glGetMapfv;
    glGetMapiv = pAPI->glGetMapiv;
    glGetMaterialfv = pAPI->glGetMaterialfv;
    glGetMaterialiv = pAPI->glGetMaterialiv;
    glGetPixelMapfv = pAPI->glGetPixelMapfv;
    glGetPixelMapuiv = pAPI->glGetPixelMapuiv;
    glGetPixelMapusv = pAPI->glGetPixelMapusv;
    glGetPolygonStipple = pAPI->glGetPolygonStipple;
    glGetTexEnvfv = pAPI->glGetTexEnvfv;
    glGetTexEnviv = pAPI->glGetTexEnviv;
    glGetTexGendv = pAPI->glGetTexGendv;
    glGetTexGenfv = pAPI->glGetTexGenfv;
    glGetTexGeniv = pAPI->glGetTexGeniv;
    glIsList = pAPI->glIsList;
    glFrustum = pAPI->glFrustum;
    glLoadIdentity = pAPI->glLoadIdentity;
    glLoadMatrixf = pAPI->glLoadMatrixf;
    glLoadMatrixd = pAPI->glLoadMatrixd;
    glMatrixMode = pAPI->glMatrixMode;
    glMultMatrixf = pAPI->glMultMatrixf;
    glMultMatrixd = pAPI->glMultMatrixd;
    glOrtho = pAPI->glOrtho;
    glPopMatrix = pAPI->glPopMatrix;
    glPushMatrix = pAPI->glPushMatrix;
    glRotated = pAPI->glRotated;
    glRotatef = pAPI->glRotatef;
    glScaled = pAPI->glScaled;
    glScalef = pAPI->glScalef;
    glTranslated = pAPI->glTranslated;
    glTranslatef = pAPI->glTranslatef;
    glDrawArrays = pAPI->glDrawArrays;
    glDrawElements = pAPI->glDrawElements;
    glGetPointerv = pAPI->glGetPointerv;
    glPolygonOffset = pAPI->glPolygonOffset;
    glCopyTexImage1D = pAPI->glCopyTexImage1D;
    glCopyTexImage2D = pAPI->glCopyTexImage2D;
    glCopyTexSubImage1D = pAPI->glCopyTexSubImage1D;
    glCopyTexSubImage2D = pAPI->glCopyTexSubImage2D;
    glTexSubImage1D = pAPI->glTexSubImage1D;
    glTexSubImage2D = pAPI->glTexSubImage2D;
    glBindTexture = pAPI->glBindTexture;
    glDeleteTextures = pAPI->glDeleteTextures;
    glGenTextures = pAPI->glGenTextures;
    glIsTexture = pAPI->glIsTexture;
    glArrayElement = pAPI->glArrayElement;
    glColorPointer = pAPI->glColorPointer;
    glDisableClientState = pAPI->glDisableClientState;
    glEdgeFlagPointer = pAPI->glEdgeFlagPointer;
    glEnableClientState = pAPI->glEnableClientState;
    glIndexPointer = pAPI->glIndexPointer;
    glInterleavedArrays = pAPI->glInterleavedArrays;
    glNormalPointer = pAPI->glNormalPointer;
    glTexCoordPointer = pAPI->glTexCoordPointer;
    glVertexPointer = pAPI->glVertexPointer;
    glAreTexturesResident = pAPI->glAreTexturesResident;
    glPrioritizeTextures = pAPI->glPrioritizeTextures;
    glIndexub = pAPI->glIndexub;
    glIndexubv = pAPI->glIndexubv;
    glPopClientAttrib = pAPI->glPopClientAttrib;
    glPushClientAttrib = pAPI->glPushClientAttrib;
    glDrawRangeElements = pAPI->glDrawRangeElements;
    glTexImage3D = pAPI->glTexImage3D;
    glTexSubImage3D = pAPI->glTexSubImage3D;
    glCopyTexSubImage3D = pAPI->glCopyTexSubImage3D;
    glActiveTexture = pAPI->glActiveTexture;
    glSampleCoverage = pAPI->glSampleCoverage;
    glCompressedTexImage3D = pAPI->glCompressedTexImage3D;
    glCompressedTexImage2D = pAPI->glCompressedTexImage2D;
    glCompressedTexImage1D = pAPI->glCompressedTexImage1D;
    glCompressedTexSubImage3D = pAPI->glCompressedTexSubImage3D;
    glCompressedTexSubImage2D = pAPI->glCompressedTexSubImage2D;
    glCompressedTexSubImage1D = pAPI->glCompressedTexSubImage1D;
    glGetCompressedTexImage = pAPI->glGetCompressedTexImage;
    glClientActiveTexture = pAPI->glClientActiveTexture;
    glMultiTexCoord1d = pAPI->glMultiTexCoord1d;
    glMultiTexCoord1dv = pAPI->glMultiTexCoord1dv;
    glMultiTexCoord1f = pAPI->glMultiTexCoord1f;
    glMultiTexCoord1fv = pAPI->glMultiTexCoord1fv;
    glMultiTexCoord1i = pAPI->glMultiTexCoord1i;
    glMultiTexCoord1iv = pAPI->glMultiTexCoord1iv;
    glMultiTexCoord1s = pAPI->glMultiTexCoord1s;
    glMultiTexCoord1sv = pAPI->glMultiTexCoord1sv;
    glMultiTexCoord2d = pAPI->glMultiTexCoord2d;
    glMultiTexCoord2dv = pAPI->glMultiTexCoord2dv;
    glMultiTexCoord2f = pAPI->glMultiTexCoord2f;
    glMultiTexCoord2fv = pAPI->glMultiTexCoord2fv;
    glMultiTexCoord2i = pAPI->glMultiTexCoord2i;
    glMultiTexCoord2iv = pAPI->glMultiTexCoord2iv;
    glMultiTexCoord2s = pAPI->glMultiTexCoord2s;
    glMultiTexCoord2sv = pAPI->glMultiTexCoord2sv;
    glMultiTexCoord3d = pAPI->glMultiTexCoord3d;
    glMultiTexCoord3dv = pAPI->glMultiTexCoord3dv;
    glMultiTexCoord3f = pAPI->glMultiTexCoord3f;
    glMultiTexCoord3fv = pAPI->glMultiTexCoord3fv;
    glMultiTexCoord3i = pAPI->glMultiTexCoord3i;
    glMultiTexCoord3iv = pAPI->glMultiTexCoord3iv;
    glMultiTexCoord3s = pAPI->glMultiTexCoord3s;
    glMultiTexCoord3sv = pAPI->glMultiTexCoord3sv;
    glMultiTexCoord4d = pAPI->glMultiTexCoord4d;
    glMultiTexCoord4dv = pAPI->glMultiTexCoord4dv;
    glMultiTexCoord4f = pAPI->glMultiTexCoord4f;
    glMultiTexCoord4fv = pAPI->glMultiTexCoord4fv;
    glMultiTexCoord4i = pAPI->glMultiTexCoord4i;
    glMultiTexCoord4iv = pAPI->glMultiTexCoord4iv;
    glMultiTexCoord4s = pAPI->glMultiTexCoord4s;
    glMultiTexCoord4sv = pAPI->glMultiTexCoord4sv;
    glLoadTransposeMatrixf = pAPI->glLoadTransposeMatrixf;
    glLoadTransposeMatrixd = pAPI->glLoadTransposeMatrixd;
    glMultTransposeMatrixf = pAPI->glMultTransposeMatrixf;
    glMultTransposeMatrixd = pAPI->glMultTransposeMatrixd;
    glBlendFuncSeparate = pAPI->glBlendFuncSeparate;
    glMultiDrawArrays = pAPI->glMultiDrawArrays;
    glMultiDrawElements = pAPI->glMultiDrawElements;
    glPointParameterf = pAPI->glPointParameterf;
    glPointParameterfv = pAPI->glPointParameterfv;
    glPointParameteri = pAPI->glPointParameteri;
    glPointParameteriv = pAPI->glPointParameteriv;
    glFogCoordf = pAPI->glFogCoordf;
    glFogCoordfv = pAPI->glFogCoordfv;
    glFogCoordd = pAPI->glFogCoordd;
    glFogCoorddv = pAPI->glFogCoorddv;
    glFogCoordPointer = pAPI->glFogCoordPointer;
    glSecondaryColor3b = pAPI->glSecondaryColor3b;
    glSecondaryColor3bv = pAPI->glSecondaryColor3bv;
    glSecondaryColor3d = pAPI->glSecondaryColor3d;
    glSecondaryColor3dv = pAPI->glSecondaryColor3dv;
    glSecondaryColor3f = pAPI->glSecondaryColor3f;
    glSecondaryColor3fv = pAPI->glSecondaryColor3fv;
    glSecondaryColor3i = pAPI->glSecondaryColor3i;
    glSecondaryColor3iv = pAPI->glSecondaryColor3iv;
    glSecondaryColor3s = pAPI->glSecondaryColor3s;
    glSecondaryColor3sv = pAPI->glSecondaryColor3sv;
    glSecondaryColor3ub = pAPI->glSecondaryColor3ub;
    glSecondaryColor3ubv = pAPI->glSecondaryColor3ubv;
    glSecondaryColor3ui = pAPI->glSecondaryColor3ui;
    glSecondaryColor3uiv = pAPI->glSecondaryColor3uiv;
    glSecondaryColor3us = pAPI->glSecondaryColor3us;
    glSecondaryColor3usv = pAPI->glSecondaryColor3usv;
    glSecondaryColorPointer = pAPI->glSecondaryColorPointer;
    glWindowPos2d = pAPI->glWindowPos2d;
    glWindowPos2dv = pAPI->glWindowPos2dv;
    glWindowPos2f = pAPI->glWindowPos2f;
    glWindowPos2fv = pAPI->glWindowPos2fv;
    glWindowPos2i = pAPI->glWindowPos2i;
    glWindowPos2iv = pAPI->glWindowPos2iv;
    glWindowPos2s = pAPI->glWindowPos2s;
    glWindowPos2sv = pAPI->glWindowPos2sv;
    glWindowPos3d = pAPI->glWindowPos3d;
    glWindowPos3dv = pAPI->glWindowPos3dv;
    glWindowPos3f = pAPI->glWindowPos3f;
    glWindowPos3fv = pAPI->glWindowPos3fv;
    glWindowPos3i = pAPI->glWindowPos3i;
    glWindowPos3iv = pAPI->glWindowPos3iv;
    glWindowPos3s = pAPI->glWindowPos3s;
    glWindowPos3sv = pAPI->glWindowPos3sv;
    glBlendColor = pAPI->glBlendColor;
    glBlendEquation = pAPI->glBlendEquation;
    glGenQueries = pAPI->glGenQueries;
    glDeleteQueries = pAPI->glDeleteQueries;
    glIsQuery = pAPI->glIsQuery;
    glBeginQuery = pAPI->glBeginQuery;
    glEndQuery = pAPI->glEndQuery;
    glGetQueryiv = pAPI->glGetQueryiv;
    glGetQueryObjectiv = pAPI->glGetQueryObjectiv;
    glGetQueryObjectuiv = pAPI->glGetQueryObjectuiv;
    glBindBuffer = pAPI->glBindBuffer;
    glDeleteBuffers = pAPI->glDeleteBuffers;
    glGenBuffers = pAPI->glGenBuffers;
    glIsBuffer = pAPI->glIsBuffer;
    glBufferData = pAPI->glBufferData;
    glBufferSubData = pAPI->glBufferSubData;
    glGetBufferSubData = pAPI->glGetBufferSubData;
    glMapBuffer = pAPI->glMapBuffer;
    glUnmapBuffer = pAPI->glUnmapBuffer;
    glGetBufferParameteriv = pAPI->glGetBufferParameteriv;
    glGetBufferPointerv = pAPI->glGetBufferPointerv;
    glBlendEquationSeparate = pAPI->glBlendEquationSeparate;
    glDrawBuffers = pAPI->glDrawBuffers;
    glStencilOpSeparate = pAPI->glStencilOpSeparate;
    glStencilFuncSeparate = pAPI->glStencilFuncSeparate;
    glStencilMaskSeparate = pAPI->glStencilMaskSeparate;
    glAttachShader = pAPI->glAttachShader;
    glBindAttribLocation = pAPI->glBindAttribLocation;
    glCompileShader = pAPI->glCompileShader;
    glCreateProgram = pAPI->glCreateProgram;
    glCreateShader = pAPI->glCreateShader;
    glDeleteProgram = pAPI->glDeleteProgram;
    glDeleteShader = pAPI->glDeleteShader;
    glDetachShader = pAPI->glDetachShader;
    glDisableVertexAttribArray = pAPI->glDisableVertexAttribArray;
    glEnableVertexAttribArray = pAPI->glEnableVertexAttribArray;
    glGetActiveAttrib = pAPI->glGetActiveAttrib;
    glGetActiveUniform = pAPI->glGetActiveUniform;
    glGetAttachedShaders = pAPI->glGetAttachedShaders;
    glGetAttribLocation = pAPI->glGetAttribLocation;
    glGetProgramiv = pAPI->glGetProgramiv;
    glGetProgramInfoLog = pAPI->glGetProgramInfoLog;
    glGetShaderiv = pAPI->glGetShaderiv;
    glGetShaderInfoLog = pAPI->glGetShaderInfoLog;
    glGetShaderSource = pAPI->glGetShaderSource;
    glGetUniformLocation = pAPI->glGetUniformLocation;
    glGetUniformfv = pAPI->glGetUniformfv;
    glGetUniformiv = pAPI->glGetUniformiv;
    glGetVertexAttribdv = pAPI->glGetVertexAttribdv;
    glGetVertexAttribfv = pAPI->glGetVertexAttribfv;
    glGetVertexAttribiv = pAPI->glGetVertexAttribiv;
    glGetVertexAttribPointerv = pAPI->glGetVertexAttribPointerv;
    glIsProgram = pAPI->glIsProgram;
    glIsShader = pAPI->glIsShader;
    glLinkProgram = pAPI->glLinkProgram;
    glShaderSource = pAPI->glShaderSource;
    glUseProgram = pAPI->glUseProgram;
    glUniform1f = pAPI->glUniform1f;
    glUniform2f = pAPI->glUniform2f;
    glUniform3f = pAPI->glUniform3f;
    glUniform4f = pAPI->glUniform4f;
    glUniform1i = pAPI->glUniform1i;
    glUniform2i = pAPI->glUniform2i;
    glUniform3i = pAPI->glUniform3i;
    glUniform4i = pAPI->glUniform4i;
    glUniform1fv = pAPI->glUniform1fv;
    glUniform2fv = pAPI->glUniform2fv;
    glUniform3fv = pAPI->glUniform3fv;
    glUniform4fv = pAPI->glUniform4fv;
    glUniform1iv = pAPI->glUniform1iv;
    glUniform2iv = pAPI->glUniform2iv;
    glUniform3iv = pAPI->glUniform3iv;
    glUniform4iv = pAPI->glUniform4iv;
    glUniformMatrix2fv = pAPI->glUniformMatrix2fv;
    glUniformMatrix3fv = pAPI->glUniformMatrix3fv;
    glUniformMatrix4fv = pAPI->glUniformMatrix4fv;
    glValidateProgram = pAPI->glValidateProgram;
    glVertexAttrib1d = pAPI->glVertexAttrib1d;
    glVertexAttrib1dv = pAPI->glVertexAttrib1dv;
    glVertexAttrib1f = pAPI->glVertexAttrib1f;
    glVertexAttrib1fv = pAPI->glVertexAttrib1fv;
    glVertexAttrib1s = pAPI->glVertexAttrib1s;
    glVertexAttrib1sv = pAPI->glVertexAttrib1sv;
    glVertexAttrib2d = pAPI->glVertexAttrib2d;
    glVertexAttrib2dv = pAPI->glVertexAttrib2dv;
    glVertexAttrib2f = pAPI->glVertexAttrib2f;
    glVertexAttrib2fv = pAPI->glVertexAttrib2fv;
    glVertexAttrib2s = pAPI->glVertexAttrib2s;
    glVertexAttrib2sv = pAPI->glVertexAttrib2sv;
    glVertexAttrib3d = pAPI->glVertexAttrib3d;
    glVertexAttrib3dv = pAPI->glVertexAttrib3dv;
    glVertexAttrib3f = pAPI->glVertexAttrib3f;
    glVertexAttrib3fv = pAPI->glVertexAttrib3fv;
    glVertexAttrib3s = pAPI->glVertexAttrib3s;
    glVertexAttrib3sv = pAPI->glVertexAttrib3sv;
    glVertexAttrib4Nbv = pAPI->glVertexAttrib4Nbv;
    glVertexAttrib4Niv = pAPI->glVertexAttrib4Niv;
    glVertexAttrib4Nsv = pAPI->glVertexAttrib4Nsv;
    glVertexAttrib4Nub = pAPI->glVertexAttrib4Nub;
    glVertexAttrib4Nubv = pAPI->glVertexAttrib4Nubv;
    glVertexAttrib4Nuiv = pAPI->glVertexAttrib4Nuiv;
    glVertexAttrib4Nusv = pAPI->glVertexAttrib4Nusv;
    glVertexAttrib4bv = pAPI->glVertexAttrib4bv;
    glVertexAttrib4d = pAPI->glVertexAttrib4d;
    glVertexAttrib4dv = pAPI->glVertexAttrib4dv;
    glVertexAttrib4f = pAPI->glVertexAttrib4f;
    glVertexAttrib4fv = pAPI->glVertexAttrib4fv;
    glVertexAttrib4iv = pAPI->glVertexAttrib4iv;
    glVertexAttrib4s = pAPI->glVertexAttrib4s;
    glVertexAttrib4sv = pAPI->glVertexAttrib4sv;
    glVertexAttrib4ubv = pAPI->glVertexAttrib4ubv;
    glVertexAttrib4uiv = pAPI->glVertexAttrib4uiv;
    glVertexAttrib4usv = pAPI->glVertexAttrib4usv;
    glVertexAttribPointer = pAPI->glVertexAttribPointer;
    glUniformMatrix2x3fv = pAPI->glUniformMatrix2x3fv;
    glUniformMatrix3x2fv = pAPI->glUniformMatrix3x2fv;
    glUniformMatrix2x4fv = pAPI->glUniformMatrix2x4fv;
    glUniformMatrix4x2fv = pAPI->glUniformMatrix4x2fv;
    glUniformMatrix3x4fv = pAPI->glUniformMatrix3x4fv;
    glUniformMatrix4x3fv = pAPI->glUniformMatrix4x3fv;
    glColorMaski = pAPI->glColorMaski;
    glGetBooleani_v = pAPI->glGetBooleani_v;
    glGetIntegeri_v = pAPI->glGetIntegeri_v;
    glEnablei = pAPI->glEnablei;
    glDisablei = pAPI->glDisablei;
    glIsEnabledi = pAPI->glIsEnabledi;
    glBeginTransformFeedback = pAPI->glBeginTransformFeedback;
    glEndTransformFeedback = pAPI->glEndTransformFeedback;
    glBindBufferRange = pAPI->glBindBufferRange;
    glBindBufferBase = pAPI->glBindBufferBase;
    glTransformFeedbackVaryings = pAPI->glTransformFeedbackVaryings;
    glGetTransformFeedbackVarying = pAPI->glGetTransformFeedbackVarying;
    glClampColor = pAPI->glClampColor;
    glBeginConditionalRender = pAPI->glBeginConditionalRender;
    glEndConditionalRender = pAPI->glEndConditionalRender;
    glVertexAttribIPointer = pAPI->glVertexAttribIPointer;
    glGetVertexAttribIiv = pAPI->glGetVertexAttribIiv;
    glGetVertexAttribIuiv = pAPI->glGetVertexAttribIuiv;
    glVertexAttribI1i = pAPI->glVertexAttribI1i;
    glVertexAttribI2i = pAPI->glVertexAttribI2i;
    glVertexAttribI3i = pAPI->glVertexAttribI3i;
    glVertexAttribI4i = pAPI->glVertexAttribI4i;
    glVertexAttribI1ui = pAPI->glVertexAttribI1ui;
    glVertexAttribI2ui = pAPI->glVertexAttribI2ui;
    glVertexAttribI3ui = pAPI->glVertexAttribI3ui;
    glVertexAttribI4ui = pAPI->glVertexAttribI4ui;
    glVertexAttribI1iv = pAPI->glVertexAttribI1iv;
    glVertexAttribI2iv = pAPI->glVertexAttribI2iv;
    glVertexAttribI3iv = pAPI->glVertexAttribI3iv;
    glVertexAttribI4iv = pAPI->glVertexAttribI4iv;
    glVertexAttribI1uiv = pAPI->glVertexAttribI1uiv;
    glVertexAttribI2uiv = pAPI->glVertexAttribI2uiv;
    glVertexAttribI3uiv = pAPI->glVertexAttribI3uiv;
    glVertexAttribI4uiv = pAPI->glVertexAttribI4uiv;
    glVertexAttribI4bv = pAPI->glVertexAttribI4bv;
    glVertexAttribI4sv = pAPI->glVertexAttribI4sv;
    glVertexAttribI4ubv = pAPI->glVertexAttribI4ubv;
    glVertexAttribI4usv = pAPI->glVertexAttribI4usv;
    glGetUniformuiv = pAPI->glGetUniformuiv;
    glBindFragDataLocation = pAPI->glBindFragDataLocation;
    glGetFragDataLocation = pAPI->glGetFragDataLocation;
    glUniform1ui = pAPI->glUniform1ui;
    glUniform2ui = pAPI->glUniform2ui;
    glUniform3ui = pAPI->glUniform3ui;
    glUniform4ui = pAPI->glUniform4ui;
    glUniform1uiv = pAPI->glUniform1uiv;
    glUniform2uiv = pAPI->glUniform2uiv;
    glUniform3uiv = pAPI->glUniform3uiv;
    glUniform4uiv = pAPI->glUniform4uiv;
    glTexParameterIiv = pAPI->glTexParameterIiv;
    glTexParameterIuiv = pAPI->glTexParameterIuiv;
    glGetTexParameterIiv = pAPI->glGetTexParameterIiv;
    glGetTexParameterIuiv = pAPI->glGetTexParameterIuiv;
    glClearBufferiv = pAPI->glClearBufferiv;
    glClearBufferuiv = pAPI->glClearBufferuiv;
    glClearBufferfv = pAPI->glClearBufferfv;
    glClearBufferfi = pAPI->glClearBufferfi;
    glGetStringi = pAPI->glGetStringi;
    glIsRenderbuffer = pAPI->glIsRenderbuffer;
    glBindRenderbuffer = pAPI->glBindRenderbuffer;
    glDeleteRenderbuffers = pAPI->glDeleteRenderbuffers;
    glGenRenderbuffers = pAPI->glGenRenderbuffers;
    glRenderbufferStorage = pAPI->glRenderbufferStorage;
    glGetRenderbufferParameteriv = pAPI->glGetRenderbufferParameteriv;
    glIsFramebuffer = pAPI->glIsFramebuffer;
    glBindFramebuffer = pAPI->glBindFramebuffer;
    glDeleteFramebuffers = pAPI->glDeleteFramebuffers;
    glGenFramebuffers = pAPI->glGenFramebuffers;
    glCheckFramebufferStatus = pAPI->glCheckFramebufferStatus;
    glFramebufferTexture1D = pAPI->glFramebufferTexture1D;
    glFramebufferTexture2D = pAPI->glFramebufferTexture2D;
    glFramebufferTexture3D = pAPI->glFramebufferTexture3D;
    glFramebufferRenderbuffer = pAPI->glFramebufferRenderbuffer;
    glGetFramebufferAttachmentParameteriv = pAPI->glGetFramebufferAttachmentParameteriv;
    glGenerateMipmap = pAPI->glGenerateMipmap;
    glBlitFramebuffer = pAPI->glBlitFramebuffer;
    glRenderbufferStorageMultisample = pAPI->glRenderbufferStorageMultisample;
    glFramebufferTextureLayer = pAPI->glFramebufferTextureLayer;
    glMapBufferRange = pAPI->glMapBufferRange;
    glFlushMappedBufferRange = pAPI->glFlushMappedBufferRange;
    glBindVertexArray = pAPI->glBindVertexArray;
    glDeleteVertexArrays = pAPI->glDeleteVertexArrays;
    glGenVertexArrays = pAPI->glGenVertexArrays;
    glIsVertexArray = pAPI->glIsVertexArray;
    glDrawArraysInstanced = pAPI->glDrawArraysInstanced;
    glDrawElementsInstanced = pAPI->glDrawElementsInstanced;
    glTexBuffer = pAPI->glTexBuffer;
    glPrimitiveRestartIndex = pAPI->glPrimitiveRestartIndex;
    glCopyBufferSubData = pAPI->glCopyBufferSubData;
    glGetUniformIndices = pAPI->glGetUniformIndices;
    glGetActiveUniformsiv = pAPI->glGetActiveUniformsiv;
    glGetActiveUniformName = pAPI->glGetActiveUniformName;
    glGetUniformBlockIndex = pAPI->glGetUniformBlockIndex;
    glGetActiveUniformBlockiv = pAPI->glGetActiveUniformBlockiv;
    glGetActiveUniformBlockName = pAPI->glGetActiveUniformBlockName;
    glUniformBlockBinding = pAPI->glUniformBlockBinding;
    glDrawElementsBaseVertex = pAPI->glDrawElementsBaseVertex;
    glDrawRangeElementsBaseVertex = pAPI->glDrawRangeElementsBaseVertex;
    glDrawElementsInstancedBaseVertex = pAPI->glDrawElementsInstancedBaseVertex;
    glMultiDrawElementsBaseVertex = pAPI->glMultiDrawElementsBaseVertex;
    glProvokingVertex = pAPI->glProvokingVertex;
    glFenceSync = pAPI->glFenceSync;
    glIsSync = pAPI->glIsSync;
    glDeleteSync = pAPI->glDeleteSync;
    glClientWaitSync = pAPI->glClientWaitSync;
    glWaitSync = pAPI->glWaitSync;
    glGetInteger64v = pAPI->glGetInteger64v;
    glGetSynciv = pAPI->glGetSynciv;
    glGetInteger64i_v = pAPI->glGetInteger64i_v;
    glGetBufferParameteri64v = pAPI->glGetBufferParameteri64v;
    glFramebufferTexture = pAPI->glFramebufferTexture;
    glTexImage2DMultisample = pAPI->glTexImage2DMultisample;
    glTexImage3DMultisample = pAPI->glTexImage3DMultisample;
    glGetMultisamplefv = pAPI->glGetMultisamplefv;
    glSampleMaski = pAPI->glSampleMaski;
    glBindFragDataLocationIndexed = pAPI->glBindFragDataLocationIndexed;
    glGetFragDataIndex = pAPI->glGetFragDataIndex;
    glGenSamplers = pAPI->glGenSamplers;
    glDeleteSamplers = pAPI->glDeleteSamplers;
    glIsSampler = pAPI->glIsSampler;
    glBindSampler = pAPI->glBindSampler;
    glSamplerParameteri = pAPI->glSamplerParameteri;
    glSamplerParameteriv = pAPI->glSamplerParameteriv;
    glSamplerParameterf = pAPI->glSamplerParameterf;
    glSamplerParameterfv = pAPI->glSamplerParameterfv;
    glSamplerParameterIiv = pAPI->glSamplerParameterIiv;
    glSamplerParameterIuiv = pAPI->glSamplerParameterIuiv;
    glGetSamplerParameteriv = pAPI->glGetSamplerParameteriv;
    glGetSamplerParameterIiv = pAPI->glGetSamplerParameterIiv;
    glGetSamplerParameterfv = pAPI->glGetSamplerParameterfv;
    glGetSamplerParameterIuiv = pAPI->glGetSamplerParameterIuiv;
    glQueryCounter = pAPI->glQueryCounter;
    glGetQueryObjecti64v = pAPI->glGetQueryObjecti64v;
    glGetQueryObjectui64v = pAPI->glGetQueryObjectui64v;
    glVertexAttribDivisor = pAPI->glVertexAttribDivisor;
    glVertexAttribP1ui = pAPI->glVertexAttribP1ui;
    glVertexAttribP1uiv = pAPI->glVertexAttribP1uiv;
    glVertexAttribP2ui = pAPI->glVertexAttribP2ui;
    glVertexAttribP2uiv = pAPI->glVertexAttribP2uiv;
    glVertexAttribP3ui = pAPI->glVertexAttribP3ui;
    glVertexAttribP3uiv = pAPI->glVertexAttribP3uiv;
    glVertexAttribP4ui = pAPI->glVertexAttribP4ui;
    glVertexAttribP4uiv = pAPI->glVertexAttribP4uiv;
    glVertexP2ui = pAPI->glVertexP2ui;
    glVertexP2uiv = pAPI->glVertexP2uiv;
    glVertexP3ui = pAPI->glVertexP3ui;
    glVertexP3uiv = pAPI->glVertexP3uiv;
    glVertexP4ui = pAPI->glVertexP4ui;
    glVertexP4uiv = pAPI->glVertexP4uiv;
    glTexCoordP1ui = pAPI->glTexCoordP1ui;
    glTexCoordP1uiv = pAPI->glTexCoordP1uiv;
    glTexCoordP2ui = pAPI->glTexCoordP2ui;
    glTexCoordP2uiv = pAPI->glTexCoordP2uiv;
    glTexCoordP3ui = pAPI->glTexCoordP3ui;
    glTexCoordP3uiv = pAPI->glTexCoordP3uiv;
    glTexCoordP4ui = pAPI->glTexCoordP4ui;
    glTexCoordP4uiv = pAPI->glTexCoordP4uiv;
    glMultiTexCoordP1ui = pAPI->glMultiTexCoordP1ui;
    glMultiTexCoordP1uiv = pAPI->glMultiTexCoordP1uiv;
    glMultiTexCoordP2ui = pAPI->glMultiTexCoordP2ui;
    glMultiTexCoordP2uiv = pAPI->glMultiTexCoordP2uiv;
    glMultiTexCoordP3ui = pAPI->glMultiTexCoordP3ui;
    glMultiTexCoordP3uiv = pAPI->glMultiTexCoordP3uiv;
    glMultiTexCoordP4ui = pAPI->glMultiTexCoordP4ui;
    glMultiTexCoordP4uiv = pAPI->glMultiTexCoordP4uiv;
    glNormalP3ui = pAPI->glNormalP3ui;
    glNormalP3uiv = pAPI->glNormalP3uiv;
    glColorP3ui = pAPI->glColorP3ui;
    glColorP3uiv = pAPI->glColorP3uiv;
    glColorP4ui = pAPI->glColorP4ui;
    glColorP4uiv = pAPI->glColorP4uiv;
    glSecondaryColorP3ui = pAPI->glSecondaryColorP3ui;
    glSecondaryColorP3uiv = pAPI->glSecondaryColorP3uiv;
    glMinSampleShading = pAPI->glMinSampleShading;
    glBlendEquationi = pAPI->glBlendEquationi;
    glBlendEquationSeparatei = pAPI->glBlendEquationSeparatei;
    glBlendFunci = pAPI->glBlendFunci;
    glBlendFuncSeparatei = pAPI->glBlendFuncSeparatei;
    glDrawArraysIndirect = pAPI->glDrawArraysIndirect;
    glDrawElementsIndirect = pAPI->glDrawElementsIndirect;
    glUniform1d = pAPI->glUniform1d;
    glUniform2d = pAPI->glUniform2d;
    glUniform3d = pAPI->glUniform3d;
    glUniform4d = pAPI->glUniform4d;
    glUniform1dv = pAPI->glUniform1dv;
    glUniform2dv = pAPI->glUniform2dv;
    glUniform3dv = pAPI->glUniform3dv;
    glUniform4dv = pAPI->glUniform4dv;
    glUniformMatrix2dv = pAPI->glUniformMatrix2dv;
    glUniformMatrix3dv = pAPI->glUniformMatrix3dv;
    glUniformMatrix4dv = pAPI->glUniformMatrix4dv;
    glUniformMatrix2x3dv = pAPI->glUniformMatrix2x3dv;
    glUniformMatrix2x4dv = pAPI->glUniformMatrix2x4dv;
    glUniformMatrix3x2dv = pAPI->glUniformMatrix3x2dv;
    glUniformMatrix3x4dv = pAPI->glUniformMatrix3x4dv;
    glUniformMatrix4x2dv = pAPI->glUniformMatrix4x2dv;
    glUniformMatrix4x3dv = pAPI->glUniformMatrix4x3dv;
    glGetUniformdv = pAPI->glGetUniformdv;
    glGetSubroutineUniformLocation = pAPI->glGetSubroutineUniformLocation;
    glGetSubroutineIndex = pAPI->glGetSubroutineIndex;
    glGetActiveSubroutineUniformiv = pAPI->glGetActiveSubroutineUniformiv;
    glGetActiveSubroutineUniformName = pAPI->glGetActiveSubroutineUniformName;
    glGetActiveSubroutineName = pAPI->glGetActiveSubroutineName;
    glUniformSubroutinesuiv = pAPI->glUniformSubroutinesuiv;
    glGetUniformSubroutineuiv = pAPI->glGetUniformSubroutineuiv;
    glGetProgramStageiv = pAPI->glGetProgramStageiv;
    glPatchParameteri = pAPI->glPatchParameteri;
    glPatchParameterfv = pAPI->glPatchParameterfv;
    glBindTransformFeedback = pAPI->glBindTransformFeedback;
    glDeleteTransformFeedbacks = pAPI->glDeleteTransformFeedbacks;
    glGenTransformFeedbacks = pAPI->glGenTransformFeedbacks;
    glIsTransformFeedback = pAPI->glIsTransformFeedback;
    glPauseTransformFeedback = pAPI->glPauseTransformFeedback;
    glResumeTransformFeedback = pAPI->glResumeTransformFeedback;
    glDrawTransformFeedback = pAPI->glDrawTransformFeedback;
    glDrawTransformFeedbackStream = pAPI->glDrawTransformFeedbackStream;
    glBeginQueryIndexed = pAPI->glBeginQueryIndexed;
    glEndQueryIndexed = pAPI->glEndQueryIndexed;
    glGetQueryIndexediv = pAPI->glGetQueryIndexediv;
    glReleaseShaderCompiler = pAPI->glReleaseShaderCompiler;
    glShaderBinary = pAPI->glShaderBinary;
    glGetShaderPrecisionFormat = pAPI->glGetShaderPrecisionFormat;
    glDepthRangef = pAPI->glDepthRangef;
    glClearDepthf = pAPI->glClearDepthf;
    glGetProgramBinary = pAPI->glGetProgramBinary;
    glProgramBinary = pAPI->glProgramBinary;
    glProgramParameteri = pAPI->glProgramParameteri;
    glUseProgramStages = pAPI->glUseProgramStages;
    glActiveShaderProgram = pAPI->glActiveShaderProgram;
    glCreateShaderProgramv = pAPI->glCreateShaderProgramv;
    glBindProgramPipeline = pAPI->glBindProgramPipeline;
    glDeleteProgramPipelines = pAPI->glDeleteProgramPipelines;
    glGenProgramPipelines = pAPI->glGenProgramPipelines;
    glIsProgramPipeline = pAPI->glIsProgramPipeline;
    glGetProgramPipelineiv = pAPI->glGetProgramPipelineiv;
    glProgramUniform1i = pAPI->glProgramUniform1i;
    glProgramUniform1iv = pAPI->glProgramUniform1iv;
    glProgramUniform1f = pAPI->glProgramUniform1f;
    glProgramUniform1fv = pAPI->glProgramUniform1fv;
    glProgramUniform1d = pAPI->glProgramUniform1d;
    glProgramUniform1dv = pAPI->glProgramUniform1dv;
    glProgramUniform1ui = pAPI->glProgramUniform1ui;
    glProgramUniform1uiv = pAPI->glProgramUniform1uiv;
    glProgramUniform2i = pAPI->glProgramUniform2i;
    glProgramUniform2iv = pAPI->glProgramUniform2iv;
    glProgramUniform2f = pAPI->glProgramUniform2f;
    glProgramUniform2fv = pAPI->glProgramUniform2fv;
    glProgramUniform2d = pAPI->glProgramUniform2d;
    glProgramUniform2dv = pAPI->glProgramUniform2dv;
    glProgramUniform2ui = pAPI->glProgramUniform2ui;
    glProgramUniform2uiv = pAPI->glProgramUniform2uiv;
    glProgramUniform3i = pAPI->glProgramUniform3i;
    glProgramUniform3iv = pAPI->glProgramUniform3iv;
    glProgramUniform3f = pAPI->glProgramUniform3f;
    glProgramUniform3fv = pAPI->glProgramUniform3fv;
    glProgramUniform3d = pAPI->glProgramUniform3d;
    glProgramUniform3dv = pAPI->glProgramUniform3dv;
    glProgramUniform3ui = pAPI->glProgramUniform3ui;
    glProgramUniform3uiv = pAPI->glProgramUniform3uiv;
    glProgramUniform4i = pAPI->glProgramUniform4i;
    glProgramUniform4iv = pAPI->glProgramUniform4iv;
    glProgramUniform4f = pAPI->glProgramUniform4f;
    glProgramUniform4fv = pAPI->glProgramUniform4fv;
    glProgramUniform4d = pAPI->glProgramUniform4d;
    glProgramUniform4dv = pAPI->glProgramUniform4dv;
    glProgramUniform4ui = pAPI->glProgramUniform4ui;
    glProgramUniform4uiv = pAPI->glProgramUniform4uiv;
    glProgramUniformMatrix2fv = pAPI->glProgramUniformMatrix2fv;
    glProgramUniformMatrix3fv = pAPI->glProgramUniformMatrix3fv;
    glProgramUniformMatrix4fv = pAPI->glProgramUniformMatrix4fv;
    glProgramUniformMatrix2dv = pAPI->glProgramUniformMatrix2dv;
    glProgramUniformMatrix3dv = pAPI->glProgramUniformMatrix3dv;
    glProgramUniformMatrix4dv = pAPI->glProgramUniformMatrix4dv;
    glProgramUniformMatrix2x3fv = pAPI->glProgramUniformMatrix2x3fv;
    glProgramUniformMatrix3x2fv = pAPI->glProgramUniformMatrix3x2fv;
    glProgramUniformMatrix2x4fv = pAPI->glProgramUniformMatrix2x4fv;
    glProgramUniformMatrix4x2fv = pAPI->glProgramUniformMatrix4x2fv;
    glProgramUniformMatrix3x4fv = pAPI->glProgramUniformMatrix3x4fv;
    glProgramUniformMatrix4x3fv = pAPI->glProgramUniformMatrix4x3fv;
    glProgramUniformMatrix2x3dv = pAPI->glProgramUniformMatrix2x3dv;
    glProgramUniformMatrix3x2dv = pAPI->glProgramUniformMatrix3x2dv;
    glProgramUniformMatrix2x4dv = pAPI->glProgramUniformMatrix2x4dv;
    glProgramUniformMatrix4x2dv = pAPI->glProgramUniformMatrix4x2dv;
    glProgramUniformMatrix3x4dv = pAPI->glProgramUniformMatrix3x4dv;
    glProgramUniformMatrix4x3dv = pAPI->glProgramUniformMatrix4x3dv;
    glValidateProgramPipeline = pAPI->glValidateProgramPipeline;
    glGetProgramPipelineInfoLog = pAPI->glGetProgramPipelineInfoLog;
    glVertexAttribL1d = pAPI->glVertexAttribL1d;
    glVertexAttribL2d = pAPI->glVertexAttribL2d;
    glVertexAttribL3d = pAPI->glVertexAttribL3d;
    glVertexAttribL4d = pAPI->glVertexAttribL4d;
    glVertexAttribL1dv = pAPI->glVertexAttribL1dv;
    glVertexAttribL2dv = pAPI->glVertexAttribL2dv;
    glVertexAttribL3dv = pAPI->glVertexAttribL3dv;
    glVertexAttribL4dv = pAPI->glVertexAttribL4dv;
    glVertexAttribLPointer = pAPI->glVertexAttribLPointer;
    glGetVertexAttribLdv = pAPI->glGetVertexAttribLdv;
    glViewportArrayv = pAPI->glViewportArrayv;
    glViewportIndexedf = pAPI->glViewportIndexedf;
    glViewportIndexedfv = pAPI->glViewportIndexedfv;
    glScissorArrayv = pAPI->glScissorArrayv;
    glScissorIndexed = pAPI->glScissorIndexed;
    glScissorIndexedv = pAPI->glScissorIndexedv;
    glDepthRangeArrayv = pAPI->glDepthRangeArrayv;
    glDepthRangeIndexed = pAPI->glDepthRangeIndexed;
    glGetFloati_v = pAPI->glGetFloati_v;
    glGetDoublei_v = pAPI->glGetDoublei_v;
    glDrawArraysInstancedBaseInstance = pAPI->glDrawArraysInstancedBaseInstance;
    glDrawElementsInstancedBaseInstance = pAPI->glDrawElementsInstancedBaseInstance;
    glDrawElementsInstancedBaseVertexBaseInstance = pAPI->glDrawElementsInstancedBaseVertexBaseInstance;
    glGetInternalformativ = pAPI->glGetInternalformativ;
    glGetActiveAtomicCounterBufferiv = pAPI->glGetActiveAtomicCounterBufferiv;
    glBindImageTexture = pAPI->glBindImageTexture;
    glMemoryBarrier = pAPI->glMemoryBarrier;
    glTexStorage1D = pAPI->glTexStorage1D;
    glTexStorage2D = pAPI->glTexStorage2D;
    glTexStorage3D = pAPI->glTexStorage3D;
    glDrawTransformFeedbackInstanced = pAPI->glDrawTransformFeedbackInstanced;
    glDrawTransformFeedbackStreamInstanced = pAPI->glDrawTransformFeedbackStreamInstanced;
    glClearBufferData = pAPI->glClearBufferData;
    glClearBufferSubData = pAPI->glClearBufferSubData;
    glDispatchCompute = pAPI->glDispatchCompute;
    glDispatchComputeIndirect = pAPI->glDispatchComputeIndirect;
    glCopyImageSubData = pAPI->glCopyImageSubData;
    glFramebufferParameteri = pAPI->glFramebufferParameteri;
    glGetFramebufferParameteriv = pAPI->glGetFramebufferParameteriv;
    glGetInternalformati64v = pAPI->glGetInternalformati64v;
    glInvalidateTexSubImage = pAPI->glInvalidateTexSubImage;
    glInvalidateTexImage = pAPI->glInvalidateTexImage;
    glInvalidateBufferSubData = pAPI->glInvalidateBufferSubData;
    glInvalidateBufferData = pAPI->glInvalidateBufferData;
    glInvalidateFramebuffer = pAPI->glInvalidateFramebuffer;
    glInvalidateSubFramebuffer = pAPI->glInvalidateSubFramebuffer;
    glMultiDrawArraysIndirect = pAPI->glMultiDrawArraysIndirect;
    glMultiDrawElementsIndirect = pAPI->glMultiDrawElementsIndirect;
    glGetProgramInterfaceiv = pAPI->glGetProgramInterfaceiv;
    glGetProgramResourceIndex = pAPI->glGetProgramResourceIndex;
    glGetProgramResourceName = pAPI->glGetProgramResourceName;
    glGetProgramResourceiv = pAPI->glGetProgramResourceiv;
    glGetProgramResourceLocation = pAPI->glGetProgramResourceLocation;
    glGetProgramResourceLocationIndex = pAPI->glGetProgramResourceLocationIndex;
    glShaderStorageBlockBinding = pAPI->glShaderStorageBlockBinding;
    glTexBufferRange = pAPI->glTexBufferRange;
    glTexStorage2DMultisample = pAPI->glTexStorage2DMultisample;
    glTexStorage3DMultisample = pAPI->glTexStorage3DMultisample;
    glTextureView = pAPI->glTextureView;
    glBindVertexBuffer = pAPI->glBindVertexBuffer;
    glVertexAttribFormat = pAPI->glVertexAttribFormat;
    glVertexAttribIFormat = pAPI->glVertexAttribIFormat;
    glVertexAttribLFormat = pAPI->glVertexAttribLFormat;
    glVertexAttribBinding = pAPI->glVertexAttribBinding;
    glVertexBindingDivisor = pAPI->glVertexBindingDivisor;
    glDebugMessageControl = pAPI->glDebugMessageControl;
    glDebugMessageInsert = pAPI->glDebugMessageInsert;
    glDebugMessageCallback = pAPI->glDebugMessageCallback;
    glGetDebugMessageLog = pAPI->glGetDebugMessageLog;
    glPushDebugGroup = pAPI->glPushDebugGroup;
    glPopDebugGroup = pAPI->glPopDebugGroup;
    glObjectLabel = pAPI->glObjectLabel;
    glGetObjectLabel = pAPI->glGetObjectLabel;
    glObjectPtrLabel = pAPI->glObjectPtrLabel;
    glGetObjectPtrLabel = pAPI->glGetObjectPtrLabel;
    glBufferStorage = pAPI->glBufferStorage;
    glClearTexImage = pAPI->glClearTexImage;
    glClearTexSubImage = pAPI->glClearTexSubImage;
    glBindBuffersBase = pAPI->glBindBuffersBase;
    glBindBuffersRange = pAPI->glBindBuffersRange;
    glBindTextures = pAPI->glBindTextures;
    glBindSamplers = pAPI->glBindSamplers;
    glBindImageTextures = pAPI->glBindImageTextures;
    glBindVertexBuffers = pAPI->glBindVertexBuffers;
    glClipControl = pAPI->glClipControl;
    glCreateTransformFeedbacks = pAPI->glCreateTransformFeedbacks;
    glTransformFeedbackBufferBase = pAPI->glTransformFeedbackBufferBase;
    glTransformFeedbackBufferRange = pAPI->glTransformFeedbackBufferRange;
    glGetTransformFeedbackiv = pAPI->glGetTransformFeedbackiv;
    glGetTransformFeedbacki_v = pAPI->glGetTransformFeedbacki_v;
    glGetTransformFeedbacki64_v = pAPI->glGetTransformFeedbacki64_v;
    glCreateBuffers = pAPI->glCreateBuffers;
    glNamedBufferStorage = pAPI->glNamedBufferStorage;
    glNamedBufferData = pAPI->glNamedBufferData;
    glNamedBufferSubData = pAPI->glNamedBufferSubData;
    glCopyNamedBufferSubData = pAPI->glCopyNamedBufferSubData;
    glClearNamedBufferData = pAPI->glClearNamedBufferData;
    glClearNamedBufferSubData = pAPI->glClearNamedBufferSubData;
    glMapNamedBuffer = pAPI->glMapNamedBuffer;
    glMapNamedBufferRange = pAPI->glMapNamedBufferRange;
    glUnmapNamedBuffer = pAPI->glUnmapNamedBuffer;
    glFlushMappedNamedBufferRange = pAPI->glFlushMappedNamedBufferRange;
    glGetNamedBufferParameteriv = pAPI->glGetNamedBufferParameteriv;
    glGetNamedBufferParameteri64v = pAPI->glGetNamedBufferParameteri64v;
    glGetNamedBufferPointerv = pAPI->glGetNamedBufferPointerv;
    glGetNamedBufferSubData = pAPI->glGetNamedBufferSubData;
    glCreateFramebuffers = pAPI->glCreateFramebuffers;
    glNamedFramebufferRenderbuffer = pAPI->glNamedFramebufferRenderbuffer;
    glNamedFramebufferParameteri = pAPI->glNamedFramebufferParameteri;
    glNamedFramebufferTexture = pAPI->glNamedFramebufferTexture;
    glNamedFramebufferTextureLayer = pAPI->glNamedFramebufferTextureLayer;
    glNamedFramebufferDrawBuffer = pAPI->glNamedFramebufferDrawBuffer;
    glNamedFramebufferDrawBuffers = pAPI->glNamedFramebufferDrawBuffers;
    glNamedFramebufferReadBuffer = pAPI->glNamedFramebufferReadBuffer;
    glInvalidateNamedFramebufferData = pAPI->glInvalidateNamedFramebufferData;
    glInvalidateNamedFramebufferSubData = pAPI->glInvalidateNamedFramebufferSubData;
    glClearNamedFramebufferiv = pAPI->glClearNamedFramebufferiv;
    glClearNamedFramebufferuiv = pAPI->glClearNamedFramebufferuiv;
    glClearNamedFramebufferfv = pAPI->glClearNamedFramebufferfv;
    glClearNamedFramebufferfi = pAPI->glClearNamedFramebufferfi;
    glBlitNamedFramebuffer = pAPI->glBlitNamedFramebuffer;
    glCheckNamedFramebufferStatus = pAPI->glCheckNamedFramebufferStatus;
    glGetNamedFramebufferParameteriv = pAPI->glGetNamedFramebufferParameteriv;
    glGetNamedFramebufferAttachmentParameteriv = pAPI->glGetNamedFramebufferAttachmentParameteriv;
    glCreateRenderbuffers = pAPI->glCreateRenderbuffers;
    glNamedRenderbufferStorage = pAPI->glNamedRenderbufferStorage;
    glNamedRenderbufferStorageMultisample = pAPI->glNamedRenderbufferStorageMultisample;
    glGetNamedRenderbufferParameteriv = pAPI->glGetNamedRenderbufferParameteriv;
    glCreateTextures = pAPI->glCreateTextures;
    glTextureBuffer = pAPI->glTextureBuffer;
    glTextureBufferRange = pAPI->glTextureBufferRange;
    glTextureStorage1D = pAPI->glTextureStorage1D;
    glTextureStorage2D = pAPI->glTextureStorage2D;
    glTextureStorage3D = pAPI->glTextureStorage3D;
    glTextureStorage2DMultisample = pAPI->glTextureStorage2DMultisample;
    glTextureStorage3DMultisample = pAPI->glTextureStorage3DMultisample;
    glTextureSubImage1D = pAPI->glTextureSubImage1D;
    glTextureSubImage2D = pAPI->glTextureSubImage2D;
    glTextureSubImage3D = pAPI->glTextureSubImage3D;
    glCompressedTextureSubImage1D = pAPI->glCompressedTextureSubImage1D;
    glCompressedTextureSubImage2D = pAPI->glCompressedTextureSubImage2D;
    glCompressedTextureSubImage3D = pAPI->glCompressedTextureSubImage3D;
    glCopyTextureSubImage1D = pAPI->glCopyTextureSubImage1D;
    glCopyTextureSubImage2D = pAPI->glCopyTextureSubImage2D;
    glCopyTextureSubImage3D = pAPI->glCopyTextureSubImage3D;
    glTextureParameterf = pAPI->glTextureParameterf;
    glTextureParameterfv = pAPI->glTextureParameterfv;
    glTextureParameteri = pAPI->glTextureParameteri;
    glTextureParameterIiv = pAPI->glTextureParameterIiv;
    glTextureParameterIuiv = pAPI->glTextureParameterIuiv;
    glTextureParameteriv = pAPI->glTextureParameteriv;
    glGenerateTextureMipmap = pAPI->glGenerateTextureMipmap;
    glBindTextureUnit = pAPI->glBindTextureUnit;
    glGetTextureImage = pAPI->glGetTextureImage;
    glGetCompressedTextureImage = pAPI->glGetCompressedTextureImage;
    glGetTextureLevelParameterfv = pAPI->glGetTextureLevelParameterfv;
    glGetTextureLevelParameteriv = pAPI->glGetTextureLevelParameteriv;
    glGetTextureParameterfv = pAPI->glGetTextureParameterfv;
    glGetTextureParameterIiv = pAPI->glGetTextureParameterIiv;
    glGetTextureParameterIuiv = pAPI->glGetTextureParameterIuiv;
    glGetTextureParameteriv = pAPI->glGetTextureParameteriv;
    glCreateVertexArrays = pAPI->glCreateVertexArrays;
    glDisableVertexArrayAttrib = pAPI->glDisableVertexArrayAttrib;
    glEnableVertexArrayAttrib = pAPI->glEnableVertexArrayAttrib;
    glVertexArrayElementBuffer = pAPI->glVertexArrayElementBuffer;
    glVertexArrayVertexBuffer = pAPI->glVertexArrayVertexBuffer;
    glVertexArrayVertexBuffers = pAPI->glVertexArrayVertexBuffers;
    glVertexArrayAttribBinding = pAPI->glVertexArrayAttribBinding;
    glVertexArrayAttribFormat = pAPI->glVertexArrayAttribFormat;
    glVertexArrayAttribIFormat = pAPI->glVertexArrayAttribIFormat;
    glVertexArrayAttribLFormat = pAPI->glVertexArrayAttribLFormat;
    glVertexArrayBindingDivisor = pAPI->glVertexArrayBindingDivisor;
    glGetVertexArrayiv = pAPI->glGetVertexArrayiv;
    glGetVertexArrayIndexediv = pAPI->glGetVertexArrayIndexediv;
    glGetVertexArrayIndexed64iv = pAPI->glGetVertexArrayIndexed64iv;
    glCreateSamplers = pAPI->glCreateSamplers;
    glCreateProgramPipelines = pAPI->glCreateProgramPipelines;
    glCreateQueries = pAPI->glCreateQueries;
    glGetQueryBufferObjecti64v = pAPI->glGetQueryBufferObjecti64v;
    glGetQueryBufferObjectiv = pAPI->glGetQueryBufferObjectiv;
    glGetQueryBufferObjectui64v = pAPI->glGetQueryBufferObjectui64v;
    glGetQueryBufferObjectuiv = pAPI->glGetQueryBufferObjectuiv;
    glMemoryBarrierByRegion = pAPI->glMemoryBarrierByRegion;
    glGetTextureSubImage = pAPI->glGetTextureSubImage;
    glGetCompressedTextureSubImage = pAPI->glGetCompressedTextureSubImage;
    glGetGraphicsResetStatus = pAPI->glGetGraphicsResetStatus;
    glGetnCompressedTexImage = pAPI->glGetnCompressedTexImage;
    glGetnTexImage = pAPI->glGetnTexImage;
    glGetnUniformdv = pAPI->glGetnUniformdv;
    glGetnUniformfv = pAPI->glGetnUniformfv;
    glGetnUniformiv = pAPI->glGetnUniformiv;
    glGetnUniformuiv = pAPI->glGetnUniformuiv;
    glReadnPixels = pAPI->glReadnPixels;
    glGetnMapdv = pAPI->glGetnMapdv;
    glGetnMapfv = pAPI->glGetnMapfv;
    glGetnMapiv = pAPI->glGetnMapiv;
    glGetnPixelMapfv = pAPI->glGetnPixelMapfv;
    glGetnPixelMapuiv = pAPI->glGetnPixelMapuiv;
    glGetnPixelMapusv = pAPI->glGetnPixelMapusv;
    glGetnPolygonStipple = pAPI->glGetnPolygonStipple;
    glGetnColorTable = pAPI->glGetnColorTable;
    glGetnConvolutionFilter = pAPI->glGetnConvolutionFilter;
    glGetnSeparableFilter = pAPI->glGetnSeparableFilter;
    glGetnHistogram = pAPI->glGetnHistogram;
    glGetnMinmax = pAPI->glGetnMinmax;
    glTextureBarrier = pAPI->glTextureBarrier;
    glSpecializeShader = pAPI->glSpecializeShader;
    glMultiDrawArraysIndirectCount = pAPI->glMultiDrawArraysIndirectCount;
    glMultiDrawElementsIndirectCount = pAPI->glMultiDrawElementsIndirectCount;
    glPolygonOffsetClamp = pAPI->glPolygonOffsetClamp;
    glTbufferMask3DFX = pAPI->glTbufferMask3DFX;
    glDebugMessageEnableAMD = pAPI->glDebugMessageEnableAMD;
    glDebugMessageInsertAMD = pAPI->glDebugMessageInsertAMD;
    glDebugMessageCallbackAMD = pAPI->glDebugMessageCallbackAMD;
    glGetDebugMessageLogAMD = pAPI->glGetDebugMessageLogAMD;
    glBlendFuncIndexedAMD = pAPI->glBlendFuncIndexedAMD;
    glBlendFuncSeparateIndexedAMD = pAPI->glBlendFuncSeparateIndexedAMD;
    glBlendEquationIndexedAMD = pAPI->glBlendEquationIndexedAMD;
    glBlendEquationSeparateIndexedAMD = pAPI->glBlendEquationSeparateIndexedAMD;
    glRenderbufferStorageMultisampleAdvancedAMD = pAPI->glRenderbufferStorageMultisampleAdvancedAMD;
    glNamedRenderbufferStorageMultisampleAdvancedAMD = pAPI->glNamedRenderbufferStorageMultisampleAdvancedAMD;
    glFramebufferSamplePositionsfvAMD = pAPI->glFramebufferSamplePositionsfvAMD;
    glNamedFramebufferSamplePositionsfvAMD = pAPI->glNamedFramebufferSamplePositionsfvAMD;
    glGetFramebufferParameterfvAMD = pAPI->glGetFramebufferParameterfvAMD;
    glGetNamedFramebufferParameterfvAMD = pAPI->glGetNamedFramebufferParameterfvAMD;
    glUniform1i64NV = pAPI->glUniform1i64NV;
    glUniform2i64NV = pAPI->glUniform2i64NV;
    glUniform3i64NV = pAPI->glUniform3i64NV;
    glUniform4i64NV = pAPI->glUniform4i64NV;
    glUniform1i64vNV = pAPI->glUniform1i64vNV;
    glUniform2i64vNV = pAPI->glUniform2i64vNV;
    glUniform3i64vNV = pAPI->glUniform3i64vNV;
    glUniform4i64vNV = pAPI->glUniform4i64vNV;
    glUniform1ui64NV = pAPI->glUniform1ui64NV;
    glUniform2ui64NV = pAPI->glUniform2ui64NV;
    glUniform3ui64NV = pAPI->glUniform3ui64NV;
    glUniform4ui64NV = pAPI->glUniform4ui64NV;
    glUniform1ui64vNV = pAPI->glUniform1ui64vNV;
    glUniform2ui64vNV = pAPI->glUniform2ui64vNV;
    glUniform3ui64vNV = pAPI->glUniform3ui64vNV;
    glUniform4ui64vNV = pAPI->glUniform4ui64vNV;
    glGetUniformi64vNV = pAPI->glGetUniformi64vNV;
    glGetUniformui64vNV = pAPI->glGetUniformui64vNV;
    glProgramUniform1i64NV = pAPI->glProgramUniform1i64NV;
    glProgramUniform2i64NV = pAPI->glProgramUniform2i64NV;
    glProgramUniform3i64NV = pAPI->glProgramUniform3i64NV;
    glProgramUniform4i64NV = pAPI->glProgramUniform4i64NV;
    glProgramUniform1i64vNV = pAPI->glProgramUniform1i64vNV;
    glProgramUniform2i64vNV = pAPI->glProgramUniform2i64vNV;
    glProgramUniform3i64vNV = pAPI->glProgramUniform3i64vNV;
    glProgramUniform4i64vNV = pAPI->glProgramUniform4i64vNV;
    glProgramUniform1ui64NV = pAPI->glProgramUniform1ui64NV;
    glProgramUniform2ui64NV = pAPI->glProgramUniform2ui64NV;
    glProgramUniform3ui64NV = pAPI->glProgramUniform3ui64NV;
    glProgramUniform4ui64NV = pAPI->glProgramUniform4ui64NV;
    glProgramUniform1ui64vNV = pAPI->glProgramUniform1ui64vNV;
    glProgramUniform2ui64vNV = pAPI->glProgramUniform2ui64vNV;
    glProgramUniform3ui64vNV = pAPI->glProgramUniform3ui64vNV;
    glProgramUniform4ui64vNV = pAPI->glProgramUniform4ui64vNV;
    glVertexAttribParameteriAMD = pAPI->glVertexAttribParameteriAMD;
    glMultiDrawArraysIndirectAMD = pAPI->glMultiDrawArraysIndirectAMD;
    glMultiDrawElementsIndirectAMD = pAPI->glMultiDrawElementsIndirectAMD;
    glGenNamesAMD = pAPI->glGenNamesAMD;
    glDeleteNamesAMD = pAPI->glDeleteNamesAMD;
    glIsNameAMD = pAPI->glIsNameAMD;
    glQueryObjectParameteruiAMD = pAPI->glQueryObjectParameteruiAMD;
    glGetPerfMonitorGroupsAMD = pAPI->glGetPerfMonitorGroupsAMD;
    glGetPerfMonitorCountersAMD = pAPI->glGetPerfMonitorCountersAMD;
    glGetPerfMonitorGroupStringAMD = pAPI->glGetPerfMonitorGroupStringAMD;
    glGetPerfMonitorCounterStringAMD = pAPI->glGetPerfMonitorCounterStringAMD;
    glGetPerfMonitorCounterInfoAMD = pAPI->glGetPerfMonitorCounterInfoAMD;
    glGenPerfMonitorsAMD = pAPI->glGenPerfMonitorsAMD;
    glDeletePerfMonitorsAMD = pAPI->glDeletePerfMonitorsAMD;
    glSelectPerfMonitorCountersAMD = pAPI->glSelectPerfMonitorCountersAMD;
    glBeginPerfMonitorAMD = pAPI->glBeginPerfMonitorAMD;
    glEndPerfMonitorAMD = pAPI->glEndPerfMonitorAMD;
    glGetPerfMonitorCounterDataAMD = pAPI->glGetPerfMonitorCounterDataAMD;
    glSetMultisamplefvAMD = pAPI->glSetMultisamplefvAMD;
    glTexStorageSparseAMD = pAPI->glTexStorageSparseAMD;
    glTextureStorageSparseAMD = pAPI->glTextureStorageSparseAMD;
    glStencilOpValueAMD = pAPI->glStencilOpValueAMD;
    glTessellationFactorAMD = pAPI->glTessellationFactorAMD;
    glTessellationModeAMD = pAPI->glTessellationModeAMD;
    glElementPointerAPPLE = pAPI->glElementPointerAPPLE;
    glDrawElementArrayAPPLE = pAPI->glDrawElementArrayAPPLE;
    glDrawRangeElementArrayAPPLE = pAPI->glDrawRangeElementArrayAPPLE;
    glMultiDrawElementArrayAPPLE = pAPI->glMultiDrawElementArrayAPPLE;
    glMultiDrawRangeElementArrayAPPLE = pAPI->glMultiDrawRangeElementArrayAPPLE;
    glGenFencesAPPLE = pAPI->glGenFencesAPPLE;
    glDeleteFencesAPPLE = pAPI->glDeleteFencesAPPLE;
    glSetFenceAPPLE = pAPI->glSetFenceAPPLE;
    glIsFenceAPPLE = pAPI->glIsFenceAPPLE;
    glTestFenceAPPLE = pAPI->glTestFenceAPPLE;
    glFinishFenceAPPLE = pAPI->glFinishFenceAPPLE;
    glTestObjectAPPLE = pAPI->glTestObjectAPPLE;
    glFinishObjectAPPLE = pAPI->glFinishObjectAPPLE;
    glBufferParameteriAPPLE = pAPI->glBufferParameteriAPPLE;
    glFlushMappedBufferRangeAPPLE = pAPI->glFlushMappedBufferRangeAPPLE;
    glObjectPurgeableAPPLE = pAPI->glObjectPurgeableAPPLE;
    glObjectUnpurgeableAPPLE = pAPI->glObjectUnpurgeableAPPLE;
    glGetObjectParameterivAPPLE = pAPI->glGetObjectParameterivAPPLE;
    glTextureRangeAPPLE = pAPI->glTextureRangeAPPLE;
    glGetTexParameterPointervAPPLE = pAPI->glGetTexParameterPointervAPPLE;
    glBindVertexArrayAPPLE = pAPI->glBindVertexArrayAPPLE;
    glDeleteVertexArraysAPPLE = pAPI->glDeleteVertexArraysAPPLE;
    glGenVertexArraysAPPLE = pAPI->glGenVertexArraysAPPLE;
    glIsVertexArrayAPPLE = pAPI->glIsVertexArrayAPPLE;
    glVertexArrayRangeAPPLE = pAPI->glVertexArrayRangeAPPLE;
    glFlushVertexArrayRangeAPPLE = pAPI->glFlushVertexArrayRangeAPPLE;
    glVertexArrayParameteriAPPLE = pAPI->glVertexArrayParameteriAPPLE;
    glEnableVertexAttribAPPLE = pAPI->glEnableVertexAttribAPPLE;
    glDisableVertexAttribAPPLE = pAPI->glDisableVertexAttribAPPLE;
    glIsVertexAttribEnabledAPPLE = pAPI->glIsVertexAttribEnabledAPPLE;
    glMapVertexAttrib1dAPPLE = pAPI->glMapVertexAttrib1dAPPLE;
    glMapVertexAttrib1fAPPLE = pAPI->glMapVertexAttrib1fAPPLE;
    glMapVertexAttrib2dAPPLE = pAPI->glMapVertexAttrib2dAPPLE;
    glMapVertexAttrib2fAPPLE = pAPI->glMapVertexAttrib2fAPPLE;
    glPrimitiveBoundingBoxARB = pAPI->glPrimitiveBoundingBoxARB;
    glGetTextureHandleARB = pAPI->glGetTextureHandleARB;
    glGetTextureSamplerHandleARB = pAPI->glGetTextureSamplerHandleARB;
    glMakeTextureHandleResidentARB = pAPI->glMakeTextureHandleResidentARB;
    glMakeTextureHandleNonResidentARB = pAPI->glMakeTextureHandleNonResidentARB;
    glGetImageHandleARB = pAPI->glGetImageHandleARB;
    glMakeImageHandleResidentARB = pAPI->glMakeImageHandleResidentARB;
    glMakeImageHandleNonResidentARB = pAPI->glMakeImageHandleNonResidentARB;
    glUniformHandleui64ARB = pAPI->glUniformHandleui64ARB;
    glUniformHandleui64vARB = pAPI->glUniformHandleui64vARB;
    glProgramUniformHandleui64ARB = pAPI->glProgramUniformHandleui64ARB;
    glProgramUniformHandleui64vARB = pAPI->glProgramUniformHandleui64vARB;
    glIsTextureHandleResidentARB = pAPI->glIsTextureHandleResidentARB;
    glIsImageHandleResidentARB = pAPI->glIsImageHandleResidentARB;
    glVertexAttribL1ui64ARB = pAPI->glVertexAttribL1ui64ARB;
    glVertexAttribL1ui64vARB = pAPI->glVertexAttribL1ui64vARB;
    glGetVertexAttribLui64vARB = pAPI->glGetVertexAttribLui64vARB;
    glCreateSyncFromCLeventARB = pAPI->glCreateSyncFromCLeventARB;
    glClampColorARB = pAPI->glClampColorARB;
    glDispatchComputeGroupSizeARB = pAPI->glDispatchComputeGroupSizeARB;
    glDebugMessageControlARB = pAPI->glDebugMessageControlARB;
    glDebugMessageInsertARB = pAPI->glDebugMessageInsertARB;
    glDebugMessageCallbackARB = pAPI->glDebugMessageCallbackARB;
    glGetDebugMessageLogARB = pAPI->glGetDebugMessageLogARB;
    glDrawBuffersARB = pAPI->glDrawBuffersARB;
    glBlendEquationiARB = pAPI->glBlendEquationiARB;
    glBlendEquationSeparateiARB = pAPI->glBlendEquationSeparateiARB;
    glBlendFunciARB = pAPI->glBlendFunciARB;
    glBlendFuncSeparateiARB = pAPI->glBlendFuncSeparateiARB;
    glDrawArraysInstancedARB = pAPI->glDrawArraysInstancedARB;
    glDrawElementsInstancedARB = pAPI->glDrawElementsInstancedARB;
    glProgramStringARB = pAPI->glProgramStringARB;
    glBindProgramARB = pAPI->glBindProgramARB;
    glDeleteProgramsARB = pAPI->glDeleteProgramsARB;
    glGenProgramsARB = pAPI->glGenProgramsARB;
    glProgramEnvParameter4dARB = pAPI->glProgramEnvParameter4dARB;
    glProgramEnvParameter4dvARB = pAPI->glProgramEnvParameter4dvARB;
    glProgramEnvParameter4fARB = pAPI->glProgramEnvParameter4fARB;
    glProgramEnvParameter4fvARB = pAPI->glProgramEnvParameter4fvARB;
    glProgramLocalParameter4dARB = pAPI->glProgramLocalParameter4dARB;
    glProgramLocalParameter4dvARB = pAPI->glProgramLocalParameter4dvARB;
    glProgramLocalParameter4fARB = pAPI->glProgramLocalParameter4fARB;
    glProgramLocalParameter4fvARB = pAPI->glProgramLocalParameter4fvARB;
    glGetProgramEnvParameterdvARB = pAPI->glGetProgramEnvParameterdvARB;
    glGetProgramEnvParameterfvARB = pAPI->glGetProgramEnvParameterfvARB;
    glGetProgramLocalParameterdvARB = pAPI->glGetProgramLocalParameterdvARB;
    glGetProgramLocalParameterfvARB = pAPI->glGetProgramLocalParameterfvARB;
    glGetProgramivARB = pAPI->glGetProgramivARB;
    glGetProgramStringARB = pAPI->glGetProgramStringARB;
    glIsProgramARB = pAPI->glIsProgramARB;
    glProgramParameteriARB = pAPI->glProgramParameteriARB;
    glFramebufferTextureARB = pAPI->glFramebufferTextureARB;
    glFramebufferTextureLayerARB = pAPI->glFramebufferTextureLayerARB;
    glFramebufferTextureFaceARB = pAPI->glFramebufferTextureFaceARB;
    glSpecializeShaderARB = pAPI->glSpecializeShaderARB;
    glUniform1i64ARB = pAPI->glUniform1i64ARB;
    glUniform2i64ARB = pAPI->glUniform2i64ARB;
    glUniform3i64ARB = pAPI->glUniform3i64ARB;
    glUniform4i64ARB = pAPI->glUniform4i64ARB;
    glUniform1i64vARB = pAPI->glUniform1i64vARB;
    glUniform2i64vARB = pAPI->glUniform2i64vARB;
    glUniform3i64vARB = pAPI->glUniform3i64vARB;
    glUniform4i64vARB = pAPI->glUniform4i64vARB;
    glUniform1ui64ARB = pAPI->glUniform1ui64ARB;
    glUniform2ui64ARB = pAPI->glUniform2ui64ARB;
    glUniform3ui64ARB = pAPI->glUniform3ui64ARB;
    glUniform4ui64ARB = pAPI->glUniform4ui64ARB;
    glUniform1ui64vARB = pAPI->glUniform1ui64vARB;
    glUniform2ui64vARB = pAPI->glUniform2ui64vARB;
    glUniform3ui64vARB = pAPI->glUniform3ui64vARB;
    glUniform4ui64vARB = pAPI->glUniform4ui64vARB;
    glGetUniformi64vARB = pAPI->glGetUniformi64vARB;
    glGetUniformui64vARB = pAPI->glGetUniformui64vARB;
    glGetnUniformi64vARB = pAPI->glGetnUniformi64vARB;
    glGetnUniformui64vARB = pAPI->glGetnUniformui64vARB;
    glProgramUniform1i64ARB = pAPI->glProgramUniform1i64ARB;
    glProgramUniform2i64ARB = pAPI->glProgramUniform2i64ARB;
    glProgramUniform3i64ARB = pAPI->glProgramUniform3i64ARB;
    glProgramUniform4i64ARB = pAPI->glProgramUniform4i64ARB;
    glProgramUniform1i64vARB = pAPI->glProgramUniform1i64vARB;
    glProgramUniform2i64vARB = pAPI->glProgramUniform2i64vARB;
    glProgramUniform3i64vARB = pAPI->glProgramUniform3i64vARB;
    glProgramUniform4i64vARB = pAPI->glProgramUniform4i64vARB;
    glProgramUniform1ui64ARB = pAPI->glProgramUniform1ui64ARB;
    glProgramUniform2ui64ARB = pAPI->glProgramUniform2ui64ARB;
    glProgramUniform3ui64ARB = pAPI->glProgramUniform3ui64ARB;
    glProgramUniform4ui64ARB = pAPI->glProgramUniform4ui64ARB;
    glProgramUniform1ui64vARB = pAPI->glProgramUniform1ui64vARB;
    glProgramUniform2ui64vARB = pAPI->glProgramUniform2ui64vARB;
    glProgramUniform3ui64vARB = pAPI->glProgramUniform3ui64vARB;
    glProgramUniform4ui64vARB = pAPI->glProgramUniform4ui64vARB;
    glColorTable = pAPI->glColorTable;
    glColorTableParameterfv = pAPI->glColorTableParameterfv;
    glColorTableParameteriv = pAPI->glColorTableParameteriv;
    glCopyColorTable = pAPI->glCopyColorTable;
    glGetColorTable = pAPI->glGetColorTable;
    glGetColorTableParameterfv = pAPI->glGetColorTableParameterfv;
    glGetColorTableParameteriv = pAPI->glGetColorTableParameteriv;
    glColorSubTable = pAPI->glColorSubTable;
    glCopyColorSubTable = pAPI->glCopyColorSubTable;
    glConvolutionFilter1D = pAPI->glConvolutionFilter1D;
    glConvolutionFilter2D = pAPI->glConvolutionFilter2D;
    glConvolutionParameterf = pAPI->glConvolutionParameterf;
    glConvolutionParameterfv = pAPI->glConvolutionParameterfv;
    glConvolutionParameteri = pAPI->glConvolutionParameteri;
    glConvolutionParameteriv = pAPI->glConvolutionParameteriv;
    glCopyConvolutionFilter1D = pAPI->glCopyConvolutionFilter1D;
    glCopyConvolutionFilter2D = pAPI->glCopyConvolutionFilter2D;
    glGetConvolutionFilter = pAPI->glGetConvolutionFilter;
    glGetConvolutionParameterfv = pAPI->glGetConvolutionParameterfv;
    glGetConvolutionParameteriv = pAPI->glGetConvolutionParameteriv;
    glGetSeparableFilter = pAPI->glGetSeparableFilter;
    glSeparableFilter2D = pAPI->glSeparableFilter2D;
    glGetHistogram = pAPI->glGetHistogram;
    glGetHistogramParameterfv = pAPI->glGetHistogramParameterfv;
    glGetHistogramParameteriv = pAPI->glGetHistogramParameteriv;
    glGetMinmax = pAPI->glGetMinmax;
    glGetMinmaxParameterfv = pAPI->glGetMinmaxParameterfv;
    glGetMinmaxParameteriv = pAPI->glGetMinmaxParameteriv;
    glHistogram = pAPI->glHistogram;
    glMinmax = pAPI->glMinmax;
    glResetHistogram = pAPI->glResetHistogram;
    glResetMinmax = pAPI->glResetMinmax;
    glMultiDrawArraysIndirectCountARB = pAPI->glMultiDrawArraysIndirectCountARB;
    glMultiDrawElementsIndirectCountARB = pAPI->glMultiDrawElementsIndirectCountARB;
    glVertexAttribDivisorARB = pAPI->glVertexAttribDivisorARB;
    glCurrentPaletteMatrixARB = pAPI->glCurrentPaletteMatrixARB;
    glMatrixIndexubvARB = pAPI->glMatrixIndexubvARB;
    glMatrixIndexusvARB = pAPI->glMatrixIndexusvARB;
    glMatrixIndexuivARB = pAPI->glMatrixIndexuivARB;
    glMatrixIndexPointerARB = pAPI->glMatrixIndexPointerARB;
    glSampleCoverageARB = pAPI->glSampleCoverageARB;
    glActiveTextureARB = pAPI->glActiveTextureARB;
    glClientActiveTextureARB = pAPI->glClientActiveTextureARB;
    glMultiTexCoord1dARB = pAPI->glMultiTexCoord1dARB;
    glMultiTexCoord1dvARB = pAPI->glMultiTexCoord1dvARB;
    glMultiTexCoord1fARB = pAPI->glMultiTexCoord1fARB;
    glMultiTexCoord1fvARB = pAPI->glMultiTexCoord1fvARB;
    glMultiTexCoord1iARB = pAPI->glMultiTexCoord1iARB;
    glMultiTexCoord1ivARB = pAPI->glMultiTexCoord1ivARB;
    glMultiTexCoord1sARB = pAPI->glMultiTexCoord1sARB;
    glMultiTexCoord1svARB = pAPI->glMultiTexCoord1svARB;
    glMultiTexCoord2dARB = pAPI->glMultiTexCoord2dARB;
    glMultiTexCoord2dvARB = pAPI->glMultiTexCoord2dvARB;
    glMultiTexCoord2fARB = pAPI->glMultiTexCoord2fARB;
    glMultiTexCoord2fvARB = pAPI->glMultiTexCoord2fvARB;
    glMultiTexCoord2iARB = pAPI->glMultiTexCoord2iARB;
    glMultiTexCoord2ivARB = pAPI->glMultiTexCoord2ivARB;
    glMultiTexCoord2sARB = pAPI->glMultiTexCoord2sARB;
    glMultiTexCoord2svARB = pAPI->glMultiTexCoord2svARB;
    glMultiTexCoord3dARB = pAPI->glMultiTexCoord3dARB;
    glMultiTexCoord3dvARB = pAPI->glMultiTexCoord3dvARB;
    glMultiTexCoord3fARB = pAPI->glMultiTexCoord3fARB;
    glMultiTexCoord3fvARB = pAPI->glMultiTexCoord3fvARB;
    glMultiTexCoord3iARB = pAPI->glMultiTexCoord3iARB;
    glMultiTexCoord3ivARB = pAPI->glMultiTexCoord3ivARB;
    glMultiTexCoord3sARB = pAPI->glMultiTexCoord3sARB;
    glMultiTexCoord3svARB = pAPI->glMultiTexCoord3svARB;
    glMultiTexCoord4dARB = pAPI->glMultiTexCoord4dARB;
    glMultiTexCoord4dvARB = pAPI->glMultiTexCoord4dvARB;
    glMultiTexCoord4fARB = pAPI->glMultiTexCoord4fARB;
    glMultiTexCoord4fvARB = pAPI->glMultiTexCoord4fvARB;
    glMultiTexCoord4iARB = pAPI->glMultiTexCoord4iARB;
    glMultiTexCoord4ivARB = pAPI->glMultiTexCoord4ivARB;
    glMultiTexCoord4sARB = pAPI->glMultiTexCoord4sARB;
    glMultiTexCoord4svARB = pAPI->glMultiTexCoord4svARB;
    glGenQueriesARB = pAPI->glGenQueriesARB;
    glDeleteQueriesARB = pAPI->glDeleteQueriesARB;
    glIsQueryARB = pAPI->glIsQueryARB;
    glBeginQueryARB = pAPI->glBeginQueryARB;
    glEndQueryARB = pAPI->glEndQueryARB;
    glGetQueryivARB = pAPI->glGetQueryivARB;
    glGetQueryObjectivARB = pAPI->glGetQueryObjectivARB;
    glGetQueryObjectuivARB = pAPI->glGetQueryObjectuivARB;
    glMaxShaderCompilerThreadsARB = pAPI->glMaxShaderCompilerThreadsARB;
    glPointParameterfARB = pAPI->glPointParameterfARB;
    glPointParameterfvARB = pAPI->glPointParameterfvARB;
    glGetGraphicsResetStatusARB = pAPI->glGetGraphicsResetStatusARB;
    glGetnTexImageARB = pAPI->glGetnTexImageARB;
    glReadnPixelsARB = pAPI->glReadnPixelsARB;
    glGetnCompressedTexImageARB = pAPI->glGetnCompressedTexImageARB;
    glGetnUniformfvARB = pAPI->glGetnUniformfvARB;
    glGetnUniformivARB = pAPI->glGetnUniformivARB;
    glGetnUniformuivARB = pAPI->glGetnUniformuivARB;
    glGetnUniformdvARB = pAPI->glGetnUniformdvARB;
    glGetnMapdvARB = pAPI->glGetnMapdvARB;
    glGetnMapfvARB = pAPI->glGetnMapfvARB;
    glGetnMapivARB = pAPI->glGetnMapivARB;
    glGetnPixelMapfvARB = pAPI->glGetnPixelMapfvARB;
    glGetnPixelMapuivARB = pAPI->glGetnPixelMapuivARB;
    glGetnPixelMapusvARB = pAPI->glGetnPixelMapusvARB;
    glGetnPolygonStippleARB = pAPI->glGetnPolygonStippleARB;
    glGetnColorTableARB = pAPI->glGetnColorTableARB;
    glGetnConvolutionFilterARB = pAPI->glGetnConvolutionFilterARB;
    glGetnSeparableFilterARB = pAPI->glGetnSeparableFilterARB;
    glGetnHistogramARB = pAPI->glGetnHistogramARB;
    glGetnMinmaxARB = pAPI->glGetnMinmaxARB;
    glFramebufferSampleLocationsfvARB = pAPI->glFramebufferSampleLocationsfvARB;
    glNamedFramebufferSampleLocationsfvARB = pAPI->glNamedFramebufferSampleLocationsfvARB;
    glEvaluateDepthValuesARB = pAPI->glEvaluateDepthValuesARB;
    glMinSampleShadingARB = pAPI->glMinSampleShadingARB;
    glDeleteObjectARB = pAPI->glDeleteObjectARB;
    glGetHandleARB = pAPI->glGetHandleARB;
    glDetachObjectARB = pAPI->glDetachObjectARB;
    glCreateShaderObjectARB = pAPI->glCreateShaderObjectARB;
    glShaderSourceARB = pAPI->glShaderSourceARB;
    glCompileShaderARB = pAPI->glCompileShaderARB;
    glCreateProgramObjectARB = pAPI->glCreateProgramObjectARB;
    glAttachObjectARB = pAPI->glAttachObjectARB;
    glLinkProgramARB = pAPI->glLinkProgramARB;
    glUseProgramObjectARB = pAPI->glUseProgramObjectARB;
    glValidateProgramARB = pAPI->glValidateProgramARB;
    glUniform1fARB = pAPI->glUniform1fARB;
    glUniform2fARB = pAPI->glUniform2fARB;
    glUniform3fARB = pAPI->glUniform3fARB;
    glUniform4fARB = pAPI->glUniform4fARB;
    glUniform1iARB = pAPI->glUniform1iARB;
    glUniform2iARB = pAPI->glUniform2iARB;
    glUniform3iARB = pAPI->glUniform3iARB;
    glUniform4iARB = pAPI->glUniform4iARB;
    glUniform1fvARB = pAPI->glUniform1fvARB;
    glUniform2fvARB = pAPI->glUniform2fvARB;
    glUniform3fvARB = pAPI->glUniform3fvARB;
    glUniform4fvARB = pAPI->glUniform4fvARB;
    glUniform1ivARB = pAPI->glUniform1ivARB;
    glUniform2ivARB = pAPI->glUniform2ivARB;
    glUniform3ivARB = pAPI->glUniform3ivARB;
    glUniform4ivARB = pAPI->glUniform4ivARB;
    glUniformMatrix2fvARB = pAPI->glUniformMatrix2fvARB;
    glUniformMatrix3fvARB = pAPI->glUniformMatrix3fvARB;
    glUniformMatrix4fvARB = pAPI->glUniformMatrix4fvARB;
    glGetObjectParameterfvARB = pAPI->glGetObjectParameterfvARB;
    glGetObjectParameterivARB = pAPI->glGetObjectParameterivARB;
    glGetInfoLogARB = pAPI->glGetInfoLogARB;
    glGetAttachedObjectsARB = pAPI->glGetAttachedObjectsARB;
    glGetUniformLocationARB = pAPI->glGetUniformLocationARB;
    glGetActiveUniformARB = pAPI->glGetActiveUniformARB;
    glGetUniformfvARB = pAPI->glGetUniformfvARB;
    glGetUniformivARB = pAPI->glGetUniformivARB;
    glGetShaderSourceARB = pAPI->glGetShaderSourceARB;
    glNamedStringARB = pAPI->glNamedStringARB;
    glDeleteNamedStringARB = pAPI->glDeleteNamedStringARB;
    glCompileShaderIncludeARB = pAPI->glCompileShaderIncludeARB;
    glIsNamedStringARB = pAPI->glIsNamedStringARB;
    glGetNamedStringARB = pAPI->glGetNamedStringARB;
    glGetNamedStringivARB = pAPI->glGetNamedStringivARB;
    glBufferPageCommitmentARB = pAPI->glBufferPageCommitmentARB;
    glNamedBufferPageCommitmentEXT = pAPI->glNamedBufferPageCommitmentEXT;
    glNamedBufferPageCommitmentARB = pAPI->glNamedBufferPageCommitmentARB;
    glTexPageCommitmentARB = pAPI->glTexPageCommitmentARB;
    glTexBufferARB = pAPI->glTexBufferARB;
    glCompressedTexImage3DARB = pAPI->glCompressedTexImage3DARB;
    glCompressedTexImage2DARB = pAPI->glCompressedTexImage2DARB;
    glCompressedTexImage1DARB = pAPI->glCompressedTexImage1DARB;
    glCompressedTexSubImage3DARB = pAPI->glCompressedTexSubImage3DARB;
    glCompressedTexSubImage2DARB = pAPI->glCompressedTexSubImage2DARB;
    glCompressedTexSubImage1DARB = pAPI->glCompressedTexSubImage1DARB;
    glGetCompressedTexImageARB = pAPI->glGetCompressedTexImageARB;
    glLoadTransposeMatrixfARB = pAPI->glLoadTransposeMatrixfARB;
    glLoadTransposeMatrixdARB = pAPI->glLoadTransposeMatrixdARB;
    glMultTransposeMatrixfARB = pAPI->glMultTransposeMatrixfARB;
    glMultTransposeMatrixdARB = pAPI->glMultTransposeMatrixdARB;
    glWeightbvARB = pAPI->glWeightbvARB;
    glWeightsvARB = pAPI->glWeightsvARB;
    glWeightivARB = pAPI->glWeightivARB;
    glWeightfvARB = pAPI->glWeightfvARB;
    glWeightdvARB = pAPI->glWeightdvARB;
    glWeightubvARB = pAPI->glWeightubvARB;
    glWeightusvARB = pAPI->glWeightusvARB;
    glWeightuivARB = pAPI->glWeightuivARB;
    glWeightPointerARB = pAPI->glWeightPointerARB;
    glVertexBlendARB = pAPI->glVertexBlendARB;
    glBindBufferARB = pAPI->glBindBufferARB;
    glDeleteBuffersARB = pAPI->glDeleteBuffersARB;
    glGenBuffersARB = pAPI->glGenBuffersARB;
    glIsBufferARB = pAPI->glIsBufferARB;
    glBufferDataARB = pAPI->glBufferDataARB;
    glBufferSubDataARB = pAPI->glBufferSubDataARB;
    glGetBufferSubDataARB = pAPI->glGetBufferSubDataARB;
    glMapBufferARB = pAPI->glMapBufferARB;
    glUnmapBufferARB = pAPI->glUnmapBufferARB;
    glGetBufferParameterivARB = pAPI->glGetBufferParameterivARB;
    glGetBufferPointervARB = pAPI->glGetBufferPointervARB;
    glVertexAttrib1dARB = pAPI->glVertexAttrib1dARB;
    glVertexAttrib1dvARB = pAPI->glVertexAttrib1dvARB;
    glVertexAttrib1fARB = pAPI->glVertexAttrib1fARB;
    glVertexAttrib1fvARB = pAPI->glVertexAttrib1fvARB;
    glVertexAttrib1sARB = pAPI->glVertexAttrib1sARB;
    glVertexAttrib1svARB = pAPI->glVertexAttrib1svARB;
    glVertexAttrib2dARB = pAPI->glVertexAttrib2dARB;
    glVertexAttrib2dvARB = pAPI->glVertexAttrib2dvARB;
    glVertexAttrib2fARB = pAPI->glVertexAttrib2fARB;
    glVertexAttrib2fvARB = pAPI->glVertexAttrib2fvARB;
    glVertexAttrib2sARB = pAPI->glVertexAttrib2sARB;
    glVertexAttrib2svARB = pAPI->glVertexAttrib2svARB;
    glVertexAttrib3dARB = pAPI->glVertexAttrib3dARB;
    glVertexAttrib3dvARB = pAPI->glVertexAttrib3dvARB;
    glVertexAttrib3fARB = pAPI->glVertexAttrib3fARB;
    glVertexAttrib3fvARB = pAPI->glVertexAttrib3fvARB;
    glVertexAttrib3sARB = pAPI->glVertexAttrib3sARB;
    glVertexAttrib3svARB = pAPI->glVertexAttrib3svARB;
    glVertexAttrib4NbvARB = pAPI->glVertexAttrib4NbvARB;
    glVertexAttrib4NivARB = pAPI->glVertexAttrib4NivARB;
    glVertexAttrib4NsvARB = pAPI->glVertexAttrib4NsvARB;
    glVertexAttrib4NubARB = pAPI->glVertexAttrib4NubARB;
    glVertexAttrib4NubvARB = pAPI->glVertexAttrib4NubvARB;
    glVertexAttrib4NuivARB = pAPI->glVertexAttrib4NuivARB;
    glVertexAttrib4NusvARB = pAPI->glVertexAttrib4NusvARB;
    glVertexAttrib4bvARB = pAPI->glVertexAttrib4bvARB;
    glVertexAttrib4dARB = pAPI->glVertexAttrib4dARB;
    glVertexAttrib4dvARB = pAPI->glVertexAttrib4dvARB;
    glVertexAttrib4fARB = pAPI->glVertexAttrib4fARB;
    glVertexAttrib4fvARB = pAPI->glVertexAttrib4fvARB;
    glVertexAttrib4ivARB = pAPI->glVertexAttrib4ivARB;
    glVertexAttrib4sARB = pAPI->glVertexAttrib4sARB;
    glVertexAttrib4svARB = pAPI->glVertexAttrib4svARB;
    glVertexAttrib4ubvARB = pAPI->glVertexAttrib4ubvARB;
    glVertexAttrib4uivARB = pAPI->glVertexAttrib4uivARB;
    glVertexAttrib4usvARB = pAPI->glVertexAttrib4usvARB;
    glVertexAttribPointerARB = pAPI->glVertexAttribPointerARB;
    glEnableVertexAttribArrayARB = pAPI->glEnableVertexAttribArrayARB;
    glDisableVertexAttribArrayARB = pAPI->glDisableVertexAttribArrayARB;
    glGetVertexAttribdvARB = pAPI->glGetVertexAttribdvARB;
    glGetVertexAttribfvARB = pAPI->glGetVertexAttribfvARB;
    glGetVertexAttribivARB = pAPI->glGetVertexAttribivARB;
    glGetVertexAttribPointervARB = pAPI->glGetVertexAttribPointervARB;
    glBindAttribLocationARB = pAPI->glBindAttribLocationARB;
    glGetActiveAttribARB = pAPI->glGetActiveAttribARB;
    glGetAttribLocationARB = pAPI->glGetAttribLocationARB;
    glDepthRangeArraydvNV = pAPI->glDepthRangeArraydvNV;
    glDepthRangeIndexeddNV = pAPI->glDepthRangeIndexeddNV;
    glWindowPos2dARB = pAPI->glWindowPos2dARB;
    glWindowPos2dvARB = pAPI->glWindowPos2dvARB;
    glWindowPos2fARB = pAPI->glWindowPos2fARB;
    glWindowPos2fvARB = pAPI->glWindowPos2fvARB;
    glWindowPos2iARB = pAPI->glWindowPos2iARB;
    glWindowPos2ivARB = pAPI->glWindowPos2ivARB;
    glWindowPos2sARB = pAPI->glWindowPos2sARB;
    glWindowPos2svARB = pAPI->glWindowPos2svARB;
    glWindowPos3dARB = pAPI->glWindowPos3dARB;
    glWindowPos3dvARB = pAPI->glWindowPos3dvARB;
    glWindowPos3fARB = pAPI->glWindowPos3fARB;
    glWindowPos3fvARB = pAPI->glWindowPos3fvARB;
    glWindowPos3iARB = pAPI->glWindowPos3iARB;
    glWindowPos3ivARB = pAPI->glWindowPos3ivARB;
    glWindowPos3sARB = pAPI->glWindowPos3sARB;
    glWindowPos3svARB = pAPI->glWindowPos3svARB;
    glDrawBuffersATI = pAPI->glDrawBuffersATI;
    glElementPointerATI = pAPI->glElementPointerATI;
    glDrawElementArrayATI = pAPI->glDrawElementArrayATI;
    glDrawRangeElementArrayATI = pAPI->glDrawRangeElementArrayATI;
    glTexBumpParameterivATI = pAPI->glTexBumpParameterivATI;
    glTexBumpParameterfvATI = pAPI->glTexBumpParameterfvATI;
    glGetTexBumpParameterivATI = pAPI->glGetTexBumpParameterivATI;
    glGetTexBumpParameterfvATI = pAPI->glGetTexBumpParameterfvATI;
    glGenFragmentShadersATI = pAPI->glGenFragmentShadersATI;
    glBindFragmentShaderATI = pAPI->glBindFragmentShaderATI;
    glDeleteFragmentShaderATI = pAPI->glDeleteFragmentShaderATI;
    glBeginFragmentShaderATI = pAPI->glBeginFragmentShaderATI;
    glEndFragmentShaderATI = pAPI->glEndFragmentShaderATI;
    glPassTexCoordATI = pAPI->glPassTexCoordATI;
    glSampleMapATI = pAPI->glSampleMapATI;
    glColorFragmentOp1ATI = pAPI->glColorFragmentOp1ATI;
    glColorFragmentOp2ATI = pAPI->glColorFragmentOp2ATI;
    glColorFragmentOp3ATI = pAPI->glColorFragmentOp3ATI;
    glAlphaFragmentOp1ATI = pAPI->glAlphaFragmentOp1ATI;
    glAlphaFragmentOp2ATI = pAPI->glAlphaFragmentOp2ATI;
    glAlphaFragmentOp3ATI = pAPI->glAlphaFragmentOp3ATI;
    glSetFragmentShaderConstantATI = pAPI->glSetFragmentShaderConstantATI;
    glMapObjectBufferATI = pAPI->glMapObjectBufferATI;
    glUnmapObjectBufferATI = pAPI->glUnmapObjectBufferATI;
    glPNTrianglesiATI = pAPI->glPNTrianglesiATI;
    glPNTrianglesfATI = pAPI->glPNTrianglesfATI;
    glStencilOpSeparateATI = pAPI->glStencilOpSeparateATI;
    glStencilFuncSeparateATI = pAPI->glStencilFuncSeparateATI;
    glNewObjectBufferATI = pAPI->glNewObjectBufferATI;
    glIsObjectBufferATI = pAPI->glIsObjectBufferATI;
    glUpdateObjectBufferATI = pAPI->glUpdateObjectBufferATI;
    glGetObjectBufferfvATI = pAPI->glGetObjectBufferfvATI;
    glGetObjectBufferivATI = pAPI->glGetObjectBufferivATI;
    glFreeObjectBufferATI = pAPI->glFreeObjectBufferATI;
    glArrayObjectATI = pAPI->glArrayObjectATI;
    glGetArrayObjectfvATI = pAPI->glGetArrayObjectfvATI;
    glGetArrayObjectivATI = pAPI->glGetArrayObjectivATI;
    glVariantArrayObjectATI = pAPI->glVariantArrayObjectATI;
    glGetVariantArrayObjectfvATI = pAPI->glGetVariantArrayObjectfvATI;
    glGetVariantArrayObjectivATI = pAPI->glGetVariantArrayObjectivATI;
    glVertexAttribArrayObjectATI = pAPI->glVertexAttribArrayObjectATI;
    glGetVertexAttribArrayObjectfvATI = pAPI->glGetVertexAttribArrayObjectfvATI;
    glGetVertexAttribArrayObjectivATI = pAPI->glGetVertexAttribArrayObjectivATI;
    glVertexStream1sATI = pAPI->glVertexStream1sATI;
    glVertexStream1svATI = pAPI->glVertexStream1svATI;
    glVertexStream1iATI = pAPI->glVertexStream1iATI;
    glVertexStream1ivATI = pAPI->glVertexStream1ivATI;
    glVertexStream1fATI = pAPI->glVertexStream1fATI;
    glVertexStream1fvATI = pAPI->glVertexStream1fvATI;
    glVertexStream1dATI = pAPI->glVertexStream1dATI;
    glVertexStream1dvATI = pAPI->glVertexStream1dvATI;
    glVertexStream2sATI = pAPI->glVertexStream2sATI;
    glVertexStream2svATI = pAPI->glVertexStream2svATI;
    glVertexStream2iATI = pAPI->glVertexStream2iATI;
    glVertexStream2ivATI = pAPI->glVertexStream2ivATI;
    glVertexStream2fATI = pAPI->glVertexStream2fATI;
    glVertexStream2fvATI = pAPI->glVertexStream2fvATI;
    glVertexStream2dATI = pAPI->glVertexStream2dATI;
    glVertexStream2dvATI = pAPI->glVertexStream2dvATI;
    glVertexStream3sATI = pAPI->glVertexStream3sATI;
    glVertexStream3svATI = pAPI->glVertexStream3svATI;
    glVertexStream3iATI = pAPI->glVertexStream3iATI;
    glVertexStream3ivATI = pAPI->glVertexStream3ivATI;
    glVertexStream3fATI = pAPI->glVertexStream3fATI;
    glVertexStream3fvATI = pAPI->glVertexStream3fvATI;
    glVertexStream3dATI = pAPI->glVertexStream3dATI;
    glVertexStream3dvATI = pAPI->glVertexStream3dvATI;
    glVertexStream4sATI = pAPI->glVertexStream4sATI;
    glVertexStream4svATI = pAPI->glVertexStream4svATI;
    glVertexStream4iATI = pAPI->glVertexStream4iATI;
    glVertexStream4ivATI = pAPI->glVertexStream4ivATI;
    glVertexStream4fATI = pAPI->glVertexStream4fATI;
    glVertexStream4fvATI = pAPI->glVertexStream4fvATI;
    glVertexStream4dATI = pAPI->glVertexStream4dATI;
    glVertexStream4dvATI = pAPI->glVertexStream4dvATI;
    glNormalStream3bATI = pAPI->glNormalStream3bATI;
    glNormalStream3bvATI = pAPI->glNormalStream3bvATI;
    glNormalStream3sATI = pAPI->glNormalStream3sATI;
    glNormalStream3svATI = pAPI->glNormalStream3svATI;
    glNormalStream3iATI = pAPI->glNormalStream3iATI;
    glNormalStream3ivATI = pAPI->glNormalStream3ivATI;
    glNormalStream3fATI = pAPI->glNormalStream3fATI;
    glNormalStream3fvATI = pAPI->glNormalStream3fvATI;
    glNormalStream3dATI = pAPI->glNormalStream3dATI;
    glNormalStream3dvATI = pAPI->glNormalStream3dvATI;
    glClientActiveVertexStreamATI = pAPI->glClientActiveVertexStreamATI;
    glVertexBlendEnviATI = pAPI->glVertexBlendEnviATI;
    glVertexBlendEnvfATI = pAPI->glVertexBlendEnvfATI;
    glEGLImageTargetTexStorageEXT = pAPI->glEGLImageTargetTexStorageEXT;
    glEGLImageTargetTextureStorageEXT = pAPI->glEGLImageTargetTextureStorageEXT;
    glUniformBufferEXT = pAPI->glUniformBufferEXT;
    glGetUniformBufferSizeEXT = pAPI->glGetUniformBufferSizeEXT;
    glGetUniformOffsetEXT = pAPI->glGetUniformOffsetEXT;
    glBlendColorEXT = pAPI->glBlendColorEXT;
    glBlendEquationSeparateEXT = pAPI->glBlendEquationSeparateEXT;
    glBlendFuncSeparateEXT = pAPI->glBlendFuncSeparateEXT;
    glBlendEquationEXT = pAPI->glBlendEquationEXT;
    glColorSubTableEXT = pAPI->glColorSubTableEXT;
    glCopyColorSubTableEXT = pAPI->glCopyColorSubTableEXT;
    glLockArraysEXT = pAPI->glLockArraysEXT;
    glUnlockArraysEXT = pAPI->glUnlockArraysEXT;
    glConvolutionFilter1DEXT = pAPI->glConvolutionFilter1DEXT;
    glConvolutionFilter2DEXT = pAPI->glConvolutionFilter2DEXT;
    glConvolutionParameterfEXT = pAPI->glConvolutionParameterfEXT;
    glConvolutionParameterfvEXT = pAPI->glConvolutionParameterfvEXT;
    glConvolutionParameteriEXT = pAPI->glConvolutionParameteriEXT;
    glConvolutionParameterivEXT = pAPI->glConvolutionParameterivEXT;
    glCopyConvolutionFilter1DEXT = pAPI->glCopyConvolutionFilter1DEXT;
    glCopyConvolutionFilter2DEXT = pAPI->glCopyConvolutionFilter2DEXT;
    glGetConvolutionFilterEXT = pAPI->glGetConvolutionFilterEXT;
    glGetConvolutionParameterfvEXT = pAPI->glGetConvolutionParameterfvEXT;
    glGetConvolutionParameterivEXT = pAPI->glGetConvolutionParameterivEXT;
    glGetSeparableFilterEXT = pAPI->glGetSeparableFilterEXT;
    glSeparableFilter2DEXT = pAPI->glSeparableFilter2DEXT;
    glTangent3bEXT = pAPI->glTangent3bEXT;
    glTangent3bvEXT = pAPI->glTangent3bvEXT;
    glTangent3dEXT = pAPI->glTangent3dEXT;
    glTangent3dvEXT = pAPI->glTangent3dvEXT;
    glTangent3fEXT = pAPI->glTangent3fEXT;
    glTangent3fvEXT = pAPI->glTangent3fvEXT;
    glTangent3iEXT = pAPI->glTangent3iEXT;
    glTangent3ivEXT = pAPI->glTangent3ivEXT;
    glTangent3sEXT = pAPI->glTangent3sEXT;
    glTangent3svEXT = pAPI->glTangent3svEXT;
    glBinormal3bEXT = pAPI->glBinormal3bEXT;
    glBinormal3bvEXT = pAPI->glBinormal3bvEXT;
    glBinormal3dEXT = pAPI->glBinormal3dEXT;
    glBinormal3dvEXT = pAPI->glBinormal3dvEXT;
    glBinormal3fEXT = pAPI->glBinormal3fEXT;
    glBinormal3fvEXT = pAPI->glBinormal3fvEXT;
    glBinormal3iEXT = pAPI->glBinormal3iEXT;
    glBinormal3ivEXT = pAPI->glBinormal3ivEXT;
    glBinormal3sEXT = pAPI->glBinormal3sEXT;
    glBinormal3svEXT = pAPI->glBinormal3svEXT;
    glTangentPointerEXT = pAPI->glTangentPointerEXT;
    glBinormalPointerEXT = pAPI->glBinormalPointerEXT;
    glCopyTexImage1DEXT = pAPI->glCopyTexImage1DEXT;
    glCopyTexImage2DEXT = pAPI->glCopyTexImage2DEXT;
    glCopyTexSubImage1DEXT = pAPI->glCopyTexSubImage1DEXT;
    glCopyTexSubImage2DEXT = pAPI->glCopyTexSubImage2DEXT;
    glCopyTexSubImage3DEXT = pAPI->glCopyTexSubImage3DEXT;
    glCullParameterdvEXT = pAPI->glCullParameterdvEXT;
    glCullParameterfvEXT = pAPI->glCullParameterfvEXT;
    glLabelObjectEXT = pAPI->glLabelObjectEXT;
    glGetObjectLabelEXT = pAPI->glGetObjectLabelEXT;
    glInsertEventMarkerEXT = pAPI->glInsertEventMarkerEXT;
    glPushGroupMarkerEXT = pAPI->glPushGroupMarkerEXT;
    glPopGroupMarkerEXT = pAPI->glPopGroupMarkerEXT;
    glDepthBoundsEXT = pAPI->glDepthBoundsEXT;
    glMatrixLoadfEXT = pAPI->glMatrixLoadfEXT;
    glMatrixLoaddEXT = pAPI->glMatrixLoaddEXT;
    glMatrixMultfEXT = pAPI->glMatrixMultfEXT;
    glMatrixMultdEXT = pAPI->glMatrixMultdEXT;
    glMatrixLoadIdentityEXT = pAPI->glMatrixLoadIdentityEXT;
    glMatrixRotatefEXT = pAPI->glMatrixRotatefEXT;
    glMatrixRotatedEXT = pAPI->glMatrixRotatedEXT;
    glMatrixScalefEXT = pAPI->glMatrixScalefEXT;
    glMatrixScaledEXT = pAPI->glMatrixScaledEXT;
    glMatrixTranslatefEXT = pAPI->glMatrixTranslatefEXT;
    glMatrixTranslatedEXT = pAPI->glMatrixTranslatedEXT;
    glMatrixFrustumEXT = pAPI->glMatrixFrustumEXT;
    glMatrixOrthoEXT = pAPI->glMatrixOrthoEXT;
    glMatrixPopEXT = pAPI->glMatrixPopEXT;
    glMatrixPushEXT = pAPI->glMatrixPushEXT;
    glClientAttribDefaultEXT = pAPI->glClientAttribDefaultEXT;
    glPushClientAttribDefaultEXT = pAPI->glPushClientAttribDefaultEXT;
    glTextureParameterfEXT = pAPI->glTextureParameterfEXT;
    glTextureParameterfvEXT = pAPI->glTextureParameterfvEXT;
    glTextureParameteriEXT = pAPI->glTextureParameteriEXT;
    glTextureParameterivEXT = pAPI->glTextureParameterivEXT;
    glTextureImage1DEXT = pAPI->glTextureImage1DEXT;
    glTextureImage2DEXT = pAPI->glTextureImage2DEXT;
    glTextureSubImage1DEXT = pAPI->glTextureSubImage1DEXT;
    glTextureSubImage2DEXT = pAPI->glTextureSubImage2DEXT;
    glCopyTextureImage1DEXT = pAPI->glCopyTextureImage1DEXT;
    glCopyTextureImage2DEXT = pAPI->glCopyTextureImage2DEXT;
    glCopyTextureSubImage1DEXT = pAPI->glCopyTextureSubImage1DEXT;
    glCopyTextureSubImage2DEXT = pAPI->glCopyTextureSubImage2DEXT;
    glGetTextureImageEXT = pAPI->glGetTextureImageEXT;
    glGetTextureParameterfvEXT = pAPI->glGetTextureParameterfvEXT;
    glGetTextureParameterivEXT = pAPI->glGetTextureParameterivEXT;
    glGetTextureLevelParameterfvEXT = pAPI->glGetTextureLevelParameterfvEXT;
    glGetTextureLevelParameterivEXT = pAPI->glGetTextureLevelParameterivEXT;
    glTextureImage3DEXT = pAPI->glTextureImage3DEXT;
    glTextureSubImage3DEXT = pAPI->glTextureSubImage3DEXT;
    glCopyTextureSubImage3DEXT = pAPI->glCopyTextureSubImage3DEXT;
    glBindMultiTextureEXT = pAPI->glBindMultiTextureEXT;
    glMultiTexCoordPointerEXT = pAPI->glMultiTexCoordPointerEXT;
    glMultiTexEnvfEXT = pAPI->glMultiTexEnvfEXT;
    glMultiTexEnvfvEXT = pAPI->glMultiTexEnvfvEXT;
    glMultiTexEnviEXT = pAPI->glMultiTexEnviEXT;
    glMultiTexEnvivEXT = pAPI->glMultiTexEnvivEXT;
    glMultiTexGendEXT = pAPI->glMultiTexGendEXT;
    glMultiTexGendvEXT = pAPI->glMultiTexGendvEXT;
    glMultiTexGenfEXT = pAPI->glMultiTexGenfEXT;
    glMultiTexGenfvEXT = pAPI->glMultiTexGenfvEXT;
    glMultiTexGeniEXT = pAPI->glMultiTexGeniEXT;
    glMultiTexGenivEXT = pAPI->glMultiTexGenivEXT;
    glGetMultiTexEnvfvEXT = pAPI->glGetMultiTexEnvfvEXT;
    glGetMultiTexEnvivEXT = pAPI->glGetMultiTexEnvivEXT;
    glGetMultiTexGendvEXT = pAPI->glGetMultiTexGendvEXT;
    glGetMultiTexGenfvEXT = pAPI->glGetMultiTexGenfvEXT;
    glGetMultiTexGenivEXT = pAPI->glGetMultiTexGenivEXT;
    glMultiTexParameteriEXT = pAPI->glMultiTexParameteriEXT;
    glMultiTexParameterivEXT = pAPI->glMultiTexParameterivEXT;
    glMultiTexParameterfEXT = pAPI->glMultiTexParameterfEXT;
    glMultiTexParameterfvEXT = pAPI->glMultiTexParameterfvEXT;
    glMultiTexImage1DEXT = pAPI->glMultiTexImage1DEXT;
    glMultiTexImage2DEXT = pAPI->glMultiTexImage2DEXT;
    glMultiTexSubImage1DEXT = pAPI->glMultiTexSubImage1DEXT;
    glMultiTexSubImage2DEXT = pAPI->glMultiTexSubImage2DEXT;
    glCopyMultiTexImage1DEXT = pAPI->glCopyMultiTexImage1DEXT;
    glCopyMultiTexImage2DEXT = pAPI->glCopyMultiTexImage2DEXT;
    glCopyMultiTexSubImage1DEXT = pAPI->glCopyMultiTexSubImage1DEXT;
    glCopyMultiTexSubImage2DEXT = pAPI->glCopyMultiTexSubImage2DEXT;
    glGetMultiTexImageEXT = pAPI->glGetMultiTexImageEXT;
    glGetMultiTexParameterfvEXT = pAPI->glGetMultiTexParameterfvEXT;
    glGetMultiTexParameterivEXT = pAPI->glGetMultiTexParameterivEXT;
    glGetMultiTexLevelParameterfvEXT = pAPI->glGetMultiTexLevelParameterfvEXT;
    glGetMultiTexLevelParameterivEXT = pAPI->glGetMultiTexLevelParameterivEXT;
    glMultiTexImage3DEXT = pAPI->glMultiTexImage3DEXT;
    glMultiTexSubImage3DEXT = pAPI->glMultiTexSubImage3DEXT;
    glCopyMultiTexSubImage3DEXT = pAPI->glCopyMultiTexSubImage3DEXT;
    glEnableClientStateIndexedEXT = pAPI->glEnableClientStateIndexedEXT;
    glDisableClientStateIndexedEXT = pAPI->glDisableClientStateIndexedEXT;
    glGetFloatIndexedvEXT = pAPI->glGetFloatIndexedvEXT;
    glGetDoubleIndexedvEXT = pAPI->glGetDoubleIndexedvEXT;
    glGetPointerIndexedvEXT = pAPI->glGetPointerIndexedvEXT;
    glEnableIndexedEXT = pAPI->glEnableIndexedEXT;
    glDisableIndexedEXT = pAPI->glDisableIndexedEXT;
    glIsEnabledIndexedEXT = pAPI->glIsEnabledIndexedEXT;
    glGetIntegerIndexedvEXT = pAPI->glGetIntegerIndexedvEXT;
    glGetBooleanIndexedvEXT = pAPI->glGetBooleanIndexedvEXT;
    glCompressedTextureImage3DEXT = pAPI->glCompressedTextureImage3DEXT;
    glCompressedTextureImage2DEXT = pAPI->glCompressedTextureImage2DEXT;
    glCompressedTextureImage1DEXT = pAPI->glCompressedTextureImage1DEXT;
    glCompressedTextureSubImage3DEXT = pAPI->glCompressedTextureSubImage3DEXT;
    glCompressedTextureSubImage2DEXT = pAPI->glCompressedTextureSubImage2DEXT;
    glCompressedTextureSubImage1DEXT = pAPI->glCompressedTextureSubImage1DEXT;
    glGetCompressedTextureImageEXT = pAPI->glGetCompressedTextureImageEXT;
    glCompressedMultiTexImage3DEXT = pAPI->glCompressedMultiTexImage3DEXT;
    glCompressedMultiTexImage2DEXT = pAPI->glCompressedMultiTexImage2DEXT;
    glCompressedMultiTexImage1DEXT = pAPI->glCompressedMultiTexImage1DEXT;
    glCompressedMultiTexSubImage3DEXT = pAPI->glCompressedMultiTexSubImage3DEXT;
    glCompressedMultiTexSubImage2DEXT = pAPI->glCompressedMultiTexSubImage2DEXT;
    glCompressedMultiTexSubImage1DEXT = pAPI->glCompressedMultiTexSubImage1DEXT;
    glGetCompressedMultiTexImageEXT = pAPI->glGetCompressedMultiTexImageEXT;
    glMatrixLoadTransposefEXT = pAPI->glMatrixLoadTransposefEXT;
    glMatrixLoadTransposedEXT = pAPI->glMatrixLoadTransposedEXT;
    glMatrixMultTransposefEXT = pAPI->glMatrixMultTransposefEXT;
    glMatrixMultTransposedEXT = pAPI->glMatrixMultTransposedEXT;
    glNamedBufferDataEXT = pAPI->glNamedBufferDataEXT;
    glNamedBufferSubDataEXT = pAPI->glNamedBufferSubDataEXT;
    glMapNamedBufferEXT = pAPI->glMapNamedBufferEXT;
    glUnmapNamedBufferEXT = pAPI->glUnmapNamedBufferEXT;
    glGetNamedBufferParameterivEXT = pAPI->glGetNamedBufferParameterivEXT;
    glGetNamedBufferPointervEXT = pAPI->glGetNamedBufferPointervEXT;
    glGetNamedBufferSubDataEXT = pAPI->glGetNamedBufferSubDataEXT;
    glProgramUniform1fEXT = pAPI->glProgramUniform1fEXT;
    glProgramUniform2fEXT = pAPI->glProgramUniform2fEXT;
    glProgramUniform3fEXT = pAPI->glProgramUniform3fEXT;
    glProgramUniform4fEXT = pAPI->glProgramUniform4fEXT;
    glProgramUniform1iEXT = pAPI->glProgramUniform1iEXT;
    glProgramUniform2iEXT = pAPI->glProgramUniform2iEXT;
    glProgramUniform3iEXT = pAPI->glProgramUniform3iEXT;
    glProgramUniform4iEXT = pAPI->glProgramUniform4iEXT;
    glProgramUniform1fvEXT = pAPI->glProgramUniform1fvEXT;
    glProgramUniform2fvEXT = pAPI->glProgramUniform2fvEXT;
    glProgramUniform3fvEXT = pAPI->glProgramUniform3fvEXT;
    glProgramUniform4fvEXT = pAPI->glProgramUniform4fvEXT;
    glProgramUniform1ivEXT = pAPI->glProgramUniform1ivEXT;
    glProgramUniform2ivEXT = pAPI->glProgramUniform2ivEXT;
    glProgramUniform3ivEXT = pAPI->glProgramUniform3ivEXT;
    glProgramUniform4ivEXT = pAPI->glProgramUniform4ivEXT;
    glProgramUniformMatrix2fvEXT = pAPI->glProgramUniformMatrix2fvEXT;
    glProgramUniformMatrix3fvEXT = pAPI->glProgramUniformMatrix3fvEXT;
    glProgramUniformMatrix4fvEXT = pAPI->glProgramUniformMatrix4fvEXT;
    glProgramUniformMatrix2x3fvEXT = pAPI->glProgramUniformMatrix2x3fvEXT;
    glProgramUniformMatrix3x2fvEXT = pAPI->glProgramUniformMatrix3x2fvEXT;
    glProgramUniformMatrix2x4fvEXT = pAPI->glProgramUniformMatrix2x4fvEXT;
    glProgramUniformMatrix4x2fvEXT = pAPI->glProgramUniformMatrix4x2fvEXT;
    glProgramUniformMatrix3x4fvEXT = pAPI->glProgramUniformMatrix3x4fvEXT;
    glProgramUniformMatrix4x3fvEXT = pAPI->glProgramUniformMatrix4x3fvEXT;
    glTextureBufferEXT = pAPI->glTextureBufferEXT;
    glMultiTexBufferEXT = pAPI->glMultiTexBufferEXT;
    glTextureParameterIivEXT = pAPI->glTextureParameterIivEXT;
    glTextureParameterIuivEXT = pAPI->glTextureParameterIuivEXT;
    glGetTextureParameterIivEXT = pAPI->glGetTextureParameterIivEXT;
    glGetTextureParameterIuivEXT = pAPI->glGetTextureParameterIuivEXT;
    glMultiTexParameterIivEXT = pAPI->glMultiTexParameterIivEXT;
    glMultiTexParameterIuivEXT = pAPI->glMultiTexParameterIuivEXT;
    glGetMultiTexParameterIivEXT = pAPI->glGetMultiTexParameterIivEXT;
    glGetMultiTexParameterIuivEXT = pAPI->glGetMultiTexParameterIuivEXT;
    glProgramUniform1uiEXT = pAPI->glProgramUniform1uiEXT;
    glProgramUniform2uiEXT = pAPI->glProgramUniform2uiEXT;
    glProgramUniform3uiEXT = pAPI->glProgramUniform3uiEXT;
    glProgramUniform4uiEXT = pAPI->glProgramUniform4uiEXT;
    glProgramUniform1uivEXT = pAPI->glProgramUniform1uivEXT;
    glProgramUniform2uivEXT = pAPI->glProgramUniform2uivEXT;
    glProgramUniform3uivEXT = pAPI->glProgramUniform3uivEXT;
    glProgramUniform4uivEXT = pAPI->glProgramUniform4uivEXT;
    glNamedProgramLocalParameters4fvEXT = pAPI->glNamedProgramLocalParameters4fvEXT;
    glNamedProgramLocalParameterI4iEXT = pAPI->glNamedProgramLocalParameterI4iEXT;
    glNamedProgramLocalParameterI4ivEXT = pAPI->glNamedProgramLocalParameterI4ivEXT;
    glNamedProgramLocalParametersI4ivEXT = pAPI->glNamedProgramLocalParametersI4ivEXT;
    glNamedProgramLocalParameterI4uiEXT = pAPI->glNamedProgramLocalParameterI4uiEXT;
    glNamedProgramLocalParameterI4uivEXT = pAPI->glNamedProgramLocalParameterI4uivEXT;
    glNamedProgramLocalParametersI4uivEXT = pAPI->glNamedProgramLocalParametersI4uivEXT;
    glGetNamedProgramLocalParameterIivEXT = pAPI->glGetNamedProgramLocalParameterIivEXT;
    glGetNamedProgramLocalParameterIuivEXT = pAPI->glGetNamedProgramLocalParameterIuivEXT;
    glEnableClientStateiEXT = pAPI->glEnableClientStateiEXT;
    glDisableClientStateiEXT = pAPI->glDisableClientStateiEXT;
    glGetFloati_vEXT = pAPI->glGetFloati_vEXT;
    glGetDoublei_vEXT = pAPI->glGetDoublei_vEXT;
    glGetPointeri_vEXT = pAPI->glGetPointeri_vEXT;
    glNamedProgramStringEXT = pAPI->glNamedProgramStringEXT;
    glNamedProgramLocalParameter4dEXT = pAPI->glNamedProgramLocalParameter4dEXT;
    glNamedProgramLocalParameter4dvEXT = pAPI->glNamedProgramLocalParameter4dvEXT;
    glNamedProgramLocalParameter4fEXT = pAPI->glNamedProgramLocalParameter4fEXT;
    glNamedProgramLocalParameter4fvEXT = pAPI->glNamedProgramLocalParameter4fvEXT;
    glGetNamedProgramLocalParameterdvEXT = pAPI->glGetNamedProgramLocalParameterdvEXT;
    glGetNamedProgramLocalParameterfvEXT = pAPI->glGetNamedProgramLocalParameterfvEXT;
    glGetNamedProgramivEXT = pAPI->glGetNamedProgramivEXT;
    glGetNamedProgramStringEXT = pAPI->glGetNamedProgramStringEXT;
    glNamedRenderbufferStorageEXT = pAPI->glNamedRenderbufferStorageEXT;
    glGetNamedRenderbufferParameterivEXT = pAPI->glGetNamedRenderbufferParameterivEXT;
    glNamedRenderbufferStorageMultisampleEXT = pAPI->glNamedRenderbufferStorageMultisampleEXT;
    glNamedRenderbufferStorageMultisampleCoverageEXT = pAPI->glNamedRenderbufferStorageMultisampleCoverageEXT;
    glCheckNamedFramebufferStatusEXT = pAPI->glCheckNamedFramebufferStatusEXT;
    glNamedFramebufferTexture1DEXT = pAPI->glNamedFramebufferTexture1DEXT;
    glNamedFramebufferTexture2DEXT = pAPI->glNamedFramebufferTexture2DEXT;
    glNamedFramebufferTexture3DEXT = pAPI->glNamedFramebufferTexture3DEXT;
    glNamedFramebufferRenderbufferEXT = pAPI->glNamedFramebufferRenderbufferEXT;
    glGetNamedFramebufferAttachmentParameterivEXT = pAPI->glGetNamedFramebufferAttachmentParameterivEXT;
    glGenerateTextureMipmapEXT = pAPI->glGenerateTextureMipmapEXT;
    glGenerateMultiTexMipmapEXT = pAPI->glGenerateMultiTexMipmapEXT;
    glFramebufferDrawBufferEXT = pAPI->glFramebufferDrawBufferEXT;
    glFramebufferDrawBuffersEXT = pAPI->glFramebufferDrawBuffersEXT;
    glFramebufferReadBufferEXT = pAPI->glFramebufferReadBufferEXT;
    glGetFramebufferParameterivEXT = pAPI->glGetFramebufferParameterivEXT;
    glNamedCopyBufferSubDataEXT = pAPI->glNamedCopyBufferSubDataEXT;
    glNamedFramebufferTextureEXT = pAPI->glNamedFramebufferTextureEXT;
    glNamedFramebufferTextureLayerEXT = pAPI->glNamedFramebufferTextureLayerEXT;
    glNamedFramebufferTextureFaceEXT = pAPI->glNamedFramebufferTextureFaceEXT;
    glTextureRenderbufferEXT = pAPI->glTextureRenderbufferEXT;
    glMultiTexRenderbufferEXT = pAPI->glMultiTexRenderbufferEXT;
    glVertexArrayVertexOffsetEXT = pAPI->glVertexArrayVertexOffsetEXT;
    glVertexArrayColorOffsetEXT = pAPI->glVertexArrayColorOffsetEXT;
    glVertexArrayEdgeFlagOffsetEXT = pAPI->glVertexArrayEdgeFlagOffsetEXT;
    glVertexArrayIndexOffsetEXT = pAPI->glVertexArrayIndexOffsetEXT;
    glVertexArrayNormalOffsetEXT = pAPI->glVertexArrayNormalOffsetEXT;
    glVertexArrayTexCoordOffsetEXT = pAPI->glVertexArrayTexCoordOffsetEXT;
    glVertexArrayMultiTexCoordOffsetEXT = pAPI->glVertexArrayMultiTexCoordOffsetEXT;
    glVertexArrayFogCoordOffsetEXT = pAPI->glVertexArrayFogCoordOffsetEXT;
    glVertexArraySecondaryColorOffsetEXT = pAPI->glVertexArraySecondaryColorOffsetEXT;
    glVertexArrayVertexAttribOffsetEXT = pAPI->glVertexArrayVertexAttribOffsetEXT;
    glVertexArrayVertexAttribIOffsetEXT = pAPI->glVertexArrayVertexAttribIOffsetEXT;
    glEnableVertexArrayEXT = pAPI->glEnableVertexArrayEXT;
    glDisableVertexArrayEXT = pAPI->glDisableVertexArrayEXT;
    glEnableVertexArrayAttribEXT = pAPI->glEnableVertexArrayAttribEXT;
    glDisableVertexArrayAttribEXT = pAPI->glDisableVertexArrayAttribEXT;
    glGetVertexArrayIntegervEXT = pAPI->glGetVertexArrayIntegervEXT;
    glGetVertexArrayPointervEXT = pAPI->glGetVertexArrayPointervEXT;
    glGetVertexArrayIntegeri_vEXT = pAPI->glGetVertexArrayIntegeri_vEXT;
    glGetVertexArrayPointeri_vEXT = pAPI->glGetVertexArrayPointeri_vEXT;
    glMapNamedBufferRangeEXT = pAPI->glMapNamedBufferRangeEXT;
    glFlushMappedNamedBufferRangeEXT = pAPI->glFlushMappedNamedBufferRangeEXT;
    glNamedBufferStorageEXT = pAPI->glNamedBufferStorageEXT;
    glClearNamedBufferDataEXT = pAPI->glClearNamedBufferDataEXT;
    glClearNamedBufferSubDataEXT = pAPI->glClearNamedBufferSubDataEXT;
    glNamedFramebufferParameteriEXT = pAPI->glNamedFramebufferParameteriEXT;
    glGetNamedFramebufferParameterivEXT = pAPI->glGetNamedFramebufferParameterivEXT;
    glProgramUniform1dEXT = pAPI->glProgramUniform1dEXT;
    glProgramUniform2dEXT = pAPI->glProgramUniform2dEXT;
    glProgramUniform3dEXT = pAPI->glProgramUniform3dEXT;
    glProgramUniform4dEXT = pAPI->glProgramUniform4dEXT;
    glProgramUniform1dvEXT = pAPI->glProgramUniform1dvEXT;
    glProgramUniform2dvEXT = pAPI->glProgramUniform2dvEXT;
    glProgramUniform3dvEXT = pAPI->glProgramUniform3dvEXT;
    glProgramUniform4dvEXT = pAPI->glProgramUniform4dvEXT;
    glProgramUniformMatrix2dvEXT = pAPI->glProgramUniformMatrix2dvEXT;
    glProgramUniformMatrix3dvEXT = pAPI->glProgramUniformMatrix3dvEXT;
    glProgramUniformMatrix4dvEXT = pAPI->glProgramUniformMatrix4dvEXT;
    glProgramUniformMatrix2x3dvEXT = pAPI->glProgramUniformMatrix2x3dvEXT;
    glProgramUniformMatrix2x4dvEXT = pAPI->glProgramUniformMatrix2x4dvEXT;
    glProgramUniformMatrix3x2dvEXT = pAPI->glProgramUniformMatrix3x2dvEXT;
    glProgramUniformMatrix3x4dvEXT = pAPI->glProgramUniformMatrix3x4dvEXT;
    glProgramUniformMatrix4x2dvEXT = pAPI->glProgramUniformMatrix4x2dvEXT;
    glProgramUniformMatrix4x3dvEXT = pAPI->glProgramUniformMatrix4x3dvEXT;
    glTextureBufferRangeEXT = pAPI->glTextureBufferRangeEXT;
    glTextureStorage1DEXT = pAPI->glTextureStorage1DEXT;
    glTextureStorage2DEXT = pAPI->glTextureStorage2DEXT;
    glTextureStorage3DEXT = pAPI->glTextureStorage3DEXT;
    glTextureStorage2DMultisampleEXT = pAPI->glTextureStorage2DMultisampleEXT;
    glTextureStorage3DMultisampleEXT = pAPI->glTextureStorage3DMultisampleEXT;
    glVertexArrayBindVertexBufferEXT = pAPI->glVertexArrayBindVertexBufferEXT;
    glVertexArrayVertexAttribFormatEXT = pAPI->glVertexArrayVertexAttribFormatEXT;
    glVertexArrayVertexAttribIFormatEXT = pAPI->glVertexArrayVertexAttribIFormatEXT;
    glVertexArrayVertexAttribLFormatEXT = pAPI->glVertexArrayVertexAttribLFormatEXT;
    glVertexArrayVertexAttribBindingEXT = pAPI->glVertexArrayVertexAttribBindingEXT;
    glVertexArrayVertexBindingDivisorEXT = pAPI->glVertexArrayVertexBindingDivisorEXT;
    glVertexArrayVertexAttribLOffsetEXT = pAPI->glVertexArrayVertexAttribLOffsetEXT;
    glTexturePageCommitmentEXT = pAPI->glTexturePageCommitmentEXT;
    glVertexArrayVertexAttribDivisorEXT = pAPI->glVertexArrayVertexAttribDivisorEXT;
    glColorMaskIndexedEXT = pAPI->glColorMaskIndexedEXT;
    glDrawArraysInstancedEXT = pAPI->glDrawArraysInstancedEXT;
    glDrawElementsInstancedEXT = pAPI->glDrawElementsInstancedEXT;
    glDrawRangeElementsEXT = pAPI->glDrawRangeElementsEXT;
    glBufferStorageExternalEXT = pAPI->glBufferStorageExternalEXT;
    glNamedBufferStorageExternalEXT = pAPI->glNamedBufferStorageExternalEXT;
    glFogCoordfEXT = pAPI->glFogCoordfEXT;
    glFogCoordfvEXT = pAPI->glFogCoordfvEXT;
    glFogCoorddEXT = pAPI->glFogCoorddEXT;
    glFogCoorddvEXT = pAPI->glFogCoorddvEXT;
    glFogCoordPointerEXT = pAPI->glFogCoordPointerEXT;
    glBlitFramebufferEXT = pAPI->glBlitFramebufferEXT;
    glRenderbufferStorageMultisampleEXT = pAPI->glRenderbufferStorageMultisampleEXT;
    glIsRenderbufferEXT = pAPI->glIsRenderbufferEXT;
    glBindRenderbufferEXT = pAPI->glBindRenderbufferEXT;
    glDeleteRenderbuffersEXT = pAPI->glDeleteRenderbuffersEXT;
    glGenRenderbuffersEXT = pAPI->glGenRenderbuffersEXT;
    glRenderbufferStorageEXT = pAPI->glRenderbufferStorageEXT;
    glGetRenderbufferParameterivEXT = pAPI->glGetRenderbufferParameterivEXT;
    glIsFramebufferEXT = pAPI->glIsFramebufferEXT;
    glBindFramebufferEXT = pAPI->glBindFramebufferEXT;
    glDeleteFramebuffersEXT = pAPI->glDeleteFramebuffersEXT;
    glGenFramebuffersEXT = pAPI->glGenFramebuffersEXT;
    glCheckFramebufferStatusEXT = pAPI->glCheckFramebufferStatusEXT;
    glFramebufferTexture1DEXT = pAPI->glFramebufferTexture1DEXT;
    glFramebufferTexture2DEXT = pAPI->glFramebufferTexture2DEXT;
    glFramebufferTexture3DEXT = pAPI->glFramebufferTexture3DEXT;
    glFramebufferRenderbufferEXT = pAPI->glFramebufferRenderbufferEXT;
    glGetFramebufferAttachmentParameterivEXT = pAPI->glGetFramebufferAttachmentParameterivEXT;
    glGenerateMipmapEXT = pAPI->glGenerateMipmapEXT;
    glProgramParameteriEXT = pAPI->glProgramParameteriEXT;
    glProgramEnvParameters4fvEXT = pAPI->glProgramEnvParameters4fvEXT;
    glProgramLocalParameters4fvEXT = pAPI->glProgramLocalParameters4fvEXT;
    glGetUniformuivEXT = pAPI->glGetUniformuivEXT;
    glBindFragDataLocationEXT = pAPI->glBindFragDataLocationEXT;
    glGetFragDataLocationEXT = pAPI->glGetFragDataLocationEXT;
    glUniform1uiEXT = pAPI->glUniform1uiEXT;
    glUniform2uiEXT = pAPI->glUniform2uiEXT;
    glUniform3uiEXT = pAPI->glUniform3uiEXT;
    glUniform4uiEXT = pAPI->glUniform4uiEXT;
    glUniform1uivEXT = pAPI->glUniform1uivEXT;
    glUniform2uivEXT = pAPI->glUniform2uivEXT;
    glUniform3uivEXT = pAPI->glUniform3uivEXT;
    glUniform4uivEXT = pAPI->glUniform4uivEXT;
    glGetHistogramEXT = pAPI->glGetHistogramEXT;
    glGetHistogramParameterfvEXT = pAPI->glGetHistogramParameterfvEXT;
    glGetHistogramParameterivEXT = pAPI->glGetHistogramParameterivEXT;
    glGetMinmaxEXT = pAPI->glGetMinmaxEXT;
    glGetMinmaxParameterfvEXT = pAPI->glGetMinmaxParameterfvEXT;
    glGetMinmaxParameterivEXT = pAPI->glGetMinmaxParameterivEXT;
    glHistogramEXT = pAPI->glHistogramEXT;
    glMinmaxEXT = pAPI->glMinmaxEXT;
    glResetHistogramEXT = pAPI->glResetHistogramEXT;
    glResetMinmaxEXT = pAPI->glResetMinmaxEXT;
    glIndexFuncEXT = pAPI->glIndexFuncEXT;
    glIndexMaterialEXT = pAPI->glIndexMaterialEXT;
    glApplyTextureEXT = pAPI->glApplyTextureEXT;
    glTextureLightEXT = pAPI->glTextureLightEXT;
    glTextureMaterialEXT = pAPI->glTextureMaterialEXT;
    glGetUnsignedBytevEXT = pAPI->glGetUnsignedBytevEXT;
    glGetUnsignedBytei_vEXT = pAPI->glGetUnsignedBytei_vEXT;
    glDeleteMemoryObjectsEXT = pAPI->glDeleteMemoryObjectsEXT;
    glIsMemoryObjectEXT = pAPI->glIsMemoryObjectEXT;
    glCreateMemoryObjectsEXT = pAPI->glCreateMemoryObjectsEXT;
    glMemoryObjectParameterivEXT = pAPI->glMemoryObjectParameterivEXT;
    glGetMemoryObjectParameterivEXT = pAPI->glGetMemoryObjectParameterivEXT;
    glTexStorageMem2DEXT = pAPI->glTexStorageMem2DEXT;
    glTexStorageMem2DMultisampleEXT = pAPI->glTexStorageMem2DMultisampleEXT;
    glTexStorageMem3DEXT = pAPI->glTexStorageMem3DEXT;
    glTexStorageMem3DMultisampleEXT = pAPI->glTexStorageMem3DMultisampleEXT;
    glBufferStorageMemEXT = pAPI->glBufferStorageMemEXT;
    glTextureStorageMem2DEXT = pAPI->glTextureStorageMem2DEXT;
    glTextureStorageMem2DMultisampleEXT = pAPI->glTextureStorageMem2DMultisampleEXT;
    glTextureStorageMem3DEXT = pAPI->glTextureStorageMem3DEXT;
    glTextureStorageMem3DMultisampleEXT = pAPI->glTextureStorageMem3DMultisampleEXT;
    glNamedBufferStorageMemEXT = pAPI->glNamedBufferStorageMemEXT;
    glTexStorageMem1DEXT = pAPI->glTexStorageMem1DEXT;
    glTextureStorageMem1DEXT = pAPI->glTextureStorageMem1DEXT;
    glImportMemoryFdEXT = pAPI->glImportMemoryFdEXT;
    glImportMemoryWin32HandleEXT = pAPI->glImportMemoryWin32HandleEXT;
    glImportMemoryWin32NameEXT = pAPI->glImportMemoryWin32NameEXT;
    glMultiDrawArraysEXT = pAPI->glMultiDrawArraysEXT;
    glMultiDrawElementsEXT = pAPI->glMultiDrawElementsEXT;
    glSampleMaskEXT = pAPI->glSampleMaskEXT;
    glSamplePatternEXT = pAPI->glSamplePatternEXT;
    glColorTableEXT = pAPI->glColorTableEXT;
    glGetColorTableEXT = pAPI->glGetColorTableEXT;
    glGetColorTableParameterivEXT = pAPI->glGetColorTableParameterivEXT;
    glGetColorTableParameterfvEXT = pAPI->glGetColorTableParameterfvEXT;
    glPixelTransformParameteriEXT = pAPI->glPixelTransformParameteriEXT;
    glPixelTransformParameterfEXT = pAPI->glPixelTransformParameterfEXT;
    glPixelTransformParameterivEXT = pAPI->glPixelTransformParameterivEXT;
    glPixelTransformParameterfvEXT = pAPI->glPixelTransformParameterfvEXT;
    glGetPixelTransformParameterivEXT = pAPI->glGetPixelTransformParameterivEXT;
    glGetPixelTransformParameterfvEXT = pAPI->glGetPixelTransformParameterfvEXT;
    glPointParameterfEXT = pAPI->glPointParameterfEXT;
    glPointParameterfvEXT = pAPI->glPointParameterfvEXT;
    glPolygonOffsetEXT = pAPI->glPolygonOffsetEXT;
    glPolygonOffsetClampEXT = pAPI->glPolygonOffsetClampEXT;
    glProvokingVertexEXT = pAPI->glProvokingVertexEXT;
    glRasterSamplesEXT = pAPI->glRasterSamplesEXT;
    glGenSemaphoresEXT = pAPI->glGenSemaphoresEXT;
    glDeleteSemaphoresEXT = pAPI->glDeleteSemaphoresEXT;
    glIsSemaphoreEXT = pAPI->glIsSemaphoreEXT;
    glSemaphoreParameterui64vEXT = pAPI->glSemaphoreParameterui64vEXT;
    glGetSemaphoreParameterui64vEXT = pAPI->glGetSemaphoreParameterui64vEXT;
    glWaitSemaphoreEXT = pAPI->glWaitSemaphoreEXT;
    glSignalSemaphoreEXT = pAPI->glSignalSemaphoreEXT;
    glImportSemaphoreFdEXT = pAPI->glImportSemaphoreFdEXT;
    glImportSemaphoreWin32HandleEXT = pAPI->glImportSemaphoreWin32HandleEXT;
    glImportSemaphoreWin32NameEXT = pAPI->glImportSemaphoreWin32NameEXT;
    glSecondaryColor3bEXT = pAPI->glSecondaryColor3bEXT;
    glSecondaryColor3bvEXT = pAPI->glSecondaryColor3bvEXT;
    glSecondaryColor3dEXT = pAPI->glSecondaryColor3dEXT;
    glSecondaryColor3dvEXT = pAPI->glSecondaryColor3dvEXT;
    glSecondaryColor3fEXT = pAPI->glSecondaryColor3fEXT;
    glSecondaryColor3fvEXT = pAPI->glSecondaryColor3fvEXT;
    glSecondaryColor3iEXT = pAPI->glSecondaryColor3iEXT;
    glSecondaryColor3ivEXT = pAPI->glSecondaryColor3ivEXT;
    glSecondaryColor3sEXT = pAPI->glSecondaryColor3sEXT;
    glSecondaryColor3svEXT = pAPI->glSecondaryColor3svEXT;
    glSecondaryColor3ubEXT = pAPI->glSecondaryColor3ubEXT;
    glSecondaryColor3ubvEXT = pAPI->glSecondaryColor3ubvEXT;
    glSecondaryColor3uiEXT = pAPI->glSecondaryColor3uiEXT;
    glSecondaryColor3uivEXT = pAPI->glSecondaryColor3uivEXT;
    glSecondaryColor3usEXT = pAPI->glSecondaryColor3usEXT;
    glSecondaryColor3usvEXT = pAPI->glSecondaryColor3usvEXT;
    glSecondaryColorPointerEXT = pAPI->glSecondaryColorPointerEXT;
    glUseShaderProgramEXT = pAPI->glUseShaderProgramEXT;
    glActiveProgramEXT = pAPI->glActiveProgramEXT;
    glCreateShaderProgramEXT = pAPI->glCreateShaderProgramEXT;
    glActiveShaderProgramEXT = pAPI->glActiveShaderProgramEXT;
    glBindProgramPipelineEXT = pAPI->glBindProgramPipelineEXT;
    glCreateShaderProgramvEXT = pAPI->glCreateShaderProgramvEXT;
    glDeleteProgramPipelinesEXT = pAPI->glDeleteProgramPipelinesEXT;
    glGenProgramPipelinesEXT = pAPI->glGenProgramPipelinesEXT;
    glGetProgramPipelineInfoLogEXT = pAPI->glGetProgramPipelineInfoLogEXT;
    glGetProgramPipelineivEXT = pAPI->glGetProgramPipelineivEXT;
    glIsProgramPipelineEXT = pAPI->glIsProgramPipelineEXT;
    glUseProgramStagesEXT = pAPI->glUseProgramStagesEXT;
    glValidateProgramPipelineEXT = pAPI->glValidateProgramPipelineEXT;
    glFramebufferFetchBarrierEXT = pAPI->glFramebufferFetchBarrierEXT;
    glBindImageTextureEXT = pAPI->glBindImageTextureEXT;
    glMemoryBarrierEXT = pAPI->glMemoryBarrierEXT;
    glStencilClearTagEXT = pAPI->glStencilClearTagEXT;
    glActiveStencilFaceEXT = pAPI->glActiveStencilFaceEXT;
    glTexSubImage1DEXT = pAPI->glTexSubImage1DEXT;
    glTexSubImage2DEXT = pAPI->glTexSubImage2DEXT;
    glTexImage3DEXT = pAPI->glTexImage3DEXT;
    glTexSubImage3DEXT = pAPI->glTexSubImage3DEXT;
    glFramebufferTextureLayerEXT = pAPI->glFramebufferTextureLayerEXT;
    glTexBufferEXT = pAPI->glTexBufferEXT;
    glTexParameterIivEXT = pAPI->glTexParameterIivEXT;
    glTexParameterIuivEXT = pAPI->glTexParameterIuivEXT;
    glGetTexParameterIivEXT = pAPI->glGetTexParameterIivEXT;
    glGetTexParameterIuivEXT = pAPI->glGetTexParameterIuivEXT;
    glClearColorIiEXT = pAPI->glClearColorIiEXT;
    glClearColorIuiEXT = pAPI->glClearColorIuiEXT;
    glAreTexturesResidentEXT = pAPI->glAreTexturesResidentEXT;
    glBindTextureEXT = pAPI->glBindTextureEXT;
    glDeleteTexturesEXT = pAPI->glDeleteTexturesEXT;
    glGenTexturesEXT = pAPI->glGenTexturesEXT;
    glIsTextureEXT = pAPI->glIsTextureEXT;
    glPrioritizeTexturesEXT = pAPI->glPrioritizeTexturesEXT;
    glTextureNormalEXT = pAPI->glTextureNormalEXT;
    glCreateSemaphoresNV = pAPI->glCreateSemaphoresNV;
    glSemaphoreParameterivNV = pAPI->glSemaphoreParameterivNV;
    glGetSemaphoreParameterivNV = pAPI->glGetSemaphoreParameterivNV;
    glGetQueryObjecti64vEXT = pAPI->glGetQueryObjecti64vEXT;
    glGetQueryObjectui64vEXT = pAPI->glGetQueryObjectui64vEXT;
    glBeginTransformFeedbackEXT = pAPI->glBeginTransformFeedbackEXT;
    glEndTransformFeedbackEXT = pAPI->glEndTransformFeedbackEXT;
    glBindBufferRangeEXT = pAPI->glBindBufferRangeEXT;
    glBindBufferOffsetEXT = pAPI->glBindBufferOffsetEXT;
    glBindBufferBaseEXT = pAPI->glBindBufferBaseEXT;
    glTransformFeedbackVaryingsEXT = pAPI->glTransformFeedbackVaryingsEXT;
    glGetTransformFeedbackVaryingEXT = pAPI->glGetTransformFeedbackVaryingEXT;
    glArrayElementEXT = pAPI->glArrayElementEXT;
    glColorPointerEXT = pAPI->glColorPointerEXT;
    glDrawArraysEXT = pAPI->glDrawArraysEXT;
    glEdgeFlagPointerEXT = pAPI->glEdgeFlagPointerEXT;
    glGetPointervEXT = pAPI->glGetPointervEXT;
    glIndexPointerEXT = pAPI->glIndexPointerEXT;
    glNormalPointerEXT = pAPI->glNormalPointerEXT;
    glTexCoordPointerEXT = pAPI->glTexCoordPointerEXT;
    glVertexPointerEXT = pAPI->glVertexPointerEXT;
    glVertexAttribL1dEXT = pAPI->glVertexAttribL1dEXT;
    glVertexAttribL2dEXT = pAPI->glVertexAttribL2dEXT;
    glVertexAttribL3dEXT = pAPI->glVertexAttribL3dEXT;
    glVertexAttribL4dEXT = pAPI->glVertexAttribL4dEXT;
    glVertexAttribL1dvEXT = pAPI->glVertexAttribL1dvEXT;
    glVertexAttribL2dvEXT = pAPI->glVertexAttribL2dvEXT;
    glVertexAttribL3dvEXT = pAPI->glVertexAttribL3dvEXT;
    glVertexAttribL4dvEXT = pAPI->glVertexAttribL4dvEXT;
    glVertexAttribLPointerEXT = pAPI->glVertexAttribLPointerEXT;
    glGetVertexAttribLdvEXT = pAPI->glGetVertexAttribLdvEXT;
    glBeginVertexShaderEXT = pAPI->glBeginVertexShaderEXT;
    glEndVertexShaderEXT = pAPI->glEndVertexShaderEXT;
    glBindVertexShaderEXT = pAPI->glBindVertexShaderEXT;
    glGenVertexShadersEXT = pAPI->glGenVertexShadersEXT;
    glDeleteVertexShaderEXT = pAPI->glDeleteVertexShaderEXT;
    glShaderOp1EXT = pAPI->glShaderOp1EXT;
    glShaderOp2EXT = pAPI->glShaderOp2EXT;
    glShaderOp3EXT = pAPI->glShaderOp3EXT;
    glSwizzleEXT = pAPI->glSwizzleEXT;
    glWriteMaskEXT = pAPI->glWriteMaskEXT;
    glInsertComponentEXT = pAPI->glInsertComponentEXT;
    glExtractComponentEXT = pAPI->glExtractComponentEXT;
    glGenSymbolsEXT = pAPI->glGenSymbolsEXT;
    glSetInvariantEXT = pAPI->glSetInvariantEXT;
    glSetLocalConstantEXT = pAPI->glSetLocalConstantEXT;
    glVariantbvEXT = pAPI->glVariantbvEXT;
    glVariantsvEXT = pAPI->glVariantsvEXT;
    glVariantivEXT = pAPI->glVariantivEXT;
    glVariantfvEXT = pAPI->glVariantfvEXT;
    glVariantdvEXT = pAPI->glVariantdvEXT;
    glVariantubvEXT = pAPI->glVariantubvEXT;
    glVariantusvEXT = pAPI->glVariantusvEXT;
    glVariantuivEXT = pAPI->glVariantuivEXT;
    glVariantPointerEXT = pAPI->glVariantPointerEXT;
    glEnableVariantClientStateEXT = pAPI->glEnableVariantClientStateEXT;
    glDisableVariantClientStateEXT = pAPI->glDisableVariantClientStateEXT;
    glBindLightParameterEXT = pAPI->glBindLightParameterEXT;
    glBindMaterialParameterEXT = pAPI->glBindMaterialParameterEXT;
    glBindTexGenParameterEXT = pAPI->glBindTexGenParameterEXT;
    glBindTextureUnitParameterEXT = pAPI->glBindTextureUnitParameterEXT;
    glBindParameterEXT = pAPI->glBindParameterEXT;
    glIsVariantEnabledEXT = pAPI->glIsVariantEnabledEXT;
    glGetVariantBooleanvEXT = pAPI->glGetVariantBooleanvEXT;
    glGetVariantIntegervEXT = pAPI->glGetVariantIntegervEXT;
    glGetVariantFloatvEXT = pAPI->glGetVariantFloatvEXT;
    glGetVariantPointervEXT = pAPI->glGetVariantPointervEXT;
    glGetInvariantBooleanvEXT = pAPI->glGetInvariantBooleanvEXT;
    glGetInvariantIntegervEXT = pAPI->glGetInvariantIntegervEXT;
    glGetInvariantFloatvEXT = pAPI->glGetInvariantFloatvEXT;
    glGetLocalConstantBooleanvEXT = pAPI->glGetLocalConstantBooleanvEXT;
    glGetLocalConstantIntegervEXT = pAPI->glGetLocalConstantIntegervEXT;
    glGetLocalConstantFloatvEXT = pAPI->glGetLocalConstantFloatvEXT;
    glVertexWeightfEXT = pAPI->glVertexWeightfEXT;
    glVertexWeightfvEXT = pAPI->glVertexWeightfvEXT;
    glVertexWeightPointerEXT = pAPI->glVertexWeightPointerEXT;
    glAcquireKeyedMutexWin32EXT = pAPI->glAcquireKeyedMutexWin32EXT;
    glReleaseKeyedMutexWin32EXT = pAPI->glReleaseKeyedMutexWin32EXT;
    glWindowRectanglesEXT = pAPI->glWindowRectanglesEXT;
    glImportSyncEXT = pAPI->glImportSyncEXT;
    glFrameTerminatorGREMEDY = pAPI->glFrameTerminatorGREMEDY;
    glStringMarkerGREMEDY = pAPI->glStringMarkerGREMEDY;
    glImageTransformParameteriHP = pAPI->glImageTransformParameteriHP;
    glImageTransformParameterfHP = pAPI->glImageTransformParameterfHP;
    glImageTransformParameterivHP = pAPI->glImageTransformParameterivHP;
    glImageTransformParameterfvHP = pAPI->glImageTransformParameterfvHP;
    glGetImageTransformParameterivHP = pAPI->glGetImageTransformParameterivHP;
    glGetImageTransformParameterfvHP = pAPI->glGetImageTransformParameterfvHP;
    glMultiModeDrawArraysIBM = pAPI->glMultiModeDrawArraysIBM;
    glMultiModeDrawElementsIBM = pAPI->glMultiModeDrawElementsIBM;
    glFlushStaticDataIBM = pAPI->glFlushStaticDataIBM;
    glColorPointerListIBM = pAPI->glColorPointerListIBM;
    glSecondaryColorPointerListIBM = pAPI->glSecondaryColorPointerListIBM;
    glEdgeFlagPointerListIBM = pAPI->glEdgeFlagPointerListIBM;
    glFogCoordPointerListIBM = pAPI->glFogCoordPointerListIBM;
    glIndexPointerListIBM = pAPI->glIndexPointerListIBM;
    glNormalPointerListIBM = pAPI->glNormalPointerListIBM;
    glTexCoordPointerListIBM = pAPI->glTexCoordPointerListIBM;
    glVertexPointerListIBM = pAPI->glVertexPointerListIBM;
    glBlendFuncSeparateINGR = pAPI->glBlendFuncSeparateINGR;
    glApplyFramebufferAttachmentCMAAINTEL = pAPI->glApplyFramebufferAttachmentCMAAINTEL;
    glSyncTextureINTEL = pAPI->glSyncTextureINTEL;
    glUnmapTexture2DINTEL = pAPI->glUnmapTexture2DINTEL;
    glMapTexture2DINTEL = pAPI->glMapTexture2DINTEL;
    glVertexPointervINTEL = pAPI->glVertexPointervINTEL;
    glNormalPointervINTEL = pAPI->glNormalPointervINTEL;
    glColorPointervINTEL = pAPI->glColorPointervINTEL;
    glTexCoordPointervINTEL = pAPI->glTexCoordPointervINTEL;
    glBeginPerfQueryINTEL = pAPI->glBeginPerfQueryINTEL;
    glCreatePerfQueryINTEL = pAPI->glCreatePerfQueryINTEL;
    glDeletePerfQueryINTEL = pAPI->glDeletePerfQueryINTEL;
    glEndPerfQueryINTEL = pAPI->glEndPerfQueryINTEL;
    glGetFirstPerfQueryIdINTEL = pAPI->glGetFirstPerfQueryIdINTEL;
    glGetNextPerfQueryIdINTEL = pAPI->glGetNextPerfQueryIdINTEL;
    glGetPerfCounterInfoINTEL = pAPI->glGetPerfCounterInfoINTEL;
    glGetPerfQueryDataINTEL = pAPI->glGetPerfQueryDataINTEL;
    glGetPerfQueryIdByNameINTEL = pAPI->glGetPerfQueryIdByNameINTEL;
    glGetPerfQueryInfoINTEL = pAPI->glGetPerfQueryInfoINTEL;
    glBlendBarrierKHR = pAPI->glBlendBarrierKHR;
    glDebugMessageControlKHR = pAPI->glDebugMessageControlKHR;
    glDebugMessageInsertKHR = pAPI->glDebugMessageInsertKHR;
    glDebugMessageCallbackKHR = pAPI->glDebugMessageCallbackKHR;
    glGetDebugMessageLogKHR = pAPI->glGetDebugMessageLogKHR;
    glPushDebugGroupKHR = pAPI->glPushDebugGroupKHR;
    glPopDebugGroupKHR = pAPI->glPopDebugGroupKHR;
    glObjectLabelKHR = pAPI->glObjectLabelKHR;
    glGetObjectLabelKHR = pAPI->glGetObjectLabelKHR;
    glObjectPtrLabelKHR = pAPI->glObjectPtrLabelKHR;
    glGetObjectPtrLabelKHR = pAPI->glGetObjectPtrLabelKHR;
    glGetPointervKHR = pAPI->glGetPointervKHR;
    glGetGraphicsResetStatusKHR = pAPI->glGetGraphicsResetStatusKHR;
    glReadnPixelsKHR = pAPI->glReadnPixelsKHR;
    glGetnUniformfvKHR = pAPI->glGetnUniformfvKHR;
    glGetnUniformivKHR = pAPI->glGetnUniformivKHR;
    glGetnUniformuivKHR = pAPI->glGetnUniformuivKHR;
    glMaxShaderCompilerThreadsKHR = pAPI->glMaxShaderCompilerThreadsKHR;
    glFramebufferParameteriMESA = pAPI->glFramebufferParameteriMESA;
    glGetFramebufferParameterivMESA = pAPI->glGetFramebufferParameterivMESA;
    glResizeBuffersMESA = pAPI->glResizeBuffersMESA;
    glWindowPos2dMESA = pAPI->glWindowPos2dMESA;
    glWindowPos2dvMESA = pAPI->glWindowPos2dvMESA;
    glWindowPos2fMESA = pAPI->glWindowPos2fMESA;
    glWindowPos2fvMESA = pAPI->glWindowPos2fvMESA;
    glWindowPos2iMESA = pAPI->glWindowPos2iMESA;
    glWindowPos2ivMESA = pAPI->glWindowPos2ivMESA;
    glWindowPos2sMESA = pAPI->glWindowPos2sMESA;
    glWindowPos2svMESA = pAPI->glWindowPos2svMESA;
    glWindowPos3dMESA = pAPI->glWindowPos3dMESA;
    glWindowPos3dvMESA = pAPI->glWindowPos3dvMESA;
    glWindowPos3fMESA = pAPI->glWindowPos3fMESA;
    glWindowPos3fvMESA = pAPI->glWindowPos3fvMESA;
    glWindowPos3iMESA = pAPI->glWindowPos3iMESA;
    glWindowPos3ivMESA = pAPI->glWindowPos3ivMESA;
    glWindowPos3sMESA = pAPI->glWindowPos3sMESA;
    glWindowPos3svMESA = pAPI->glWindowPos3svMESA;
    glWindowPos4dMESA = pAPI->glWindowPos4dMESA;
    glWindowPos4dvMESA = pAPI->glWindowPos4dvMESA;
    glWindowPos4fMESA = pAPI->glWindowPos4fMESA;
    glWindowPos4fvMESA = pAPI->glWindowPos4fvMESA;
    glWindowPos4iMESA = pAPI->glWindowPos4iMESA;
    glWindowPos4ivMESA = pAPI->glWindowPos4ivMESA;
    glWindowPos4sMESA = pAPI->glWindowPos4sMESA;
    glWindowPos4svMESA = pAPI->glWindowPos4svMESA;
    glBeginConditionalRenderNVX = pAPI->glBeginConditionalRenderNVX;
    glEndConditionalRenderNVX = pAPI->glEndConditionalRenderNVX;
    glLGPUNamedBufferSubDataNVX = pAPI->glLGPUNamedBufferSubDataNVX;
    glLGPUCopyImageSubDataNVX = pAPI->glLGPUCopyImageSubDataNVX;
    glLGPUInterlockNVX = pAPI->glLGPUInterlockNVX;
    glAlphaToCoverageDitherControlNV = pAPI->glAlphaToCoverageDitherControlNV;
    glMultiDrawArraysIndirectBindlessNV = pAPI->glMultiDrawArraysIndirectBindlessNV;
    glMultiDrawElementsIndirectBindlessNV = pAPI->glMultiDrawElementsIndirectBindlessNV;
    glMultiDrawArraysIndirectBindlessCountNV = pAPI->glMultiDrawArraysIndirectBindlessCountNV;
    glMultiDrawElementsIndirectBindlessCountNV = pAPI->glMultiDrawElementsIndirectBindlessCountNV;
    glGetTextureHandleNV = pAPI->glGetTextureHandleNV;
    glGetTextureSamplerHandleNV = pAPI->glGetTextureSamplerHandleNV;
    glMakeTextureHandleResidentNV = pAPI->glMakeTextureHandleResidentNV;
    glMakeTextureHandleNonResidentNV = pAPI->glMakeTextureHandleNonResidentNV;
    glGetImageHandleNV = pAPI->glGetImageHandleNV;
    glMakeImageHandleResidentNV = pAPI->glMakeImageHandleResidentNV;
    glMakeImageHandleNonResidentNV = pAPI->glMakeImageHandleNonResidentNV;
    glUniformHandleui64NV = pAPI->glUniformHandleui64NV;
    glUniformHandleui64vNV = pAPI->glUniformHandleui64vNV;
    glProgramUniformHandleui64NV = pAPI->glProgramUniformHandleui64NV;
    glProgramUniformHandleui64vNV = pAPI->glProgramUniformHandleui64vNV;
    glIsTextureHandleResidentNV = pAPI->glIsTextureHandleResidentNV;
    glIsImageHandleResidentNV = pAPI->glIsImageHandleResidentNV;
    glBlendParameteriNV = pAPI->glBlendParameteriNV;
    glBlendBarrierNV = pAPI->glBlendBarrierNV;
    glViewportPositionWScaleNV = pAPI->glViewportPositionWScaleNV;
    glCreateStatesNV = pAPI->glCreateStatesNV;
    glDeleteStatesNV = pAPI->glDeleteStatesNV;
    glIsStateNV = pAPI->glIsStateNV;
    glStateCaptureNV = pAPI->glStateCaptureNV;
    glGetCommandHeaderNV = pAPI->glGetCommandHeaderNV;
    glGetStageIndexNV = pAPI->glGetStageIndexNV;
    glDrawCommandsNV = pAPI->glDrawCommandsNV;
    glDrawCommandsAddressNV = pAPI->glDrawCommandsAddressNV;
    glDrawCommandsStatesNV = pAPI->glDrawCommandsStatesNV;
    glDrawCommandsStatesAddressNV = pAPI->glDrawCommandsStatesAddressNV;
    glCreateCommandListsNV = pAPI->glCreateCommandListsNV;
    glDeleteCommandListsNV = pAPI->glDeleteCommandListsNV;
    glIsCommandListNV = pAPI->glIsCommandListNV;
    glListDrawCommandsStatesClientNV = pAPI->glListDrawCommandsStatesClientNV;
    glCommandListSegmentsNV = pAPI->glCommandListSegmentsNV;
    glCompileCommandListNV = pAPI->glCompileCommandListNV;
    glCallCommandListNV = pAPI->glCallCommandListNV;
    glBeginConditionalRenderNV = pAPI->glBeginConditionalRenderNV;
    glEndConditionalRenderNV = pAPI->glEndConditionalRenderNV;
    glSubpixelPrecisionBiasNV = pAPI->glSubpixelPrecisionBiasNV;
    glConservativeRasterParameterfNV = pAPI->glConservativeRasterParameterfNV;
    glConservativeRasterParameteriNV = pAPI->glConservativeRasterParameteriNV;
    glCopyImageSubDataNV = pAPI->glCopyImageSubDataNV;
    glDepthRangedNV = pAPI->glDepthRangedNV;
    glClearDepthdNV = pAPI->glClearDepthdNV;
    glDepthBoundsdNV = pAPI->glDepthBoundsdNV;
    glDrawTextureNV = pAPI->glDrawTextureNV;
    glDrawVkImageNV = pAPI->glDrawVkImageNV;
    glGetVkProcAddrNV = pAPI->glGetVkProcAddrNV;
    glWaitVkSemaphoreNV = pAPI->glWaitVkSemaphoreNV;
    glSignalVkSemaphoreNV = pAPI->glSignalVkSemaphoreNV;
    glSignalVkFenceNV = pAPI->glSignalVkFenceNV;
    glMapControlPointsNV = pAPI->glMapControlPointsNV;
    glMapParameterivNV = pAPI->glMapParameterivNV;
    glMapParameterfvNV = pAPI->glMapParameterfvNV;
    glGetMapControlPointsNV = pAPI->glGetMapControlPointsNV;
    glGetMapParameterivNV = pAPI->glGetMapParameterivNV;
    glGetMapParameterfvNV = pAPI->glGetMapParameterfvNV;
    glGetMapAttribParameterivNV = pAPI->glGetMapAttribParameterivNV;
    glGetMapAttribParameterfvNV = pAPI->glGetMapAttribParameterfvNV;
    glEvalMapsNV = pAPI->glEvalMapsNV;
    glGetMultisamplefvNV = pAPI->glGetMultisamplefvNV;
    glSampleMaskIndexedNV = pAPI->glSampleMaskIndexedNV;
    glTexRenderbufferNV = pAPI->glTexRenderbufferNV;
    glDeleteFencesNV = pAPI->glDeleteFencesNV;
    glGenFencesNV = pAPI->glGenFencesNV;
    glIsFenceNV = pAPI->glIsFenceNV;
    glTestFenceNV = pAPI->glTestFenceNV;
    glGetFenceivNV = pAPI->glGetFenceivNV;
    glFinishFenceNV = pAPI->glFinishFenceNV;
    glSetFenceNV = pAPI->glSetFenceNV;
    glFragmentCoverageColorNV = pAPI->glFragmentCoverageColorNV;
    glProgramNamedParameter4fNV = pAPI->glProgramNamedParameter4fNV;
    glProgramNamedParameter4fvNV = pAPI->glProgramNamedParameter4fvNV;
    glProgramNamedParameter4dNV = pAPI->glProgramNamedParameter4dNV;
    glProgramNamedParameter4dvNV = pAPI->glProgramNamedParameter4dvNV;
    glGetProgramNamedParameterfvNV = pAPI->glGetProgramNamedParameterfvNV;
    glGetProgramNamedParameterdvNV = pAPI->glGetProgramNamedParameterdvNV;
    glCoverageModulationTableNV = pAPI->glCoverageModulationTableNV;
    glGetCoverageModulationTableNV = pAPI->glGetCoverageModulationTableNV;
    glCoverageModulationNV = pAPI->glCoverageModulationNV;
    glRenderbufferStorageMultisampleCoverageNV = pAPI->glRenderbufferStorageMultisampleCoverageNV;
    glProgramVertexLimitNV = pAPI->glProgramVertexLimitNV;
    glFramebufferTextureEXT = pAPI->glFramebufferTextureEXT;
    glFramebufferTextureFaceEXT = pAPI->glFramebufferTextureFaceEXT;
    glProgramLocalParameterI4iNV = pAPI->glProgramLocalParameterI4iNV;
    glProgramLocalParameterI4ivNV = pAPI->glProgramLocalParameterI4ivNV;
    glProgramLocalParametersI4ivNV = pAPI->glProgramLocalParametersI4ivNV;
    glProgramLocalParameterI4uiNV = pAPI->glProgramLocalParameterI4uiNV;
    glProgramLocalParameterI4uivNV = pAPI->glProgramLocalParameterI4uivNV;
    glProgramLocalParametersI4uivNV = pAPI->glProgramLocalParametersI4uivNV;
    glProgramEnvParameterI4iNV = pAPI->glProgramEnvParameterI4iNV;
    glProgramEnvParameterI4ivNV = pAPI->glProgramEnvParameterI4ivNV;
    glProgramEnvParametersI4ivNV = pAPI->glProgramEnvParametersI4ivNV;
    glProgramEnvParameterI4uiNV = pAPI->glProgramEnvParameterI4uiNV;
    glProgramEnvParameterI4uivNV = pAPI->glProgramEnvParameterI4uivNV;
    glProgramEnvParametersI4uivNV = pAPI->glProgramEnvParametersI4uivNV;
    glGetProgramLocalParameterIivNV = pAPI->glGetProgramLocalParameterIivNV;
    glGetProgramLocalParameterIuivNV = pAPI->glGetProgramLocalParameterIuivNV;
    glGetProgramEnvParameterIivNV = pAPI->glGetProgramEnvParameterIivNV;
    glGetProgramEnvParameterIuivNV = pAPI->glGetProgramEnvParameterIuivNV;
    glProgramSubroutineParametersuivNV = pAPI->glProgramSubroutineParametersuivNV;
    glGetProgramSubroutineParameteruivNV = pAPI->glGetProgramSubroutineParameteruivNV;
    glVertex2hNV = pAPI->glVertex2hNV;
    glVertex2hvNV = pAPI->glVertex2hvNV;
    glVertex3hNV = pAPI->glVertex3hNV;
    glVertex3hvNV = pAPI->glVertex3hvNV;
    glVertex4hNV = pAPI->glVertex4hNV;
    glVertex4hvNV = pAPI->glVertex4hvNV;
    glNormal3hNV = pAPI->glNormal3hNV;
    glNormal3hvNV = pAPI->glNormal3hvNV;
    glColor3hNV = pAPI->glColor3hNV;
    glColor3hvNV = pAPI->glColor3hvNV;
    glColor4hNV = pAPI->glColor4hNV;
    glColor4hvNV = pAPI->glColor4hvNV;
    glTexCoord1hNV = pAPI->glTexCoord1hNV;
    glTexCoord1hvNV = pAPI->glTexCoord1hvNV;
    glTexCoord2hNV = pAPI->glTexCoord2hNV;
    glTexCoord2hvNV = pAPI->glTexCoord2hvNV;
    glTexCoord3hNV = pAPI->glTexCoord3hNV;
    glTexCoord3hvNV = pAPI->glTexCoord3hvNV;
    glTexCoord4hNV = pAPI->glTexCoord4hNV;
    glTexCoord4hvNV = pAPI->glTexCoord4hvNV;
    glMultiTexCoord1hNV = pAPI->glMultiTexCoord1hNV;
    glMultiTexCoord1hvNV = pAPI->glMultiTexCoord1hvNV;
    glMultiTexCoord2hNV = pAPI->glMultiTexCoord2hNV;
    glMultiTexCoord2hvNV = pAPI->glMultiTexCoord2hvNV;
    glMultiTexCoord3hNV = pAPI->glMultiTexCoord3hNV;
    glMultiTexCoord3hvNV = pAPI->glMultiTexCoord3hvNV;
    glMultiTexCoord4hNV = pAPI->glMultiTexCoord4hNV;
    glMultiTexCoord4hvNV = pAPI->glMultiTexCoord4hvNV;
    glFogCoordhNV = pAPI->glFogCoordhNV;
    glFogCoordhvNV = pAPI->glFogCoordhvNV;
    glSecondaryColor3hNV = pAPI->glSecondaryColor3hNV;
    glSecondaryColor3hvNV = pAPI->glSecondaryColor3hvNV;
    glVertexWeighthNV = pAPI->glVertexWeighthNV;
    glVertexWeighthvNV = pAPI->glVertexWeighthvNV;
    glVertexAttrib1hNV = pAPI->glVertexAttrib1hNV;
    glVertexAttrib1hvNV = pAPI->glVertexAttrib1hvNV;
    glVertexAttrib2hNV = pAPI->glVertexAttrib2hNV;
    glVertexAttrib2hvNV = pAPI->glVertexAttrib2hvNV;
    glVertexAttrib3hNV = pAPI->glVertexAttrib3hNV;
    glVertexAttrib3hvNV = pAPI->glVertexAttrib3hvNV;
    glVertexAttrib4hNV = pAPI->glVertexAttrib4hNV;
    glVertexAttrib4hvNV = pAPI->glVertexAttrib4hvNV;
    glVertexAttribs1hvNV = pAPI->glVertexAttribs1hvNV;
    glVertexAttribs2hvNV = pAPI->glVertexAttribs2hvNV;
    glVertexAttribs3hvNV = pAPI->glVertexAttribs3hvNV;
    glVertexAttribs4hvNV = pAPI->glVertexAttribs4hvNV;
    glGetInternalformatSampleivNV = pAPI->glGetInternalformatSampleivNV;
    glRenderGpuMaskNV = pAPI->glRenderGpuMaskNV;
    glMulticastBufferSubDataNV = pAPI->glMulticastBufferSubDataNV;
    glMulticastCopyBufferSubDataNV = pAPI->glMulticastCopyBufferSubDataNV;
    glMulticastCopyImageSubDataNV = pAPI->glMulticastCopyImageSubDataNV;
    glMulticastBlitFramebufferNV = pAPI->glMulticastBlitFramebufferNV;
    glMulticastFramebufferSampleLocationsfvNV = pAPI->glMulticastFramebufferSampleLocationsfvNV;
    glMulticastBarrierNV = pAPI->glMulticastBarrierNV;
    glMulticastWaitSyncNV = pAPI->glMulticastWaitSyncNV;
    glMulticastGetQueryObjectivNV = pAPI->glMulticastGetQueryObjectivNV;
    glMulticastGetQueryObjectuivNV = pAPI->glMulticastGetQueryObjectuivNV;
    glMulticastGetQueryObjecti64vNV = pAPI->glMulticastGetQueryObjecti64vNV;
    glMulticastGetQueryObjectui64vNV = pAPI->glMulticastGetQueryObjectui64vNV;
    glUploadGpuMaskNVX = pAPI->glUploadGpuMaskNVX;
    glMulticastViewportArrayvNVX = pAPI->glMulticastViewportArrayvNVX;
    glMulticastViewportPositionWScaleNVX = pAPI->glMulticastViewportPositionWScaleNVX;
    glMulticastScissorArrayvNVX = pAPI->glMulticastScissorArrayvNVX;
    glAsyncCopyBufferSubDataNVX = pAPI->glAsyncCopyBufferSubDataNVX;
    glAsyncCopyImageSubDataNVX = pAPI->glAsyncCopyImageSubDataNVX;
    glCreateProgressFenceNVX = pAPI->glCreateProgressFenceNVX;
    glSignalSemaphoreui64NVX = pAPI->glSignalSemaphoreui64NVX;
    glWaitSemaphoreui64NVX = pAPI->glWaitSemaphoreui64NVX;
    glClientWaitSemaphoreui64NVX = pAPI->glClientWaitSemaphoreui64NVX;
    glGetMemoryObjectDetachedResourcesuivNV = pAPI->glGetMemoryObjectDetachedResourcesuivNV;
    glResetMemoryObjectParameterNV = pAPI->glResetMemoryObjectParameterNV;
    glTexAttachMemoryNV = pAPI->glTexAttachMemoryNV;
    glBufferAttachMemoryNV = pAPI->glBufferAttachMemoryNV;
    glTextureAttachMemoryNV = pAPI->glTextureAttachMemoryNV;
    glNamedBufferAttachMemoryNV = pAPI->glNamedBufferAttachMemoryNV;
    glBufferPageCommitmentMemNV = pAPI->glBufferPageCommitmentMemNV;
    glTexPageCommitmentMemNV = pAPI->glTexPageCommitmentMemNV;
    glNamedBufferPageCommitmentMemNV = pAPI->glNamedBufferPageCommitmentMemNV;
    glTexturePageCommitmentMemNV = pAPI->glTexturePageCommitmentMemNV;
    glDrawMeshTasksNV = pAPI->glDrawMeshTasksNV;
    glDrawMeshTasksIndirectNV = pAPI->glDrawMeshTasksIndirectNV;
    glMultiDrawMeshTasksIndirectNV = pAPI->glMultiDrawMeshTasksIndirectNV;
    glMultiDrawMeshTasksIndirectCountNV = pAPI->glMultiDrawMeshTasksIndirectCountNV;
    glGenOcclusionQueriesNV = pAPI->glGenOcclusionQueriesNV;
    glDeleteOcclusionQueriesNV = pAPI->glDeleteOcclusionQueriesNV;
    glIsOcclusionQueryNV = pAPI->glIsOcclusionQueryNV;
    glBeginOcclusionQueryNV = pAPI->glBeginOcclusionQueryNV;
    glEndOcclusionQueryNV = pAPI->glEndOcclusionQueryNV;
    glGetOcclusionQueryivNV = pAPI->glGetOcclusionQueryivNV;
    glGetOcclusionQueryuivNV = pAPI->glGetOcclusionQueryuivNV;
    glProgramBufferParametersfvNV = pAPI->glProgramBufferParametersfvNV;
    glProgramBufferParametersIivNV = pAPI->glProgramBufferParametersIivNV;
    glProgramBufferParametersIuivNV = pAPI->glProgramBufferParametersIuivNV;
    glGenPathsNV = pAPI->glGenPathsNV;
    glDeletePathsNV = pAPI->glDeletePathsNV;
    glIsPathNV = pAPI->glIsPathNV;
    glPathCommandsNV = pAPI->glPathCommandsNV;
    glPathCoordsNV = pAPI->glPathCoordsNV;
    glPathSubCommandsNV = pAPI->glPathSubCommandsNV;
    glPathSubCoordsNV = pAPI->glPathSubCoordsNV;
    glPathStringNV = pAPI->glPathStringNV;
    glPathGlyphsNV = pAPI->glPathGlyphsNV;
    glPathGlyphRangeNV = pAPI->glPathGlyphRangeNV;
    glWeightPathsNV = pAPI->glWeightPathsNV;
    glCopyPathNV = pAPI->glCopyPathNV;
    glInterpolatePathsNV = pAPI->glInterpolatePathsNV;
    glTransformPathNV = pAPI->glTransformPathNV;
    glPathParameterivNV = pAPI->glPathParameterivNV;
    glPathParameteriNV = pAPI->glPathParameteriNV;
    glPathParameterfvNV = pAPI->glPathParameterfvNV;
    glPathParameterfNV = pAPI->glPathParameterfNV;
    glPathDashArrayNV = pAPI->glPathDashArrayNV;
    glPathStencilFuncNV = pAPI->glPathStencilFuncNV;
    glPathStencilDepthOffsetNV = pAPI->glPathStencilDepthOffsetNV;
    glStencilFillPathNV = pAPI->glStencilFillPathNV;
    glStencilStrokePathNV = pAPI->glStencilStrokePathNV;
    glStencilFillPathInstancedNV = pAPI->glStencilFillPathInstancedNV;
    glStencilStrokePathInstancedNV = pAPI->glStencilStrokePathInstancedNV;
    glPathCoverDepthFuncNV = pAPI->glPathCoverDepthFuncNV;
    glCoverFillPathNV = pAPI->glCoverFillPathNV;
    glCoverStrokePathNV = pAPI->glCoverStrokePathNV;
    glCoverFillPathInstancedNV = pAPI->glCoverFillPathInstancedNV;
    glCoverStrokePathInstancedNV = pAPI->glCoverStrokePathInstancedNV;
    glGetPathParameterivNV = pAPI->glGetPathParameterivNV;
    glGetPathParameterfvNV = pAPI->glGetPathParameterfvNV;
    glGetPathCommandsNV = pAPI->glGetPathCommandsNV;
    glGetPathCoordsNV = pAPI->glGetPathCoordsNV;
    glGetPathDashArrayNV = pAPI->glGetPathDashArrayNV;
    glGetPathMetricsNV = pAPI->glGetPathMetricsNV;
    glGetPathMetricRangeNV = pAPI->glGetPathMetricRangeNV;
    glGetPathSpacingNV = pAPI->glGetPathSpacingNV;
    glIsPointInFillPathNV = pAPI->glIsPointInFillPathNV;
    glIsPointInStrokePathNV = pAPI->glIsPointInStrokePathNV;
    glGetPathLengthNV = pAPI->glGetPathLengthNV;
    glPointAlongPathNV = pAPI->glPointAlongPathNV;
    glMatrixLoad3x2fNV = pAPI->glMatrixLoad3x2fNV;
    glMatrixLoad3x3fNV = pAPI->glMatrixLoad3x3fNV;
    glMatrixLoadTranspose3x3fNV = pAPI->glMatrixLoadTranspose3x3fNV;
    glMatrixMult3x2fNV = pAPI->glMatrixMult3x2fNV;
    glMatrixMult3x3fNV = pAPI->glMatrixMult3x3fNV;
    glMatrixMultTranspose3x3fNV = pAPI->glMatrixMultTranspose3x3fNV;
    glStencilThenCoverFillPathNV = pAPI->glStencilThenCoverFillPathNV;
    glStencilThenCoverStrokePathNV = pAPI->glStencilThenCoverStrokePathNV;
    glStencilThenCoverFillPathInstancedNV = pAPI->glStencilThenCoverFillPathInstancedNV;
    glStencilThenCoverStrokePathInstancedNV = pAPI->glStencilThenCoverStrokePathInstancedNV;
    glPathGlyphIndexRangeNV = pAPI->glPathGlyphIndexRangeNV;
    glPathGlyphIndexArrayNV = pAPI->glPathGlyphIndexArrayNV;
    glPathMemoryGlyphIndexArrayNV = pAPI->glPathMemoryGlyphIndexArrayNV;
    glProgramPathFragmentInputGenNV = pAPI->glProgramPathFragmentInputGenNV;
    glGetProgramResourcefvNV = pAPI->glGetProgramResourcefvNV;
    glPathColorGenNV = pAPI->glPathColorGenNV;
    glPathTexGenNV = pAPI->glPathTexGenNV;
    glPathFogGenNV = pAPI->glPathFogGenNV;
    glGetPathColorGenivNV = pAPI->glGetPathColorGenivNV;
    glGetPathColorGenfvNV = pAPI->glGetPathColorGenfvNV;
    glGetPathTexGenivNV = pAPI->glGetPathTexGenivNV;
    glGetPathTexGenfvNV = pAPI->glGetPathTexGenfvNV;
    glPixelDataRangeNV = pAPI->glPixelDataRangeNV;
    glFlushPixelDataRangeNV = pAPI->glFlushPixelDataRangeNV;
    glPointParameteriNV = pAPI->glPointParameteriNV;
    glPointParameterivNV = pAPI->glPointParameterivNV;
    glPresentFrameKeyedNV = pAPI->glPresentFrameKeyedNV;
    glPresentFrameDualFillNV = pAPI->glPresentFrameDualFillNV;
    glGetVideoivNV = pAPI->glGetVideoivNV;
    glGetVideouivNV = pAPI->glGetVideouivNV;
    glGetVideoi64vNV = pAPI->glGetVideoi64vNV;
    glGetVideoui64vNV = pAPI->glGetVideoui64vNV;
    glPrimitiveRestartNV = pAPI->glPrimitiveRestartNV;
    glPrimitiveRestartIndexNV = pAPI->glPrimitiveRestartIndexNV;
    glQueryResourceNV = pAPI->glQueryResourceNV;
    glGenQueryResourceTagNV = pAPI->glGenQueryResourceTagNV;
    glDeleteQueryResourceTagNV = pAPI->glDeleteQueryResourceTagNV;
    glQueryResourceTagNV = pAPI->glQueryResourceTagNV;
    glCombinerParameterfvNV = pAPI->glCombinerParameterfvNV;
    glCombinerParameterfNV = pAPI->glCombinerParameterfNV;
    glCombinerParameterivNV = pAPI->glCombinerParameterivNV;
    glCombinerParameteriNV = pAPI->glCombinerParameteriNV;
    glCombinerInputNV = pAPI->glCombinerInputNV;
    glCombinerOutputNV = pAPI->glCombinerOutputNV;
    glFinalCombinerInputNV = pAPI->glFinalCombinerInputNV;
    glGetCombinerInputParameterfvNV = pAPI->glGetCombinerInputParameterfvNV;
    glGetCombinerInputParameterivNV = pAPI->glGetCombinerInputParameterivNV;
    glGetCombinerOutputParameterfvNV = pAPI->glGetCombinerOutputParameterfvNV;
    glGetCombinerOutputParameterivNV = pAPI->glGetCombinerOutputParameterivNV;
    glGetFinalCombinerInputParameterfvNV = pAPI->glGetFinalCombinerInputParameterfvNV;
    glGetFinalCombinerInputParameterivNV = pAPI->glGetFinalCombinerInputParameterivNV;
    glCombinerStageParameterfvNV = pAPI->glCombinerStageParameterfvNV;
    glGetCombinerStageParameterfvNV = pAPI->glGetCombinerStageParameterfvNV;
    glFramebufferSampleLocationsfvNV = pAPI->glFramebufferSampleLocationsfvNV;
    glNamedFramebufferSampleLocationsfvNV = pAPI->glNamedFramebufferSampleLocationsfvNV;
    glResolveDepthValuesNV = pAPI->glResolveDepthValuesNV;
    glScissorExclusiveNV = pAPI->glScissorExclusiveNV;
    glScissorExclusiveArrayvNV = pAPI->glScissorExclusiveArrayvNV;
    glMakeBufferResidentNV = pAPI->glMakeBufferResidentNV;
    glMakeBufferNonResidentNV = pAPI->glMakeBufferNonResidentNV;
    glIsBufferResidentNV = pAPI->glIsBufferResidentNV;
    glMakeNamedBufferResidentNV = pAPI->glMakeNamedBufferResidentNV;
    glMakeNamedBufferNonResidentNV = pAPI->glMakeNamedBufferNonResidentNV;
    glIsNamedBufferResidentNV = pAPI->glIsNamedBufferResidentNV;
    glGetBufferParameterui64vNV = pAPI->glGetBufferParameterui64vNV;
    glGetNamedBufferParameterui64vNV = pAPI->glGetNamedBufferParameterui64vNV;
    glGetIntegerui64vNV = pAPI->glGetIntegerui64vNV;
    glUniformui64NV = pAPI->glUniformui64NV;
    glUniformui64vNV = pAPI->glUniformui64vNV;
    glProgramUniformui64NV = pAPI->glProgramUniformui64NV;
    glProgramUniformui64vNV = pAPI->glProgramUniformui64vNV;
    glBindShadingRateImageNV = pAPI->glBindShadingRateImageNV;
    glGetShadingRateImagePaletteNV = pAPI->glGetShadingRateImagePaletteNV;
    glGetShadingRateSampleLocationivNV = pAPI->glGetShadingRateSampleLocationivNV;
    glShadingRateImageBarrierNV = pAPI->glShadingRateImageBarrierNV;
    glShadingRateImagePaletteNV = pAPI->glShadingRateImagePaletteNV;
    glShadingRateSampleOrderNV = pAPI->glShadingRateSampleOrderNV;
    glShadingRateSampleOrderCustomNV = pAPI->glShadingRateSampleOrderCustomNV;
    glTextureBarrierNV = pAPI->glTextureBarrierNV;
    glTexImage2DMultisampleCoverageNV = pAPI->glTexImage2DMultisampleCoverageNV;
    glTexImage3DMultisampleCoverageNV = pAPI->glTexImage3DMultisampleCoverageNV;
    glTextureImage2DMultisampleNV = pAPI->glTextureImage2DMultisampleNV;
    glTextureImage3DMultisampleNV = pAPI->glTextureImage3DMultisampleNV;
    glTextureImage2DMultisampleCoverageNV = pAPI->glTextureImage2DMultisampleCoverageNV;
    glTextureImage3DMultisampleCoverageNV = pAPI->glTextureImage3DMultisampleCoverageNV;
    glBeginTransformFeedbackNV = pAPI->glBeginTransformFeedbackNV;
    glEndTransformFeedbackNV = pAPI->glEndTransformFeedbackNV;
    glTransformFeedbackAttribsNV = pAPI->glTransformFeedbackAttribsNV;
    glBindBufferRangeNV = pAPI->glBindBufferRangeNV;
    glBindBufferOffsetNV = pAPI->glBindBufferOffsetNV;
    glBindBufferBaseNV = pAPI->glBindBufferBaseNV;
    glTransformFeedbackVaryingsNV = pAPI->glTransformFeedbackVaryingsNV;
    glActiveVaryingNV = pAPI->glActiveVaryingNV;
    glGetVaryingLocationNV = pAPI->glGetVaryingLocationNV;
    glGetActiveVaryingNV = pAPI->glGetActiveVaryingNV;
    glGetTransformFeedbackVaryingNV = pAPI->glGetTransformFeedbackVaryingNV;
    glTransformFeedbackStreamAttribsNV = pAPI->glTransformFeedbackStreamAttribsNV;
    glBindTransformFeedbackNV = pAPI->glBindTransformFeedbackNV;
    glDeleteTransformFeedbacksNV = pAPI->glDeleteTransformFeedbacksNV;
    glGenTransformFeedbacksNV = pAPI->glGenTransformFeedbacksNV;
    glIsTransformFeedbackNV = pAPI->glIsTransformFeedbackNV;
    glPauseTransformFeedbackNV = pAPI->glPauseTransformFeedbackNV;
    glResumeTransformFeedbackNV = pAPI->glResumeTransformFeedbackNV;
    glDrawTransformFeedbackNV = pAPI->glDrawTransformFeedbackNV;
    glVDPAUInitNV = pAPI->glVDPAUInitNV;
    glVDPAUFiniNV = pAPI->glVDPAUFiniNV;
    glVDPAURegisterVideoSurfaceNV = pAPI->glVDPAURegisterVideoSurfaceNV;
    glVDPAURegisterOutputSurfaceNV = pAPI->glVDPAURegisterOutputSurfaceNV;
    glVDPAUIsSurfaceNV = pAPI->glVDPAUIsSurfaceNV;
    glVDPAUUnregisterSurfaceNV = pAPI->glVDPAUUnregisterSurfaceNV;
    glVDPAUGetSurfaceivNV = pAPI->glVDPAUGetSurfaceivNV;
    glVDPAUSurfaceAccessNV = pAPI->glVDPAUSurfaceAccessNV;
    glVDPAUMapSurfacesNV = pAPI->glVDPAUMapSurfacesNV;
    glVDPAUUnmapSurfacesNV = pAPI->glVDPAUUnmapSurfacesNV;
    glVDPAURegisterVideoSurfaceWithPictureStructureNV = pAPI->glVDPAURegisterVideoSurfaceWithPictureStructureNV;
    glFlushVertexArrayRangeNV = pAPI->glFlushVertexArrayRangeNV;
    glVertexArrayRangeNV = pAPI->glVertexArrayRangeNV;
    glVertexAttribL1i64NV = pAPI->glVertexAttribL1i64NV;
    glVertexAttribL2i64NV = pAPI->glVertexAttribL2i64NV;
    glVertexAttribL3i64NV = pAPI->glVertexAttribL3i64NV;
    glVertexAttribL4i64NV = pAPI->glVertexAttribL4i64NV;
    glVertexAttribL1i64vNV = pAPI->glVertexAttribL1i64vNV;
    glVertexAttribL2i64vNV = pAPI->glVertexAttribL2i64vNV;
    glVertexAttribL3i64vNV = pAPI->glVertexAttribL3i64vNV;
    glVertexAttribL4i64vNV = pAPI->glVertexAttribL4i64vNV;
    glVertexAttribL1ui64NV = pAPI->glVertexAttribL1ui64NV;
    glVertexAttribL2ui64NV = pAPI->glVertexAttribL2ui64NV;
    glVertexAttribL3ui64NV = pAPI->glVertexAttribL3ui64NV;
    glVertexAttribL4ui64NV = pAPI->glVertexAttribL4ui64NV;
    glVertexAttribL1ui64vNV = pAPI->glVertexAttribL1ui64vNV;
    glVertexAttribL2ui64vNV = pAPI->glVertexAttribL2ui64vNV;
    glVertexAttribL3ui64vNV = pAPI->glVertexAttribL3ui64vNV;
    glVertexAttribL4ui64vNV = pAPI->glVertexAttribL4ui64vNV;
    glGetVertexAttribLi64vNV = pAPI->glGetVertexAttribLi64vNV;
    glGetVertexAttribLui64vNV = pAPI->glGetVertexAttribLui64vNV;
    glVertexAttribLFormatNV = pAPI->glVertexAttribLFormatNV;
    glBufferAddressRangeNV = pAPI->glBufferAddressRangeNV;
    glVertexFormatNV = pAPI->glVertexFormatNV;
    glNormalFormatNV = pAPI->glNormalFormatNV;
    glColorFormatNV = pAPI->glColorFormatNV;
    glIndexFormatNV = pAPI->glIndexFormatNV;
    glTexCoordFormatNV = pAPI->glTexCoordFormatNV;
    glEdgeFlagFormatNV = pAPI->glEdgeFlagFormatNV;
    glSecondaryColorFormatNV = pAPI->glSecondaryColorFormatNV;
    glFogCoordFormatNV = pAPI->glFogCoordFormatNV;
    glVertexAttribFormatNV = pAPI->glVertexAttribFormatNV;
    glVertexAttribIFormatNV = pAPI->glVertexAttribIFormatNV;
    glGetIntegerui64i_vNV = pAPI->glGetIntegerui64i_vNV;
    glAreProgramsResidentNV = pAPI->glAreProgramsResidentNV;
    glBindProgramNV = pAPI->glBindProgramNV;
    glDeleteProgramsNV = pAPI->glDeleteProgramsNV;
    glExecuteProgramNV = pAPI->glExecuteProgramNV;
    glGenProgramsNV = pAPI->glGenProgramsNV;
    glGetProgramParameterdvNV = pAPI->glGetProgramParameterdvNV;
    glGetProgramParameterfvNV = pAPI->glGetProgramParameterfvNV;
    glGetProgramivNV = pAPI->glGetProgramivNV;
    glGetProgramStringNV = pAPI->glGetProgramStringNV;
    glGetTrackMatrixivNV = pAPI->glGetTrackMatrixivNV;
    glGetVertexAttribdvNV = pAPI->glGetVertexAttribdvNV;
    glGetVertexAttribfvNV = pAPI->glGetVertexAttribfvNV;
    glGetVertexAttribivNV = pAPI->glGetVertexAttribivNV;
    glGetVertexAttribPointervNV = pAPI->glGetVertexAttribPointervNV;
    glIsProgramNV = pAPI->glIsProgramNV;
    glLoadProgramNV = pAPI->glLoadProgramNV;
    glProgramParameter4dNV = pAPI->glProgramParameter4dNV;
    glProgramParameter4dvNV = pAPI->glProgramParameter4dvNV;
    glProgramParameter4fNV = pAPI->glProgramParameter4fNV;
    glProgramParameter4fvNV = pAPI->glProgramParameter4fvNV;
    glProgramParameters4dvNV = pAPI->glProgramParameters4dvNV;
    glProgramParameters4fvNV = pAPI->glProgramParameters4fvNV;
    glRequestResidentProgramsNV = pAPI->glRequestResidentProgramsNV;
    glTrackMatrixNV = pAPI->glTrackMatrixNV;
    glVertexAttribPointerNV = pAPI->glVertexAttribPointerNV;
    glVertexAttrib1dNV = pAPI->glVertexAttrib1dNV;
    glVertexAttrib1dvNV = pAPI->glVertexAttrib1dvNV;
    glVertexAttrib1fNV = pAPI->glVertexAttrib1fNV;
    glVertexAttrib1fvNV = pAPI->glVertexAttrib1fvNV;
    glVertexAttrib1sNV = pAPI->glVertexAttrib1sNV;
    glVertexAttrib1svNV = pAPI->glVertexAttrib1svNV;
    glVertexAttrib2dNV = pAPI->glVertexAttrib2dNV;
    glVertexAttrib2dvNV = pAPI->glVertexAttrib2dvNV;
    glVertexAttrib2fNV = pAPI->glVertexAttrib2fNV;
    glVertexAttrib2fvNV = pAPI->glVertexAttrib2fvNV;
    glVertexAttrib2sNV = pAPI->glVertexAttrib2sNV;
    glVertexAttrib2svNV = pAPI->glVertexAttrib2svNV;
    glVertexAttrib3dNV = pAPI->glVertexAttrib3dNV;
    glVertexAttrib3dvNV = pAPI->glVertexAttrib3dvNV;
    glVertexAttrib3fNV = pAPI->glVertexAttrib3fNV;
    glVertexAttrib3fvNV = pAPI->glVertexAttrib3fvNV;
    glVertexAttrib3sNV = pAPI->glVertexAttrib3sNV;
    glVertexAttrib3svNV = pAPI->glVertexAttrib3svNV;
    glVertexAttrib4dNV = pAPI->glVertexAttrib4dNV;
    glVertexAttrib4dvNV = pAPI->glVertexAttrib4dvNV;
    glVertexAttrib4fNV = pAPI->glVertexAttrib4fNV;
    glVertexAttrib4fvNV = pAPI->glVertexAttrib4fvNV;
    glVertexAttrib4sNV = pAPI->glVertexAttrib4sNV;
    glVertexAttrib4svNV = pAPI->glVertexAttrib4svNV;
    glVertexAttrib4ubNV = pAPI->glVertexAttrib4ubNV;
    glVertexAttrib4ubvNV = pAPI->glVertexAttrib4ubvNV;
    glVertexAttribs1dvNV = pAPI->glVertexAttribs1dvNV;
    glVertexAttribs1fvNV = pAPI->glVertexAttribs1fvNV;
    glVertexAttribs1svNV = pAPI->glVertexAttribs1svNV;
    glVertexAttribs2dvNV = pAPI->glVertexAttribs2dvNV;
    glVertexAttribs2fvNV = pAPI->glVertexAttribs2fvNV;
    glVertexAttribs2svNV = pAPI->glVertexAttribs2svNV;
    glVertexAttribs3dvNV = pAPI->glVertexAttribs3dvNV;
    glVertexAttribs3fvNV = pAPI->glVertexAttribs3fvNV;
    glVertexAttribs3svNV = pAPI->glVertexAttribs3svNV;
    glVertexAttribs4dvNV = pAPI->glVertexAttribs4dvNV;
    glVertexAttribs4fvNV = pAPI->glVertexAttribs4fvNV;
    glVertexAttribs4svNV = pAPI->glVertexAttribs4svNV;
    glVertexAttribs4ubvNV = pAPI->glVertexAttribs4ubvNV;
    glVertexAttribI1iEXT = pAPI->glVertexAttribI1iEXT;
    glVertexAttribI2iEXT = pAPI->glVertexAttribI2iEXT;
    glVertexAttribI3iEXT = pAPI->glVertexAttribI3iEXT;
    glVertexAttribI4iEXT = pAPI->glVertexAttribI4iEXT;
    glVertexAttribI1uiEXT = pAPI->glVertexAttribI1uiEXT;
    glVertexAttribI2uiEXT = pAPI->glVertexAttribI2uiEXT;
    glVertexAttribI3uiEXT = pAPI->glVertexAttribI3uiEXT;
    glVertexAttribI4uiEXT = pAPI->glVertexAttribI4uiEXT;
    glVertexAttribI1ivEXT = pAPI->glVertexAttribI1ivEXT;
    glVertexAttribI2ivEXT = pAPI->glVertexAttribI2ivEXT;
    glVertexAttribI3ivEXT = pAPI->glVertexAttribI3ivEXT;
    glVertexAttribI4ivEXT = pAPI->glVertexAttribI4ivEXT;
    glVertexAttribI1uivEXT = pAPI->glVertexAttribI1uivEXT;
    glVertexAttribI2uivEXT = pAPI->glVertexAttribI2uivEXT;
    glVertexAttribI3uivEXT = pAPI->glVertexAttribI3uivEXT;
    glVertexAttribI4uivEXT = pAPI->glVertexAttribI4uivEXT;
    glVertexAttribI4bvEXT = pAPI->glVertexAttribI4bvEXT;
    glVertexAttribI4svEXT = pAPI->glVertexAttribI4svEXT;
    glVertexAttribI4ubvEXT = pAPI->glVertexAttribI4ubvEXT;
    glVertexAttribI4usvEXT = pAPI->glVertexAttribI4usvEXT;
    glVertexAttribIPointerEXT = pAPI->glVertexAttribIPointerEXT;
    glGetVertexAttribIivEXT = pAPI->glGetVertexAttribIivEXT;
    glGetVertexAttribIuivEXT = pAPI->glGetVertexAttribIuivEXT;
    glBeginVideoCaptureNV = pAPI->glBeginVideoCaptureNV;
    glBindVideoCaptureStreamBufferNV = pAPI->glBindVideoCaptureStreamBufferNV;
    glBindVideoCaptureStreamTextureNV = pAPI->glBindVideoCaptureStreamTextureNV;
    glEndVideoCaptureNV = pAPI->glEndVideoCaptureNV;
    glGetVideoCaptureivNV = pAPI->glGetVideoCaptureivNV;
    glGetVideoCaptureStreamivNV = pAPI->glGetVideoCaptureStreamivNV;
    glGetVideoCaptureStreamfvNV = pAPI->glGetVideoCaptureStreamfvNV;
    glGetVideoCaptureStreamdvNV = pAPI->glGetVideoCaptureStreamdvNV;
    glVideoCaptureNV = pAPI->glVideoCaptureNV;
    glVideoCaptureStreamParameterivNV = pAPI->glVideoCaptureStreamParameterivNV;
    glVideoCaptureStreamParameterfvNV = pAPI->glVideoCaptureStreamParameterfvNV;
    glVideoCaptureStreamParameterdvNV = pAPI->glVideoCaptureStreamParameterdvNV;
    glViewportSwizzleNV = pAPI->glViewportSwizzleNV;
    glMultiTexCoord1bOES = pAPI->glMultiTexCoord1bOES;
    glMultiTexCoord1bvOES = pAPI->glMultiTexCoord1bvOES;
    glMultiTexCoord2bOES = pAPI->glMultiTexCoord2bOES;
    glMultiTexCoord2bvOES = pAPI->glMultiTexCoord2bvOES;
    glMultiTexCoord3bOES = pAPI->glMultiTexCoord3bOES;
    glMultiTexCoord3bvOES = pAPI->glMultiTexCoord3bvOES;
    glMultiTexCoord4bOES = pAPI->glMultiTexCoord4bOES;
    glMultiTexCoord4bvOES = pAPI->glMultiTexCoord4bvOES;
    glTexCoord1bOES = pAPI->glTexCoord1bOES;
    glTexCoord1bvOES = pAPI->glTexCoord1bvOES;
    glTexCoord2bOES = pAPI->glTexCoord2bOES;
    glTexCoord2bvOES = pAPI->glTexCoord2bvOES;
    glTexCoord3bOES = pAPI->glTexCoord3bOES;
    glTexCoord3bvOES = pAPI->glTexCoord3bvOES;
    glTexCoord4bOES = pAPI->glTexCoord4bOES;
    glTexCoord4bvOES = pAPI->glTexCoord4bvOES;
    glVertex2bOES = pAPI->glVertex2bOES;
    glVertex2bvOES = pAPI->glVertex2bvOES;
    glVertex3bOES = pAPI->glVertex3bOES;
    glVertex3bvOES = pAPI->glVertex3bvOES;
    glVertex4bOES = pAPI->glVertex4bOES;
    glVertex4bvOES = pAPI->glVertex4bvOES;
    glAlphaFuncxOES = pAPI->glAlphaFuncxOES;
    glClearColorxOES = pAPI->glClearColorxOES;
    glClearDepthxOES = pAPI->glClearDepthxOES;
    glClipPlanexOES = pAPI->glClipPlanexOES;
    glColor4xOES = pAPI->glColor4xOES;
    glDepthRangexOES = pAPI->glDepthRangexOES;
    glFogxOES = pAPI->glFogxOES;
    glFogxvOES = pAPI->glFogxvOES;
    glFrustumxOES = pAPI->glFrustumxOES;
    glGetClipPlanexOES = pAPI->glGetClipPlanexOES;
    glGetFixedvOES = pAPI->glGetFixedvOES;
    glGetTexEnvxvOES = pAPI->glGetTexEnvxvOES;
    glGetTexParameterxvOES = pAPI->glGetTexParameterxvOES;
    glLightModelxOES = pAPI->glLightModelxOES;
    glLightModelxvOES = pAPI->glLightModelxvOES;
    glLightxOES = pAPI->glLightxOES;
    glLightxvOES = pAPI->glLightxvOES;
    glLineWidthxOES = pAPI->glLineWidthxOES;
    glLoadMatrixxOES = pAPI->glLoadMatrixxOES;
    glMaterialxOES = pAPI->glMaterialxOES;
    glMaterialxvOES = pAPI->glMaterialxvOES;
    glMultMatrixxOES = pAPI->glMultMatrixxOES;
    glMultiTexCoord4xOES = pAPI->glMultiTexCoord4xOES;
    glNormal3xOES = pAPI->glNormal3xOES;
    glOrthoxOES = pAPI->glOrthoxOES;
    glPointParameterxvOES = pAPI->glPointParameterxvOES;
    glPointSizexOES = pAPI->glPointSizexOES;
    glPolygonOffsetxOES = pAPI->glPolygonOffsetxOES;
    glRotatexOES = pAPI->glRotatexOES;
    glScalexOES = pAPI->glScalexOES;
    glTexEnvxOES = pAPI->glTexEnvxOES;
    glTexEnvxvOES = pAPI->glTexEnvxvOES;
    glTexParameterxOES = pAPI->glTexParameterxOES;
    glTexParameterxvOES = pAPI->glTexParameterxvOES;
    glTranslatexOES = pAPI->glTranslatexOES;
    glGetLightxvOES = pAPI->glGetLightxvOES;
    glGetMaterialxvOES = pAPI->glGetMaterialxvOES;
    glPointParameterxOES = pAPI->glPointParameterxOES;
    glSampleCoveragexOES = pAPI->glSampleCoveragexOES;
    glAccumxOES = pAPI->glAccumxOES;
    glBitmapxOES = pAPI->glBitmapxOES;
    glBlendColorxOES = pAPI->glBlendColorxOES;
    glClearAccumxOES = pAPI->glClearAccumxOES;
    glColor3xOES = pAPI->glColor3xOES;
    glColor3xvOES = pAPI->glColor3xvOES;
    glColor4xvOES = pAPI->glColor4xvOES;
    glConvolutionParameterxOES = pAPI->glConvolutionParameterxOES;
    glConvolutionParameterxvOES = pAPI->glConvolutionParameterxvOES;
    glEvalCoord1xOES = pAPI->glEvalCoord1xOES;
    glEvalCoord1xvOES = pAPI->glEvalCoord1xvOES;
    glEvalCoord2xOES = pAPI->glEvalCoord2xOES;
    glEvalCoord2xvOES = pAPI->glEvalCoord2xvOES;
    glFeedbackBufferxOES = pAPI->glFeedbackBufferxOES;
    glGetConvolutionParameterxvOES = pAPI->glGetConvolutionParameterxvOES;
    glGetHistogramParameterxvOES = pAPI->glGetHistogramParameterxvOES;
    glGetLightxOES = pAPI->glGetLightxOES;
    glGetMapxvOES = pAPI->glGetMapxvOES;
    glGetMaterialxOES = pAPI->glGetMaterialxOES;
    glGetPixelMapxv = pAPI->glGetPixelMapxv;
    glGetTexGenxvOES = pAPI->glGetTexGenxvOES;
    glGetTexLevelParameterxvOES = pAPI->glGetTexLevelParameterxvOES;
    glIndexxOES = pAPI->glIndexxOES;
    glIndexxvOES = pAPI->glIndexxvOES;
    glLoadTransposeMatrixxOES = pAPI->glLoadTransposeMatrixxOES;
    glMap1xOES = pAPI->glMap1xOES;
    glMap2xOES = pAPI->glMap2xOES;
    glMapGrid1xOES = pAPI->glMapGrid1xOES;
    glMapGrid2xOES = pAPI->glMapGrid2xOES;
    glMultTransposeMatrixxOES = pAPI->glMultTransposeMatrixxOES;
    glMultiTexCoord1xOES = pAPI->glMultiTexCoord1xOES;
    glMultiTexCoord1xvOES = pAPI->glMultiTexCoord1xvOES;
    glMultiTexCoord2xOES = pAPI->glMultiTexCoord2xOES;
    glMultiTexCoord2xvOES = pAPI->glMultiTexCoord2xvOES;
    glMultiTexCoord3xOES = pAPI->glMultiTexCoord3xOES;
    glMultiTexCoord3xvOES = pAPI->glMultiTexCoord3xvOES;
    glMultiTexCoord4xvOES = pAPI->glMultiTexCoord4xvOES;
    glNormal3xvOES = pAPI->glNormal3xvOES;
    glPassThroughxOES = pAPI->glPassThroughxOES;
    glPixelMapx = pAPI->glPixelMapx;
    glPixelStorex = pAPI->glPixelStorex;
    glPixelTransferxOES = pAPI->glPixelTransferxOES;
    glPixelZoomxOES = pAPI->glPixelZoomxOES;
    glPrioritizeTexturesxOES = pAPI->glPrioritizeTexturesxOES;
    glRasterPos2xOES = pAPI->glRasterPos2xOES;
    glRasterPos2xvOES = pAPI->glRasterPos2xvOES;
    glRasterPos3xOES = pAPI->glRasterPos3xOES;
    glRasterPos3xvOES = pAPI->glRasterPos3xvOES;
    glRasterPos4xOES = pAPI->glRasterPos4xOES;
    glRasterPos4xvOES = pAPI->glRasterPos4xvOES;
    glRectxOES = pAPI->glRectxOES;
    glRectxvOES = pAPI->glRectxvOES;
    glTexCoord1xOES = pAPI->glTexCoord1xOES;
    glTexCoord1xvOES = pAPI->glTexCoord1xvOES;
    glTexCoord2xOES = pAPI->glTexCoord2xOES;
    glTexCoord2xvOES = pAPI->glTexCoord2xvOES;
    glTexCoord3xOES = pAPI->glTexCoord3xOES;
    glTexCoord3xvOES = pAPI->glTexCoord3xvOES;
    glTexCoord4xOES = pAPI->glTexCoord4xOES;
    glTexCoord4xvOES = pAPI->glTexCoord4xvOES;
    glTexGenxOES = pAPI->glTexGenxOES;
    glTexGenxvOES = pAPI->glTexGenxvOES;
    glVertex2xOES = pAPI->glVertex2xOES;
    glVertex2xvOES = pAPI->glVertex2xvOES;
    glVertex3xOES = pAPI->glVertex3xOES;
    glVertex3xvOES = pAPI->glVertex3xvOES;
    glVertex4xOES = pAPI->glVertex4xOES;
    glVertex4xvOES = pAPI->glVertex4xvOES;
    glQueryMatrixxOES = pAPI->glQueryMatrixxOES;
    glClearDepthfOES = pAPI->glClearDepthfOES;
    glClipPlanefOES = pAPI->glClipPlanefOES;
    glDepthRangefOES = pAPI->glDepthRangefOES;
    glFrustumfOES = pAPI->glFrustumfOES;
    glGetClipPlanefOES = pAPI->glGetClipPlanefOES;
    glOrthofOES = pAPI->glOrthofOES;
    glFramebufferTextureMultiviewOVR = pAPI->glFramebufferTextureMultiviewOVR;
    glHintPGI = pAPI->glHintPGI;
    glDetailTexFuncSGIS = pAPI->glDetailTexFuncSGIS;
    glGetDetailTexFuncSGIS = pAPI->glGetDetailTexFuncSGIS;
    glFogFuncSGIS = pAPI->glFogFuncSGIS;
    glGetFogFuncSGIS = pAPI->glGetFogFuncSGIS;
    glSampleMaskSGIS = pAPI->glSampleMaskSGIS;
    glSamplePatternSGIS = pAPI->glSamplePatternSGIS;
    glPixelTexGenParameteriSGIS = pAPI->glPixelTexGenParameteriSGIS;
    glPixelTexGenParameterivSGIS = pAPI->glPixelTexGenParameterivSGIS;
    glPixelTexGenParameterfSGIS = pAPI->glPixelTexGenParameterfSGIS;
    glPixelTexGenParameterfvSGIS = pAPI->glPixelTexGenParameterfvSGIS;
    glGetPixelTexGenParameterivSGIS = pAPI->glGetPixelTexGenParameterivSGIS;
    glGetPixelTexGenParameterfvSGIS = pAPI->glGetPixelTexGenParameterfvSGIS;
    glPointParameterfSGIS = pAPI->glPointParameterfSGIS;
    glPointParameterfvSGIS = pAPI->glPointParameterfvSGIS;
    glSharpenTexFuncSGIS = pAPI->glSharpenTexFuncSGIS;
    glGetSharpenTexFuncSGIS = pAPI->glGetSharpenTexFuncSGIS;
    glTexImage4DSGIS = pAPI->glTexImage4DSGIS;
    glTexSubImage4DSGIS = pAPI->glTexSubImage4DSGIS;
    glTextureColorMaskSGIS = pAPI->glTextureColorMaskSGIS;
    glGetTexFilterFuncSGIS = pAPI->glGetTexFilterFuncSGIS;
    glTexFilterFuncSGIS = pAPI->glTexFilterFuncSGIS;
    glAsyncMarkerSGIX = pAPI->glAsyncMarkerSGIX;
    glFinishAsyncSGIX = pAPI->glFinishAsyncSGIX;
    glPollAsyncSGIX = pAPI->glPollAsyncSGIX;
    glGenAsyncMarkersSGIX = pAPI->glGenAsyncMarkersSGIX;
    glDeleteAsyncMarkersSGIX = pAPI->glDeleteAsyncMarkersSGIX;
    glIsAsyncMarkerSGIX = pAPI->glIsAsyncMarkerSGIX;
    glFlushRasterSGIX = pAPI->glFlushRasterSGIX;
    glFragmentColorMaterialSGIX = pAPI->glFragmentColorMaterialSGIX;
    glFragmentLightfSGIX = pAPI->glFragmentLightfSGIX;
    glFragmentLightfvSGIX = pAPI->glFragmentLightfvSGIX;
    glFragmentLightiSGIX = pAPI->glFragmentLightiSGIX;
    glFragmentLightivSGIX = pAPI->glFragmentLightivSGIX;
    glFragmentLightModelfSGIX = pAPI->glFragmentLightModelfSGIX;
    glFragmentLightModelfvSGIX = pAPI->glFragmentLightModelfvSGIX;
    glFragmentLightModeliSGIX = pAPI->glFragmentLightModeliSGIX;
    glFragmentLightModelivSGIX = pAPI->glFragmentLightModelivSGIX;
    glFragmentMaterialfSGIX = pAPI->glFragmentMaterialfSGIX;
    glFragmentMaterialfvSGIX = pAPI->glFragmentMaterialfvSGIX;
    glFragmentMaterialiSGIX = pAPI->glFragmentMaterialiSGIX;
    glFragmentMaterialivSGIX = pAPI->glFragmentMaterialivSGIX;
    glGetFragmentLightfvSGIX = pAPI->glGetFragmentLightfvSGIX;
    glGetFragmentLightivSGIX = pAPI->glGetFragmentLightivSGIX;
    glGetFragmentMaterialfvSGIX = pAPI->glGetFragmentMaterialfvSGIX;
    glGetFragmentMaterialivSGIX = pAPI->glGetFragmentMaterialivSGIX;
    glLightEnviSGIX = pAPI->glLightEnviSGIX;
    glFrameZoomSGIX = pAPI->glFrameZoomSGIX;
    glIglooInterfaceSGIX = pAPI->glIglooInterfaceSGIX;
    glGetInstrumentsSGIX = pAPI->glGetInstrumentsSGIX;
    glInstrumentsBufferSGIX = pAPI->glInstrumentsBufferSGIX;
    glPollInstrumentsSGIX = pAPI->glPollInstrumentsSGIX;
    glReadInstrumentsSGIX = pAPI->glReadInstrumentsSGIX;
    glStartInstrumentsSGIX = pAPI->glStartInstrumentsSGIX;
    glStopInstrumentsSGIX = pAPI->glStopInstrumentsSGIX;
    glGetListParameterfvSGIX = pAPI->glGetListParameterfvSGIX;
    glGetListParameterivSGIX = pAPI->glGetListParameterivSGIX;
    glListParameterfSGIX = pAPI->glListParameterfSGIX;
    glListParameterfvSGIX = pAPI->glListParameterfvSGIX;
    glListParameteriSGIX = pAPI->glListParameteriSGIX;
    glListParameterivSGIX = pAPI->glListParameterivSGIX;
    glPixelTexGenSGIX = pAPI->glPixelTexGenSGIX;
    glDeformationMap3dSGIX = pAPI->glDeformationMap3dSGIX;
    glDeformationMap3fSGIX = pAPI->glDeformationMap3fSGIX;
    glDeformSGIX = pAPI->glDeformSGIX;
    glLoadIdentityDeformationMapSGIX = pAPI->glLoadIdentityDeformationMapSGIX;
    glReferencePlaneSGIX = pAPI->glReferencePlaneSGIX;
    glSpriteParameterfSGIX = pAPI->glSpriteParameterfSGIX;
    glSpriteParameterfvSGIX = pAPI->glSpriteParameterfvSGIX;
    glSpriteParameteriSGIX = pAPI->glSpriteParameteriSGIX;
    glSpriteParameterivSGIX = pAPI->glSpriteParameterivSGIX;
    glTagSampleBufferSGIX = pAPI->glTagSampleBufferSGIX;
    glColorTableSGI = pAPI->glColorTableSGI;
    glColorTableParameterfvSGI = pAPI->glColorTableParameterfvSGI;
    glColorTableParameterivSGI = pAPI->glColorTableParameterivSGI;
    glCopyColorTableSGI = pAPI->glCopyColorTableSGI;
    glGetColorTableSGI = pAPI->glGetColorTableSGI;
    glGetColorTableParameterfvSGI = pAPI->glGetColorTableParameterfvSGI;
    glGetColorTableParameterivSGI = pAPI->glGetColorTableParameterivSGI;
    glFinishTextureSUNX = pAPI->glFinishTextureSUNX;
    glGlobalAlphaFactorbSUN = pAPI->glGlobalAlphaFactorbSUN;
    glGlobalAlphaFactorsSUN = pAPI->glGlobalAlphaFactorsSUN;
    glGlobalAlphaFactoriSUN = pAPI->glGlobalAlphaFactoriSUN;
    glGlobalAlphaFactorfSUN = pAPI->glGlobalAlphaFactorfSUN;
    glGlobalAlphaFactordSUN = pAPI->glGlobalAlphaFactordSUN;
    glGlobalAlphaFactorubSUN = pAPI->glGlobalAlphaFactorubSUN;
    glGlobalAlphaFactorusSUN = pAPI->glGlobalAlphaFactorusSUN;
    glGlobalAlphaFactoruiSUN = pAPI->glGlobalAlphaFactoruiSUN;
    glDrawMeshArraysSUN = pAPI->glDrawMeshArraysSUN;
    glReplacementCodeuiSUN = pAPI->glReplacementCodeuiSUN;
    glReplacementCodeusSUN = pAPI->glReplacementCodeusSUN;
    glReplacementCodeubSUN = pAPI->glReplacementCodeubSUN;
    glReplacementCodeuivSUN = pAPI->glReplacementCodeuivSUN;
    glReplacementCodeusvSUN = pAPI->glReplacementCodeusvSUN;
    glReplacementCodeubvSUN = pAPI->glReplacementCodeubvSUN;
    glReplacementCodePointerSUN = pAPI->glReplacementCodePointerSUN;
    glColor4ubVertex2fSUN = pAPI->glColor4ubVertex2fSUN;
    glColor4ubVertex2fvSUN = pAPI->glColor4ubVertex2fvSUN;
    glColor4ubVertex3fSUN = pAPI->glColor4ubVertex3fSUN;
    glColor4ubVertex3fvSUN = pAPI->glColor4ubVertex3fvSUN;
    glColor3fVertex3fSUN = pAPI->glColor3fVertex3fSUN;
    glColor3fVertex3fvSUN = pAPI->glColor3fVertex3fvSUN;
    glNormal3fVertex3fSUN = pAPI->glNormal3fVertex3fSUN;
    glNormal3fVertex3fvSUN = pAPI->glNormal3fVertex3fvSUN;
    glColor4fNormal3fVertex3fSUN = pAPI->glColor4fNormal3fVertex3fSUN;
    glColor4fNormal3fVertex3fvSUN = pAPI->glColor4fNormal3fVertex3fvSUN;
    glTexCoord2fVertex3fSUN = pAPI->glTexCoord2fVertex3fSUN;
    glTexCoord2fVertex3fvSUN = pAPI->glTexCoord2fVertex3fvSUN;
    glTexCoord4fVertex4fSUN = pAPI->glTexCoord4fVertex4fSUN;
    glTexCoord4fVertex4fvSUN = pAPI->glTexCoord4fVertex4fvSUN;
    glTexCoord2fColor4ubVertex3fSUN = pAPI->glTexCoord2fColor4ubVertex3fSUN;
    glTexCoord2fColor4ubVertex3fvSUN = pAPI->glTexCoord2fColor4ubVertex3fvSUN;
    glTexCoord2fColor3fVertex3fSUN = pAPI->glTexCoord2fColor3fVertex3fSUN;
    glTexCoord2fColor3fVertex3fvSUN = pAPI->glTexCoord2fColor3fVertex3fvSUN;
    glTexCoord2fNormal3fVertex3fSUN = pAPI->glTexCoord2fNormal3fVertex3fSUN;
    glTexCoord2fNormal3fVertex3fvSUN = pAPI->glTexCoord2fNormal3fVertex3fvSUN;
    glTexCoord2fColor4fNormal3fVertex3fSUN = pAPI->glTexCoord2fColor4fNormal3fVertex3fSUN;
    glTexCoord2fColor4fNormal3fVertex3fvSUN = pAPI->glTexCoord2fColor4fNormal3fVertex3fvSUN;
    glTexCoord4fColor4fNormal3fVertex4fSUN = pAPI->glTexCoord4fColor4fNormal3fVertex4fSUN;
    glTexCoord4fColor4fNormal3fVertex4fvSUN = pAPI->glTexCoord4fColor4fNormal3fVertex4fvSUN;
    glReplacementCodeuiVertex3fSUN = pAPI->glReplacementCodeuiVertex3fSUN;
    glReplacementCodeuiVertex3fvSUN = pAPI->glReplacementCodeuiVertex3fvSUN;
    glReplacementCodeuiColor4ubVertex3fSUN = pAPI->glReplacementCodeuiColor4ubVertex3fSUN;
    glReplacementCodeuiColor4ubVertex3fvSUN = pAPI->glReplacementCodeuiColor4ubVertex3fvSUN;
    glReplacementCodeuiColor3fVertex3fSUN = pAPI->glReplacementCodeuiColor3fVertex3fSUN;
    glReplacementCodeuiColor3fVertex3fvSUN = pAPI->glReplacementCodeuiColor3fVertex3fvSUN;
    glReplacementCodeuiNormal3fVertex3fSUN = pAPI->glReplacementCodeuiNormal3fVertex3fSUN;
    glReplacementCodeuiNormal3fVertex3fvSUN = pAPI->glReplacementCodeuiNormal3fVertex3fvSUN;
    glReplacementCodeuiColor4fNormal3fVertex3fSUN = pAPI->glReplacementCodeuiColor4fNormal3fVertex3fSUN;
    glReplacementCodeuiColor4fNormal3fVertex3fvSUN = pAPI->glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
    glReplacementCodeuiTexCoord2fVertex3fSUN = pAPI->glReplacementCodeuiTexCoord2fVertex3fSUN;
    glReplacementCodeuiTexCoord2fVertex3fvSUN = pAPI->glReplacementCodeuiTexCoord2fVertex3fvSUN;
    glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = pAPI->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
    glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = pAPI->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
    glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = pAPI->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
    glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = pAPI->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
#if defined(GLBIND_WGL)
    wglSetStereoEmitterState3DL = pAPI->wglSetStereoEmitterState3DL;
    wglGetGPUIDsAMD = pAPI->wglGetGPUIDsAMD;
    wglGetGPUInfoAMD = pAPI->wglGetGPUInfoAMD;
    wglGetContextGPUIDAMD = pAPI->wglGetContextGPUIDAMD;
    wglCreateAssociatedContextAMD = pAPI->wglCreateAssociatedContextAMD;
    wglCreateAssociatedContextAttribsAMD = pAPI->wglCreateAssociatedContextAttribsAMD;
    wglDeleteAssociatedContextAMD = pAPI->wglDeleteAssociatedContextAMD;
    wglMakeAssociatedContextCurrentAMD = pAPI->wglMakeAssociatedContextCurrentAMD;
    wglGetCurrentAssociatedContextAMD = pAPI->wglGetCurrentAssociatedContextAMD;
    wglBlitContextFramebufferAMD = pAPI->wglBlitContextFramebufferAMD;
    wglCreateBufferRegionARB = pAPI->wglCreateBufferRegionARB;
    wglDeleteBufferRegionARB = pAPI->wglDeleteBufferRegionARB;
    wglSaveBufferRegionARB = pAPI->wglSaveBufferRegionARB;
    wglRestoreBufferRegionARB = pAPI->wglRestoreBufferRegionARB;
    wglCreateContextAttribsARB = pAPI->wglCreateContextAttribsARB;
    wglGetExtensionsStringARB = pAPI->wglGetExtensionsStringARB;
    wglMakeContextCurrentARB = pAPI->wglMakeContextCurrentARB;
    wglGetCurrentReadDCARB = pAPI->wglGetCurrentReadDCARB;
    wglCreatePbufferARB = pAPI->wglCreatePbufferARB;
    wglGetPbufferDCARB = pAPI->wglGetPbufferDCARB;
    wglReleasePbufferDCARB = pAPI->wglReleasePbufferDCARB;
    wglDestroyPbufferARB = pAPI->wglDestroyPbufferARB;
    wglQueryPbufferARB = pAPI->wglQueryPbufferARB;
    wglGetPixelFormatAttribivARB = pAPI->wglGetPixelFormatAttribivARB;
    wglGetPixelFormatAttribfvARB = pAPI->wglGetPixelFormatAttribfvARB;
    wglChoosePixelFormatARB = pAPI->wglChoosePixelFormatARB;
    wglBindTexImageARB = pAPI->wglBindTexImageARB;
    wglReleaseTexImageARB = pAPI->wglReleaseTexImageARB;
    wglSetPbufferAttribARB = pAPI->wglSetPbufferAttribARB;
    wglCreateDisplayColorTableEXT = pAPI->wglCreateDisplayColorTableEXT;
    wglLoadDisplayColorTableEXT = pAPI->wglLoadDisplayColorTableEXT;
    wglBindDisplayColorTableEXT = pAPI->wglBindDisplayColorTableEXT;
    wglDestroyDisplayColorTableEXT = pAPI->wglDestroyDisplayColorTableEXT;
    wglGetExtensionsStringEXT = pAPI->wglGetExtensionsStringEXT;
    wglMakeContextCurrentEXT = pAPI->wglMakeContextCurrentEXT;
    wglGetCurrentReadDCEXT = pAPI->wglGetCurrentReadDCEXT;
    wglCreatePbufferEXT = pAPI->wglCreatePbufferEXT;
    wglGetPbufferDCEXT = pAPI->wglGetPbufferDCEXT;
    wglReleasePbufferDCEXT = pAPI->wglReleasePbufferDCEXT;
    wglDestroyPbufferEXT = pAPI->wglDestroyPbufferEXT;
    wglQueryPbufferEXT = pAPI->wglQueryPbufferEXT;
    wglGetPixelFormatAttribivEXT = pAPI->wglGetPixelFormatAttribivEXT;
    wglGetPixelFormatAttribfvEXT = pAPI->wglGetPixelFormatAttribfvEXT;
    wglChoosePixelFormatEXT = pAPI->wglChoosePixelFormatEXT;
    wglSwapIntervalEXT = pAPI->wglSwapIntervalEXT;
    wglGetSwapIntervalEXT = pAPI->wglGetSwapIntervalEXT;
    wglGetDigitalVideoParametersI3D = pAPI->wglGetDigitalVideoParametersI3D;
    wglSetDigitalVideoParametersI3D = pAPI->wglSetDigitalVideoParametersI3D;
    wglGetGammaTableParametersI3D = pAPI->wglGetGammaTableParametersI3D;
    wglSetGammaTableParametersI3D = pAPI->wglSetGammaTableParametersI3D;
    wglGetGammaTableI3D = pAPI->wglGetGammaTableI3D;
    wglSetGammaTableI3D = pAPI->wglSetGammaTableI3D;
    wglEnableGenlockI3D = pAPI->wglEnableGenlockI3D;
    wglDisableGenlockI3D = pAPI->wglDisableGenlockI3D;
    wglIsEnabledGenlockI3D = pAPI->wglIsEnabledGenlockI3D;
    wglGenlockSourceI3D = pAPI->wglGenlockSourceI3D;
    wglGetGenlockSourceI3D = pAPI->wglGetGenlockSourceI3D;
    wglGenlockSourceEdgeI3D = pAPI->wglGenlockSourceEdgeI3D;
    wglGetGenlockSourceEdgeI3D = pAPI->wglGetGenlockSourceEdgeI3D;
    wglGenlockSampleRateI3D = pAPI->wglGenlockSampleRateI3D;
    wglGetGenlockSampleRateI3D = pAPI->wglGetGenlockSampleRateI3D;
    wglGenlockSourceDelayI3D = pAPI->wglGenlockSourceDelayI3D;
    wglGetGenlockSourceDelayI3D = pAPI->wglGetGenlockSourceDelayI3D;
    wglQueryGenlockMaxSourceDelayI3D = pAPI->wglQueryGenlockMaxSourceDelayI3D;
    wglCreateImageBufferI3D = pAPI->wglCreateImageBufferI3D;
    wglDestroyImageBufferI3D = pAPI->wglDestroyImageBufferI3D;
    wglAssociateImageBufferEventsI3D = pAPI->wglAssociateImageBufferEventsI3D;
    wglReleaseImageBufferEventsI3D = pAPI->wglReleaseImageBufferEventsI3D;
    wglEnableFrameLockI3D = pAPI->wglEnableFrameLockI3D;
    wglDisableFrameLockI3D = pAPI->wglDisableFrameLockI3D;
    wglIsEnabledFrameLockI3D = pAPI->wglIsEnabledFrameLockI3D;
    wglQueryFrameLockMasterI3D = pAPI->wglQueryFrameLockMasterI3D;
    wglGetFrameUsageI3D = pAPI->wglGetFrameUsageI3D;
    wglBeginFrameTrackingI3D = pAPI->wglBeginFrameTrackingI3D;
    wglEndFrameTrackingI3D = pAPI->wglEndFrameTrackingI3D;
    wglQueryFrameTrackingI3D = pAPI->wglQueryFrameTrackingI3D;
    wglCopyImageSubDataNV = pAPI->wglCopyImageSubDataNV;
    wglDelayBeforeSwapNV = pAPI->wglDelayBeforeSwapNV;
    wglDXSetResourceShareHandleNV = pAPI->wglDXSetResourceShareHandleNV;
    wglDXOpenDeviceNV = pAPI->wglDXOpenDeviceNV;
    wglDXCloseDeviceNV = pAPI->wglDXCloseDeviceNV;
    wglDXRegisterObjectNV = pAPI->wglDXRegisterObjectNV;
    wglDXUnregisterObjectNV = pAPI->wglDXUnregisterObjectNV;
    wglDXObjectAccessNV = pAPI->wglDXObjectAccessNV;
    wglDXLockObjectsNV = pAPI->wglDXLockObjectsNV;
    wglDXUnlockObjectsNV = pAPI->wglDXUnlockObjectsNV;
    wglEnumGpusNV = pAPI->wglEnumGpusNV;
    wglEnumGpuDevicesNV = pAPI->wglEnumGpuDevicesNV;
    wglCreateAffinityDCNV = pAPI->wglCreateAffinityDCNV;
    wglEnumGpusFromAffinityDCNV = pAPI->wglEnumGpusFromAffinityDCNV;
    wglDeleteDCNV = pAPI->wglDeleteDCNV;
    wglEnumerateVideoDevicesNV = pAPI->wglEnumerateVideoDevicesNV;
    wglBindVideoDeviceNV = pAPI->wglBindVideoDeviceNV;
    wglQueryCurrentContextNV = pAPI->wglQueryCurrentContextNV;
    wglJoinSwapGroupNV = pAPI->wglJoinSwapGroupNV;
    wglBindSwapBarrierNV = pAPI->wglBindSwapBarrierNV;
    wglQuerySwapGroupNV = pAPI->wglQuerySwapGroupNV;
    wglQueryMaxSwapGroupsNV = pAPI->wglQueryMaxSwapGroupsNV;
    wglQueryFrameCountNV = pAPI->wglQueryFrameCountNV;
    wglResetFrameCountNV = pAPI->wglResetFrameCountNV;
    wglBindVideoCaptureDeviceNV = pAPI->wglBindVideoCaptureDeviceNV;
    wglEnumerateVideoCaptureDevicesNV = pAPI->wglEnumerateVideoCaptureDevicesNV;
    wglLockVideoCaptureDeviceNV = pAPI->wglLockVideoCaptureDeviceNV;
    wglQueryVideoCaptureDeviceNV = pAPI->wglQueryVideoCaptureDeviceNV;
    wglReleaseVideoCaptureDeviceNV = pAPI->wglReleaseVideoCaptureDeviceNV;
    wglGetVideoDeviceNV = pAPI->wglGetVideoDeviceNV;
    wglReleaseVideoDeviceNV = pAPI->wglReleaseVideoDeviceNV;
    wglBindVideoImageNV = pAPI->wglBindVideoImageNV;
    wglReleaseVideoImageNV = pAPI->wglReleaseVideoImageNV;
    wglSendPbufferToVideoNV = pAPI->wglSendPbufferToVideoNV;
    wglGetVideoInfoNV = pAPI->wglGetVideoInfoNV;
    wglAllocateMemoryNV = pAPI->wglAllocateMemoryNV;
    wglFreeMemoryNV = pAPI->wglFreeMemoryNV;
    wglGetSyncValuesOML = pAPI->wglGetSyncValuesOML;
    wglGetMscRateOML = pAPI->wglGetMscRateOML;
    wglSwapBuffersMscOML = pAPI->wglSwapBuffersMscOML;
    wglSwapLayerBuffersMscOML = pAPI->wglSwapLayerBuffersMscOML;
    wglWaitForMscOML = pAPI->wglWaitForMscOML;
    wglWaitForSbcOML = pAPI->wglWaitForSbcOML;
#endif /* GLBIND_WGL */
#if defined(GLBIND_GLX)
    glXGetGPUIDsAMD = pAPI->glXGetGPUIDsAMD;
    glXGetGPUInfoAMD = pAPI->glXGetGPUInfoAMD;
    glXGetContextGPUIDAMD = pAPI->glXGetContextGPUIDAMD;
    glXCreateAssociatedContextAMD = pAPI->glXCreateAssociatedContextAMD;
    glXCreateAssociatedContextAttribsAMD = pAPI->glXCreateAssociatedContextAttribsAMD;
    glXDeleteAssociatedContextAMD = pAPI->glXDeleteAssociatedContextAMD;
    glXMakeAssociatedContextCurrentAMD = pAPI->glXMakeAssociatedContextCurrentAMD;
    glXGetCurrentAssociatedContextAMD = pAPI->glXGetCurrentAssociatedContextAMD;
    glXBlitContextFramebufferAMD = pAPI->glXBlitContextFramebufferAMD;
    glXCreateContextAttribsARB = pAPI->glXCreateContextAttribsARB;
    glXGetProcAddressARB = pAPI->glXGetProcAddressARB;
    glXGetCurrentDisplayEXT = pAPI->glXGetCurrentDisplayEXT;
    glXQueryContextInfoEXT = pAPI->glXQueryContextInfoEXT;
    glXGetContextIDEXT = pAPI->glXGetContextIDEXT;
    glXImportContextEXT = pAPI->glXImportContextEXT;
    glXFreeContextEXT = pAPI->glXFreeContextEXT;
    glXSwapIntervalEXT = pAPI->glXSwapIntervalEXT;
    glXBindTexImageEXT = pAPI->glXBindTexImageEXT;
    glXReleaseTexImageEXT = pAPI->glXReleaseTexImageEXT;
    glXGetAGPOffsetMESA = pAPI->glXGetAGPOffsetMESA;
    glXCopySubBufferMESA = pAPI->glXCopySubBufferMESA;
    glXCreateGLXPixmapMESA = pAPI->glXCreateGLXPixmapMESA;
    glXQueryCurrentRendererIntegerMESA = pAPI->glXQueryCurrentRendererIntegerMESA;
    glXQueryCurrentRendererStringMESA = pAPI->glXQueryCurrentRendererStringMESA;
    glXQueryRendererIntegerMESA = pAPI->glXQueryRendererIntegerMESA;
    glXQueryRendererStringMESA = pAPI->glXQueryRendererStringMESA;
    glXReleaseBuffersMESA = pAPI->glXReleaseBuffersMESA;
    glXSet3DfxModeMESA = pAPI->glXSet3DfxModeMESA;
    glXGetSwapIntervalMESA = pAPI->glXGetSwapIntervalMESA;
    glXSwapIntervalMESA = pAPI->glXSwapIntervalMESA;
    glXCopyBufferSubDataNV = pAPI->glXCopyBufferSubDataNV;
    glXNamedCopyBufferSubDataNV = pAPI->glXNamedCopyBufferSubDataNV;
    glXCopyImageSubDataNV = pAPI->glXCopyImageSubDataNV;
    glXDelayBeforeSwapNV = pAPI->glXDelayBeforeSwapNV;
    glXEnumerateVideoDevicesNV = pAPI->glXEnumerateVideoDevicesNV;
    glXBindVideoDeviceNV = pAPI->glXBindVideoDeviceNV;
    glXJoinSwapGroupNV = pAPI->glXJoinSwapGroupNV;
    glXBindSwapBarrierNV = pAPI->glXBindSwapBarrierNV;
    glXQuerySwapGroupNV = pAPI->glXQuerySwapGroupNV;
    glXQueryMaxSwapGroupsNV = pAPI->glXQueryMaxSwapGroupsNV;
    glXQueryFrameCountNV = pAPI->glXQueryFrameCountNV;
    glXResetFrameCountNV = pAPI->glXResetFrameCountNV;
    glXBindVideoCaptureDeviceNV = pAPI->glXBindVideoCaptureDeviceNV;
    glXEnumerateVideoCaptureDevicesNV = pAPI->glXEnumerateVideoCaptureDevicesNV;
    glXLockVideoCaptureDeviceNV = pAPI->glXLockVideoCaptureDeviceNV;
    glXQueryVideoCaptureDeviceNV = pAPI->glXQueryVideoCaptureDeviceNV;
    glXReleaseVideoCaptureDeviceNV = pAPI->glXReleaseVideoCaptureDeviceNV;
    glXGetVideoDeviceNV = pAPI->glXGetVideoDeviceNV;
    glXReleaseVideoDeviceNV = pAPI->glXReleaseVideoDeviceNV;
    glXBindVideoImageNV = pAPI->glXBindVideoImageNV;
    glXReleaseVideoImageNV = pAPI->glXReleaseVideoImageNV;
    glXSendPbufferToVideoNV = pAPI->glXSendPbufferToVideoNV;
    glXGetVideoInfoNV = pAPI->glXGetVideoInfoNV;
    glXGetSyncValuesOML = pAPI->glXGetSyncValuesOML;
    glXGetMscRateOML = pAPI->glXGetMscRateOML;
    glXSwapBuffersMscOML = pAPI->glXSwapBuffersMscOML;
    glXWaitForMscOML = pAPI->glXWaitForMscOML;
    glXWaitForSbcOML = pAPI->glXWaitForSbcOML;
    glXCushionSGI = pAPI->glXCushionSGI;
    glXMakeCurrentReadSGI = pAPI->glXMakeCurrentReadSGI;
    glXGetCurrentReadDrawableSGI = pAPI->glXGetCurrentReadDrawableSGI;
    glXSwapIntervalSGI = pAPI->glXSwapIntervalSGI;
    glXGetVideoSyncSGI = pAPI->glXGetVideoSyncSGI;
    glXWaitVideoSyncSGI = pAPI->glXWaitVideoSyncSGI;
    glXGetFBConfigAttribSGIX = pAPI->glXGetFBConfigAttribSGIX;
    glXChooseFBConfigSGIX = pAPI->glXChooseFBConfigSGIX;
    glXCreateGLXPixmapWithConfigSGIX = pAPI->glXCreateGLXPixmapWithConfigSGIX;
    glXCreateContextWithConfigSGIX = pAPI->glXCreateContextWithConfigSGIX;
    glXGetVisualFromFBConfigSGIX = pAPI->glXGetVisualFromFBConfigSGIX;
    glXGetFBConfigFromVisualSGIX = pAPI->glXGetFBConfigFromVisualSGIX;
    glXQueryHyperpipeNetworkSGIX = pAPI->glXQueryHyperpipeNetworkSGIX;
    glXHyperpipeConfigSGIX = pAPI->glXHyperpipeConfigSGIX;
    glXQueryHyperpipeConfigSGIX = pAPI->glXQueryHyperpipeConfigSGIX;
    glXDestroyHyperpipeConfigSGIX = pAPI->glXDestroyHyperpipeConfigSGIX;
    glXBindHyperpipeSGIX = pAPI->glXBindHyperpipeSGIX;
    glXQueryHyperpipeBestAttribSGIX = pAPI->glXQueryHyperpipeBestAttribSGIX;
    glXHyperpipeAttribSGIX = pAPI->glXHyperpipeAttribSGIX;
    glXQueryHyperpipeAttribSGIX = pAPI->glXQueryHyperpipeAttribSGIX;
    glXCreateGLXPbufferSGIX = pAPI->glXCreateGLXPbufferSGIX;
    glXDestroyGLXPbufferSGIX = pAPI->glXDestroyGLXPbufferSGIX;
    glXQueryGLXPbufferSGIX = pAPI->glXQueryGLXPbufferSGIX;
    glXSelectEventSGIX = pAPI->glXSelectEventSGIX;
    glXGetSelectedEventSGIX = pAPI->glXGetSelectedEventSGIX;
    glXBindSwapBarrierSGIX = pAPI->glXBindSwapBarrierSGIX;
    glXQueryMaxSwapBarriersSGIX = pAPI->glXQueryMaxSwapBarriersSGIX;
    glXJoinSwapGroupSGIX = pAPI->glXJoinSwapGroupSGIX;
    glXBindChannelToWindowSGIX = pAPI->glXBindChannelToWindowSGIX;
    glXChannelRectSGIX = pAPI->glXChannelRectSGIX;
    glXQueryChannelRectSGIX = pAPI->glXQueryChannelRectSGIX;
    glXQueryChannelDeltasSGIX = pAPI->glXQueryChannelDeltasSGIX;
    glXChannelRectSyncSGIX = pAPI->glXChannelRectSyncSGIX;
    glXGetTransparentIndexSUN = pAPI->glXGetTransparentIndexSUN;
#endif /* GLBIND_GLX */

    return GL_NO_ERROR;
}

#if defined(GLBIND_WGL)
HGLRC glbGetRC()
{
    return glbind_RC;
}

int glbGetPixelFormat()
{
    return glbind_PixelFormat;
}

PIXELFORMATDESCRIPTOR* glbGetPFD()
{
    return &glbind_PFD;
}
#endif

#if defined(GLBIND_GLX)
Display* glbGetDisplay()
{
    return glbind_pDisplay;
}

GLXContext glbGetRC()
{
    return glbind_RC;
}

Colormap glbGetColormap()
{
    return glbind_Colormap;
}

XVisualInfo* glbGetFBVisualInfo()
{
    return glbind_pFBVisualInfo;
}
#endif


int glb_strcmp(const char* s1, const char* s2)
{
    while ((*s1) && (*s1 == *s2)) {
        ++s1;
        ++s2;
    }

    return (*(unsigned char*)s1 - *(unsigned char*)s2);
}

int glb_strncmp(const char* s1, const char* s2, size_t n)
{
    while (n && *s1 && (*s1 == *s2)) {
        ++s1;
        ++s2;
        --n;
    }

    if (n == 0) {
        return 0;
    }
    else {
        return (*(unsigned char*)s1 - *(unsigned char*)s2);
    }
}

GLboolean glbIsExtensionInString(const char* ext, const char* str)
{
    const char* ext2beg;
    const char* ext2end;

    if (ext == NULL || str == NULL) {
        return GL_FALSE;
    }

    ext2beg = str;
    ext2end = ext2beg;

    for (;;) {
        while (ext2end[0] != ' ' && ext2end[0] != '\0') {
            ext2end += 1;
        }

        if (glb_strncmp(ext, ext2beg, ext2end - ext2beg) == 0) {
            return GL_TRUE;
        }

        /* Break if we've reached the end. Otherwise, just move to start fo the next extension. */
        if (ext2end[0] == '\0') {
            break;
        }
        else {
            ext2beg = ext2end + 1;
            ext2end = ext2beg;
        }
    }

    return GL_FALSE;
}

#if defined(GLBIND_WGL)
GLboolean glbIsExtensionSupportedWGL(GLBapi* pAPI, const char* extensionName)
{
    PFNWGLGETEXTENSIONSSTRINGARBPROC _wglGetExtensionsStringARB = (pAPI != NULL) ? pAPI->wglGetExtensionsStringARB : wglGetExtensionsStringARB;
    PFNWGLGETEXTENSIONSSTRINGEXTPROC _wglGetExtensionsStringEXT = (pAPI != NULL) ? pAPI->wglGetExtensionsStringEXT : wglGetExtensionsStringEXT;
    PFNWGLGETCURRENTDCPROC           _wglGetCurrentDC = (pAPI != NULL) ? pAPI->wglGetCurrentDC : glbind_wglGetCurrentDC;

    if (_wglGetExtensionsStringARB) {
        return glbIsExtensionInString(extensionName, _wglGetExtensionsStringARB(_wglGetCurrentDC()));
    }
    if (_wglGetExtensionsStringEXT) {
        return glbIsExtensionInString(extensionName, _wglGetExtensionsStringEXT());
    }

    return GL_FALSE;
}
#endif

#if defined(GLBIND_GLX)
GLboolean glbIsExtensionSupportedGLX(GLBapi* pAPI, const char* extensionName)
{
    PFNGLXQUERYEXTENSIONSSTRINGPROC _glXQueryExtensionsString = (pAPI != NULL) ? pAPI->glXQueryExtensionsString : glbind_glXQueryExtensionsString;

    if (_glXQueryExtensionsString) {
        return glbIsExtensionInString(extensionName, _glXQueryExtensionsString(glbGetDisplay(), glbind_XDefaultScreen(glbGetDisplay())));
    }

    return GL_FALSE;
}
#endif

GLboolean glbIsExtensionSupported(GLBapi* pAPI, const char* extensionName)
{
    GLboolean isSupported = GL_FALSE;
    PFNGLGETSTRINGIPROC  _glGetStringi = (pAPI != NULL) ? pAPI->glGetStringi : glGetStringi;
    PFNGLGETSTRINGPROC   _glGetString = (pAPI != NULL) ? pAPI->glGetString : glGetString;
    PFNGLGETINTEGERVPROC _glGetIntegerv = (pAPI != NULL) ? pAPI->glGetIntegerv : glGetIntegerv;

    /* Try the new way first. */
    if (_glGetStringi && _glGetIntegerv) {
        GLint iExtension;
        GLint supportedExtensionCount = 0;
        _glGetIntegerv(GL_NUM_EXTENSIONS, &supportedExtensionCount);

        for (iExtension = 0; iExtension < supportedExtensionCount; ++iExtension) {
            const char* pSupportedExtension = (const char*)_glGetStringi(GL_EXTENSIONS, iExtension);
            if (pSupportedExtension != NULL) {
                if (glb_strcmp(pSupportedExtension, extensionName) == 0) {
                    return GL_TRUE;
                }
            }
        }

        /* It's not a core extension. Check platform-specific extensions. */
        isSupported = GL_FALSE;
#if defined(GLBIND_WGL)
        isSupported = glbIsExtensionSupportedWGL(pAPI, extensionName);
#endif
#if defined(GLBIND_GLX)
        isSupported = glbIsExtensionSupportedGLX(pAPI, extensionName);
#endif
        return isSupported;
    }

    /* Fall back to old style. */
    if (_glGetString) {
        isSupported = glbIsExtensionInString(extensionName, (const char*)_glGetString(GL_EXTENSIONS));
        if (!isSupported) {
#if defined(GLBIND_WGL)
            isSupported = glbIsExtensionSupportedWGL(pAPI, extensionName);
#endif
#if defined(GLBIND_GLX)
            isSupported = glbIsExtensionSupportedGLX(pAPI, extensionName);
#endif
        }
    }

    return isSupported;
}

#endif  /* GLBIND_IMPLEMENTATION */

/*
This software is available as a choice of the following licenses. Choose
whichever you prefer.

===============================================================================
ALTERNATIVE 1 - Public Domain (www.unlicense.org)
===============================================================================
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.

In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>

===============================================================================
ALTERNATIVE 2 - MIT No Attribution
===============================================================================
Copyright 2019 David Reid

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
